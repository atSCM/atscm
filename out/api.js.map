{"version":3,"sources":["../src/api.js"],"names":["promisifiedCallback","resolve","reject","err","result","promisified","call","Promise","withSession","action","session","Session","create","error","e","close","callMethod","methodId","args","cb","objectId","parent","inputArguments","then","callScript","scriptId","parameters","NodeId","dataType","DataType","value","String","arrayType","VariantArrayType","Array","Object","keys","Variant","values","createNode","nodeId","name","parentNodeId","nodeClass","NodeClass","Variable","typeDefinition","variableOptions","valueRank","Scalar","paramObjString","JSON","stringify","assign","browseName","readNode","readVariableValue","statusCode","StatusCodes","Good","Error","description","writeNode","writeSingleNode"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;AACA;;;;;;;;;;AAUA,SAASA,mBAAT,CAA6BC,OAA7B,EAAsCC,MAAtC,EAA8C;AAC5C,SAAO,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACtB,QAAID,GAAJ,EAAS;AAAE,aAAOD,MAAM,CAACC,GAAD,CAAb;AAAqB;;AAChC,WAAOF,OAAO,CAACG,MAAD,CAAd;AACD,GAHD;AAID;AAED;;;;;;;AAKA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,SAAO,IAAIC,OAAJ,CAAY,CAACN,OAAD,EAAUC,MAAV,KAAqBI,IAAI,CAACN,mBAAmB,CAACC,OAAD,EAAUC,MAAV,CAApB,CAArC,CAAP;AACD;AAED;;;;;;AAIA,eAAeM,WAAf,CAA2BC,MAA3B,EAAmC;AACjC,QAAMC,OAAO,GAAG,MAAMC,iBAAQC,MAAR,EAAtB;AACA,MAAIR,MAAM,GAAG,IAAb;AACA,MAAIS,KAAK,GAAG,IAAZ;;AACA,MAAI;AACFT,IAAAA,MAAM,GAAG,MAAMK,MAAM,CAACC,OAAD,CAArB;AACD,GAFD,CAEE,OAAOI,CAAP,EAAU;AACVD,IAAAA,KAAK,GAAGC,CAAR;AACD;;AAED,QAAMH,iBAAQI,KAAR,CAAcL,OAAd,CAAN;;AAEA,MAAIG,KAAJ,EAAW;AAAE,UAAMA,KAAN;AAAc;;AAE3B,SAAOT,MAAP;AACD,C,CAED;;AAEA;;;;;;;AAKO,SAASY,UAAT,CAAoBC,QAApB,EAA8BC,IAAI,GAAG,EAArC,EAAyC;AAC9C,SAAOV,WAAW,CAACE,OAAO,IAAIL,WAAW,CAACc,EAAE,IAAIT,OAAO,CAACJ,IAAR,CAAa,CAC3D;AACEc,IAAAA,QAAQ,EAAEH,QAAQ,CAACI,MADrB;AAEEJ,IAAAA,QAFF;AAGEK,IAAAA,cAAc,EAAEJ;AAHlB,GAD2D,CAAb,EAM7CC,EAN6C,CAAP,CAAvB,CAAX,CAOJI,IAPI,CAOC,CAAC,CAACnB,MAAD,IAAW,EAAZ,KAAmBA,MAPpB,CAAP;AAQD;AAED;;;;;;;;AAMO,SAASoB,UAAT,CAAoBC,QAApB,EAA8BC,UAAU,GAAG,EAA3C,EAA+C;AACpD,SAAOV,UAAU,CAAC,IAAIW,eAAJ,CAAW,iCAAX,CAAD,EAAgD,CAC/D;AACEC,IAAAA,QAAQ,EAAEC,oBAASF,MADrB;AAEEG,IAAAA,KAAK,EAAEL;AAFT,GAD+D,EAK/D;AACEG,IAAAA,QAAQ,EAAEC,oBAASF,MADrB;AAEEG,IAAAA,KAAK,EAAEL,QAAQ,CAACJ;AAFlB,GAL+D,EAS/D;AACEO,IAAAA,QAAQ,EAAEC,oBAASE,MADrB;AAEEC,IAAAA,SAAS,EAAEC,4BAAiBC,KAF9B;AAGEJ,IAAAA,KAAK,EAAEK,MAAM,CAACC,IAAP,CAAYV,UAAZ;AAHT,GAT+D,EAc/D;AACEE,IAAAA,QAAQ,EAAEC,oBAASQ,OADrB;AAEEL,IAAAA,SAAS,EAAEC,4BAAiBC,KAF9B;AAGEJ,IAAAA,KAAK,EAAEK,MAAM,CAACG,MAAP,CAAcZ,UAAd;AAHT,GAd+D,CAAhD,CAAjB;AAoBD;AAED;;;;;;;;;;;;;;;AAaO,SAASa,UAAT,CAAoBC,MAApB,EAA4B;AACjCC,EAAAA,IADiC;AAEjCC,EAAAA,YAAY,GAAGF,MAAM,CAACnB,MAFW;AAGjCsB,EAAAA,SAAS,GAAGC,qBAAUC,QAHW;AAIjCC,EAAAA,cAAc,GAAG,IAAInB,eAAJ,CAAW,WAAX,CAJgB;AAKjCG,EAAAA;AALiC,CAA5B,EAMJ;AACD,QAAMiB,eAAe,GAAGJ,SAAS,KAAKC,qBAAUC,QAAxB,GAAmC;AACzDjB,IAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAeE,KADgC;AAEzDkB,IAAAA,SAAS,EAAElB,KAAK,CAACE,SAAN,GAAkBF,KAAK,CAACE,SAAN,CAAgBF,KAAlC,GAA0CG,4BAAiBgB,MAAjB,CAAwBnB,KAFpB;AAGzDA,IAAAA,KAAK,EAAEA,KAAK,CAACA;AAH4C,GAAnC,GAIpB,EAJJ;AAMA,SAAON,UAAU,CAAC,IAAIG,eAAJ,CAAW,sDAAX,CAAD,EAAqE;AACpFuB,IAAAA,cAAc,EAAE;AACdtB,MAAAA,QAAQ,EAAEC,oBAASE,MADL;AAEdD,MAAAA,KAAK,EAAEqB,IAAI,CAACC,SAAL,CAAejB,MAAM,CAACkB,MAAP,CAAc;AAClCb,QAAAA,MADkC;AAElCc,QAAAA,UAAU,EAAEb,IAFsB;AAGlCC,QAAAA,YAAY,EAAEA,YAAY,IAAIF,MAAM,CAACnB,MAHH;AAIlCsB,QAAAA,SAAS,EAAEA,SAAS,CAACb,KAJa;AAKlCgB,QAAAA;AALkC,OAAd,EAMnBC,eANmB,CAAf;AAFO;AADoE,GAArE,CAAjB;AAYD,C,CAED;;AAEA;;;;;;;AAKO,eAAeQ,QAAf,CAAwBf,MAAxB,EAAgC;AACrC,SAAOhC,WAAW,CAACE,OAAO,IAAIL,WAAW,CAACc,EAAE,IAAIT,OAAO,CAAC8C,iBAAR,CAA0BhB,MAA1B,EAAkCrB,EAAlC,CAAP,CAAvB,CAAX,CACJI,IADI,CACC,CAAC;AAAEO,IAAAA,KAAF;AAAS2B,IAAAA;AAAT,GAAD,KAA2B;AAC/B,QAAIA,UAAU,KAAKC,uBAAYC,IAA/B,EAAqC;AACnC,YAAMxB,MAAM,CAACkB,MAAP,CAAc,IAAIO,KAAJ,CAAUH,UAAU,CAACI,WAArB,CAAd,EAAiD;AAAErB,QAAAA,MAAF;AAAUiB,QAAAA;AAAV,OAAjD,CAAN;AACD;;AAED,WAAO3B,KAAP;AACD,GAPI,CAAP;AAQD;AAED;;;;;;;;AAMO,SAASgC,SAAT,CAAmBtB,MAAnB,EAA2BV,KAA3B,EAAkC;AACvC,SAAOtB,WAAW,CAACE,OAAO,IAAIL,WAAW,CAACc,EAAE,IAAIT,OAAO,CAACqD,eAAR,CAAwBvB,MAAxB,EAAgCV,KAAhC,EAAuCX,EAAvC,CAAP,CAAvB,CAAX,CACJI,IADI,CACCkC,UAAU,IAAI;AAClB,QAAIA,UAAU,KAAKC,uBAAYC,IAA/B,EAAqC;AACnC,YAAMxB,MAAM,CAACkB,MAAP,CAAc,IAAIO,KAAJ,CAAUH,UAAU,CAACI,WAArB,CAAd,EAAiD;AAAErB,QAAAA,MAAF;AAAUiB,QAAAA;AAAV,OAAjD,CAAN;AACD;;AAED,WAAOA,UAAP;AACD,GAPI,CAAP;AAQD","sourcesContent":["import { StatusCodes, DataType, VariantArrayType, NodeClass } from 'node-opcua';\nimport Session from './lib/server/Session';\nimport NodeId from './lib/model/opcua/NodeId';\n\n// Helpers\n/**\n * Creates a callback that calls `resolve` on success and `reject` on error.\n * @param {function(result: any): void} resolve The resolve callback.\n * @param {function(error: Error): void} reject The reject callback.\n * @example\n * // `aCallbackFn` is a function that accepts a node-style callback as the last argument\n * const promise = new Promise(\n *   (resolve, reject) => aCallbackFn('other', 'args', promisifiedCallback(resolve, reject)\n * );\n */\nfunction promisifiedCallback(resolve, reject) {\n  return (err, result) => {\n    if (err) { return reject(err); }\n    return resolve(result);\n  };\n}\n\n/**\n * Promisifies a async function that would otherwise require a callback.\n * @param {function(cb: function(error: Error, result: any)):Promise<any>} call A function that\n * accepts a callback and performs the async action to wrap.\n */\nfunction promisified(call) {\n  return new Promise((resolve, reject) => call(promisifiedCallback(resolve, reject)));\n}\n\n/**\n * Creates a session, runs `action` and closes the session.\n * @param {function(session: Session): Promise<any>} action The action to run a session.\n */\nasync function withSession(action) {\n  const session = await Session.create();\n  let result = null;\n  let error = null;\n  try {\n    result = await action(session);\n  } catch (e) {\n    error = e;\n  }\n\n  await Session.close(session);\n\n  if (error) { throw error; }\n\n  return result;\n}\n\n// Methods / Scripts\n\n/**\n * Calls an OPC-UA method on the server.\n * @param {NodeId} methodId The method's id.\n * @param {Array<Variant>} args The arguments to pass.\n */\nexport function callMethod(methodId, args = []) {\n  return withSession(session => promisified(cb => session.call([\n    {\n      objectId: methodId.parent,\n      methodId,\n      inputArguments: args,\n    },\n  ], cb)))\n    .then(([result] = []) => result);\n}\n\n/**\n * Calls a server script on the server.\n * @param {NodeId} scriptId The script's id.\n * @param {Object} parameters The parameters to pass, given as a map of Variants, like\n * `{ name: { ... } }`.\n */\nexport function callScript(scriptId, parameters = {}) {\n  return callMethod(new NodeId('AGENT.SCRIPT.METHODS.callScript'), [\n    {\n      dataType: DataType.NodeId,\n      value: scriptId,\n    },\n    {\n      dataType: DataType.NodeId,\n      value: scriptId.parent,\n    },\n    {\n      dataType: DataType.String,\n      arrayType: VariantArrayType.Array,\n      value: Object.keys(parameters),\n    },\n    {\n      dataType: DataType.Variant,\n      arrayType: VariantArrayType.Array,\n      value: Object.values(parameters),\n    },\n  ]);\n}\n\n/**\n * Creates a new Node on the server.\n * @param {NodeId} nodeId The new node's id.\n * @param {Object} options The options to use.\n * @param {string} options.name The node's name.\n * @param {NodeId} [options.parentNodeId] The node's parent, defaults to the calculated parent\n * (`Test` for `Test.Child`).\n * @param {node-opcua~NodeClass} [options.nodeClass] The node's class, defaults so\n * `node-opcua~NodeClass.Variable`.\n * @param {NodeId} [options.typeDefinition] The node's type definition, must be provided for\n * non-variable nodes.\n * @param {node-opcua~Variant} [options.value] The node's value, required for all variable nodes.\n */\nexport function createNode(nodeId, {\n  name,\n  parentNodeId = nodeId.parent,\n  nodeClass = NodeClass.Variable,\n  typeDefinition = new NodeId('ns=0;i=62'),\n  value,\n}) {\n  const variableOptions = nodeClass === NodeClass.Variable ? {\n    dataType: value.dataType.value,\n    valueRank: value.arrayType ? value.arrayType.value : VariantArrayType.Scalar.value,\n    value: value.value,\n  } : {};\n\n  return callScript(new NodeId('SYSTEM.LIBRARY.ATVISE.SERVERSCRIPTS.atscm.CreateNode'), {\n    paramObjString: {\n      dataType: DataType.String,\n      value: JSON.stringify(Object.assign({\n        nodeId,\n        browseName: name,\n        parentNodeId: parentNodeId || nodeId.parent,\n        nodeClass: nodeClass.value,\n        typeDefinition,\n      }, variableOptions)),\n    },\n  });\n}\n\n// Reading/Writing\n\n/**\n * Reads a single node's value.\n * @param {NodeId} nodeId The node to read.\n * @return {Promise<any>} The read value.\n */\nexport async function readNode(nodeId) {\n  return withSession(session => promisified(cb => session.readVariableValue(nodeId, cb)))\n    .then(({ value, statusCode }) => {\n      if (statusCode !== StatusCodes.Good) {\n        throw Object.assign(new Error(statusCode.description), { nodeId, statusCode });\n      }\n\n      return value;\n    });\n}\n\n/**\n * Writes a single node's value.\n * @param {NodeId} nodeId The node to write.\n * @param {Variant} value The value to write.\n * @return {Promise<node-opcua~StatusCodes} The operation status result.\n */\nexport function writeNode(nodeId, value) {\n  return withSession(session => promisified(cb => session.writeSingleNode(nodeId, value, cb)))\n    .then(statusCode => {\n      if (statusCode !== StatusCodes.Good) {\n        throw Object.assign(new Error(statusCode.description), { nodeId, statusCode });\n      }\n\n      return statusCode;\n    });\n}\n"],"file":"api.js"}