{"version":3,"sources":["../src/api.js"],"names":["promisifiedCallback","resolve","reject","err","result","promisified","call","Promise","withSession","action","session","Session","create","error","e","close","readNode","nodeId","cb","readVariableValue","then","value","statusCode","StatusCodes","Good","Object","assign","Error","description","writeNode","writeSingleNode","callMethod","methodId","args","objectId","parent","inputArguments","callScript","scriptId","parameters","NodeId","dataType","DataType","String","arrayType","VariantArrayType","Array","keys","Variant","values","outputArguments","createNode","name","parentNodeId","nodeClass","NodeClass","Variable","typeDefinition","modellingRule","reference","variableOptions","valueRank","Scalar","from","is64Bit","Int64","UInt64","paramObjString","JSON","stringify","browseName","createdNode","addReferences","references","entries","map","type","items","referenceIdValue","parseInt"],"mappings":"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","sourcesContent":["import { NodeClass } from 'node-opcua/lib/datamodel/nodeclass';\nimport { DataType, VariantArrayType } from 'node-opcua/lib/datamodel/variant';\nimport { StatusCodes } from 'node-opcua/lib/datamodel/opcua_status_code';\nimport Session from './lib/server/Session';\nimport NodeId from './lib/model/opcua/NodeId';\n\n// Helpers\n/**\n * Creates a callback that calls `resolve` on success and `reject` on error.\n * @param {function(result: any): void} resolve The resolve callback.\n * @param {function(error: Error): void} reject The reject callback.\n * @example\n * // `aCallbackFn` is a function that accepts a node-style callback as the last argument\n * const promise = new Promise(\n *   (resolve, reject) => aCallbackFn('other', 'args', promisifiedCallback(resolve, reject)\n * );\n */\nfunction promisifiedCallback(resolve, reject) {\n  return (err, result) => {\n    if (err) { return reject(err); }\n    return resolve(result);\n  };\n}\n\n/**\n * Promisifies a async function that would otherwise require a callback.\n * @param {function(cb: function(error: Error, result: any)):Promise<any>} call A function that\n * accepts a callback and performs the async action to wrap.\n */\nfunction promisified(call) {\n  return new Promise((resolve, reject) => call(promisifiedCallback(resolve, reject)));\n}\n\n/**\n * Creates a session, runs `action` and closes the session.\n * @param {function(session: Session): Promise<any>} action The action to run a session.\n */\nasync function withSession(action) {\n  const session = await Session.create();\n  let result = null;\n  let error = null;\n  try {\n    result = await action(session);\n  } catch (e) {\n    error = e;\n  }\n\n  await Session.close(session);\n\n  if (error) { throw error; }\n\n  return result;\n}\n\n// Reading/Writing\n\n/**\n * Reads a single node's value.\n * @param {NodeId} nodeId The node to read.\n * @return {Promise<any>} The read value.\n */\nexport async function readNode(nodeId) {\n  return withSession(session => promisified(cb => session.readVariableValue(nodeId, cb)))\n    .then(({ value, statusCode }) => {\n      if (statusCode !== StatusCodes.Good) {\n        throw Object.assign(new Error(statusCode.description), { nodeId, statusCode });\n      }\n\n      return value;\n    });\n}\n\n/**\n * Writes a single node's value.\n * @param {NodeId} nodeId The node to write.\n * @param {Variant} value The value to write.\n * @return {Promise<node-opcua~StatusCodes} The operation status result.\n */\nexport function writeNode(nodeId, value) {\n  return withSession(session => promisified(cb => session.writeSingleNode(nodeId, value, cb)))\n    .then(statusCode => {\n      if (statusCode !== StatusCodes.Good) {\n        throw Object.assign(new Error(statusCode.description), { nodeId, statusCode });\n      }\n\n      return statusCode;\n    });\n}\n\n// Methods / Scripts\n\n/**\n * Calls an OPC-UA method on the server.\n * @param {NodeId} methodId The method's id.\n * @param {Array<Variant>} args The arguments to pass.\n */\nexport function callMethod(methodId, args = []) {\n  return withSession(session => promisified(cb => session.call([\n    {\n      objectId: methodId.parent,\n      methodId,\n      inputArguments: args,\n    },\n  ], cb)))\n    .then(([result] = []) => {\n      if (result.statusCode.value) {\n        throw Object.assign(new Error(result.statusCode.description), {\n          methodId,\n          inputArguments: args,\n        });\n      }\n\n      return result;\n    });\n}\n\n/**\n * Calls a server script on the server.\n * @param {NodeId} scriptId The script's id.\n * @param {Object} parameters The parameters to pass, given as a map of Variants, like\n * `{ name: { ... } }`.\n */\nexport function callScript(scriptId, parameters = {}) {\n  return callMethod(new NodeId('AGENT.SCRIPT.METHODS.callScript'), [\n    {\n      dataType: DataType.NodeId,\n      value: scriptId,\n    },\n    {\n      dataType: DataType.NodeId,\n      value: scriptId.parent,\n    },\n    {\n      dataType: DataType.String,\n      arrayType: VariantArrayType.Array,\n      value: Object.keys(parameters),\n    },\n    {\n      dataType: DataType.Variant,\n      arrayType: VariantArrayType.Array,\n      value: Object.values(parameters),\n    },\n  ])\n    .then(result => {\n      const statusCode = result.outputArguments[0].value;\n\n      if (statusCode.value) {\n        throw Object.assign(new Error(`Script failed: ${statusCode.description}\n${result.outputArguments[1].value}`), {\n          scriptId,\n          parameters,\n        });\n      }\n\n      return result;\n    });\n}\n\n/**\n * Creates a new Node on the server.\n * @param {NodeId} nodeId The new node's id.\n * @param {Object} options The options to use.\n * @param {string} options.name The node's name.\n * @param {NodeId} [options.parentNodeId] The node's parent, defaults to the calculated parent\n * (`Test` for `Test.Child`).\n * @param {node-opcua~NodeClass} [options.nodeClass] The node's class, defaults so\n * `node-opcua~NodeClass.Variable`.\n * @param {NodeId} [options.typeDefinition] The node's type definition, must be provided for\n * non-variable nodes.\n * @param {NodeId} [options.modellingRule] The node's modelling rule.\n * @param {string} [options.reference] Name of the type of the node's reference to it's parent.\n * @param {node-opcua~Variant} [options.value] The node's value, required for all variable nodes.\n */\nexport function createNode(nodeId, {\n  name,\n  parentNodeId = nodeId.parent,\n  nodeClass = NodeClass.Variable,\n  typeDefinition = new NodeId('ns=0;i=62'),\n  modellingRule,\n  reference,\n  value,\n}) {\n  const variableOptions = nodeClass === NodeClass.Variable ? {\n    dataType: value.dataType.value,\n    valueRank: value.arrayType ? value.arrayType.value : VariantArrayType.Scalar.value,\n    value: value.arrayType && value.arrayType !== VariantArrayType.Scalar ?\n      Array.from(value.value) :\n      value.value,\n  } : {};\n\n  const is64Bit = value.dataType === DataType.Int64 || value.dataType === DataType.UInt64;\n  if (is64Bit) { variableOptions.value = 0; }\n\n  return callScript(new NodeId('SYSTEM.LIBRARY.ATVISE.SERVERSCRIPTS.atscm.CreateNode'), {\n    paramObjString: {\n      dataType: DataType.String,\n      value: JSON.stringify(Object.assign({\n        nodeId,\n        browseName: name,\n        parentNodeId: parentNodeId || nodeId.parent,\n        nodeClass: nodeClass.value,\n        typeDefinition,\n        modellingRule,\n        reference,\n      }, variableOptions)),\n    },\n  })\n    .then(async result => {\n      const [{ value: createdNode }] = result.outputArguments[3].value;\n\n      if (createdNode && is64Bit) {\n        await writeNode(nodeId, value);\n      }\n\n      return result;\n    });\n}\n\n/**\n * Adds references to a node.\n * @param {NodeId} nodeId The node to add the references to.\n * @param {Object} references The references to add.\n * @return {Promise} Resolved once the references were added.\n * @example <caption>Add a simple reference</caption>\n * import { ReferenceTypeIds } from 'node-opcua/lib/opcua_node_ids';\n *\n * addReferences('AGENT.DISPLAYS.Main', {\n *   [47]: ['VariableTypes.ATVISE.Display'],\n *   // equals:\n *   [ReferenceTypeIds.HasTypeDefinition]: ['VariableTypes.ATVISE.Display'],\n * })\n *   .then(() => console.log('Done!'))\n *   .catch(console.error);\n */\nexport function addReferences(nodeId, references) {\n  return callScript(new NodeId('SYSTEM.LIBRARY.ATVISE.SERVERSCRIPTS.atscm.AddReferences'), {\n    paramObjString: {\n      dataType: DataType.String,\n      value: JSON.stringify({\n        nodeId,\n        references: Object.entries(references).map(([type, items]) => ({\n          referenceIdValue: parseInt(type, 10),\n          items,\n        })),\n      }),\n    },\n  });\n}\n"],"file":"api.js"}