{"version":3,"sources":["../../src/config/ProjectConfig.js"],"names":["path","process","env","ATSCM_CONFIG_PATH","Config","require","default","ProjectConfig","_env","name","host","port","opc","parseInt","http","login","username","password","sourceNodeRegExp","_sourceNodeRegExp","_sourceNodesRegExp","RegExp","nodes","map","value","replace","join","ignoredNodesRegExp","_ignoredNodesRegExp","ignoreNodes","isExternal","id","match","timeout"],"mappings":";;;;;;;AAAA;;;;AAIO,MAAMA,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAzB;AAEP;;;;;;;AAIA,MAAMC,MAAM,GAAGC,OAAO,CAACL,IAAD,CAAP,CAAcM,OAA7B;AAEA;;;;;;AAIe,MAAMC,aAAN,SAA4BH,MAA5B,CAAmC;AAEhD;;;;;AAKA,SAAOI,IAAP,CAAYC,IAAZ,EAAkB;AAChB,WAAOR,OAAO,CAACC,GAAR,CAAa,kBAAiBO,IAAK,EAAnC,CAAP;AACD;AAED;;;;;;AAIA,aAAWC,IAAX,GAAkB;AAChB,WAAO,KAAKF,IAAL,CAAU,MAAV,KAAqB,MAAME,IAAlC;AACD;AAED;;;;;;;;;;AAQA,aAAWC,IAAX,GAAkB;AAChB,WAAO;AACLC,MAAAA,GAAG,EAAEC,QAAQ,CAAC,KAAKL,IAAL,CAAU,WAAV,CAAD,EAAyB,EAAzB,CAAR,IAAwC,MAAMG,IAAN,CAAWC,GADnD;AAELE,MAAAA,IAAI,EAAED,QAAQ,CAAC,KAAKL,IAAL,CAAU,YAAV,CAAD,EAA0B,EAA1B,CAAR,IAAyC,MAAMG,IAAN,CAAWG;AAFrD,KAAP;AAID;AAED;;;;;;;;;;AAQA,aAAWC,KAAX,GAAmB;AACjB,QAAI,KAAKP,IAAL,CAAU,iBAAV,KAAgC,KAAKA,IAAL,CAAU,iBAAV,CAApC,EAAkE;AAChE,aAAO;AACLQ,QAAAA,QAAQ,EAAE,KAAKR,IAAL,CAAU,iBAAV,KAAgC,MAAMO,KAAN,CAAYC,QADjD;AAELC,QAAAA,QAAQ,EAAE,KAAKT,IAAL,CAAU,iBAAV,KAAgC,MAAMO,KAAN,CAAYE;AAFjD,OAAP;AAID;;AAED,WAAO,MAAMF,KAAb;AACD;AAED;;;;;;AAIA,aAAWG,gBAAX,GAA8B;AAC5B,QAAI,CAAC,KAAKC,iBAAV,EAA6B;AAC3B,WAAKC,kBAAL,GAA0B,IAAIC,MAAJ,CAAY,KAAI,KAAKC,KAAL,CACvCC,GADuC,CACnC,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAgB,GAAEA,KAAK,CAACC,OAAN,CAAc,KAAd,EAAqB,KAArB,CAA4B,EADX,EAEvCC,IAFuC,CAElC,GAFkC,CAE7B,GAFa,CAA1B;AAGD;;AAED,WAAO,KAAKN,kBAAZ;AACD;AAED;;;;;;AAIA,aAAWO,kBAAX,GAAgC;AAC9B,QAAI,CAAC,KAAKC,mBAAV,EAA+B;AAC7B,WAAKA,mBAAL,GAA2B,IAAIP,MAAJ,CAAY,KAAI,KAAKQ,WAAL,CACxCN,GADwC,CACpC,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAgB,GAAEA,KAAK,CAACC,OAAN,CAAc,KAAd,EAAqB,KAArB,CAA4B,EADV,EAExCC,IAFwC,CAEnC,GAFmC,CAE9B,GAFc,CAA3B;AAGD;;AAED,WAAO,KAAKE,mBAAZ;AACD;AAED;;;;;;;;AAMA,SAAOE,UAAP,CAAkBC,EAAlB,EAAsB;AACpB,WAAO,CAACA,EAAE,CAACC,KAAH,CAAS,KAAKd,gBAAd,CAAD,IAAoC,CAAC,CAACa,EAAE,CAACC,KAAH,CAAS,KAAKL,kBAAd,CAA7C;AACD;AAED;;;;;;;AAKA,aAAWM,OAAX,GAAqB;AACnB,UAAM/B,GAAG,GAAG,KAAKM,IAAL,CAAU,SAAV,CAAZ;;AACA,WAAON,GAAG,GAAGW,QAAQ,CAACX,GAAD,EAAM,EAAN,CAAX,GAAuB,MAAM+B,OAAvC;AACD;;AAnG+C","sourcesContent":["/**\n * The path to the project's configuration file.\n * @type {string}\n */\nexport const path = process.env.ATSCM_CONFIG_PATH;\n\n/**\n * The current project's configuration.\n * @type {Atviseproject}\n */\nconst Config = require(path).default;\n\n/**\n * The current project's configuration, with overrides (through `ATSCM_PROJECT__` env vars) already\n * handled.\n */\nexport default class ProjectConfig extends Config {\n\n  /**\n   * Return the project configuration override for the given name if available.\n   * @param {string} name The variable to return.\n   * @type {string|undefined} The variables's value or `undefined`.\n   */\n  static _env(name) {\n    return process.env[`ATSCM_PROJECT__${name}`];\n  }\n\n  /**\n   * The atvise server's host. Can be overridden with the `ATSCM_PROJECT__HOST` env variable.\n   * @type {string}\n   */\n  static get host() {\n    return this._env('HOST') || super.host;\n  }\n\n  /**\n   * The atvise server ports to use.\n   * @type {Object}\n   * @property {number} opc The OPC-UA port the atvise server runs on. Can be overridden with the\n   * `ATSCM_PROJECT__PORT__OPC` env variable.\n   * @property {number} http The HTTP port the atvise server can be reached at. Can be overridden\n   * with the `ATSCM_PROJECT__PORT__HTTP` env variable.\n   */\n  static get port() {\n    return {\n      opc: parseInt(this._env('PORT__OPC'), 10) || super.port.opc,\n      http: parseInt(this._env('PORT__HTTP'), 10) || super.port.http,\n    };\n  }\n\n  /**\n   * The login to use. Return false if no login is required (default).\n   * @type {Object}\n   * @property {string} username The username to log in with. Can be overridden with the\n   * `ATSCM_PROJECT__LOGIN__USERNAME` env variable.\n   * @property {string} password The password to log in with. Can be overridden with the\n   * `ATSCM_PROJECT__LOGIN__PASSWORD` env variable.\n   */\n  static get login() {\n    if (this._env('LOGIN__USERNAME') || this._env('LOGIN__PASSWORD')) {\n      return {\n        username: this._env('LOGIN__USERNAME') || super.login.username,\n        password: this._env('LOGIN__PASSWORD') || super.login.password,\n      };\n    }\n\n    return super.login;\n  }\n\n  /**\n   * A regular expression matching all source nodes.\n   * @type {RegExp};\n   */\n  static get sourceNodeRegExp() {\n    if (!this._sourceNodeRegExp) {\n      this._sourceNodesRegExp = new RegExp(`^(${this.nodes\n        .map(({ value }) => `${value.replace(/\\./g, '\\\\.')}`)\n        .join('|')})`);\n    }\n\n    return this._sourceNodesRegExp;\n  }\n\n  /**\n   * A regular expression matching all ignored nodes.\n   * @type {RegExp};\n   */\n  static get ignoredNodesRegExp() {\n    if (!this._ignoredNodesRegExp) {\n      this._ignoredNodesRegExp = new RegExp(`^(${this.ignoreNodes\n        .map(({ value }) => `${value.replace(/\\./g, '\\\\.')}`)\n        .join('|')})`);\n    }\n\n    return this._ignoredNodesRegExp;\n  }\n\n  /**\n   * Returns `true` for all external (not in {@link Atviseproject.nodes} or ignored by\n   * {@link Atviseproject.ignoreNodes}).\n   * @param {string} id The node id to check.\n   * @return {boolean} If the node is external.\n   */\n  static isExternal(id) {\n    return !id.match(this.sourceNodeRegExp) || !!id.match(this.ignoredNodesRegExp);\n  }\n\n  /**\n   * The connection timeout, in milliseconds. Can be overridden with the `ATSCM_PROJECT__TIMEOUT`\n   * env variable.\n   * @type {number}\n   */\n  static get timeout() {\n    const env = this._env('TIMEOUT');\n    return env ? parseInt(env, 10) : super.timeout;\n  }\n\n}\n"],"file":"ProjectConfig.js"}