{"version":3,"sources":["../../src/config/ProjectConfig.js"],"names":["path","process","env","ATSCM_CONFIG_PATH","Config","require","default","ProjectConfig","_env","name","host","port","opc","parseInt","http","login","username","password"],"mappings":";;;;;AAAA;;;;AAIO,MAAMA,sBAAOC,QAAQC,GAAR,CAAYC,iBAAzB;;AAEP;;;;AAIA,MAAMC,SAASC,QAAQL,IAAR,EAAcM,OAA7B;;AAEA;;;;AAIe,MAAMC,aAAN,SAA4BH,MAA5B,CAAmC;;AAEhD;;;;;AAKA,SAAOI,IAAP,CAAYC,IAAZ,EAAkB;AAChB,WAAOR,QAAQC,GAAR,CAAa,kBAAiBO,IAAK,EAAnC,CAAP;AACD;;AAED;;;;AAIA,aAAWC,IAAX,GAAkB;AAChB,WAAO,KAAKF,IAAL,CAAU,MAAV,KAAqB,MAAME,IAAlC;AACD;;AAED;;;;;;;;AAQA,aAAWC,IAAX,GAAkB;AAChB,WAAO;AACLC,WAAKC,SAAS,KAAKL,IAAL,CAAU,WAAV,CAAT,EAAiC,EAAjC,KAAwC,MAAMG,IAAN,CAAWC,GADnD;AAELE,YAAMD,SAAS,KAAKL,IAAL,CAAU,YAAV,CAAT,EAAkC,EAAlC,KAAyC,MAAMG,IAAN,CAAWG;AAFrD,KAAP;AAID;;AAED;;;;;;;;AAQA,aAAWC,KAAX,GAAmB;AACjB,QAAI,KAAKP,IAAL,CAAU,iBAAV,KAAgC,KAAKA,IAAL,CAAU,iBAAV,CAApC,EAAkE;AAChE,aAAO;AACLQ,kBAAU,KAAKR,IAAL,CAAU,iBAAV,KAAgC,MAAMO,KAAN,CAAYC,QADjD;AAELC,kBAAU,KAAKT,IAAL,CAAU,iBAAV,KAAgC,MAAMO,KAAN,CAAYE;AAFjD,OAAP;AAID;;AAED,WAAO,MAAMF,KAAb;AACD;;AAnD+C;kBAA7BR,a","file":"ProjectConfig.js","sourcesContent":["/**\n * The path to the project's configuration file.\n * @type {string}\n */\nexport const path = process.env.ATSCM_CONFIG_PATH;\n\n/**\n * The current project's configuration.\n * @type {Atviseproject}\n */\nconst Config = require(path).default;\n\n/**\n * The current project's configuration, with overrides (through `ATSCM_PROJECT__` env vars) already\n * handled.\n */\nexport default class ProjectConfig extends Config {\n\n  /**\n   * Return the project configuration override for the given name if available.\n   * @param {string} name The variable to return\n   * @type {string|undefined} The variables's value or `undefined`.\n   */\n  static _env(name) {\n    return process.env[`ATSCM_PROJECT__${name}`];\n  }\n\n  /**\n   * The atvise server's host. Can be overridden with the `ATSCM_PROJECT__HOST` env variable.\n   * @type {string}\n   */\n  static get host() {\n    return this._env('HOST') || super.host;\n  }\n\n  /**\n   * The atvise server ports to use.\n   * @type {Object}\n   * @property {number} opc The OPC-UA port the atvise server runs on. Can be overridden with the\n   * `ATSCM_PROJECT__PORT__OPC` env variable.\n   * @property {number} http The HTTP port the atvise server can be reached at. Can be overridden\n   * with the `ATSCM_PROJECT__PORT__HTTP` env variable.\n   */\n  static get port() {\n    return {\n      opc: parseInt(this._env('PORT__OPC'), 10) || super.port.opc,\n      http: parseInt(this._env('PORT__HTTP'), 10) || super.port.http,\n    };\n  }\n\n  /**\n   * The login to use. Return false if no login is required (default).\n   * @type {Object}\n   * @property {string} username The username to log in with. Can be overridden with the\n   * `ATSCM_PROJECT__LOGIN__USERNAME` env variable.\n   * @property {string} password The password to log in with. Can be overridden with the\n   * `ATSCM_PROJECT__LOGIN__PASSWORD` env variable.\n   */\n  static get login() {\n    if (this._env('LOGIN__USERNAME') || this._env('LOGIN__PASSWORD')) {\n      return {\n        username: this._env('LOGIN__USERNAME') || super.login.username,\n        password: this._env('LOGIN__PASSWORD') || super.login.password,\n      };\n    }\n\n    return super.login;\n  }\n\n}\n"]}