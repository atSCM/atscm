{"version":3,"sources":["../../src/transform/UaNodeToAtviseFileTransformer.js"],"names":["UaNodeToAtviseFileTransformer","constructor","options","nodesToTransform","mappingStream","direction","FromDB","useInputStream","inputStream","readStream","Error","pipe","stream","applyTransformers","useTransformers"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;AAGe,MAAMA,6BAAN,CAAoC;AACjD;;;;;;;;;AASAC,cAAYC,UAAU,EAAtB,EAA0B;AACxB;;;;AAIA,UAAMC,mBAAmBD,QAAQC,gBAAR,IAA4B,EAArD;;AAEA;;;;AAIA,UAAMC,gBAAgB,sBAAuB,EAAEC,WAAW,gCAAmBC,MAAhC,EAAvB,CAAtB;;AAEA;;;;AAIA,UAAMC,iBAAiBL,QAAQK,cAAR,IAA0B,KAAjD;;AAEA;;;;AAIA,QAAIC,cAAc,IAAlB;;AAEA;;;;AAIA,SAAKC,UAAL,GAAkB,0BAAlB;;AAGA,QAAIF,cAAJ,EAAoB;AAClB,UAAI,CAACL,QAAQM,WAAb,EAA0B;AACxB,cAAM,IAAIE,KAAJ,CAAU,oEAAV,CAAN;AACD,OAFD,MAEO;AACLF,sBAAcN,QAAQM,WAAtB;AACD;AACF,KAND,MAMO;AACLA,oBAAe,2BAAiBL,gBAAjB,CAAD,CACXQ,IADW,CACN,KAAKF,UADC,CAAd;AAED;;AAED;;;;AAIA,SAAKG,MAAL,GAAc,sBAAYC,iBAAZ,CACZL,YAAYG,IAAZ,CAAiBP,aAAjB,CADY,EAEZ,wBAAcU,eAFF,EAGZ,gCAAmBR,MAHP,CAAd;AAKD;AA9DgD;kBAA9BN,6B","file":"UaNodeToAtviseFileTransformer.js","sourcesContent":["import ProjectConfig from '../config/ProjectConfig';\nimport Transformer, { TransformDirection } from '../lib/transform/Transformer';\nimport MappingTransformer from './Mapping';\nimport BrowseStream from '../lib/pull/BrowseStream';\nimport ReadStream from '../lib/pull/ReadStream';\n\n/**\n * A transformer that transforms mapped file system files to {@link AtviseFiles}'s\n */\nexport default class UaNodeToAtviseFileTransformer {\n  /**\n   * Creates a new FileToAtviseFileTransformer\n   * @param {Object} options The options to use. See\n   * {@link FileToAtviseFileTransformer#constructor} for available options.\n   * @param {NodeId[]} [options.nodesToTransform] The nodes to transform.\n   * @param {Boolean} [options.useInputStream] Defines if the given input stream should be\n   * used for mapping.\n   * @param {Stream} [options.inputStream] The input stream to use.\n   */\n  constructor(options = {}) {\n    /**\n     * Stream containing all type definition files.\n     * @type {NodeId[]}\n     */\n    const nodesToTransform = options.nodesToTransform || [];\n\n    /**\n     * Stream that creates atvise files.\n     * @type {MappingTransformer}\n     */\n    const mappingStream = new MappingTransformer({ direction: TransformDirection.FromDB });\n\n    /**\n     * Defines if the given input stream should be used for mapping\n     * @type {MappingTransformer}\n     */\n    const useInputStream = options.useInputStream || false;\n\n    /**\n     * Stream to use as input for mapping stream.\n     * @type {Stream}\n     */\n    let inputStream = null;\n\n    /**\n     * Stream that reads atvise server nodes.\n     * @type {ReadStream}\n     */\n    this.readStream = new ReadStream();\n\n\n    if (useInputStream) {\n      if (!options.inputStream) {\n        throw new Error('UaNodeToAtviseFileTransformer#constructor: Input stream is missing');\n      } else {\n        inputStream = options.inputStream;\n      }\n    } else {\n      inputStream = (new BrowseStream(nodesToTransform))\n        .pipe(this.readStream);\n    }\n\n    /**\n     * Stream that creates {AtviseFiles} from browses {node-opcua~ReferenceDescriptions}.\n     * @type {Stream}\n     */\n    this.stream = Transformer.applyTransformers(\n      inputStream.pipe(mappingStream),\n      ProjectConfig.useTransformers,\n      TransformDirection.FromDB\n    );\n  }\n}\n"]}