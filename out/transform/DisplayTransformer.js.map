{"version":3,"sources":["../../src/transform/DisplayTransformer.js"],"names":["tagsBeforeMetadata","Set","metadataIndex","elements","index","length","has","name","DisplayTransformer","shouldBeTransformed","file","isDisplay","transformFromDB","enc","callback","decodeContents","err","results","Error","xml","document","config","scriptTags","forEach","script","attributes","src","dependencies","push","scriptContentNode","scriptFile","splitFile","scriptText","type","contents","from","metaTag","paramTags","parameters","configFile","JSON","stringify","svgFile","encodeContents","encodeErr","stringValue","createCombinedFile","files","lastFile","parse","toString","e","relative","message","dirname","inlineScript","result","svg","undefined","i","unshift","splice","display","combineFiles","Object","keys","map","ext","xmlString"],"mappings":"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","file":"DisplayTransformer.js","sourcesContent":["import { Buffer } from 'buffer';\nimport XMLTransformer from '../lib/transform/XMLTransformer';\nimport {\n  findChild, removeChild,\n  removeChildren,\n  createTextNode, createCDataNode, createElement,\n} from '../lib/helpers/xml';\n\n/**\n * Names of the tags to come before <metadata> in output files.\n * @type {Set<string>}\n */\nconst tagsBeforeMetadata = new Set(['defs', 'desc', 'title']);\n\n/**\n * Returns the index at which the <metadata> section should be inserted in the resulting xml.\n * @param {Object[]} elements The elements to look at.\n * @return {number} The insertion index.\n */\nfunction metadataIndex(elements) {\n  let index = 0;\n\n  while (elements.length > index && tagsBeforeMetadata.has(elements[index].name)) {\n    index += 1;\n  }\n\n  return index;\n}\n\n/**\n * Splits read atvise display XML nodes into their SVG and JavaScript sources,\n * alongside with a .json file containing the display's parameters.\n */\nexport default class DisplayTransformer extends XMLTransformer {\n\n  /**\n   * Returns true for all files containing atvise displays.\n   * @param {AtviseFile} file The file to check.\n   * @return {boolean} `true` for all atvise display files.\n   */\n  shouldBeTransformed(file) {\n    return file.isDisplay;\n  }\n\n  /**\n   * Splits any read files containing atvise displays into their SVG and JavaScript sources,\n   * alongside with a json file containing the display's parameters.\n   * @param {AtviseFile} file The display file to split.\n   * @param {string} enc The encoding used.\n   * @param {function(err: Error, file: AtviseFile)} callback Called with the error that occured\n   * while transforming the display, or the file passed through.\n   */\n  transformFromDB(file, enc, callback) {\n    this.decodeContents(file, (err, results) => {\n      if (err) {\n        callback(err);\n      } else if (!results) {\n        callback(new Error('Error parsing display: No `svg` tag'));\n      } else {\n        const xml = results;\n        const document = findChild(xml, 'svg');\n\n        if (!document) {\n          callback(new Error('Error parsing display: No `svg` tag'));\n          return;\n        }\n\n        const config = {};\n        const scriptTags = removeChildren(document, 'script');\n\n        // Extract JavaScript\n        if (scriptTags.length) {\n          scriptTags.forEach(script => {\n            if (script.attributes && (script.attributes.src || script.attributes['xlink:href'])) {\n              if (!config.dependencies) {\n                config.dependencies = [];\n              }\n\n              config.dependencies.push(script.attributes.src || script.attributes['xlink:href']);\n            } else {\n              // TODO: Warn on multiple inline scripts\n\n              const scriptContentNode = script.elements ? script.elements[0] : createTextNode();\n\n              const scriptFile = DisplayTransformer.splitFile(file, '.js');\n\n              const scriptText = scriptContentNode[scriptContentNode.type] || '';\n\n              scriptFile.contents = Buffer.from(scriptText);\n              this.push(scriptFile);\n            }\n          });\n        }\n\n        // Extract metadata\n        const metaTag = findChild(document, 'metadata');\n        if (metaTag && metaTag.elements) {\n          // TODO: Warn on multiple metadata tags\n\n          // - Parameters\n          const paramTags = removeChildren(metaTag, 'atv:parameter');\n          if (paramTags.length) {\n            config.parameters = [];\n\n            paramTags.forEach(({ attributes }) => config.parameters.push(attributes));\n          }\n        }\n\n        const configFile = DisplayTransformer.splitFile(file, '.json');\n\n        configFile.contents = Buffer.from(JSON.stringify(config, null, '  '));\n        this.push(configFile);\n\n        const svgFile = DisplayTransformer.splitFile(file, '.svg');\n\n        this.encodeContents(xml, (encodeErr, stringValue) => {\n          if (encodeErr) {\n            callback(encodeErr);\n          } else {\n            svgFile.contents = Buffer.from(stringValue);\n            this.push(svgFile);\n\n            callback(null);\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Creates a display from the collected files.\n   * @param {Map<String, vinyl~File>} files The collected files, stored against their extension.\n   * @param {vinyl~File} lastFile The last file read. *Used for error messages only*.\n   * @param {function(err: ?Error, data: vinyl~File)} callback Called with the error that occured\n   * while creating the display or the resulting file.\n   */\n  createCombinedFile(files, lastFile, callback) {\n    const configFile = files['.json'];\n    let config = {};\n\n    if (configFile) {\n      try {\n        config = JSON.parse(configFile.contents.toString());\n      } catch (e) {\n        callback(new Error(`Error parsing JSON in ${configFile.relative}: ${e.message}`));\n        return;\n      }\n    }\n\n    const svgFile = files['.svg'];\n    if (!svgFile) {\n      callback(new Error(`No display SVG in ${lastFile.dirname}`));\n      return;\n    }\n\n    const scriptFile = files['.js'];\n    let inlineScript = '';\n    if (scriptFile) {\n      inlineScript = scriptFile.contents.toString();\n    }\n\n    this.decodeContents(svgFile, (err, xml) => {\n      if (err) {\n        callback(err);\n      } else {\n        const result = xml;\n        const svg = findChild(result, 'svg');\n\n        if (!svg) {\n          callback(new Error('Error parsing display SVG: No `svg` tag'));\n          return;\n        }\n\n        // Handle empty svg tag\n        if (!svg.elements) {\n          svg.elements = [];\n        }\n\n        // Insert dependencies\n        if (config.dependencies) {\n          config.dependencies.forEach(src => {\n            svg.elements.push(createElement('script', undefined, { 'xlink:href': src }));\n          });\n        }\n\n        // Insert script\n        // FIXME: Import order is not preserved!\n        if (scriptFile) {\n          svg.elements.push(createElement('script', [createCDataNode(inlineScript)], {\n            type: 'text/ecmascript',\n          }));\n        }\n\n        // Insert metadata\n        // - Parameters\n        if (config.parameters && config.parameters.length > 0) {\n          let metaTag = removeChild(svg, 'metadata');\n\n          if (!metaTag) {\n            metaTag = createElement('metadata');\n          }\n\n          if (!metaTag.elements) {\n            metaTag.elements = [];\n          }\n\n          // Parameters should come before other atv attributes, e.g. `atv:gridconfig`\n          for (let i = config.parameters.length - 1; i >= 0; i--) {\n            metaTag.elements.unshift(\n              createElement('atv:parameter', undefined, config.parameters[i])\n            );\n          }\n\n          // Insert <metadata> as first element in the resulting svg, after <defs>, <desc> and\n          // <title> if defined\n          svg.elements.splice(metadataIndex(svg.elements), 0, metaTag);\n        }\n\n        const display = DisplayTransformer.combineFiles(\n          Object.keys(files).map(ext => files[ext]),\n          '.xml'\n        );\n\n        this.encodeContents(result, (encodeErr, xmlString) => {\n          if (encodeErr) {\n            callback(encodeErr);\n          } else {\n            display.contents = Buffer.from(xmlString);\n\n            callback(null, display);\n          }\n        });\n      }\n    });\n  }\n\n}\n"]}