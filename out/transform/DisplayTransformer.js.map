{"version":3,"sources":["../../src/transform/DisplayTransformer.js"],"names":["tagsBeforeMetadata","Set","metadataIndex","elements","index","length","has","name","DisplayTransformer","shouldBeTransformed","node","hasTypeDefinition","transformFromDB","enc","callback","arrayType","Scalar","Error","markAsResolved","markReferenceAsResolved","decodeContents","err","results","xml","document","config","scriptTags","inlineScript","forEach","script","attributes","src","dependencies","push","warn","id","value","contentNode","scriptFile","splitFile","scriptText","type","dataType","String","metaTag","paramTags","parameters","configFile","JSON","stringify","svgFile","encodeContents","encodeErr","stringValue","renameTo","createCombinedFile","sources","nodeClass","Variable","XmlElement","setReferences","HasTypeDefinition","markAllReferencesAsResolved","parse","e","relative","message","path","result","svg","undefined","i","unshift","splice","xmlString"],"mappings":"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","file":"DisplayTransformer.js","sourcesContent":["import { basename } from 'path';\nimport { NodeClass } from 'node-opcua/lib/datamodel/nodeclass';\nimport { DataType, VariantArrayType } from 'node-opcua/lib/datamodel/variant';\nimport Logger from 'gulplog';\nimport XMLTransformer from '../lib/transform/XMLTransformer';\nimport {\n  findChild, removeChild,\n  removeChildren,\n  createTextNode, createCDataNode, createElement,\n} from '../lib/helpers/xml';\nimport { ReferenceTypeIds } from '../lib/model/Node';\n\n/**\n * Names of the tags to come before <metadata> in output files.\n * @type {Set<string>}\n */\nconst tagsBeforeMetadata = new Set(['defs', 'desc', 'title']);\n\n/**\n * Returns the index at which the <metadata> section should be inserted in the resulting xml.\n * @param {Object[]} elements The elements to look at.\n * @return {number} The insertion index.\n */\nfunction metadataIndex(elements) {\n  let index = 0;\n\n  while (elements.length > index && tagsBeforeMetadata.has(elements[index].name)) {\n    index += 1;\n  }\n\n  return index;\n}\n\n/**\n * Splits read atvise display XML nodes into their SVG and JavaScript sources,\n * alongside with a .json file containing the display's parameters.\n */\nexport default class DisplayTransformer extends XMLTransformer {\n\n  /**\n   * Returns true for all nodes containing atvise displays.\n   * @param {Node} node The node to check.\n   * @return {boolean} `true` for all atvise display nodes.\n   */\n  shouldBeTransformed(node) {\n    return node.hasTypeDefinition('VariableTypes.ATVISE.Display') ||\n      super.shouldBeTransformed(node);\n  }\n\n  /**\n   * Splits any read files containing atvise displays into their SVG and JavaScript sources,\n   * alongside with a json file containing the display's parameters.\n   * @param {Node} node The display node to split.\n   * @param {string} enc The encoding used.\n   * @param {function(err: Error, node: Node)} callback Called with the error that occured\n   * while transforming the display, or the node passed through.\n   */\n  transformFromDB(node, enc, callback) {\n    if (node.arrayType !== VariantArrayType.Scalar) {\n      // FIXME: Instead of throwing we could simply pass the original node to the callback\n      throw new Error('Array of displays not supported');\n    }\n    node.markAsResolved('nodeClass');\n    node.markAsResolved('dataType');\n    node.markAsResolved('arrayType');\n    node.markReferenceAsResolved('HasTypeDefinition', 'VariableTypes.ATVISE.Display');\n\n    this.decodeContents(node, (err, results) => {\n      if (err) {\n        callback(err);\n      } else if (!results) {\n        callback(new Error('Error parsing display: No `svg` tag'));\n      } else {\n        const xml = results;\n        const document = findChild(xml, 'svg');\n\n        if (!document) {\n          callback(new Error('Error parsing display: No `svg` tag'));\n          return;\n        }\n\n        const config = {};\n        const scriptTags = removeChildren(document, 'script');\n        let inlineScript = false;\n\n        // Extract JavaScript\n        if (scriptTags.length) {\n          scriptTags.forEach(script => {\n            if (script.attributes && (script.attributes.src || script.attributes['xlink:href'])) {\n              if (!config.dependencies) {\n                config.dependencies = [];\n              }\n\n              config.dependencies.push(script.attributes.src || script.attributes['xlink:href']);\n            } else {\n              // Warn on multiple inline scripts\n              if (inlineScript) {\n                Logger.warn(`'${node.id.value}' contains multiple inline scripts.`);\n                document.elements.push(inlineScript);\n              }\n              inlineScript = script;\n            }\n          });\n        }\n        if (inlineScript) {\n          const contentNode = inlineScript.elements ? inlineScript.elements[0] : createTextNode();\n          const scriptFile = DisplayTransformer.splitFile(node, '.js');\n          const scriptText = contentNode[contentNode.type] || '';\n\n          scriptFile.value = {\n            dataType: DataType.String,\n            arrayType: VariantArrayType.Scalar,\n            value: scriptText,\n          };\n          this.push(scriptFile);\n        }\n\n        // Extract metadata\n        const metaTag = findChild(document, 'metadata');\n        if (metaTag && metaTag.elements) {\n          // TODO: Warn on multiple metadata tags\n\n          // - Parameters\n          const paramTags = removeChildren(metaTag, 'atv:parameter');\n          if (paramTags.length) {\n            config.parameters = [];\n\n            paramTags.forEach(({ attributes }) => config.parameters.push(attributes));\n          }\n        }\n\n        const configFile = DisplayTransformer.splitFile(node, '.json');\n\n        configFile.value = {\n          dataType: DataType.String,\n          arrayType: VariantArrayType.Scalar,\n          value: JSON.stringify(config, null, '  '),\n        };\n        this.push(configFile);\n\n        const svgFile = DisplayTransformer.splitFile(node, '.svg');\n\n        this.encodeContents(xml, (encodeErr, stringValue) => {\n          if (encodeErr) {\n            callback(encodeErr);\n          } else {\n            svgFile.value = {\n              dataType: DataType.String,\n              arrayType: VariantArrayType.Scalar,\n              value: stringValue,\n            };\n            this.push(svgFile);\n\n            node.renameTo(`${node.name}.display`);\n\n            callback(null, node);\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Creates a display from the collected source nodes.\n   * @param {Node} node The node to map to.\n   * @param {Map<String, Node>} sources The collected files, stored against their extension.\n   * @param {function(err: ?Error, data: Node)} callback Called with the error that occured\n   * while creating the display or the resulting file.\n   */\n  createCombinedFile(node, sources, callback) {\n    /* eslint-disable no-param-reassign */\n\n    // FIXME: Set nodeClass to NodeClass.Variable\n    node.nodeClass = NodeClass.Variable;\n    node.markAsResolved('nodeClass');\n\n    // Set dataType to DataType.XmlElement\n    node.value.dataType = DataType.XmlElement;\n    node.markAsResolved('dataType');\n\n    // Set arrayType to 'Scalar'\n    node.value.arrayType = VariantArrayType.Scalar;\n    node.markAsResolved('arrayType');\n\n    // Set type definition reference to 'VariableTypes.ATVISE.Display'\n    node.setReferences(ReferenceTypeIds.HasTypeDefinition, ['VariableTypes.ATVISE.Display']);\n    node.markAllReferencesAsResolved('HasTypeDefinition');\n\n    /* eslint-enable no-param-reassign */\n\n    node.renameTo(basename(node.name, '.display'));\n\n    const configFile = sources['.json'];\n    let config = {};\n\n    if (configFile) {\n      try {\n        config = JSON.parse(configFile.stringValue);\n      } catch (e) {\n        callback(new Error(`Error parsing JSON in ${configFile.relative}: ${e.message}`));\n        return;\n      }\n    }\n\n    const svgFile = sources['.svg'];\n    if (!svgFile) {\n      callback(new Error(`No display SVG in ${svgFile.path}`));\n      return;\n    }\n\n    const scriptFile = sources['.js'];\n    let inlineScript = '';\n    if (scriptFile) {\n      inlineScript = scriptFile.stringValue;\n    }\n\n    this.decodeContents(svgFile, (err, xml) => {\n      if (err) {\n        callback(err);\n      } else {\n        const result = xml;\n        const svg = findChild(result, 'svg');\n\n        if (!svg) {\n          callback(new Error('Error parsing display SVG: No `svg` tag'));\n          return;\n        }\n\n        // Handle empty svg tag\n        if (!svg.elements) {\n          svg.elements = [];\n        }\n\n        // Insert dependencies\n        if (config.dependencies) {\n          config.dependencies.forEach(src => {\n            svg.elements.push(createElement('script', undefined, { 'xlink:href': src }));\n          });\n        }\n\n        // Insert script\n        // FIXME: Import order is not preserved!\n        if (scriptFile) {\n          svg.elements.push(createElement('script', [createCDataNode(inlineScript)], {\n            type: 'text/ecmascript',\n          }));\n        }\n\n        // Insert metadata\n        // - Parameters\n        if (config.parameters && config.parameters.length > 0) {\n          let metaTag = removeChild(svg, 'metadata');\n\n          if (!metaTag) {\n            metaTag = createElement('metadata');\n          }\n\n          if (!metaTag.elements) {\n            metaTag.elements = [];\n          }\n\n          // Parameters should come before other atv attributes, e.g. `atv:gridconfig`\n          for (let i = config.parameters.length - 1; i >= 0; i--) {\n            metaTag.elements.unshift(\n              createElement('atv:parameter', undefined, config.parameters[i])\n            );\n          }\n\n          // Insert <metadata> as first element in the resulting svg, after <defs>, <desc> and\n          // <title> if defined\n          svg.elements.splice(metadataIndex(svg.elements), 0, metaTag);\n        }\n\n        this.encodeContents(result, (encodeErr, xmlString) => {\n          if (encodeErr) {\n            callback(encodeErr);\n          } else {\n            // eslint-disable-next-line no-param-reassign\n            node.value.value = xmlString;\n\n            callback(null, node);\n          }\n        });\n      }\n    });\n  }\n\n}\n"]}