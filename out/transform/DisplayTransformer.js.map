{"version":3,"sources":["../../src/transform/DisplayTransformer.js"],"names":["DisplayTransformer","XMLTransformer","extension","sourceExtensions","shouldBeTransformed","node","hasTypeDefinition","transformFromDB","context","undefined","arrayType","VariantArrayType","Scalar","Error","xml","decodeContents","document","config","scriptTags","inlineScript","length","forEach","script","attributes","src","dependencies","push","Logger","id","value","startsWith","childNodes","scriptFile","constructor","splitFile","scriptText","dataType","DataType","String","addNode","metaTag","paramTags","parameters","configFile","JSON","stringify","svgFile","encodeContents","combineNodes","sources","parse","stringValue","e","relative","message","nodeId","result","svg","s","type","i"],"mappings":"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","sourcesContent":["import { DataType, VariantArrayType } from 'node-opcua/lib/datamodel/variant';\nimport Logger from 'gulplog';\nimport {\n  findChild,\n  removeChildren,\n  createCDataNode,\n  createElement,\n  appendChild,\n  prependChild,\n  textContent,\n} from 'modify-xml';\nimport XMLTransformer from '../lib/transform/XMLTransformer';\n\n/**\n * Splits read atvise display XML nodes into their SVG and JavaScript sources,\n * alongside with a .json file containing the display's parameters.\n */\nexport default class DisplayTransformer extends XMLTransformer {\n  /**\n   * The extension to add to display container node names when they are pulled.\n   * @type {string}\n   */\n  static get extension() {\n    return '.display';\n  }\n\n  /**\n   * The source file extensions to allow.\n   * @type {string[]}\n   */\n  static get sourceExtensions() {\n    return ['.json', '.svg', '.js'];\n  }\n\n  /**\n   * Returns `true` for all display nodes.\n   * @param {Node} node The node to check.\n   */\n  shouldBeTransformed(node) {\n    return node.hasTypeDefinition('VariableTypes.ATVISE.Display');\n  }\n\n  /**\n   * Splits any read files containing atvise displays into their SVG and JavaScript sources,\n   * alongside with a json file containing the display's parameters.\n   * @param {BrowsedNode} node The node to split.\n   * @param {Object} context The transform context.\n   */\n  async transformFromDB(node, context) {\n    if (!this.shouldBeTransformed(node)) {\n      return undefined;\n    }\n\n    if (node.arrayType !== VariantArrayType.Scalar) {\n      // FIXME: Instead of throwing we could simply pass the original node to the callback\n      throw new Error('Array of displays not supported');\n    }\n\n    const xml = this.decodeContents(node);\n    if (!xml) {\n      throw new Error('Error parsing display');\n    }\n\n    const document = findChild(xml, 'svg');\n    if (!document) {\n      throw new Error('Error parsing display: No `svg` tag');\n    }\n\n    const config = {};\n    const scriptTags = removeChildren(document, 'script');\n    let inlineScript;\n\n    // Extract JavaScript\n    if (scriptTags.length) {\n      scriptTags.forEach(script => {\n        if (script.attributes && (script.attributes.src || script.attributes['xlink:href'])) {\n          if (!config.dependencies) {\n            config.dependencies = [];\n          }\n\n          config.dependencies.push(script.attributes.src || script.attributes['xlink:href']);\n        } else {\n          // Warn on multiple inline scripts\n          if (inlineScript) {\n            Logger[node.id.value.startsWith('SYSTEM.LIBRARY.ATVISE') ? 'debug' : 'warn'](\n              `'${node.id.value}' contains multiple inline scripts.`\n            );\n            document.childNodes.push(inlineScript);\n          }\n          inlineScript = script;\n        }\n      });\n    }\n    if (inlineScript) {\n      const scriptFile = this.constructor.splitFile(node, '.js');\n      const scriptText = textContent(inlineScript);\n\n      scriptFile.value = {\n        dataType: DataType.String,\n        arrayType: VariantArrayType.Scalar,\n        value: scriptText,\n      };\n      context.addNode(scriptFile);\n    }\n\n    // Extract metadata\n    const metaTag = findChild(document, 'metadata');\n    if (metaTag && metaTag.childNodes) {\n      // TODO: Warn on multiple metadata tags\n\n      // - Parameters\n      const paramTags = removeChildren(metaTag, 'atv:parameter');\n      if (paramTags.length) {\n        config.parameters = [];\n\n        paramTags.forEach(({ attributes }) => config.parameters.push(attributes));\n      }\n    }\n\n    const configFile = this.constructor.splitFile(node, '.json');\n    configFile.value = {\n      dataType: DataType.String,\n      arrayType: VariantArrayType.Scalar,\n      value: JSON.stringify(config, null, '  '),\n    };\n    context.addNode(configFile);\n\n    const svgFile = this.constructor.splitFile(node, '.svg');\n    svgFile.value = {\n      dataType: DataType.String,\n      arrayType: VariantArrayType.Scalar,\n      value: this.encodeContents(xml),\n    };\n    context.addNode(svgFile);\n\n    // equals: node.renameTo(`${node.name}.display`);\n    return super.transformFromDB(node);\n  }\n\n  /**\n   * Creates a display from the collected nodes.\n   * @param {BrowsedNode} node The container node.\n   * @param {Map<string, BrowsedNode>} sources The collected files, stored against their\n   * extension.\n   */\n  combineNodes(node, sources) {\n    const configFile = sources['.json'];\n    let config = {};\n\n    if (configFile) {\n      try {\n        config = JSON.parse(configFile.stringValue);\n      } catch (e) {\n        throw new Error(`Error parsing JSON in ${configFile.relative}: ${e.message}`);\n      }\n    }\n\n    const svgFile = sources['.svg'];\n    if (!svgFile) {\n      throw new Error(`No display SVG for ${node.nodeId}`);\n    }\n\n    const scriptFile = sources['.js'];\n    let inlineScript = '';\n    if (scriptFile) {\n      inlineScript = scriptFile.stringValue;\n    }\n\n    const xml = this.decodeContents(svgFile);\n    const result = xml;\n    const svg = findChild(result, 'svg');\n\n    if (!svg) {\n      throw new Error('Error parsing display SVG: No `svg` tag');\n    }\n\n    // Insert dependencies\n    if (config.dependencies) {\n      config.dependencies.forEach(s => {\n        appendChild(svg, createElement('script', undefined, { 'xlink:href': s }));\n      });\n    }\n\n    // Insert script\n    // FIXME: Import order is not preserved!\n    if (scriptFile) {\n      appendChild(\n        svg,\n        createElement('script', [createCDataNode(inlineScript)], {\n          type: 'text/ecmascript',\n        })\n      );\n    }\n\n    // Insert metadata\n    // - Parameters\n    if (config.parameters && config.parameters.length > 0) {\n      let [metaTag] = removeChildren(svg, 'metadata');\n\n      // FIXME: Warn on multiple metadata tags\n\n      if (!metaTag) {\n        metaTag = createElement('metadata');\n      }\n\n      // Parameters should come before other atv attributes, e.g. `atv:gridconfig`\n      for (let i = config.parameters.length - 1; i >= 0; i--) {\n        prependChild(metaTag, createElement('atv:parameter', undefined, config.parameters[i]));\n      }\n\n      // Insert <metadata> as first element in the resulting svg, after <defs>, <desc> and\n      // <title> if defined (nothing to do, they are ordered inside #encodeContents)\n      prependChild(svg, metaTag);\n    }\n\n    // eslint-disable-next-line\n    node.value.value = this.encodeContents(result);\n    return node;\n  }\n}\n"],"file":"DisplayTransformer.js"}