{"version":3,"sources":["../../src/transform/DisplayTransformer.js"],"names":["DisplayTransformer","shouldBeTransformed","file","isDisplay","transformFromDB","enc","callback","decodeContents","err","results","svg","undefined","Error","xml","document","config","tagNotEmpty","script","forEach","$","src","dependencies","push","scriptFile","splitFile","scriptText","_","contents","from","metadata","meta","parameters","param","configFile","JSON","stringify","svgFile","encodeContents","encodeErr","stringValue","createCombinedFile","files","lastFile","parse","toString","e","relative","message","dirname","inlineScript","result","p","type","forceCData","length","display","combineFiles","Object","keys","map","ext","xmlString"],"mappings":"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","file":"DisplayTransformer.js","sourcesContent":["import { Buffer } from 'buffer';\nimport XMLTransformer from '../lib/transform/XMLTransformer';\n\n/**\n * Splits read atvise display XML nodes into their SVG and JavaScript sources,\n * alongside with a .json file containing the display's parameters.\n */\nexport default class DisplayTransformer extends XMLTransformer {\n\n  /**\n   * Returns true for all files containing atvise displays.\n   * @param {AtviseFile} file The file to check.\n   * @return {boolean} `true` for all atvise display files.\n   */\n  shouldBeTransformed(file) {\n    return file.isDisplay;\n  }\n\n  /**\n   * Splits any read files containing atvise displays into their SVG and JavaScript sources,\n   * alongside with a json file containing the display's parameters.\n   * @param {AtviseFile} file The display file to split.\n   * @param {string} enc The encoding used.\n   * @param {function(err: Error, file: AtviseFile)} callback Called with the error that occured\n   * while transforming the display, or the file passed through.\n   */\n  transformFromDB(file, enc, callback) {\n    this.decodeContents(file, (err, results) => {\n      if (err) {\n        callback(err);\n      } else if (!results || results.svg === undefined) {\n        callback(new Error('Error parsing display: No `svg` tag'));\n      } else {\n        const xml = results;\n        const document = results.svg;\n\n        const config = {};\n\n        // Extract JavaScript\n        if (this.tagNotEmpty(document.script)) {\n          document.script.forEach(script => {\n            if (script.$ && (script.$.src || script.$['xlink:href'])) {\n              if (!config.dependencies) {\n                config.dependencies = [];\n              }\n\n              config.dependencies.push(script.$.src || script.$['xlink:href']);\n            } else {\n              // TODO: Warn on multiple inline scripts\n\n              const scriptFile = DisplayTransformer.splitFile(file, '.js');\n              const scriptText = (typeof script === 'string') ?\n                script : script._ || '';\n\n              scriptFile.contents = Buffer.from(scriptText);\n              this.push(scriptFile);\n            }\n          });\n\n          delete xml.svg.script;\n        }\n\n        // Extract metadata\n        if (this.tagNotEmpty(document.metadata)) {\n          // TODO: Warn on multiple metadata tags\n\n          const meta = document.metadata[0];\n\n          // - Parameters\n          if (this.tagNotEmpty(meta['atv:parameter'])) {\n            config.parameters = [];\n            meta['atv:parameter'].forEach(param => config.parameters.push(param.$));\n\n            delete xml.svg.metadata[0]['atv:parameter'];\n          }\n        }\n\n        const configFile = DisplayTransformer.splitFile(file, '.json');\n\n        configFile.contents = Buffer.from(JSON.stringify(config, null, '  '));\n        this.push(configFile);\n\n        const svgFile = DisplayTransformer.splitFile(file, '.svg');\n\n        this.encodeContents(xml, (encodeErr, stringValue) => {\n          if (encodeErr) {\n            callback(encodeErr);\n          } else {\n            svgFile.contents = Buffer.from(stringValue);\n            this.push(svgFile);\n\n            callback(null);\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Creates a display from the collected files.\n   * @param {Map<String, vinyl~File>} files The collected files, stored against their extension.\n   * @param {vinyl~File} lastFile The last file read. *Used for error messages only*.\n   * @param {function(err: ?Error, data: vinyl~File)} callback Called with the error that occured\n   * while creating the display or the resulting file.\n   */\n  createCombinedFile(files, lastFile, callback) {\n    const configFile = files['.json'];\n    let config = {};\n\n    if (configFile) {\n      try {\n        config = JSON.parse(configFile.contents.toString());\n      } catch (e) {\n        callback(new Error(`Error parsing JSON in ${configFile.relative}: ${e.message}`));\n        return;\n      }\n    }\n\n    const svgFile = files['.svg'];\n    if (!svgFile) {\n      callback(new Error(`No display SVG in ${lastFile.dirname}`));\n      return;\n    }\n\n    const scriptFile = files['.js'];\n    let inlineScript = '';\n    if (scriptFile) {\n      inlineScript = scriptFile.contents.toString();\n    }\n\n    this.decodeContents(svgFile, (err, xml) => {\n      if (err) {\n        callback(err);\n      } else if (!xml || xml.svg === undefined) {\n        callback(new Error('Error parsing display SVG: No `svg` tag'));\n      } else {\n        const result = xml;\n\n        // Handle empty svg tag\n        if (typeof result.svg === 'string') {\n          result.svg = {};\n        }\n\n        // Insert dependencies\n        result.svg.script = [];\n        if (config.dependencies) {\n          config.dependencies.forEach(p => result.svg.script.push({\n            $: { 'xlink:href': p },\n          }));\n        }\n\n        // Insert script\n        // FIXME: Import order is not preserved!\n        if (scriptFile) {\n          result.svg.script.push({\n            $: { type: 'text/ecmascript' },\n            _: XMLTransformer.forceCData(inlineScript),\n          });\n        }\n\n        // Insert metadata\n        // - Parameters\n        if (config.parameters && config.parameters.length > 0) {\n          if (!result.svg.metadata || !result.svg.metadata[0]) {\n            result.svg.metadata = [{}];\n          }\n          if (!result.svg.metadata[0]['atv:parameter']) {\n            result.svg.metadata[0]['atv:parameter'] = [];\n          }\n\n          // FIXME: Parameters should come before `atv:gridconfig` and `atv:snapconfig`\n          config.parameters\n            .forEach(param => result.svg.metadata[0]['atv:parameter'].push({ $: param }));\n        }\n\n        const display = DisplayTransformer.combineFiles(\n          Object.keys(files).map(ext => files[ext]),\n          '.xml'\n        );\n\n        this.encodeContents(result, (encodeErr, xmlString) => {\n          if (encodeErr) {\n            callback(encodeErr);\n          } else {\n            display.contents = Buffer.from(xmlString);\n\n            callback(null, display);\n          }\n        });\n      }\n    });\n  }\n\n}\n"]}