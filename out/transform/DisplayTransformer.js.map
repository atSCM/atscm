{"version":3,"sources":["../../src/transform/DisplayTransformer.js"],"names":["DisplayTransformer","shouldBeTransformed","file","isDisplay","transformFromDB","enc","callback","decodeContents","err","results","Error","xml","document","findChild","config","scriptTags","removeChildren","length","forEach","script","attributes","src","dependencies","push","scriptContentNode","elements","type","text","scriptFile","splitFile","scriptText","contents","from","metaTag","paramTags","parameters","configFile","JSON","stringify","svgFile","encodeContents","encodeErr","stringValue","createCombinedFile","files","lastFile","parse","toString","e","relative","message","dirname","inlineScript","result","svg","name","cdata","removeChild","i","unshift","display","combineFiles","Object","keys","map","ext","xmlString"],"mappings":"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","file":"DisplayTransformer.js","sourcesContent":["import { Buffer } from 'buffer';\nimport XMLTransformer from '../lib/transform/XMLTransformer';\n\n/**\n * Splits read atvise display XML nodes into their SVG and JavaScript sources,\n * alongside with a .json file containing the display's parameters.\n */\nexport default class DisplayTransformer extends XMLTransformer {\n\n  /**\n   * Returns true for all files containing atvise displays.\n   * @param {AtviseFile} file The file to check.\n   * @return {boolean} `true` for all atvise display files.\n   */\n  shouldBeTransformed(file) {\n    return file.isDisplay;\n  }\n\n  /**\n   * Splits any read files containing atvise displays into their SVG and JavaScript sources,\n   * alongside with a json file containing the display's parameters.\n   * @param {AtviseFile} file The display file to split.\n   * @param {string} enc The encoding used.\n   * @param {function(err: Error, file: AtviseFile)} callback Called with the error that occured\n   * while transforming the display, or the file passed through.\n   */\n  transformFromDB(file, enc, callback) {\n    this.decodeContents(file, (err, results) => {\n      if (err) {\n        callback(err);\n      } else if (!results) {\n        callback(new Error('Error parsing display: No `svg` tag'));\n      } else {\n        const xml = results;\n        const document = this.findChild(xml, 'svg');\n\n        if (!document) {\n          callback(new Error('Error parsing display: No `svg` tag'));\n          return;\n        }\n\n        const config = {};\n        const scriptTags = this.removeChildren(document, 'script');\n\n        // Extract JavaScript\n        if (scriptTags.length) {\n          scriptTags.forEach(script => {\n            if (script.attributes && (script.attributes.src || script.attributes['xlink:href'])) {\n              if (!config.dependencies) {\n                config.dependencies = [];\n              }\n\n              config.dependencies.push(script.attributes.src || script.attributes['xlink:href']);\n            } else {\n              // TODO: Warn on multiple inline scripts\n\n              const scriptContentNode = script.elements ?\n                script.elements[0] :\n                { type: 'text', text: '' };\n\n              const scriptFile = DisplayTransformer.splitFile(file, '.js');\n\n              const scriptText = scriptContentNode[scriptContentNode.type] || '';\n\n              scriptFile.contents = Buffer.from(scriptText);\n              this.push(scriptFile);\n            }\n          });\n        }\n\n        // Extract metadata\n        const metaTag = this.findChild(document, 'metadata');\n        if (metaTag && metaTag.elements) {\n          // TODO: Warn on multiple metadata tags\n\n          // - Parameters\n          const paramTags = this.removeChildren(metaTag, 'atv:parameter');\n          if (paramTags.length) {\n            config.parameters = [];\n\n            paramTags.forEach(({ attributes }) => config.parameters.push(attributes));\n          }\n        }\n\n        const configFile = DisplayTransformer.splitFile(file, '.json');\n\n        configFile.contents = Buffer.from(JSON.stringify(config, null, '  '));\n        this.push(configFile);\n\n        const svgFile = DisplayTransformer.splitFile(file, '.svg');\n\n        this.encodeContents(xml, (encodeErr, stringValue) => {\n          if (encodeErr) {\n            callback(encodeErr);\n          } else {\n            svgFile.contents = Buffer.from(stringValue);\n            this.push(svgFile);\n\n            callback(null);\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Creates a display from the collected files.\n   * @param {Map<String, vinyl~File>} files The collected files, stored against their extension.\n   * @param {vinyl~File} lastFile The last file read. *Used for error messages only*.\n   * @param {function(err: ?Error, data: vinyl~File)} callback Called with the error that occured\n   * while creating the display or the resulting file.\n   */\n  createCombinedFile(files, lastFile, callback) {\n    const configFile = files['.json'];\n    let config = {};\n\n    if (configFile) {\n      try {\n        config = JSON.parse(configFile.contents.toString());\n      } catch (e) {\n        callback(new Error(`Error parsing JSON in ${configFile.relative}: ${e.message}`));\n        return;\n      }\n    }\n\n    const svgFile = files['.svg'];\n    if (!svgFile) {\n      callback(new Error(`No display SVG in ${lastFile.dirname}`));\n      return;\n    }\n\n    const scriptFile = files['.js'];\n    let inlineScript = '';\n    if (scriptFile) {\n      inlineScript = scriptFile.contents.toString();\n    }\n\n    this.decodeContents(svgFile, (err, xml) => {\n      if (err) {\n        callback(err);\n      } else {\n        const result = xml;\n        const svg = this.findChild(result, 'svg');\n\n        if (!svg) {\n          callback(new Error('Error parsing display SVG: No `svg` tag'));\n          return;\n        }\n\n        // Handle empty svg tag\n        if (!svg.elements) {\n          svg.elements = [];\n        }\n\n        // Insert dependencies\n        if (config.dependencies) {\n          config.dependencies.forEach(src => {\n            svg.elements.push({\n              type: 'element',\n              name: 'script',\n              attributes: { 'xlink:href': src },\n            });\n          });\n        }\n\n        // Insert script\n        // FIXME: Import order is not preserved!\n        if (scriptFile) {\n          svg.elements.push({\n            type: 'element',\n            name: 'script',\n            attributes: { type: 'text/ecmascript' },\n            elements: [\n              {\n                type: 'cdata',\n                cdata: inlineScript,\n              },\n            ],\n          });\n        }\n\n        // Insert metadata\n        // - Parameters\n        if (config.parameters && config.parameters.length > 0) {\n          let metaTag = this.removeChild(svg, 'metadata');\n\n          if (!metaTag) {\n            metaTag = { type: 'element', name: 'metadata' };\n          }\n\n          if (!metaTag.elements) {\n            metaTag.elements = [];\n          }\n\n          // Parameters should come before other atv attributes, e.g. `atv:gridconfig`\n          for (let i = config.parameters.length - 1; i >= 0; i--) {\n            metaTag.elements.unshift({\n              type: 'element',\n              name: 'atv:parameter',\n              attributes: config.parameters[i],\n            });\n          }\n\n          // Insert <metadata> as first element in the resulting svg\n          svg.elements.unshift(metaTag);\n        }\n\n        const display = DisplayTransformer.combineFiles(\n          Object.keys(files).map(ext => files[ext]),\n          '.xml'\n        );\n\n        this.encodeContents(result, (encodeErr, xmlString) => {\n          if (encodeErr) {\n            callback(encodeErr);\n          } else {\n            display.contents = Buffer.from(xmlString);\n\n            callback(null, display);\n          }\n        });\n      }\n    });\n  }\n\n}\n"]}