{"version":3,"sources":["../../src/transform/Mapping.js"],"names":["MappingTransformer","transformFromDB","mappingItem","encoding","callback","file","fromMappingItem","e","error","nodeId","toString","message","debug","transformFromFilesystem","isDirectory","atFile","cwd","base","path","contents"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;;;AAGe,MAAMA,kBAAN,+BAA6C;;AAE1D;;;;;;;AAOAC,kBAAgBC,WAAhB,EAA6BC,QAA7B,EAAuCC,QAAvC,EAAiD;AAC/C,QAAI;AACF,YAAMC,OAAO,qBAAWC,eAAX,CAA2BJ,WAA3B,CAAb;;AAEAE,eAAS,IAAT,EAAeC,IAAf;AACD,KAJD,CAIE,OAAOE,CAAP,EAAU;AACV,wBAAOC,KAAP,CAAc,iBAAgBN,YAAYO,MAAZ,CAAmBC,QAAnB,EAA8B,KAAIH,EAAEI,OAAQ,EAA1E;AACA,wBAAOC,KAAP,CAAaL,CAAb;AACAH,eAAS,IAAT;AACD;AACF;;AAED;;;;;;;AAOAS,0BAAwBR,IAAxB,EAA8BF,QAA9B,EAAwCC,QAAxC,EAAkD;AAChD,QAAIC,KAAKS,WAAL,EAAJ,EAAwB;AACtBV,eAAS,IAAT;AACD,KAFD,MAEO;AACL,YAAMW,SAAS,yBAAe;AAC5BC,aAAKX,KAAKW,GADkB;AAE5BC,cAAMZ,KAAKY,IAFiB;AAG5BC,cAAMb,KAAKa,IAHiB;AAI5BC,kBAAUd,KAAKc;AAJa,OAAf,CAAf;;AAOAf,eAAS,IAAT,EAAeW,MAAf;AACD;AACF;;AAzCyD;kBAAvCf,kB","file":"Mapping.js","sourcesContent":["import Logger from 'gulplog';\nimport Transformer from '../lib/transform/Transformer';\nimport AtviseFile from '../lib/mapping/AtviseFile';\n\n/**\n * A Transformer that maps {@link ReadStream.ReadResult}s to {@link AtviseFile}s.\n */\nexport default class MappingTransformer extends Transformer {\n\n  /**\n   * Writes an {@link AtviseFile} for each given {@link MappingItem}.\n   * @param {MappingItem} mappingItem The mapping item to create the file for.\n   * @param {String} encoding The encoding used.\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Called with the error that occurred\n   * while transforming the read result or the resulting file.\n   */\n  transformFromDB(mappingItem, encoding, callback) {\n    try {\n      const file = AtviseFile.fromMappingItem(mappingItem);\n\n      callback(null, file);\n    } catch (e) {\n      Logger.error(`Unable to map ${mappingItem.nodeId.toString()}: ${e.message}`);\n      Logger.debug(e);\n      callback(null);\n    }\n  }\n\n  /**\n   * Writes an {@link AtviseFile} for each {@link vinyl~File} read.\n   * @param {vinyl~File} file The raw file.\n   * @param {String} encoding The encoding used.\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Called with the error that occurred\n   * while transforming the read result or the resulting file.\n   */\n  transformFromFilesystem(file, encoding, callback) {\n    if (file.isDirectory()) {\n      callback(null);\n    } else {\n      const atFile = new AtviseFile({\n        cwd: file.cwd,\n        base: file.base,\n        path: file.path,\n        contents: file.contents,\n      });\n\n      callback(null, atFile);\n    }\n  }\n\n}\n"]}