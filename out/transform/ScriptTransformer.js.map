{"version":3,"sources":["../../src/transform/ScriptTransformer.js"],"names":["AtviseScriptTransformer","XMLTransformer","sourceExtensions","processMetadata","document","config","metaTag","elements","forEach","child","type","name","icon","Object","assign","content","attributes","visible","Boolean","parseInt","title","description","metadata","value","Array","isArray","push","includes","Logger","debug","processParameters","paramTags","length","undefined","map","param","relative","target","index","tagName","parsedIndex","namespaceIndex","isNaN","transformFromDB","node","context","shouldBeTransformed","arrayType","VariantArrayType","Scalar","Error","xml","decodeContents","nodeId","parameters","configFile","constructor","splitFile","dataType","DataType","String","JSON","stringify","addNode","codeNode","scriptFile","combineNodes","sources","parse","stringValue","e","message","code","result","meta","isQuickDynamic","entries","v","targetElements","encodeContents","ServerscriptTransformer","extension","isVariable","isScript","QuickDynamicTransformer"],"mappings":"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","sourcesContent":["import Logger from 'gulplog';\nimport { DataType, VariantArrayType } from 'node-opcua/lib/datamodel/variant';\nimport XMLTransformer from '../lib/transform/XMLTransformer';\nimport {\n  findChild, findChildren,\n  textContent,\n  createElement, createTextNode, createCDataNode,\n} from '../lib/helpers/xml';\n\n/**\n * A transformer that splits atvise scripts and quick dynamics into a code file and a .json file\n * containing parameters and metadata.\n */\nexport class AtviseScriptTransformer extends XMLTransformer {\n\n  /**\n   * The source file extensions to allow.\n   * @type {string[]}\n   */\n  static get sourceExtensions() {\n    return ['.json', '.js'];\n  }\n\n  /**\n   * Extracts a script's metadata.\n   * @param {Object} document The parsed xml document to process.\n   * @return {Object} The metadata found.\n   */\n  processMetadata(document) {\n    const config = {};\n\n    const metaTag = findChild(document, 'metadata');\n    if (!metaTag || !metaTag.elements) { return config; }\n\n    metaTag.elements.forEach(child => {\n      if (child.type !== 'element') { return; }\n\n      switch (child.name) {\n        case 'icon':\n          config.icon = Object.assign({\n            content: textContent(child) || '',\n          }, child.attributes);\n          break;\n        case 'visible':\n          config.visible = Boolean(parseInt(textContent(child), 10));\n          break;\n        case 'title':\n          config.title = textContent(child);\n          break;\n        case 'description':\n          config.description = textContent(child);\n          break;\n        default: {\n          if (!config.metadata) { config.metadata = {}; }\n\n          const value = textContent(child);\n\n          if (config.metadata[child.name]) {\n            if (!Array.isArray(config.metadata[child.name])) {\n              config.metadata[child.name] = [config.metadata[child.name]];\n            }\n\n            config.metadata[child.name].push(value);\n          } else {\n            config.metadata[child.name] = textContent(child);\n          }\n\n          if (![\n            'longrunning',\n          ].includes(child.name)) {\n            Logger.debug(`Generic metadata element '${child.name}'`); // FIXME:  at ${node.nodeId}\n          }\n          break;\n        }\n      }\n    });\n\n    return config;\n  }\n\n  /**\n   * Extracts a script's parameters.\n   * @param {Object} document The parsed xml document to process.\n   * @return {Object[]} The parameters found.\n   */\n  processParameters(document) {\n    const paramTags = findChildren(document, 'parameter');\n    if (!paramTags.length) { return undefined; }\n\n    return paramTags.map(({ attributes, elements }) => {\n      const param = Object.assign({}, attributes);\n\n      // Handle relative parameter targets\n      if (attributes.relative === 'true') {\n        param.target = {};\n\n        const target = findChild(elements[0],\n          ['Elements', 'RelativePathElement', 'TargetName']);\n\n        if (target) {\n          const [index, name] = ['NamespaceIndex', 'Name']\n            .map(tagName => textContent(findChild(target, tagName)));\n\n          const parsedIndex = parseInt(index, 10);\n\n          param.target = { namespaceIndex: isNaN(parsedIndex) ? 1 : parsedIndex, name };\n        }\n      }\n\n      return param;\n    });\n  }\n\n  /**\n   * Splits a node into multiple source nodes.\n   * @param {Node} node A server node.\n   * @param {Object} context The current transform context.\n   */\n  async transformFromDB(node, context) {\n    if (!this.shouldBeTransformed(node)) { return undefined; }\n\n    if (node.arrayType !== VariantArrayType.Scalar) {\n      // FIXME: Instead of throwing we could simply pass the original node to the callback\n      throw new Error('Array of scripts not supported');\n    }\n\n    const xml = this.decodeContents(node);\n    if (!xml) { throw new Error('Error parsing script'); }\n\n    const document = findChild(xml, 'script');\n    if (!document) {\n      throw new Error(`Empty document at ${node.nodeId}`);\n    }\n\n    // Extract metadata and parameters\n    const config = {\n      ...this.processMetadata(document),\n      parameters: this.processParameters(document),\n    };\n\n    // Write config file\n    const configFile = this.constructor.splitFile(node, '.json');\n    configFile.value = {\n      dataType: DataType.String,\n      arrayType: VariantArrayType.Scalar,\n      value: JSON.stringify(config, null, '  '),\n    };\n    context.addNode(configFile);\n\n    // Write JavaScript file\n    const codeNode = findChild(document, 'code');\n    const scriptFile = this.constructor.splitFile(node, '.js');\n    scriptFile.value = {\n      dataType: DataType.String,\n      arrayType: VariantArrayType.Scalar,\n      value: textContent(codeNode) || '',\n    };\n    context.addNode(scriptFile);\n\n    return super.transformFromDB(node);\n  }\n\n  /**\n   * Inlines the passed source nodes to the given container node.\n   * @param {Node} node The container node.\n   * @param {{ [ext: string]: Node }} sources The source nodes to inline.\n   */\n  combineNodes(node, sources) {\n    const configFile = sources['.json'];\n    let config = {};\n\n    if (configFile) {\n      try {\n        config = JSON.parse(configFile.stringValue);\n      } catch (e) {\n        throw new Error(`Error parsing JSON in ${configFile.relative}: ${e.message}`);\n      }\n    }\n\n    const scriptFile = sources['.js'];\n    let code = '';\n\n    if (scriptFile) {\n      code = scriptFile.stringValue;\n    }\n\n    const document = createElement('script', []);\n\n    const result = {\n      elements: [\n        document,\n      ],\n    };\n\n    // Insert metadata\n    const meta = [];\n\n    if (node.isQuickDynamic) {\n      // - Icon\n      if (config.icon) {\n        const icon = config.icon.content;\n        delete config.icon.content;\n\n        meta.push(createElement('icon', [createTextNode(icon)], config.icon));\n      }\n\n      // - Other fields\n      if (config.visible !== undefined) {\n        meta.push(createElement('visible', [createTextNode(`${config.visible ? 1 : 0}`)]));\n      }\n\n      if (config.title !== undefined) {\n        meta.push(createElement('title', [createTextNode(config.title)]));\n      }\n\n      if (config.description !== undefined) {\n        meta.push(createElement('description', [createTextNode(config.description)]));\n      }\n    }\n\n    // - Additional fields\n    if (config.metadata !== undefined) {\n      Object.entries(config.metadata)\n        .forEach(([name, value]) => {\n          (Array.isArray(value) ? value : [value])\n            .forEach(v => meta.push(createElement(name, [createTextNode(v)])));\n        });\n    }\n\n    if (node.isQuickDynamic || meta.length) {\n      document.elements.push(createElement('metadata', meta));\n    }\n\n    // Insert parameters\n    if (config.parameters) {\n      config.parameters.forEach(attributes => {\n        let elements;\n\n        // Handle relative parameter targets\n        if (attributes.relative === 'true' && attributes.target) {\n          const { namespaceIndex, name } = attributes.target;\n          const targetElements = createElement('Elements');\n\n          elements = [createElement('RelativePath', [targetElements])];\n\n          if (name !== undefined) {\n            targetElements.elements = [\n              createElement('RelativePathElement', [\n                createElement('TargetName', [\n                  createElement('NamespaceIndex', [createTextNode(`${namespaceIndex}`)]),\n                  createElement('Name', [createTextNode(`${name}`)]),\n                ]),\n              ]),\n            ];\n          }\n\n          // eslint-disable-next-line no-param-reassign\n          delete attributes.target;\n        }\n\n        document.elements.push(createElement('parameter', elements, attributes));\n      });\n    }\n\n    // Insert script code\n    document.elements.push(createElement('code', [createCDataNode(code)]));\n\n    // eslint-disable-next-line no-param-reassign\n    node.value.value = this.encodeContents(result);\n  }\n\n}\n\n/**\n * A transformer that splits atvise server scripts into multiple files.\n */\nexport class ServerscriptTransformer extends AtviseScriptTransformer {\n\n  /** The container's extension. */\n  static get extension() {\n    return '.script';\n  }\n\n  /**\n   * Returns `true` for all script nodes.\n   * @param {Node} node The node to check.\n   * @return {boolean} If the node is a server script.\n   */\n  shouldBeTransformed(node) {\n    return node.isVariable && node.isScript;\n  }\n\n}\n\n/**\n * A transformer that splits atvise quickdynamics into multiple files.\n */\nexport class QuickDynamicTransformer extends AtviseScriptTransformer {\n\n  /** The container's extension. */\n  static get extension() {\n    return '.qd';\n  }\n\n  /**\n   * Returns `true` for all nodes containing quick dynamics.\n   * @param {Node} node The node to check.\n   * @return {boolean} If the node is a quick dynamic.\n   */\n  shouldBeTransformed(node) {\n    return node.isVariable && node.isQuickDynamic;\n  }\n\n}\n"],"file":"ScriptTransformer.js"}