{"version":3,"sources":["../../src/transform/ScriptTransformer.js"],"names":["ScriptTransformer","shouldBeTransformed","file","isScript","isQuickDynamic","transformFromDB","enc","callback","decodeContents","err","xmlObj","error","nodeId","children","length","name","configFile","splitFile","scriptFile","config","parameters","metadata","find","code","meta","warn","forEach","tag","push","attrs","value","text","param","paramObj","relative","targetName","nameSpaceIndex","eq","nodePath","relPath","toString","contents","Buffer","from","JSON","stringify","createCombinedFile","files","lastFile","script","createTag","combinedFile","combineFiles","Object","keys","map","ext","parse","e","append","createRelPathTag","createCData","encodeContents","createNodeSet","encodeErr","xmlString"],"mappings":"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","file":"ScriptTransformer.js","sourcesContent":["import Logger from 'gulplog';\nimport sortJSON from 'sort-json';\nimport XMLTransformer from '../lib/transform/XMLTransformer';\n\n/**\n * A transformer that splits atvise scripts and quick dynamics into a code file and a .json file\n * containing parameters and metadata.\n */\nexport default class ScriptTransformer extends XMLTransformer {\n\n  /**\n   * Returns `true` for all files containing script code or quick dynamics.\n   * @param {AtviseFile} file The file to check.\n   * @return {boolean} `true` for all files containing script code or quick dynamics.\n   */\n  shouldBeTransformed(file) {\n    return file.isScript || file.isQuickDynamic;\n  }\n\n  /**\n   * Splits any read files containing scripts or quick dynamics into their JavaScript sources,\n   * alongside with a json file containing parameters and metadata.\n   * @param {AtviseFile} file The script file to split.\n   * @param {string} enc The encoding used.\n   * @param {function(err: Error, file: AtviseFile)} callback Called with the error that occured\n   * while transforming the script, or the file passed through.\n   */\n  transformFromDB(file, enc, callback) {\n    this.decodeContents(file, (err, xmlObj) => {\n      if (err) {\n        Logger.error(`Display ${file.nodeId}: Error parsing script content.`,\n          'Check if script content is empty or broken');\n        callback(null);\n      } else if (xmlObj.children.length === 0 || xmlObj.children[0].name !== 'script') {\n        Logger.error(`Script ${file.nodeId}: Can not decode script. Missing 'script' tag`);\n        callback(null);\n      } else {\n        const configFile = ScriptTransformer.splitFile(file, '.json');\n        const scriptFile = ScriptTransformer.splitFile(file, '.js');\n\n        const config = { parameters: [] };\n\n        // Filter for metadata tags in script\n        const metadata = xmlObj.find('*/metadata').children;\n\n        // Filter for parameters in script\n        const parameters = xmlObj.find('*/parameter').children;\n\n        // Filter for code tags\n        let code = xmlObj.find('*/code').children;\n\n\n        // Extract metadata\n        if (metadata.length > 0) {\n          const meta = metadata[0];\n          config.metadata = [];\n\n          if (metadata.length > 1) {\n            Logger.warn(`Script ${file.nodeId}: `,\n              'atscm only supports one metadata tag per script');\n          }\n\n          meta.forEach(tag => config.metadata\n            .push({ name: tag.name, attrs: tag.attrs, value: tag.text() }));\n        }\n\n        // Extract Parameters\n        if (parameters.length > 0) {\n          parameters.forEach(param => {\n            const paramObj = param.attrs;\n\n            if (paramObj.relative === 'true') {\n              const targetName = param.find('*/*/*/TargetName');\n\n              if (targetName.children.length > 0) {\n                const nameSpaceIndex = targetName.find('*/NamespaceIndex').eq(0);\n                const nodePath = targetName.find('*/Name').eq(0);\n\n                // add relative path information\n                paramObj.relPath = {\n                  nameSpaceIndex: nameSpaceIndex.text(),\n                  nodePath: nodePath.text(),\n                };\n              }\n            }\n            config.parameters.push(paramObj);\n          });\n        }\n\n\n        if (code.length === 0) {\n          Logger.warn(`Script ${file.nodeId}: No script content defined`);\n        }\n\n        // Extract JavaScript\n        code = code.toString();\n\n        // Write config and script file\n        configFile.contents = Buffer.from(\n          JSON.stringify(sortJSON(config), null, '  ')\n        );\n        scriptFile.contents = Buffer.from(code);\n\n        this.push(configFile);\n        this.push(scriptFile);\n        callback(null);\n      }\n    });\n  }\n\n  /**\n   * Creates a script from the collected files.\n   * @param {Map<String, AtviseFile>} files The collected files, stored against their extension.\n   * @param {AtviseFile} lastFile The last file read. *Used for error messages only*.\n   * @param {function(err: ?Error, data: vinyl~File)} callback Called with the error that occured\n   * while creating the script or the resulting file.\n   */\n  createCombinedFile(files, lastFile, callback) {\n    const configFile = files['.json'];\n    const scriptFile = files['.js'];\n\n    let config = {};\n    const xmlObj = {};\n\n    const script = this.createTag('script', {}, xmlObj);\n    const metadata = this.createTag('metadata', {}, script);\n    const code = this.createTag('code', {}, script);\n    const combinedFile = ScriptTransformer.combineFiles(\n      Object.keys(files).map(ext => files[ext]),\n      '.xml'\n    );\n\n    if (configFile) {\n      try {\n        config = JSON.parse(configFile.contents.toString());\n      } catch (e) {\n        Logger.warn(`Script ${configFile.nodeId}: Error paring config file`);\n        callback(null);\n        return;\n      }\n    }\n\n    // Add metadata to script\n    if (config.metadata) {\n      config.metadata.forEach(tag => metadata.append(\n        this.createTag(tag.name, tag.attrs, metadata, tag.value)\n      ));\n      script.append(metadata);\n    }\n\n    // Add parameters to script\n    if (config.parameters) {\n      config.parameters.forEach(param => {\n        let relPath;\n\n        if (param.relative === 'true') {\n          relPath = this.createRelPathTag(param.relPath);\n          // eslint-disable-next-line no-param-reassign\n          delete param.relPath;\n        }\n\n        script.append(this.createTag('parameter', param, script, relPath));\n      });\n    }\n\n    // Add CData content to script\n    if (scriptFile) {\n      code.append(this.createCData(scriptFile.contents.toString()));\n      script.append(code);\n    }\n\n\n    this.encodeContents(this.createNodeSet(script), (encodeErr, xmlString) => {\n      if (encodeErr) {\n        Logger.error(`Script ${combinedFile.nodeId}: Could not encode script file`);\n        callback(null);\n      } else {\n        combinedFile.contents = Buffer.from(xmlString);\n\n        callback(null, combinedFile);\n      }\n    });\n  }\n\n}\n"]}