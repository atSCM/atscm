{"version":3,"sources":["../../src/transform/ScriptTransformer.js"],"names":["ScriptTransformer","XMLTransformer","shouldBeTransformed","node","isVariable","isScript","isQuickDynamic","transformFromDB","enc","callback","decodeContents","err","results","document","Logger","warn","nodeId","config","metaTag","elements","forEach","child","type","name","icon","Object","assign","content","attributes","visible","Boolean","parseInt","title","description","metadata","value","Array","isArray","push","includes","debug","paramTags","length","parameters","param","relative","target","index","map","tagName","parsedIndex","namespaceIndex","isNaN","codeNode","code","configFile","splitFile","dataType","DataType","String","arrayType","VariantArrayType","Scalar","JSON","stringify","scriptFile","renameTo","createCombinedFile","sources","parse","stringValue","e","Error","message","result","meta","undefined","entries","v","targetElements","encodeContents","encodeErr","xmlString"],"mappings":"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","sourcesContent":["import { basename } from 'path';\nimport Logger from 'gulplog';\nimport { DataType, VariantArrayType } from 'node-opcua/lib/datamodel/variant';\nimport XMLTransformer from '../lib/transform/XMLTransformer';\nimport {\n  findChild, findChildren,\n  textContent,\n  createElement, createTextNode, createCDataNode,\n} from '../lib/helpers/xml';\n\n/**\n * A transformer that splits atvise scripts and quick dynamics into a code file and a .json file\n * containing parameters and metadata.\n */\nexport default class ScriptTransformer extends XMLTransformer {\n\n  /**\n   * Returns `true` for all files containing script code or quick dynamics.\n   * @param {Node} node The file to check.\n   * @return {boolean} `true` for all files containing script code or quick dynamics.\n   */\n  shouldBeTransformed(node) {\n    return (node.isVariable && (node.isScript || node.isQuickDynamic)) ||\n      super.shouldBeTransformed(node);\n  }\n\n  /**\n   * Splits any read nodes containing scripts or quick dynamics into their JavaScript sources,\n   * alongside with a json file containing parameters and metadata.\n   * @param {Node} node The script node to split.\n   * @param {string} enc The encoding used.\n   * @param {function(err: Error, node: Node)} callback Called with the error that occured\n   * while transforming the script, or the node passed through.\n   */\n  transformFromDB(node, enc, callback) {\n    this.decodeContents(node, (err, results) => {\n      if (err) {\n        callback(err);\n      } else {\n        const document = results && findChild(results, 'script');\n\n        if (!document) {\n          Logger.warn(`Empty document at ${node.nodeId}`);\n        }\n\n        const config = {};\n\n        // Extract metadata\n        const metaTag = findChild(document, 'metadata');\n        if (metaTag && metaTag.elements) {\n          // TODO: Warn on multiple metadata tags\n          metaTag.elements.forEach(child => {\n            if (child.type === 'element') {\n              if (child.name === 'icon') { // - Icon\n                config.icon = Object.assign({\n                  content: textContent(child) || '',\n                }, child.attributes);\n              } else if (child.name === 'visible') { // - Visible\n                config.visible = Boolean(parseInt(textContent(child), 10));\n              } else if (child.name === 'title') {\n                config.title = textContent(child);\n              } else if (child.name === 'description') {\n                config.description = textContent(child);\n              } else {\n                if (!config.metadata) {\n                  config.metadata = {};\n                }\n\n                const value = textContent(child);\n\n                if (config.metadata[child.name]) {\n                  if (!Array.isArray(config.metadata[child.name])) {\n                    config.metadata[child.name] = [config.metadata[child.name]];\n                  }\n\n                  config.metadata[child.name].push(value);\n                } else {\n                  config.metadata[child.name] = textContent(child);\n                }\n\n                if (![\n                  'longrunning',\n                ].includes(child.name)) {\n                  Logger.debug(`Generic metadata element '${child.name}' at ${node.nodeId}`);\n                }\n              }\n            }\n          });\n        }\n\n        // Extract Parameters\n        const paramTags = findChildren(document, 'parameter');\n        if (paramTags.length) {\n          config.parameters = [];\n          paramTags.forEach(({ attributes, elements }) => {\n            const param = Object.assign({}, attributes);\n\n            // Handle relative parameter targets\n            if (attributes.relative === 'true') {\n              param.target = {};\n\n              const target = findChild(elements[0],\n                ['Elements', 'RelativePathElement', 'TargetName']);\n\n              if (target) {\n                const [index, name] = ['NamespaceIndex', 'Name']\n                  .map(tagName => textContent(findChild(target, tagName)));\n\n                const parsedIndex = parseInt(index, 10);\n\n                param.target = { namespaceIndex: isNaN(parsedIndex) ? 1 : parsedIndex, name };\n              }\n            }\n\n            config.parameters.push(param);\n          });\n        }\n\n        // Extract JavaScript\n        const codeNode = findChild(document, 'code');\n        const code = textContent(codeNode) || '';\n\n        // Write config file\n        const configFile = ScriptTransformer.splitFile(node, '.json');\n        configFile.value = {\n          dataType: DataType.String,\n          arrayType: VariantArrayType.Scalar,\n          value: JSON.stringify(config, null, '  '),\n        };\n\n        this.push(configFile);\n\n        // Write script file\n        const scriptFile = ScriptTransformer.splitFile(node, '.js');\n        scriptFile.value = {\n          dataType: DataType.String,\n          arrayType: VariantArrayType.Scalar,\n          value: code,\n        };\n\n        this.push(scriptFile);\n\n        node.renameTo(`${node.name}.${node.isQuickDynamic ? 'qd' : 'script'}`);\n\n        callback(null, node);\n      }\n    });\n  }\n\n  /**\n   * Creates a script from the collected files.\n   * @param {Node} node The last file read. *Used for error messages only*.\n   * @param {Map<string, Node>} sources The collected source nodes, stored against their extension.\n   * @param {function(err: ?Error, data: Node)} callback Called with the error that occured\n   * while creating the script or the resulting file.\n   */\n  createCombinedFile(node, sources, callback) {\n    node.renameTo(basename(node.name, node.isQuickDynamic ? '.qd' : '.script'));\n\n    const configFile = sources['.json'];\n    let config = {};\n\n    if (configFile) {\n      try {\n        config = JSON.parse(configFile.stringValue);\n      } catch (e) {\n        callback(new Error(`Error parsing JSON in ${configFile.relative}: ${e.message}`));\n        return;\n      }\n    }\n\n    const scriptFile = sources['.js'];\n    let code = '';\n\n    if (scriptFile) {\n      code = scriptFile.stringValue;\n    }\n\n    const document = createElement('script', []);\n\n    const result = {\n      elements: [\n        document,\n      ],\n    };\n\n    // Insert metadata\n    const meta = [];\n\n    if (node.isQuickDynamic) {\n      // - Icon\n      if (config.icon) {\n        const icon = config.icon.content;\n        delete config.icon.content;\n\n        meta.push(createElement('icon', [createTextNode(icon)], config.icon));\n      }\n\n      // - Other fields\n      if (config.visible !== undefined) {\n        meta.push(createElement('visible', [createTextNode(`${config.visible ? 1 : 0}`)]));\n      }\n\n      if (config.title !== undefined) {\n        meta.push(createElement('title', [createTextNode(config.title)]));\n      }\n\n      if (config.description !== undefined) {\n        meta.push(createElement('description', [createTextNode(config.description)]));\n      }\n    }\n\n    // - Additional fields\n    if (config.metadata !== undefined) {\n      Object.entries(config.metadata)\n        .forEach(([name, value]) => {\n          (Array.isArray(value) ? value : [value])\n            .forEach(v => meta.push(createElement(name, [createTextNode(v)])));\n        });\n    }\n\n    if (node.isQuickDynamic || meta.length) {\n      document.elements.push(createElement('metadata', meta));\n    }\n\n    // Insert parameters\n    if (config.parameters) {\n      config.parameters.forEach(attributes => {\n        let elements;\n\n        // Handle relative parameter targets\n        if (attributes.relative === 'true' && attributes.target) {\n          const { namespaceIndex, name } = attributes.target;\n          const targetElements = createElement('Elements');\n\n          elements = [createElement('RelativePath', [targetElements])];\n\n          if (name !== undefined) {\n            targetElements.elements = [\n              createElement('RelativePathElement', [\n                createElement('TargetName', [\n                  createElement('NamespaceIndex', [createTextNode(`${namespaceIndex}`)]),\n                  createElement('Name', [createTextNode(`${name}`)]),\n                ]),\n              ]),\n            ];\n          }\n\n          // eslint-disable-next-line no-param-reassign\n          delete attributes.target;\n        }\n\n        document.elements.push(createElement('parameter', elements, attributes));\n      });\n    }\n\n    // Insert script code\n    document.elements.push(createElement('code', [createCDataNode(code)]));\n\n    this.encodeContents(result, (encodeErr, xmlString) => {\n      if (encodeErr) {\n        callback(encodeErr);\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        node.value.value = xmlString;\n\n        callback(null, node);\n      }\n    });\n  }\n\n}\n"],"file":"ScriptTransformer.js"}