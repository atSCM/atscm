{"version":3,"sources":["../../src/transform/ScriptTransformer.js"],"names":["AtviseScriptTransformer","XMLTransformer","sourceExtensions","processMetadata","document","config","metaTag","childNodes","forEach","child","type","name","icon","Object","assign","content","visible","Boolean","parseInt","title","description","metadata","value","Array","isArray","push","includes","Logger","debug","processParameters","paramTags","length","undefined","map","node","attributes","param","relative","target","find","isElement","index","tagName","parsedIndex","namespaceIndex","isNaN","transformFromDB","context","shouldBeTransformed","arrayType","VariantArrayType","Scalar","Error","warn","id","remove","xml","decodeContents","parameters","configFile","constructor","splitFile","dataType","DataType","String","JSON","stringify","addNode","codeNode","scriptFile","combineNodes","sources","parse","stringValue","e","message","code","result","meta","isQuickDynamic","entries","v","elements","targetElements","encodeContents","ServerscriptTransformer","extension","isVariable","isScript","QuickDynamicTransformer"],"mappings":"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","sourcesContent":["import Logger from 'gulplog';\nimport { DataType, VariantArrayType } from 'node-opcua/lib/datamodel/variant';\nimport {\n  findChild,\n  findChildren,\n  textContent,\n  createElement,\n  createTextNode,\n  createCDataNode,\n  prependChild,\n  appendChild,\n  isElement,\n  attributeValues,\n} from 'modify-xml';\nimport XMLTransformer from '../lib/transform/XMLTransformer';\n\n/**\n * A transformer that splits atvise scripts and quick dynamics into a code file and a .json file\n * containing parameters and metadata.\n */\nexport class AtviseScriptTransformer extends XMLTransformer {\n  /**\n   * The source file extensions to allow.\n   * @type {string[]}\n   */\n  static get sourceExtensions() {\n    return ['.json', '.js'];\n  }\n\n  /**\n   * Extracts a script's metadata.\n   * @param {Object} document The parsed xml document to process.\n   * @return {Object} The metadata found.\n   */\n  processMetadata(document) {\n    const config = {};\n\n    const metaTag = findChild(document, 'metadata');\n    // console.error('Meta', metaTag);\n    if (!metaTag || !metaTag.childNodes) {\n      return config;\n    }\n\n    metaTag.childNodes.forEach(child => {\n      if (child.type !== 'element') {\n        return;\n      }\n\n      switch (child.name) {\n        case 'icon':\n          config.icon = Object.assign(\n            {\n              content: textContent(child) || '',\n            },\n            attributeValues(child)\n          );\n          break;\n        case 'visible':\n          config.visible = Boolean(parseInt(textContent(child), 10));\n          break;\n        case 'title':\n          config.title = textContent(child);\n          break;\n        case 'description':\n          config.description = textContent(child);\n          break;\n        default: {\n          if (!config.metadata) {\n            config.metadata = {};\n          }\n\n          const value = textContent(child);\n\n          if (config.metadata[child.name]) {\n            if (!Array.isArray(config.metadata[child.name])) {\n              config.metadata[child.name] = [config.metadata[child.name]];\n            }\n\n            config.metadata[child.name].push(value);\n          } else {\n            config.metadata[child.name] = textContent(child);\n          }\n\n          if (!['longrunning'].includes(child.name)) {\n            Logger.debug(`Generic metadata element '${child.name}'`); // FIXME:  at ${node.nodeId}\n          }\n          break;\n        }\n      }\n    });\n\n    return config;\n  }\n\n  /**\n   * Extracts a script's parameters.\n   * @param {Object} document The parsed xml document to process.\n   * @return {Object[]} The parameters found.\n   */\n  processParameters(document) {\n    const paramTags = findChildren(document, 'parameter');\n    if (!paramTags.length) {\n      return undefined;\n    }\n\n    return paramTags.map(node => {\n      const { childNodes } = node;\n      const attributes = attributeValues(node);\n      const param = Object.assign({}, attributes);\n\n      // Handle relative parameter targets\n      if (attributes.relative === 'true') {\n        param.target = {};\n\n        const target = findChild(childNodes.find(isElement), [\n          'Elements',\n          'RelativePathElement',\n          'TargetName',\n        ]);\n\n        if (target) {\n          const [index, name] = ['NamespaceIndex', 'Name'].map(tagName =>\n            textContent(findChild(target, tagName))\n          );\n\n          const parsedIndex = parseInt(index, 10);\n\n          param.target = { namespaceIndex: isNaN(parsedIndex) ? 1 : parsedIndex, name };\n        }\n      }\n\n      return param;\n    });\n  }\n\n  /**\n   * Splits a node into multiple source nodes.\n   * @param {Node} node A server node.\n   * @param {Object} context The current transform context.\n   */\n  async transformFromDB(node, context) {\n    if (!this.shouldBeTransformed(node)) {\n      return undefined;\n    }\n\n    if (node.arrayType !== VariantArrayType.Scalar) {\n      // FIXME: Instead of throwing we could simply pass the original node to the callback\n      throw new Error('Array of scripts not supported');\n    }\n\n    // If scripts are empty (e.g. created by atvise builder, but never edited) we display a warning and ignore them.\n    if (!node.value.value) {\n      Logger.warn(`The script '${node.id.value}' is empty, skipping...`);\n      return context.remove(node);\n    }\n\n    const xml = this.decodeContents(node);\n    if (!xml) {\n      throw new Error('Error parsing script');\n    }\n\n    const document = findChild(xml, 'script');\n    if (!document) {\n      throw new Error(`Empty document at ${node.id.value}`);\n    }\n\n    // Extract metadata and parameters\n    const config = {\n      ...this.processMetadata(document),\n      parameters: this.processParameters(document),\n    };\n\n    // Write config file\n    const configFile = this.constructor.splitFile(node, '.json');\n    configFile.value = {\n      dataType: DataType.String,\n      arrayType: VariantArrayType.Scalar,\n      value: JSON.stringify(config, null, '  '),\n    };\n    context.addNode(configFile);\n\n    // Write JavaScript file\n    const codeNode = findChild(document, 'code');\n    const scriptFile = this.constructor.splitFile(node, '.js');\n    scriptFile.value = {\n      dataType: DataType.String,\n      arrayType: VariantArrayType.Scalar,\n      value: textContent(codeNode) || '',\n    };\n    context.addNode(scriptFile);\n\n    return super.transformFromDB(node);\n  }\n\n  /**\n   * Inlines the passed source nodes to the given container node.\n   * @param {Node} node The container node.\n   * @param {{ [ext: string]: Node }} sources The source nodes to inline.\n   */\n  combineNodes(node, sources) {\n    const configFile = sources['.json'];\n    let config = {};\n\n    if (configFile) {\n      try {\n        config = JSON.parse(configFile.stringValue);\n      } catch (e) {\n        throw new Error(`Error parsing JSON in ${configFile.relative}: ${e.message}`);\n      }\n    }\n\n    const scriptFile = sources['.js'];\n    let code = '';\n\n    if (scriptFile) {\n      code = scriptFile.stringValue;\n    }\n\n    const document = createElement('script', []);\n\n    const result = {\n      childNodes: [\n        { type: 'directive', value: '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' },\n        document,\n      ],\n    };\n\n    // Insert metadata\n    const meta = [];\n\n    if (node.isQuickDynamic) {\n      // - Icon\n      if (config.icon) {\n        const icon = config.icon.content;\n        delete config.icon.content;\n\n        meta.push(createElement('icon', [createTextNode(icon)], config.icon));\n      }\n\n      // - Other fields\n      if (config.visible !== undefined) {\n        meta.push(createElement('visible', [createTextNode(`${config.visible ? 1 : 0}`)]));\n      }\n\n      if (config.title !== undefined) {\n        meta.push(createElement('title', [createTextNode(config.title)]));\n      }\n\n      if (config.description !== undefined) {\n        meta.push(createElement('description', [createTextNode(config.description)]));\n      }\n    }\n\n    // - Additional fields\n    if (config.metadata !== undefined) {\n      Object.entries(config.metadata).forEach(([name, value]) => {\n        (Array.isArray(value) ? value : [value]).forEach(v =>\n          meta.push(createElement(name, [createTextNode(v)]))\n        );\n      });\n    }\n\n    if (node.isQuickDynamic || meta.length) {\n      prependChild(document, createElement('metadata', meta));\n    }\n\n    // Insert parameters\n    if (config.parameters) {\n      config.parameters.forEach(attributes => {\n        let elements;\n\n        // Handle relative parameter targets\n        if (attributes.relative === 'true' && attributes.target) {\n          const { namespaceIndex, name } = attributes.target;\n          const targetElements = createElement('Elements');\n\n          elements = [createElement('RelativePath', [targetElements])];\n\n          if (name !== undefined) {\n            targetElements.childNodes = [\n              createElement('RelativePathElement', [\n                createElement('TargetName', [\n                  createElement('NamespaceIndex', [createTextNode(`${namespaceIndex}`)]),\n                  createElement('Name', [createTextNode(`${name}`)]),\n                ]),\n              ]),\n            ];\n          }\n\n          // eslint-disable-next-line no-param-reassign\n          delete attributes.target;\n        }\n\n        appendChild(document, createElement('parameter', elements, attributes));\n      });\n    }\n\n    // Insert script code\n    appendChild(document, createElement('code', [createCDataNode(code)]));\n\n    // eslint-disable-next-line no-param-reassign\n    node.value.value = this.encodeContents(result);\n  }\n}\n\n/**\n * A transformer that splits atvise server scripts into multiple files.\n */\nexport class ServerscriptTransformer extends AtviseScriptTransformer {\n  /** The container's extension. */\n  static get extension() {\n    return '.script';\n  }\n\n  /**\n   * Returns `true` for all script nodes.\n   * @param {Node} node The node to check.\n   * @return {boolean} If the node is a server script.\n   */\n  shouldBeTransformed(node) {\n    return node.isVariable && node.isScript;\n  }\n}\n\n/**\n * A transformer that splits atvise quickdynamics into multiple files.\n */\nexport class QuickDynamicTransformer extends AtviseScriptTransformer {\n  /** The container's extension. */\n  static get extension() {\n    return '.qd';\n  }\n\n  /**\n   * Returns `true` for all nodes containing quick dynamics.\n   * @param {Node} node The node to check.\n   * @return {boolean} If the node is a quick dynamic.\n   */\n  shouldBeTransformed(node) {\n    return node.isVariable && node.isQuickDynamic;\n  }\n}\n"],"file":"ScriptTransformer.js"}