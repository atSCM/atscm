{"version":3,"sources":["../../src/transform/ScriptTransformer.js"],"names":["ScriptTransformer","shouldBeTransformed","file","isScript","isQuickDynamic","transformFromDB","enc","callback","decodeContents","err","results","document","warn","relative","config","metaTag","elements","forEach","child","type","name","icon","Object","assign","content","attributes","visible","Boolean","parseInt","title","description","paramTags","length","parameters","param","target","index","map","tagName","parsedIndex","namespaceIndex","isNaN","push","codeNode","code","configFile","splitFile","contents","Buffer","from","JSON","stringify","scriptFile","createCombinedFile","files","lastFile","parse","toString","e","Error","message","result","meta","undefined","targetElements","script","combineFiles","keys","ext","encodeContents","encodeErr","xmlString"],"mappings":"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","file":"ScriptTransformer.js","sourcesContent":["import Logger from 'gulplog';\nimport XMLTransformer from '../lib/transform/XMLTransformer';\nimport {\n  findChild, findChildren,\n  textContent,\n  createElement, createTextNode, createCDataNode,\n} from '../lib/helpers/xml';\n\n/**\n * A transformer that splits atvise scripts and quick dynamics into a code file and a .json file\n * containing parameters and metadata.\n */\nexport default class ScriptTransformer extends XMLTransformer {\n\n  /**\n   * Returns `true` for all files containing script code or quick dynamics.\n   * @param {AtviseFile} file The file to check.\n   * @return {boolean} `true` for all files containing script code or quick dynamics.\n   */\n  shouldBeTransformed(file) {\n    return file.isScript || file.isQuickDynamic;\n  }\n\n  /**\n   * Splits any read files containing scripts or quick dynamics into their JavaScript sources,\n   * alongside with a json file containing parameters and metadata.\n   * @param {AtviseFile} file The script file to split.\n   * @param {string} enc The encoding used.\n   * @param {function(err: Error, file: AtviseFile)} callback Called with the error that occured\n   * while transforming the script, or the file passed through.\n   */\n  transformFromDB(file, enc, callback) {\n    this.decodeContents(file, (err, results) => {\n      if (err) {\n        callback(err);\n      } else {\n        const document = results && findChild(results, 'script');\n\n        if (!document) {\n          Logger.warn(`Empty document at ${file.relative}`);\n        }\n\n        const config = {};\n\n        // Extract metadata\n        const metaTag = findChild(document, 'metadata');\n        if (metaTag && metaTag.elements) {\n          // TODO: Warn on multiple metadata tags\n          metaTag.elements.forEach(child => {\n            if (child.type === 'element') {\n              if (child.name === 'icon') { // - Icon\n                config.icon = Object.assign({\n                  content: textContent(child) || '',\n                }, child.attributes);\n              } else if (child.name === 'visible') { // - Visible\n                config.visible = Boolean(parseInt(textContent(child), 10));\n              } else if (child.name === 'title') {\n                config.title = textContent(child);\n              } else if (child.name === 'description') {\n                config.description = textContent(child);\n              } else {\n                Logger.warn(`Unknown metadata element '${child.name}' at ${file.relative}`);\n              }\n            }\n          });\n        }\n\n        // Extract Parameters\n        const paramTags = findChildren(document, 'parameter');\n        if (paramTags.length) {\n          config.parameters = [];\n          paramTags.forEach(({ attributes, elements }) => {\n            const param = Object.assign({}, attributes);\n\n            // Handle relative parameter targets\n            if (attributes.relative === 'true') {\n              param.target = {};\n\n              const target = findChild(elements[0],\n                ['Elements', 'RelativePathElement', 'TargetName']);\n\n              if (target) {\n                const [index, name] = ['NamespaceIndex', 'Name']\n                  .map(tagName => textContent(findChild(target, tagName)));\n\n                const parsedIndex = parseInt(index, 10);\n\n                param.target = { namespaceIndex: isNaN(parsedIndex) ? 1 : parsedIndex, name };\n              }\n            }\n\n            config.parameters.push(param);\n          });\n        }\n\n        // Extract JavaScript\n        const codeNode = findChild(document, 'code');\n        const code = textContent(codeNode) || '';\n\n        // Write config file\n        const configFile = ScriptTransformer.splitFile(file, '.json');\n        configFile.contents = Buffer.from(JSON.stringify(config, null, '  '));\n        this.push(configFile);\n\n        // Write script file\n        const scriptFile = ScriptTransformer.splitFile(file, '.js');\n        scriptFile.contents = Buffer.from(code);\n        this.push(scriptFile);\n\n        callback(null);\n      }\n    });\n  }\n\n  /**\n   * Creates a script from the collected files.\n   * @param {Map<String, AtviseFile>} files The collected files, stored against their extension.\n   * @param {AtviseFile} lastFile The last file read. *Used for error messages only*.\n   * @param {function(err: ?Error, data: vinyl~File)} callback Called with the error that occured\n   * while creating the script or the resulting file.\n   */\n  createCombinedFile(files, lastFile, callback) {\n    const configFile = files['.json'];\n    let config = {};\n\n    if (configFile) {\n      try {\n        config = JSON.parse(configFile.contents.toString());\n      } catch (e) {\n        callback(new Error(`Error parsing JSON in ${configFile.relative}: ${e.message}`));\n        return;\n      }\n    }\n\n    const scriptFile = files['.js'];\n    let code = '';\n\n    if (scriptFile) {\n      code = scriptFile.contents.toString();\n    }\n\n    const document = createElement('script', []);\n\n    const result = {\n      elements: [\n        document,\n      ],\n    };\n\n    // Insert metadata\n    if (lastFile.isQuickDynamic) {\n      const meta = [];\n\n      // - Icon\n      if (config.icon) {\n        const icon = config.icon.content;\n        delete config.icon.content;\n\n        meta.push(createElement('icon', [createTextNode(icon)], config.icon));\n      }\n\n      // - Other fields\n      if (config.visible !== undefined) {\n        meta.push(createElement('visible', [createTextNode(`${config.visible ? 1 : 0}`)]));\n      }\n\n      if (config.title !== undefined) {\n        meta.push(createElement('title', [createTextNode(config.title)]));\n      }\n\n      if (config.description !== undefined) {\n        meta.push(createElement('description', [createTextNode(config.description)]));\n      }\n\n      document.elements.push(createElement('metadata', meta));\n    }\n\n    // Insert parameters\n    if (config.parameters) {\n      config.parameters.forEach(attributes => {\n        let elements;\n\n        // Handle relative parameter targets\n        if (attributes.relative === 'true' && attributes.target) {\n          const { namespaceIndex, name } = attributes.target;\n          const targetElements = createElement('Elements');\n\n          elements = [createElement('RelativePath', [targetElements])];\n\n          if (name !== undefined) {\n            targetElements.elements = [\n              createElement('RelativePathElement', [\n                createElement('TargetName', [\n                  createElement('NamespaceIndex', [createTextNode(`${namespaceIndex}`)]),\n                  createElement('Name', [createTextNode(`${name}`)]),\n                ]),\n              ]),\n            ];\n          }\n\n          // eslint-disable-next-line no-param-reassign\n          delete attributes.target;\n        }\n\n        document.elements.push(createElement('parameter', elements, attributes));\n      });\n    }\n\n    // Insert script code\n    document.elements.push(createElement('code', [createCDataNode(code)]));\n\n    const script = ScriptTransformer.combineFiles(\n      Object.keys(files).map(ext => files[ext]),\n      '.xml'\n    );\n\n    this.encodeContents(result, (encodeErr, xmlString) => {\n      if (encodeErr) {\n        callback(encodeErr);\n      } else {\n        script.contents = Buffer.from(xmlString);\n\n        callback(null, script);\n      }\n    });\n  }\n\n}\n"]}