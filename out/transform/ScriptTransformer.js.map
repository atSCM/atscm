{"version":3,"sources":["../../src/transform/ScriptTransformer.js"],"names":["ScriptTransformer","shouldBeTransformed","node","isVariable","isScript","isQuickDynamic","transformFromDB","enc","callback","decodeContents","err","results","document","warn","nodeId","config","metaTag","elements","forEach","child","type","name","icon","Object","assign","content","attributes","visible","Boolean","parseInt","title","description","metadata","value","Array","isArray","push","includes","debug","paramTags","length","parameters","param","relative","target","index","map","tagName","parsedIndex","namespaceIndex","isNaN","codeNode","code","configFile","splitFile","dataType","String","arrayType","Scalar","JSON","stringify","scriptFile","renameTo","createCombinedFile","sources","parse","stringValue","e","Error","message","result","meta","undefined","entries","v","targetElements","encodeContents","encodeErr","xmlString"],"mappings":"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","file":"ScriptTransformer.js","sourcesContent":["import { basename } from 'path';\nimport Logger from 'gulplog';\nimport { DataType, VariantArrayType } from 'node-opcua/lib/datamodel/variant';\nimport XMLTransformer from '../lib/transform/XMLTransformer';\nimport {\n  findChild, findChildren,\n  textContent,\n  createElement, createTextNode, createCDataNode,\n} from '../lib/helpers/xml';\n\n/**\n * A transformer that splits atvise scripts and quick dynamics into a code file and a .json file\n * containing parameters and metadata.\n */\nexport default class ScriptTransformer extends XMLTransformer {\n\n  /**\n   * Returns `true` for all files containing script code or quick dynamics.\n   * @param {Node} node The file to check.\n   * @return {boolean} `true` for all files containing script code or quick dynamics.\n   */\n  shouldBeTransformed(node) {\n    return (node.isVariable && (node.isScript || node.isQuickDynamic)) ||\n      super.shouldBeTransformed(node);\n  }\n\n  /**\n   * Splits any read nodes containing scripts or quick dynamics into their JavaScript sources,\n   * alongside with a json file containing parameters and metadata.\n   * @param {Node} node The script node to split.\n   * @param {string} enc The encoding used.\n   * @param {function(err: Error, node: Node)} callback Called with the error that occured\n   * while transforming the script, or the node passed through.\n   */\n  transformFromDB(node, enc, callback) {\n    this.decodeContents(node, (err, results) => {\n      if (err) {\n        callback(err);\n      } else {\n        const document = results && findChild(results, 'script');\n\n        if (!document) {\n          Logger.warn(`Empty document at ${node.nodeId}`);\n        }\n\n        const config = {};\n\n        // Extract metadata\n        const metaTag = findChild(document, 'metadata');\n        if (metaTag && metaTag.elements) {\n          // TODO: Warn on multiple metadata tags\n          metaTag.elements.forEach(child => {\n            if (child.type === 'element') {\n              if (child.name === 'icon') { // - Icon\n                config.icon = Object.assign({\n                  content: textContent(child) || '',\n                }, child.attributes);\n              } else if (child.name === 'visible') { // - Visible\n                config.visible = Boolean(parseInt(textContent(child), 10));\n              } else if (child.name === 'title') {\n                config.title = textContent(child);\n              } else if (child.name === 'description') {\n                config.description = textContent(child);\n              } else {\n                if (!config.metadata) {\n                  config.metadata = {};\n                }\n\n                const value = textContent(child);\n\n                if (config.metadata[child.name]) {\n                  if (!Array.isArray(config.metadata[child.name])) {\n                    config.metadata[child.name] = [config.metadata[child.name]];\n                  }\n\n                  config.metadata[child.name].push(value);\n                } else {\n                  config.metadata[child.name] = textContent(child);\n                }\n\n                if (![\n                  'longrunning',\n                ].includes(child.name)) {\n                  Logger.debug(`Generic metadata element '${child.name}' at ${node.nodeId}`);\n                }\n              }\n            }\n          });\n        }\n\n        // Extract Parameters\n        const paramTags = findChildren(document, 'parameter');\n        if (paramTags.length) {\n          config.parameters = [];\n          paramTags.forEach(({ attributes, elements }) => {\n            const param = Object.assign({}, attributes);\n\n            // Handle relative parameter targets\n            if (attributes.relative === 'true') {\n              param.target = {};\n\n              const target = findChild(elements[0],\n                ['Elements', 'RelativePathElement', 'TargetName']);\n\n              if (target) {\n                const [index, name] = ['NamespaceIndex', 'Name']\n                  .map(tagName => textContent(findChild(target, tagName)));\n\n                const parsedIndex = parseInt(index, 10);\n\n                param.target = { namespaceIndex: isNaN(parsedIndex) ? 1 : parsedIndex, name };\n              }\n            }\n\n            config.parameters.push(param);\n          });\n        }\n\n        // Extract JavaScript\n        const codeNode = findChild(document, 'code');\n        const code = textContent(codeNode) || '';\n\n        // Write config file\n        const configFile = ScriptTransformer.splitFile(node, '.json');\n        configFile.value = {\n          dataType: DataType.String,\n          arrayType: VariantArrayType.Scalar,\n          value: JSON.stringify(config, null, '  '),\n        };\n\n        this.push(configFile);\n\n        // Write script file\n        const scriptFile = ScriptTransformer.splitFile(node, '.js');\n        scriptFile.value = {\n          dataType: DataType.String,\n          arrayType: VariantArrayType.Scalar,\n          value: code,\n        };\n\n        this.push(scriptFile);\n\n        node.renameTo(`${node.name}.${node.isQuickDynamic ? 'qd' : 'script'}`);\n\n        callback(null, node);\n      }\n    });\n  }\n\n  /**\n   * Creates a script from the collected files.\n   * @param {Node} node The last file read. *Used for error messages only*.\n   * @param {Map<string, Node>} sources The collected source nodes, stored against their extension.\n   * @param {function(err: ?Error, data: Node)} callback Called with the error that occured\n   * while creating the script or the resulting file.\n   */\n  createCombinedFile(node, sources, callback) {\n    node.renameTo(basename(node.name, node.isQuickDynamic ? '.qd' : '.script'));\n\n    const configFile = sources['.json'];\n    let config = {};\n\n    if (configFile) {\n      try {\n        config = JSON.parse(configFile.stringValue);\n      } catch (e) {\n        callback(new Error(`Error parsing JSON in ${configFile.relative}: ${e.message}`));\n        return;\n      }\n    }\n\n    const scriptFile = sources['.js'];\n    let code = '';\n\n    if (scriptFile) {\n      code = scriptFile.stringValue;\n    }\n\n    const document = createElement('script', []);\n\n    const result = {\n      elements: [\n        document,\n      ],\n    };\n\n    // Insert metadata\n    const meta = [];\n\n    if (node.isQuickDynamic) {\n      // - Icon\n      if (config.icon) {\n        const icon = config.icon.content;\n        delete config.icon.content;\n\n        meta.push(createElement('icon', [createTextNode(icon)], config.icon));\n      }\n\n      // - Other fields\n      if (config.visible !== undefined) {\n        meta.push(createElement('visible', [createTextNode(`${config.visible ? 1 : 0}`)]));\n      }\n\n      if (config.title !== undefined) {\n        meta.push(createElement('title', [createTextNode(config.title)]));\n      }\n\n      if (config.description !== undefined) {\n        meta.push(createElement('description', [createTextNode(config.description)]));\n      }\n    }\n\n    // - Additional fields\n    if (config.metadata !== undefined) {\n      Object.entries(config.metadata)\n        .forEach(([name, value]) => {\n          (Array.isArray(value) ? value : [value])\n            .forEach(v => meta.push(createElement(name, [createTextNode(v)])));\n        });\n    }\n\n    if (node.isQuickDynamic || meta.length) {\n      document.elements.push(createElement('metadata', meta));\n    }\n\n    // Insert parameters\n    if (config.parameters) {\n      config.parameters.forEach(attributes => {\n        let elements;\n\n        // Handle relative parameter targets\n        if (attributes.relative === 'true' && attributes.target) {\n          const { namespaceIndex, name } = attributes.target;\n          const targetElements = createElement('Elements');\n\n          elements = [createElement('RelativePath', [targetElements])];\n\n          if (name !== undefined) {\n            targetElements.elements = [\n              createElement('RelativePathElement', [\n                createElement('TargetName', [\n                  createElement('NamespaceIndex', [createTextNode(`${namespaceIndex}`)]),\n                  createElement('Name', [createTextNode(`${name}`)]),\n                ]),\n              ]),\n            ];\n          }\n\n          // eslint-disable-next-line no-param-reassign\n          delete attributes.target;\n        }\n\n        document.elements.push(createElement('parameter', elements, attributes));\n      });\n    }\n\n    // Insert script code\n    document.elements.push(createElement('code', [createCDataNode(code)]));\n\n    this.encodeContents(result, (encodeErr, xmlString) => {\n      if (encodeErr) {\n        callback(encodeErr);\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        node.value.value = xmlString;\n\n        callback(null, node);\n      }\n    });\n  }\n\n}\n"]}