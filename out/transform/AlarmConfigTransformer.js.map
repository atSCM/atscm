{"version":3,"sources":["../../src/transform/AlarmConfigTransformer.ts"],"names":["limitNodeNameRegExp","getLimitTriggerType","node","parent","dataType","LintTransformer","PartialTransformer","shouldBeTransformed","Boolean","hasTypeDefinition","nodeId","match","transformFromDB","remove","triggerDataType","transformFromFilesystem"],"mappings":";;;;;;;AAEA;;;;AAGA,MAAMA,mBAAmB,GAAG,oCAA5B;AAEA;;;;;;;AAMA,SAASC,mBAAT,CAA6BC,IAA7B,EAA8E;AAC5E,SACEA,IAAI,IACJA,IAAI,CAACC,MADL,IAEAD,IAAI,CAACC,MAAL,CAAYA,MAFZ,IAGAD,IAAI,CAACC,MAAL,CAAYA,MAAZ,CAAmBA,MAHnB,IAIAD,IAAI,CAACC,MAAL,CAAYA,MAAZ,CAAmBA,MAAnB,CAA0BC,QAL5B;AAOD;AAED;;;;;AAGe,MAAMC,eAAN,SAA8BC,2BAA9B,CAAiD;AAC9D;;;;AAIOC,EAAAA,mBAAP,CAA2BL,IAA3B,EAAgD;AAC9C,WAAOM,OAAO,CACZN,IAAI,CAACC,MAAL,IACED,IAAI,CAACC,MAAL,CAAYM,iBAAZ,CAA8B,gDAA9B,CADF,IAEEP,IAAI,CAACQ,MAAL,CAAYC,KAAZ,CAAkBX,mBAAlB,CAHU,CAAd;AAKD;AAED;;;;;;;AAKA,QAAaY,eAAb,CAA6BV,IAA7B,EAAyC;AAAEW,IAAAA;AAAF,GAAzC,EAA4F;AAC1F,QAAI,CAAC,KAAKN,mBAAL,CAAyBL,IAAzB,CAAL,EAAqC;AAErC,UAAMY,eAAe,GAAGb,mBAAmB,CAACC,IAAD,CAA3C,CAH0F,CAK1F;AACA;AACA;;AACA,QAAIA,IAAI,CAACE,QAAL,KAAkBU,eAAtB,EAAuC;AACrCD,MAAAA,MAAM;AACP;AACF;AAED;;;AACA,QAAaE,uBAAb,GAAsD;AACpD;AACD;;AAlC6D","sourcesContent":["import { DataType } from 'node-opcua/lib/datamodel/variant';\nimport { ItemOf } from 'node-opcua/lib/misc/enum.js';\nimport PartialTransformer from '../lib/transform/PartialTransformer';\nimport Node from '../lib/model/Node';\n\nconst limitNodeNameRegExp = /\\.(upper|lower)_limit(_deadband)?$/;\n\n/**\n * Returns an alarm limit's trigger / source node's data type.\n * Assuming a regular project structure this is the third parent node:\n * **Source** > AlarmConfiguration > AlarmCondition > FilterNode.\n * @param node The limit node to check.\n */\nfunction getLimitTriggerType(node: Node): ItemOf<typeof DataType> | undefined {\n  return (\n    node &&\n    node.parent &&\n    node.parent.parent &&\n    node.parent.parent.parent &&\n    node.parent.parent.parent.dataType\n  );\n}\n\n/**\n * A transformer ensuring no invalid alarm condition filter nodes are pulled.\n */\nexport default class LintTransformer extends PartialTransformer {\n  /**\n   * Returns `true` for all alarm condition filter nodes.\n   * @param node The node to check.\n   */\n  public shouldBeTransformed(node: Node): boolean {\n    return Boolean(\n      node.parent &&\n        node.parent.hasTypeDefinition('ObjectTypes.ATVISE.AlarmConditionControl.Limit') &&\n        node.nodeId.match(limitNodeNameRegExp)\n    );\n  }\n\n  /**\n   * Removes filter alarm condition filter nodes that have an invalid dataType.\n   * @param node The node to transform.\n   * @param context The transform context.\n   */\n  public async transformFromDB(node: Node, { remove }: { remove: () => void }): Promise<void> {\n    if (!this.shouldBeTransformed(node)) return;\n\n    const triggerDataType = getLimitTriggerType(node);\n\n    // NOTE: When no trigger node was found, the node is ignored as well\n    // This means that during incomplete pulls (e.g. in response to a watch event) these nodes are\n    // not updated.\n    if (node.dataType !== triggerDataType) {\n      remove();\n    }\n  }\n\n  /** Does nothing. */\n  public async transformFromFilesystem(): Promise<void> {\n    return;\n  }\n}\n"],"file":"AlarmConfigTransformer.js"}