{"version":3,"sources":["../../src/transform/FileToAtviseFileTransformer.js"],"names":["FileToAtviseFileTransformer","constructor","options","combinedSrcStream","create","mappingStream","direction","FromFilesystem","nodesToTransform","map","nodeId","append","filePath","applyTransformers","undefined","pipe","useTransformers"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;AAGe,MAAMA,2BAAN,CAAkC;;AAE/C;;;;;;;;;AASAC,cAAYC,UAAU,EAAtB,EAA0B;AACxB;;;;AAIA,UAAMC,oBAAoB,yBAAeC,MAAf,EAA1B;;AAEA;;;;AAIA,UAAMC,gBAAgB,sBACpB,EAAEC,WAAW,gCAAmBC,cAAhC,EADoB,CAAtB;;AAIA;;;;AAIA,UAAMC,mBAAmBN,QAAQM,gBAAR,IAA4B,EAArD;;AAEAA,qBAAiBC,GAAjB,CAAqBC,UAAUP,kBAC5BQ,MAD4B,CACrB,eAAK,SAAQD,OAAOE,QAAS,SAA7B,CADqB,CAA/B;;AAGA,QAAIV,QAAQW,iBAAR,KAA8BC,SAA9B,IAA2CZ,QAAQW,iBAAR,KAA8B,KAA7E,EAAoF;AAClF,aAAOV,kBACJY,IADI,CACCV,aADD,CAAP;AAED;;AAED,WAAO,sBAAYQ,iBAAZ,CACLV,kBACGY,IADH,CACQV,aADR,CADK,EAGL,wBAAcW,eAHT,EAIL,gCAAmBT,cAJd,CAAP;AAMD;AA9C8C;kBAA5BP,2B","file":"FileToAtviseFileTransformer.js","sourcesContent":["import { src } from 'gulp';\nimport CombinedStream from 'combined-stream';\nimport ProjectConfig from '../config/ProjectConfig';\nimport Transformer, { TransformDirection } from '../lib/transform/Transformer';\nimport MappingTransformer from './Mapping';\n\n/**\n * A transformer that transforms mapped file system files to {@link AtviseFiles}'s\n */\nexport default class FileToAtviseFileTransformer {\n\n  /**\n   * Creates a new FileToAtviseFileTransformer\n   * @param {Object} options The options to use. See\n   * {@link FileToAtviseFileTransformer#constructor} for available\n   * options.\n   * @param {Boolean} [options.applyTransformers] Defines whether transformer\n   * should be applied or not\n   * @param {NodeId[]} [options.nodesToTransform] The nodes to transform.\n   */\n  constructor(options = {}) {\n    /**\n     * Combined stream instance.\n     * @type {CombinedStream}\n     */\n    const combinedSrcStream = CombinedStream.create();\n\n    /**\n     * Stream that creates atvise files.\n     * @type {MappingTransformer}\n     */\n    const mappingStream = new MappingTransformer(\n      { direction: TransformDirection.FromFilesystem }\n    );\n\n    /**\n     * Stream containing all type definition files.\n     * @type {NodeId[]}\n     */\n    const nodesToTransform = options.nodesToTransform || [];\n\n    nodesToTransform.map(nodeId => combinedSrcStream\n      .append(src(`./src/${nodeId.filePath}/**/*.*`)));\n\n    if (options.applyTransformers !== undefined && options.applyTransformers === false) {\n      return combinedSrcStream\n        .pipe(mappingStream);\n    }\n\n    return Transformer.applyTransformers(\n      combinedSrcStream\n        .pipe(mappingStream),\n      ProjectConfig.useTransformers,\n      TransformDirection.FromFilesystem\n    );\n  }\n}\n"]}