{"version":3,"sources":["../../src/init/Options.js"],"names":["ConfigLangs","TypeScript","projectName","dirname","InitOptions","name","InitOption","message","default","process","cwd","validate","Validator","description","author","atviseHost","Atviseproject","host","atvisePortOpc","port","opc","atvisePortHttp","http","useLogin","type","atviseUser","when","answers","atvisePassword","configLang","choices","Object","keys","map","value","InitOptionsAsArray","assign"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA;;;;AAIO,MAAMA,WAAW,GAAG;AACzB,uBAAqB,QADI;AAEzB,wBAAsB,KAFG;AAGzBC,EAAAA,UAAU,EAAE,IAHa;AAIzB,0BAAwB;AAJC,CAApB;AAOP;;;;;;;;AAKA,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AAC5B,MAAIA,OAAO,KAAK,OAAhB,EAAyB;AACvB,WAAO,eAAP;AACD;;AAED,SAAOA,OAAP;AACD;AAED;;;;;;;;;;;;;;;;AAcO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,IAAI,EAAE,IAAIC,eAAJ,CAAe;AACnBC,IAAAA,OAAO,EAAE,cADU;AAEnBC,IAAAA,OAAO,EAAEN,WAAW,CAAC,oBAASO,OAAO,CAACC,GAAR,EAAT,CAAD,CAFD;AAGnBC,IAAAA,QAAQ,EAAEC,0BAAUP;AAHD,GAAf,CADmB;AAMzBQ,EAAAA,WAAW,EAAE,IAAIP,eAAJ,CAAe,qBAAf,CANY;AAOzBQ,EAAAA,MAAM,EAAE,IAAIR,eAAJ,CAAe,gBAAf,CAPiB;AAQzBS,EAAAA,UAAU,EAAE,IAAIT,eAAJ,CAAe,oBAAf,EAAqCU,uBAAcC,IAAnD,CARa;AASzBC,EAAAA,aAAa,EAAE,IAAIZ,eAAJ,CAAe,iBAAf,EAAkCU,uBAAcG,IAAd,CAAmBC,GAArD,CATU;AAUzBC,EAAAA,cAAc,EAAE,IAAIf,eAAJ,CAAe,kBAAf,EAAmCU,uBAAcG,IAAd,CAAmBG,IAAtD,CAVS;AAWzBC,EAAAA,QAAQ,EAAE,IAAIjB,eAAJ,CAAe;AACvBC,IAAAA,OAAO,EAAE,uCADc;AAEvBiB,IAAAA,IAAI,EAAE,SAFiB;AAGvBhB,IAAAA,OAAO,EAAE;AAHc,GAAf,CAXe;AAgBzBiB,EAAAA,UAAU,EAAE,IAAInB,eAAJ,CAAe;AACzBC,IAAAA,OAAO,EAAE,aADgB;AAEzBmB,IAAAA,IAAI,EAAEC,OAAO,IAAIA,OAAO,CAACJ;AAFA,GAAf,CAhBa;AAoBzBK,EAAAA,cAAc,EAAE,IAAItB,eAAJ,CAAe;AAC7BC,IAAAA,OAAO,EAAE,aADoB;AAE7BmB,IAAAA,IAAI,EAAEC,OAAO,IAAIA,OAAO,CAACJ;AAFI,GAAf,CApBS;AAwBzBM,EAAAA,UAAU,EAAE,IAAIvB,eAAJ,CAAe;AACzBkB,IAAAA,IAAI,EAAE,MADmB;AAEzBjB,IAAAA,OAAO,EAAE,+BAFgB;AAGzBuB,IAAAA,OAAO,EAAEC,MAAM,CAACC,IAAP,CAAYhC,WAAZ,EAAyBiC,GAAzB,CAA6B5B,IAAI,KAAK;AAAEA,MAAAA,IAAF;AAAQ6B,MAAAA,KAAK,EAAElC,WAAW,CAACK,IAAD;AAA1B,KAAL,CAAjC;AAHgB,GAAf;AAxBa,CAApB;AA+BP;;;;;;AAIA,MAAM8B,kBAAkB,GAAGJ,MAAM,CAACC,IAAP,CAAY5B,WAAZ,EAAyB6B,GAAzB,CAA6B5B,IAAI,IAC1D0B,MAAM,CAACK,MAAP,CAAc;AAAE/B,EAAAA;AAAF,CAAd,EAAwBD,WAAW,CAACC,IAAD,CAAnC,CADyB,CAA3B;eAIe8B,kB","sourcesContent":["import { basename } from 'path';\nimport InitOption from '../lib/init/Option';\nimport Atviseproject from '../lib/config/Atviseproject';\nimport Validator from './OptionsValidator';\n\n/**\n * A map providing dirnames for config langs\n * @type {Map<String, String>}\n */\nexport const ConfigLangs = {\n  'ES2015 JavaScript': 'es2015',\n  'Regular JavaScript': 'es5',\n  TypeScript: 'ts',\n  'CoffeeScript (alpha)': 'coffee',\n};\n\n/**\n * Suggests a project name based on the name of the directory 'atscm init' was called in.\n * @param {string} dirname The current working directory's name.\n * @return {string} The suggested name.\n */\nfunction projectName(dirname) {\n  if (dirname === 'atscm') {\n    return 'atscm-project';\n  }\n\n  return dirname;\n}\n\n/**\n * Options available for the \"atscm init\" command.\n * @type {Object}\n * @property {InitOption<input>} name The new project's name.\n * @property {InitOption<input>} description The new project's description.\n * @property {InitOption<input>} author The new project's author.\n * @property {InitOption<input>} atviseHost The new project's atvise server host.\n * @property {InitOption<input>} atvisePortOpc The new project's atvise server OPC port.\n * @property {InitOption<input>} atvisePortHttp The new project's atvise server HTTP port.\n * @property {InitOption<confirm>} useLogin If the new porject's atvise server requires login.\n * @property {InitOption<input>} atviseUsername The new project's atvise server login name.\n * @property {InitOption<input>} atvisePassword The new project's atvise server login password.\n * @property {InitOption<list>} configLang The language to use for the new project's configuration.\n */\nexport const InitOptions = {\n  name: new InitOption({\n    message: 'Project name',\n    default: projectName(basename(process.cwd())),\n    validate: Validator.name,\n  }),\n  description: new InitOption('Project description'),\n  author: new InitOption('Project author'),\n  atviseHost: new InitOption('Atvise server host', Atviseproject.host),\n  atvisePortOpc: new InitOption('Atvise OPC port', Atviseproject.port.opc),\n  atvisePortHttp: new InitOption('Atvise HTTP port', Atviseproject.port.http),\n  useLogin: new InitOption({\n    message: 'Does your atvise server require login',\n    type: 'confirm',\n    default: false,\n  }),\n  atviseUser: new InitOption({\n    message: ' - Username',\n    when: answers => answers.useLogin,\n  }),\n  atvisePassword: new InitOption({\n    message: ' - Password',\n    when: answers => answers.useLogin,\n  }),\n  configLang: new InitOption({\n    type: 'list',\n    message: 'Configuration language to use',\n    choices: Object.keys(ConfigLangs).map(name => ({ name, value: ConfigLangs[name] })),\n  }),\n};\n\n/**\n * {@link InitOptions}, exported as an array. Required to run {@link Inquirer}.\n * @type {InitOption[]}\n */\nconst InitOptionsAsArray = Object.keys(InitOptions).map(name =>\n  Object.assign({ name }, InitOptions[name])\n);\n\nexport default InitOptionsAsArray;\n"],"file":"Options.js"}