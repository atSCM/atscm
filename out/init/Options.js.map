{"version":3,"sources":["../../src/init/Options.js"],"names":["ConfigLangs","TypeScript","InitOptions","name","message","default","process","cwd","validate","description","author","atviseHost","host","atvisePortOpc","port","opc","atvisePortHttp","http","useLogin","type","atviseUser","when","answers","atvisePassword","configLang","choices","Object","keys","map","value","InitOptionsAsArray","assign"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;AAIO,MAAMA,oCAAc;AACzB,uBAAqB,QADI;AAEzB,wBAAsB,KAFG;AAGzBC,cAAY,IAHa;AAIzB,0BAAwB;AAJC,CAApB;;AAOP;;;;;;;;;;;;;;AAcO,MAAMC,oCAAc;AACzBC,QAAM,qBAAe;AACnBC,aAAS,cADU;AAEnBC,aAAS,oBAASC,QAAQC,GAAR,EAAT,CAFU;AAGnBC,cAAU,2BAAUL;AAHD,GAAf,CADmB;AAMzBM,eAAa,qBAAe,qBAAf,CANY;AAOzBC,UAAQ,qBAAe,gBAAf,CAPiB;AAQzBC,cAAY,qBAAe,oBAAf,EAAqC,wBAAcC,IAAnD,CARa;AASzBC,iBAAe,qBAAe,iBAAf,EAAkC,wBAAcC,IAAd,CAAmBC,GAArD,CATU;AAUzBC,kBAAgB,qBAAe,kBAAf,EAAmC,wBAAcF,IAAd,CAAmBG,IAAtD,CAVS;AAWzBC,YAAU,qBAAe;AACvBd,aAAS,uCADc;AAEvBe,UAAM,SAFiB;AAGvBd,aAAS;AAHc,GAAf,CAXe;AAgBzBe,cAAY,qBAAe;AACzBhB,aAAS,aADgB;AAEzBiB,UAAMC,WAAWA,QAAQJ;AAFA,GAAf,CAhBa;AAoBzBK,kBAAgB,qBAAe;AAC7BnB,aAAS,aADoB;AAE7BiB,UAAMC,WAAWA,QAAQJ;AAFI,GAAf,CApBS;AAwBzBM,cAAY,qBAAe;AACzBL,UAAM,MADmB;AAEzBf,aAAS,+BAFgB;AAGzBqB,aAASC,OAAOC,IAAP,CAAY3B,WAAZ,EAAyB4B,GAAzB,CAA6BzB,SAAS,EAAEA,IAAF,EAAQ0B,OAAO7B,YAAYG,IAAZ,CAAf,EAAT,CAA7B;AAHgB,GAAf;AAxBa,CAApB;;AA+BP;;;;AAIA,MAAM2B,qBAAqBJ,OAAOC,IAAP,CAAYzB,WAAZ,EACxB0B,GADwB,CACpBzB,QAAQuB,OAAOK,MAAP,CAAc,EAAE5B,IAAF,EAAd,EAAwBD,YAAYC,IAAZ,CAAxB,CADY,CAA3B;;kBAGe2B,kB","file":"Options.js","sourcesContent":["import { basename } from 'path';\nimport InitOption from '../lib/init/Option';\nimport Atviseproject from '../lib/config/Atviseproject';\nimport Validator from './OptionsValidator';\n\n/**\n * A map providing dirnames for config langs\n * @type {Map<String, String>}\n */\nexport const ConfigLangs = {\n  'ES2015 JavaScript': 'es2015',\n  'Regular JavaScript': 'es5',\n  TypeScript: 'ts',\n  'CoffeeScript (alpha)': 'coffee',\n};\n\n/**\n * Options available for the 'atscm init' command.\n * @type {Object}\n * @property {InitOption<input>} name The new project's name.\n * @property {InitOption<input>} description The new project's description.\n * @property {InitOption<input>} author The new project's author.\n * @property {InitOption<input>} atviseHost The new project's atvise server host.\n * @property {InitOption<input>} atvisePortOpc The new project's atvise server OPC port.\n * @property {InitOption<input>} atvisePortHttp The new project's atvise server HTTP port.\n * @property {InitOption<confirm>} useLogin If the new porject's atvise server requires login.\n * @property {InitOption<input>} atviseUsername The new project's atvise server login name.\n * @property {InitOption<input>} atvisePassword The new project's atvise server login password.\n * @property {InitOption<list>} configLang The language to use for the new project's configuration.\n */\nexport const InitOptions = {\n  name: new InitOption({\n    message: 'Project name',\n    default: basename(process.cwd()),\n    validate: Validator.name,\n  }),\n  description: new InitOption('Project description'),\n  author: new InitOption('Project author'),\n  atviseHost: new InitOption('Atvise server host', Atviseproject.host),\n  atvisePortOpc: new InitOption('Atvise OPC port', Atviseproject.port.opc),\n  atvisePortHttp: new InitOption('Atvise HTTP port', Atviseproject.port.http),\n  useLogin: new InitOption({\n    message: 'Does your atvise server require login',\n    type: 'confirm',\n    default: false,\n  }),\n  atviseUser: new InitOption({\n    message: ' - Username',\n    when: answers => answers.useLogin,\n  }),\n  atvisePassword: new InitOption({\n    message: ' - Password',\n    when: answers => answers.useLogin,\n  }),\n  configLang: new InitOption({\n    type: 'list',\n    message: 'Configuration language to use',\n    choices: Object.keys(ConfigLangs).map(name => ({ name, value: ConfigLangs[name] })),\n  }),\n};\n\n/**\n * {@link InitOptions}, exported as an array. Required to run {@link Inquirer}.\n * @type {InitOption[]}\n */\nconst InitOptionsAsArray = Object.keys(InitOptions)\n  .map(name => Object.assign({ name }, InitOptions[name]));\n\nexport default InitOptionsAsArray;\n"]}