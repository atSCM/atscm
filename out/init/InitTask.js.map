{"version":3,"sources":["../../src/init/InitTask.js"],"names":["InitTask","filesToHandle","langId","map","p","__dirname","run","options","configLang","install","deps","lang","stream","pipe","helpers","then"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;AAGe,MAAMA,QAAN,CAAe;AAE5B;;;;;AAKA,SAAOC,aAAP,CAAqBC,MAArB,EAA6B;AAC3B,WAAO,CACL,gBADK,EAEL,iBAFK,EAGJ,UAASA,MAAO,SAHZ,EAIJ,UAASA,MAAO,QAJZ,EAKLC,GALK,CAKDC,CAAC,IAAI,gBAAKC,SAAL,EAAgB,0BAAhB,EAA4CD,CAA5C,CALJ,CAAP;AAMD;AAED;;;;;;;;AAMA,SAAOE,GAAP,CAAWC,OAAX,EAAoB;AAClB,UAAML,MAAM,GAAGK,OAAO,CAACC,UAAvB;AAEA,UAAMC,OAAO,GAAGC,sBAAKC,IAAL,CAAUT,MAAV,CAAhB;AAEA,UAAMU,MAAM,GAAG,eAAI,KAAKX,aAAL,CAAmBC,MAAnB,CAAJ,EACZW,IADY,CACP,oCAAWN,OAAX,EAAoB;AACxBO,MAAAA,OAAO,EAAE;AADe,KAApB,CADO,EAIZD,IAJY,CAIP,gBAAK,IAAL,CAJO,CAAf;AAMA,WAAO,8BAAgBD,MAAhB,EACJG,IADI,CACC,OAAO;AAAEN,MAAAA;AAAF,KAAP,CADD,CAAP;AAED;;AAnC2B","sourcesContent":["import { join } from 'path';\nimport { src, dest } from 'gulp';\nimport handlebars from 'gulp-compile-handlebars';\nimport helpers from 'handlebars-helpers';\nimport streamToPromise from 'stream-to-promise';\nimport deps from '../../res/init/templates/dependencies.json';\n\n/**\n * The action run when running \"atscm init\".\n */\nexport default class InitTask {\n\n  /**\n   * Returns the globs of the processed files for the given config lanugage.\n   * @param {string} langId The configuration language used.\n   * @return {String[]} Globs of the files to handle.\n   */\n  static filesToHandle(langId) {\n    return [\n      './general/**/*',\n      './general/**/.*',\n      `./lang/${langId}/**/*.*`,\n      `./lang/${langId}/**/.*`,\n    ].map(p => join(__dirname, '../../res/init/templates', p));\n  }\n\n  /**\n   * Runs the task with the given options.\n   * @param {Object} options The options to use.\n   * @return {Promise<{ install: String[] }, Error>} Resolved with information on further actions\n   * to run or rejected if the task failed.\n   */\n  static run(options) {\n    const langId = options.configLang;\n\n    const install = deps.lang[langId];\n\n    const stream = src(this.filesToHandle(langId))\n      .pipe(handlebars(options, {\n        helpers: helpers(),\n      }))\n      .pipe(dest('./'));\n\n    return streamToPromise(stream)\n      .then(() => ({ install }));\n  }\n\n}\n"],"file":"InitTask.js"}