{"version":3,"sources":["../../src/util/validation.js"],"names":["checkType","isUndefinedOrHasWrongType","item","type","undefined","constructor","param","isValid","Array","forEach"],"mappings":";;;;;kBAmBwBA,S;AAnBxB;;;;;;;AAOA,SAASC,yBAAT,CAAmCC,IAAnC,EAAyCC,IAAzC,EAA+C;AAC7C,SAAOD,SAASE,SAAT,IAAsBF,SAAS,IAA/B,IAAuCA,KAAKG,WAAL,KAAqBF,IAAnE;AACD;;AAED;;;;;;;;AAQe,SAASH,SAAT,CAAmBM,KAAnB,EAA0BH,IAA1B,EAAgC;AAC7C,MAAII,UAAU,IAAd;;AAEA,MAAID,iBAAiBE,KAArB,EAA4B;AAC1BF,UAAMG,OAAN,CAAcP,QAAQ;AAAE,UAAID,0BAA0BC,IAA1B,EAAgCC,IAAhC,CAAJ,EAA2CI,UAAU,KAAV;AAAkB,KAArF;AACD,GAFD,MAEO;AACLA,cAAU,CAACN,0BAA0BK,KAA1B,EAAiCH,IAAjC,CAAX;AACD;;AAED,SAAOI,OAAP;AACD","file":"validation.js","sourcesContent":["/**\n * Checks if the given item is not defined or has an incorrect base type\n * @param {*} item The item to check\n * @param {*} type The base type of the given parameter\n * @return {Boolean} parameter is valid(=true) or not(=false)\n * to ignore.\n */\nfunction isUndefinedOrHasWrongType(item, type) {\n  return item === undefined || item === null || item.constructor !== type;\n}\n\n/**\n * Checks if the given var or object is defined and has the correct base type\n * Works for Arrays and Scalar types\n * @param {*} param The parameter to check\n * @param {*} type The base type of the given parameter\n * @return {Boolean} parameter is valid(=true) or not(=false)\n * to ignore.\n */\nexport default function checkType(param, type) {\n  let isValid = true;\n\n  if (param instanceof Array) {\n    param.forEach(item => { if (isUndefinedOrHasWrongType(item, type)) isValid = false; });\n  } else {\n    isValid = !isUndefinedOrHasWrongType(param, type);\n  }\n\n  return isValid;\n}\n"]}