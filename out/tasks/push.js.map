{"version":3,"sources":["../../src/tasks/push.js"],"names":["push","Logger","debug","versionNode","catch","err","statusCode","StatusCodes","BadNodeIdUnknown","Object","assign","Error","originalError","then","value","version","required","dependencies","valid","split","PushStream","description"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAGA;;;AAGe,SAASA,IAAT,GAAgB;AAC7BC,mBAAOC,KAAP,CAAa,uBAAb;;AAEA,SAAO,mBAASC,oBAAT,EACJC,KADI,CACEC,GAAG,IAAI;AACZ,QAAIA,GAAG,CAACC,UAAJ,IAAkBD,GAAG,CAACC,UAAJ,KAAmBC,+BAAYC,gBAArD,EAAuE;AACrE,YAAMC,MAAM,CAACC,MAAP,CAAc,IAAIC,KAAJ,CAAW;4CAAX,CAAd,EACiC;AAAEC,QAAAA,aAAa,EAAEP;AAAjB,OADjC,CAAN;AAED;;AAED,UAAMA,GAAN;AACD,GARI,EASJQ,IATI,CASC,CAAC;AAAEC,IAAAA,KAAK,EAAEC;AAAT,GAAD,KAAwB;AAC5B,UAAMC,QAAQ,GAAGC,sBAAa,uBAAb,CAAjB;;AACAhB,qBAAOC,KAAP,CAAc,iCAAgCa,OAAQ,EAAtD;;AAEA,QAAI;AACF,YAAMG,KAAK,GAAG,uBAAaH,OAAO,CAACI,KAAR,CAAc,OAAd,EAAuB,CAAvB,CAAb,EAAwCH,QAAxC,CAAd;AAEA,aAAO;AAAED,QAAAA,OAAF;AAAWG,QAAAA,KAAX;AAAkBF,QAAAA;AAAlB,OAAP;AACD,KAJD,CAIE,OAAOX,GAAP,EAAY;AACZ,YAAMI,MAAM,CAACC,MAAP,CAAc,IAAIC,KAAJ,CAAW;4CAAX,CAAd,EACiC;AAAEC,QAAAA,aAAa,EAAEP;AAAjB,OADjC,CAAN;AAED;AACF,GArBI,EAsBJQ,IAtBI,CAsBC,CAAC;AAAEK,IAAAA,KAAF;AAASH,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,GAAD,KAAkC;AACtC,QAAI,CAACE,KAAL,EAAY;AACV,YAAM,IAAIP,KAAJ,CAAW,mCAAkCI,OAAQ,KAAIC,QAAS;4CAAlE,CAAN;AAED;AACF,GA3BI,EA4BJH,IA5BI,CA4BC,MAAM,8BAAU,IAAIO,mBAAJ,CAAe,kBAAI,QAAJ,CAAf,CAAV,CA5BP,CAAP;AA6BD;;AAEDpB,IAAI,CAACqB,WAAL,GAAmB,wCAAnB","sourcesContent":["import toPromise from 'stream-to-promise';\nimport { satisfies as validVersion } from 'semver';\nimport Logger from 'gulplog';\nimport { StatusCodes } from 'node-opcua/lib/datamodel/opcua_status_code';\nimport src from '../lib/gulp/src';\nimport PushStream from '../lib/gulp/PushStream';\nimport { readNode } from '../api';\nimport { versionNode } from '../lib/server/scripts/version';\nimport { dependencies } from '../../package.json';\n\n\n/**\n * Pushes {@link AtviseFile}s to atvise server.\n */\nexport default function push() {\n  Logger.debug('Checking server setup');\n\n  return readNode(versionNode)\n    .catch(err => {\n      if (err.statusCode && err.statusCode === StatusCodes.BadNodeIdUnknown) {\n        throw Object.assign(new Error(`Invalid server scripts version\n- Please run 'atscm import' again to update`), { originalError: err });\n      }\n\n      throw err;\n    })\n    .then(({ value: version }) => {\n      const required = dependencies['@atscm/server-scripts'];\n      Logger.debug(`Found server scripts version: ${version}`);\n\n      try {\n        const valid = validVersion(version.split('-beta')[0], required);\n\n        return { version, valid, required };\n      } catch (err) {\n        throw Object.assign(new Error(`Invalid server scripts version\n- Please run 'atscm import' again to update`), { originalError: err });\n      }\n    })\n    .then(({ valid, version, required }) => {\n      if (!valid) {\n        throw new Error(`Invalid server scripts version: ${version} (${required} required)\n- Please run 'atscm import' again to update`);\n      }\n    })\n    .then(() => toPromise(new PushStream(src('./src/'))));\n}\n\npush.description = 'Push all stored nodes to atvise server';\n"],"file":"push.js"}