{"version":3,"sources":["../../src/tasks/push.js"],"names":["openInBuilderStatus","Set","StatusCodes","BadUserAccessDenied","BadNotWritable","ignoredReferences","ReferenceTypeIds","toParent","HasTypeDefinition","HasModellingRule","performPush","path","options","applyTransforms","Transformer","combinedTransformer","ProjectConfig","useTransformers","TransformDirection","FromFilesystem","ensureReferences","node","references","reduce","result","key","value","has","Object","assign","map","s","keys","length","nodeId","then","outputArguments","failures","Error","join","Logger","debug","Promise","resolve","create","NodeId","parentNodeId","parent","name","nodeClass","typeDefinition","NodeClass","Variable","variantValue","createdNode","createFailed","warn","readNodeFile","r","reverse","t","undefined","handleNode","context","push","err","statusCode","Good","BadNodeIdUnknown","versionNode","catch","originalError","version","required","dependencies","valid","split","promise","getter","browser","_pushedPath","size","formatter","count","description"],"mappings":"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","sourcesContent":["import { satisfies as validVersion } from 'semver';\nimport Logger from 'gulplog';\nimport { StatusCodes } from 'node-opcua/lib/datamodel/opcua_status_code';\nimport { NodeClass } from 'node-opcua/lib/datamodel/nodeclass';\nimport src from '../lib/gulp/src.js';\nimport { readNode, writeNode, createNode, addReferences } from '../api';\nimport { versionNode } from '../lib/server/scripts/version';\nimport { dependencies } from '../../package.json';\nimport Transformer, { TransformDirection } from '../lib/transform/Transformer.js';\nimport NodeId from '../lib/model/opcua/NodeId.js';\nimport { ReferenceTypeIds } from '../lib/model/Node.js';\nimport { reportProgress } from '../lib/helpers/log.js';\nimport ProjectConfig from '../config/ProjectConfig.js';\n\nconst openInBuilderStatus = new Set([\n  StatusCodes.BadUserAccessDenied,\n  StatusCodes.BadNotWritable,\n]);\nconst ignoredReferences = new Set([\n  ReferenceTypeIds.toParent,\n  ReferenceTypeIds.HasTypeDefinition,\n  ReferenceTypeIds.HasModellingRule,\n]);\n\nexport function performPush(path, options) {\n  const applyTransforms = Transformer.combinedTransformer(\n    ProjectConfig.useTransformers, TransformDirection.FromFilesystem);\n\n  const ensureReferences = node => {\n    const references = [...node.references]\n      .reduce((result, [key, value]) => {\n        if (ignoredReferences.has(key)) { return result; }\n\n        return Object.assign(result, {\n          [key]: [...value].map(s => (typeof s === 'string' ? `ns=1;s=${s}` : s)),\n        });\n      }, {});\n\n    if (Object.keys(references).length > 0) {\n      return addReferences(node.nodeId, references)\n        .then(({ outputArguments }) => {\n          const [{ value: failures }] = outputArguments[3].value;\n\n          if (failures) {\n            throw new Error(`Failed to create reference(s) from ${node.nodeId} to ${\n              failures.join(', ')}`);\n          } else {\n            Logger.debug(`Added ${Object.keys(references).length} reference(s) to ${node.nodeId}`);\n          }\n        });\n    }\n\n    return Promise.resolve();\n  };\n\n  const create = node => {\n    const nodeId = new NodeId(node.nodeId);\n    let parentNodeId = node.parent && node.parent.nodeId;\n\n    if (!node.parent) {\n      parentNodeId = nodeId.parent;\n      Logger.debug(`Assuming ${parentNodeId} as parent of ${node.nodeId}`);\n    }\n\n    return createNode(nodeId, {\n      name: node.name,\n      parentNodeId,\n      nodeClass: node.nodeClass,\n      typeDefinition: node.typeDefinition,\n      value: node.nodeClass === NodeClass.Variable && node.variantValue,\n    })\n      .then(({ outputArguments }) => {\n        const [{ value: createdNode }, { value: createFailed }] = outputArguments[3].value;\n\n        if (createFailed) {\n          Logger.warn('Failed to create node', node.nodeId);\n          return Promise.resolve();\n        } else if (createdNode) {\n          Logger.debug('Created node', node.nodeId);\n        } else {\n          // Node already existed\n        }\n\n        return ensureReferences(node);\n      });\n  };\n\n  return src(path, {\n    ...options,\n    readNodeFile(node) {\n      const r = ProjectConfig.useTransformers.reverse()\n        .reduce((result, t) => (result === undefined ?\n          t.readNodeFile(node) :\n          result),\n        undefined);\n      return r === undefined ? true : r;\n    },\n    async handleNode(node) {\n      const context = this;\n\n      await applyTransforms(node, context);\n\n      if (node.push === false) { // Skip write\n        return false;\n      }\n\n      // Create / write node\n      if (node.nodeClass !== NodeClass.Variable) {\n        return create(node);\n      }\n\n      // console.error('write', node.nodeId, node.value);\n      return writeNode(`ns=1;s=${node.nodeId}`, node.variantValue)\n        .then(\n          () => ensureReferences(node),\n          err => {\n            if (openInBuilderStatus.has(err.statusCode)) {\n              Logger.warn(`Error writing node ${\n                node.nodeId\n              }\n    - Make sure it is not opened in atvise builder\n    - Make sure the corresponding datasource is connected`);\n              return StatusCodes.Good;\n            }\n\n            if (err.statusCode === StatusCodes.BadNodeIdUnknown) {\n              Logger.debug(`Node ${\n                node.nodeId\n              } does not exist: Attempting to create it...`);\n\n              return create(node);\n            }\n\n            throw err;\n          }\n        );\n    },\n  });\n}\n\n/**\n * Pushes {@link AtviseFile}s to atvise server.\n */\nexport default function push() {\n  Logger.debug('Checking server setup');\n\n  return readNode(versionNode)\n    .catch(err => {\n      if (err.statusCode && err.statusCode === StatusCodes.BadNodeIdUnknown) {\n        throw Object.assign(new Error(`Invalid server scripts version\n- Please run 'atscm import' again to update`), { originalError: err });\n      }\n\n      throw err;\n    })\n    .then(({ value: version }) => {\n      const required = dependencies['@atscm/server-scripts'];\n      Logger.debug(`Found server scripts version: ${version}`);\n\n      try {\n        const valid = validVersion(version.split('-beta')[0], required);\n\n        return { version, valid, required };\n      } catch (err) {\n        throw Object.assign(new Error(`Invalid server scripts version\n- Please run 'atscm import' again to update`), { originalError: err });\n      }\n    })\n    .then(({ valid, version, required }) => {\n      if (!valid) {\n        throw new Error(`Invalid server scripts version: ${version} (${required} required)\n- Please run 'atscm import' again to update`);\n      }\n    })\n    .then(() => {\n      const promise = performPush('./src');\n\n      return reportProgress(promise, {\n        getter: () => promise.browser._pushedPath.size,\n        formatter: count => `Processed ${count} files`,\n      });\n    });\n}\n\npush.description = 'Push all stored nodes to atvise server';\n"],"file":"push.js"}