{"version":3,"sources":["../../src/tasks/pull.js"],"names":["performPull","nodes","options","writeStream","cleanRenameConfig","clean","applyTransforms","Transformer","combinedTransformer","ProjectConfig","useTransformers","TransformDirection","FromDB","browser","NodeBrowser","handleNode","node","transform","removed","context","_added","addNode","n","push","remove","writeAsync","length","forEach","Object","assign","browse","then","writeRenamefile","pull","process","argv","slice","Session","pool","Logger","info","promise","getter","_pushed","formatter","count","finishTask","handleTaskError","description"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA;;;;;AAKO,SAASA,WAAT,CAAqBC,KAArB,EAA4BC,OAAO,GAAG,EAAtC,EAA0C;AAC/C,QAAMC,WAAW,GAAG,mBAAK,OAAL,EAAc;AAAEC,IAAAA,iBAAiB,EAAEF,OAAO,CAACG;AAA7B,GAAd,CAApB;;AACA,QAAMC,eAAe,GAAGC,qBAAYC,mBAAZ,CACtBC,uBAAcC,eADQ,EAEtBC,gCAAmBC,MAFG,CAAxB;;AAKA,QAAMC,OAAO,GAAG,IAAIC,oBAAJ,iCACXZ,OADW;AAEd,UAAMa,UAAN,CAAiBC,IAAjB,EAAuB;AAAEC,MAAAA,SAAS,GAAG;AAAd,QAAuB,EAA9C,EAAkD;AAChD,UAAIC,OAAO,GAAG,KAAd;AACA,YAAMC,OAAO,GAAG;AACdC,QAAAA,MAAM,EAAE,EADM;;AAEdC,QAAAA,OAAO,CAACC,CAAD,EAAI;AACT,eAAKF,MAAL,CAAYG,IAAZ,CAAiBD,CAAjB;AACD,SAJa;;AAKdE,QAAAA,MAAM,EAAE,MAAM;AACZN,UAAAA,OAAO,GAAG,IAAV;AACD;AAPa,OAAhB;;AAUA,UAAID,SAAJ,EAAe;AACb,cAAMX,eAAe,CAACU,IAAD,EAAOG,OAAP,CAArB;AACD;;AAED,UAAID,OAAJ,EAAa;AACX;AACD;;AACD,YAAMf,WAAW,CAACsB,UAAZ,CAAuBT,IAAvB,CAAN,CAnBgD,CAqBhD;;AACA,UAAIG,OAAO,CAACC,MAAR,CAAeM,MAAnB,EAA2B;AACzBP,QAAAA,OAAO,CAACC,MAAR,CAAeO,OAAf,CAAuBL,CAAC,IAAI,KAAKD,OAAL,CAAaC,CAAb,CAA5B;AACD;AACF;;AA3Ba,KAAhB;AA8BA,SAAOM,MAAM,CAACC,MAAP,CAAchB,OAAO,CAACiB,MAAR,CAAe7B,KAAf,EAAsB8B,IAAtB,CAA2B,MAAM5B,WAAW,CAAC6B,eAAZ,EAAjC,CAAd,EAA+E;AACpFnB,IAAAA;AADoF,GAA/E,CAAP;AAGD;AAED;;;;;;;AAKe,eAAeoB,IAAf,CAAoB/B,OAApB,EAA6B;AAC1C,QAAM;AAAEG,IAAAA;AAAF,MAAY,OAAOH,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwC,kBAAagC,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAb,CAA1D;;AAEAC,mBAAQC,IAAR,GAH0C,CAK1C;;;AACA,QAAMnB,OAAO,GAAG,0BAAhB;AACA,QAAM,4BAAcA,OAAd,CAAN;;AAEA,MAAId,KAAJ,EAAW;AACTkC,qBAAOC,IAAP,CAAY,4CAAZ;;AACA,UAAM,uBAAS,OAAT,CAAN;AACD;;AAED,QAAMC,OAAO,GAAGzC,WAAW,CAACS,uBAAcR,KAAf,EAAsB;AAAEI,IAAAA;AAAF,GAAtB,CAA3B;AAEA,SAAO,yBAAeoC,OAAf,EAAwB;AAC7BC,IAAAA,MAAM,EAAE,MAAMD,OAAO,CAAC5B,OAAR,CAAgB8B,OADD;AAE7BC,IAAAA,SAAS,EAAEC,KAAK,IAAK,aAAYA,KAAM;AAFV,GAAxB,EAGJd,IAHI,CAGCe,iBAHD,EAGaC,sBAHb,CAAP;AAID;;AAEDd,IAAI,CAACe,WAAL,GAAmB,mCAAnB","sourcesContent":["import parseOptions from 'mri';\nimport { emptyDir } from 'fs-extra';\nimport Logger from 'gulplog';\nimport NodeBrowser from '../lib/server/NodeBrowser';\nimport ProjectConfig from '../config/ProjectConfig';\nimport Transformer, { TransformDirection } from '../lib/transform/Transformer.js';\nimport dest from '../lib/gulp/dest';\nimport { reportProgress } from '../lib/helpers/log';\nimport { handleTaskError, finishTask } from '../lib/helpers/tasks';\nimport Session from '../lib/server/Session';\nimport checkAtserver from '../hooks/check-atserver';\nimport { setupContext } from '../hooks/hooks';\n\n/**\n * Pulls the given nodes from the server.\n * @param {NodeId[]} nodes The nodes to pull from the server.\n * @param {Object} options Options passed to {@link NodeBrowser}.\n */\nexport function performPull(nodes, options = {}) {\n  const writeStream = dest('./src', { cleanRenameConfig: options.clean });\n  const applyTransforms = Transformer.combinedTransformer(\n    ProjectConfig.useTransformers,\n    TransformDirection.FromDB\n  );\n\n  const browser = new NodeBrowser({\n    ...options,\n    async handleNode(node, { transform = true } = {}) {\n      let removed = false;\n      const context = {\n        _added: [],\n        addNode(n) {\n          this._added.push(n);\n        },\n        remove: () => {\n          removed = true;\n        },\n      };\n\n      if (transform) {\n        await applyTransforms(node, context);\n      }\n\n      if (removed) {\n        return;\n      }\n      await writeStream.writeAsync(node);\n\n      // Enqueue added nodes\n      if (context._added.length) {\n        context._added.forEach(n => this.addNode(n));\n      }\n    },\n  });\n\n  return Object.assign(browser.browse(nodes).then(() => writeStream.writeRenamefile()), {\n    browser,\n  });\n}\n\n/**\n * Pulls all nodes from atvise server.\n * @param {Object} [options] The options to use.\n * @param {boolean} [options.clean] If the source directory should be cleaned first.\n */\nexport default async function pull(options) {\n  const { clean } = typeof options === 'object' ? options : parseOptions(process.argv.slice(2));\n\n  Session.pool();\n\n  // Run hooks\n  const context = setupContext();\n  await checkAtserver(context);\n\n  if (clean) {\n    Logger.info('Using --clean, removing pulled files first');\n    await emptyDir('./src');\n  }\n\n  const promise = performPull(ProjectConfig.nodes, { clean });\n\n  return reportProgress(promise, {\n    getter: () => promise.browser._pushed,\n    formatter: count => `Processed ${count} nodes`,\n  }).then(finishTask, handleTaskError);\n}\n\npull.description = 'Pull all nodes from atvise server';\n"],"file":"pull.js"}