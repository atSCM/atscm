{"version":3,"sources":["../../src/tasks/pull.js"],"names":["performPull","nodes","options","writeStream","cleanRenameConfig","clean","applyTransforms","Transformer","combinedTransformer","ProjectConfig","useTransformers","TransformDirection","FromDB","browser","NodeBrowser","handleNode","node","transform","context","_added","addNode","n","push","writeAsync","length","forEach","Object","assign","browse","then","writeRenamefile","pull","process","argv","slice","Session","pool","Promise","resolve","Logger","info","promise","getter","_pushed","formatter","count","finishTask","handleTaskError","description"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEO,SAASA,WAAT,CAAqBC,KAArB,EAA4BC,OAAO,GAAG,EAAtC,EAA0C;AAC/C,QAAMC,WAAW,GAAG,mBAAK,OAAL,EAAc;AAAEC,IAAAA,iBAAiB,EAAEF,OAAO,CAACG;AAA7B,GAAd,CAApB;;AACA,QAAMC,eAAe,GAAGC,qBAAYC,mBAAZ,CACtBC,uBAAcC,eADQ,EACSC,gCAAmBC,MAD5B,CAAxB;;AAGA,QAAMC,OAAO,GAAG,IAAIC,oBAAJ,mBACXZ,OADW;AAEd,UAAMa,UAAN,CAAiBC,IAAjB,EAAuB;AAAEC,MAAAA,SAAS,GAAG;AAAd,QAAuB,EAA9C,EAAkD;AAChD,YAAMC,OAAO,GAAG;AACdC,QAAAA,MAAM,EAAE,EADM;;AAEdC,QAAAA,OAAO,CAACC,CAAD,EAAI;AACT,eAAKF,MAAL,CAAYG,IAAZ,CAAiBD,CAAjB;AACD;;AAJa,OAAhB;;AAOA,UAAIJ,SAAJ,EAAe;AACb,cAAMX,eAAe,CAACU,IAAD,EAAOE,OAAP,CAArB;AACD;;AAED,YAAMf,WAAW,CAACoB,UAAZ,CAAuBP,IAAvB,CAAN,CAZgD,CAchD;;AACA,UAAIE,OAAO,CAACC,MAAR,CAAeK,MAAnB,EAA2B;AACzBN,QAAAA,OAAO,CAACC,MAAR,CAAeM,OAAf,CAAuBJ,CAAC,IAAI,KAAKD,OAAL,CAAaC,CAAb,CAA5B;AACD;AACF;;AApBa,KAAhB;AAuBA,SAAOK,MAAM,CAACC,MAAP,CACLd,OAAO,CAACe,MAAR,CAAe3B,KAAf,EACG4B,IADH,CACQ,MAAM1B,WAAW,CAAC2B,eAAZ,EADd,CADK,EAGH;AAAEjB,IAAAA;AAAF,GAHG,CAAP;AAID;AAED;;;;;;;AAKe,SAASkB,IAAT,CAAc7B,OAAd,EAAuB;AACpC,QAAM;AAAEG,IAAAA;AAAF,MAAY,OAAOH,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwC,kBAAa8B,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAb,CAA1D;;AAEAC,mBAAQC,IAAR;;AAEA,SAAOC,OAAO,CAACC,OAAR,GACJT,IADI,CACC,YAAY;AAChB,QAAIxB,KAAJ,EAAW;AACTkC,uBAAOC,IAAP,CAAY,4CAAZ;;AACA,YAAM,uBAAS,OAAT,CAAN;AACD;AACF,GANI,EAOJX,IAPI,CAOC,MAAM;AACV,UAAMY,OAAO,GAAGzC,WAAW,CAACS,uBAAcR,KAAf,EAAsB;AAAEI,MAAAA;AAAF,KAAtB,CAA3B;AAEA,WAAO,yBAAeoC,OAAf,EAAwB;AAC7BC,MAAAA,MAAM,EAAE,MAAMD,OAAO,CAAC5B,OAAR,CAAgB8B,OADD;AAE7BC,MAAAA,SAAS,EAAEC,KAAK,IAAK,aAAYA,KAAM;AAFV,KAAxB,CAAP;AAID,GAdI,EAeJhB,IAfI,CAeCiB,iBAfD,EAeaC,sBAfb,CAAP;AAgBD;;AAEDhB,IAAI,CAACiB,WAAL,GAAmB,mCAAnB","sourcesContent":["import parseOptions from 'mri';\nimport { emptyDir } from 'fs-extra';\nimport Logger from 'gulplog';\nimport NodeBrowser from '../lib/server/NodeBrowser';\nimport ProjectConfig from '../config/ProjectConfig';\nimport Transformer, { TransformDirection } from '../lib/transform/Transformer.js';\nimport dest from '../lib/gulp/dest';\nimport { reportProgress } from '../lib/helpers/log';\nimport { handleTaskError, finishTask } from '../lib/helpers/tasks';\nimport Session from '../lib/server/Session';\n\nexport function performPull(nodes, options = {}) {\n  const writeStream = dest('./src', { cleanRenameConfig: options.clean });\n  const applyTransforms = Transformer.combinedTransformer(\n    ProjectConfig.useTransformers, TransformDirection.FromDB);\n\n  const browser = new NodeBrowser({\n    ...options,\n    async handleNode(node, { transform = true } = {}) {\n      const context = {\n        _added: [],\n        addNode(n) {\n          this._added.push(n);\n        },\n      };\n\n      if (transform) {\n        await applyTransforms(node, context);\n      }\n\n      await writeStream.writeAsync(node);\n\n      // Enqueue added nodes\n      if (context._added.length) {\n        context._added.forEach(n => this.addNode(n));\n      }\n    },\n  });\n\n  return Object.assign(\n    browser.browse(nodes)\n      .then(() => writeStream.writeRenamefile())\n    , { browser });\n}\n\n/**\n * Pulls all nodes from atvise server.\n * @param {Object} [options] The options to use.\n * @param {boolean} [options.clean] If the source directory should be cleaned first.\n */\nexport default function pull(options) {\n  const { clean } = typeof options === 'object' ? options : parseOptions(process.argv.slice(2));\n\n  Session.pool();\n\n  return Promise.resolve()\n    .then(async () => {\n      if (clean) {\n        Logger.info('Using --clean, removing pulled files first');\n        await emptyDir('./src');\n      }\n    })\n    .then(() => {\n      const promise = performPull(ProjectConfig.nodes, { clean });\n\n      return reportProgress(promise, {\n        getter: () => promise.browser._pushed,\n        formatter: count => `Processed ${count} nodes`,\n      });\n    })\n    .then(finishTask, handleTaskError);\n}\n\npull.description = 'Pull all nodes from atvise server';\n"],"file":"pull.js"}