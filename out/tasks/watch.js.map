{"version":3,"sources":["../../src/tasks/watch.js"],"names":["WatchTask","constructor","browserSyncInstance","browserSync","create","_pulling","_pushing","_lastPull","_lastPushed","directoryToWatch","_waitForWatcher","watcher","Promise","resolve","reject","on","err","startFileWatcher","catch","code","Logger","info","Object","assign","message","then","glob","watchman","process","platform","startServerWatcher","ServerWatcher","initBrowserSync","options","init","proxy","ProjectConfig","host","port","http","ws","handleFileChange","path","root","stats","AtviseFile","normalizeMtime","mtime","source","base","recursive","PushStream","file","nodeId","toString","reload","handleServerChange","readResult","stream","NodeStream","PullStream","run","open","all","fileWatcher","serverWatcher","emitter","debug","bind","watch","description"],"mappings":"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","sourcesContent":["import { join } from 'path';\nimport sane from 'sane';\nimport browserSync from 'browser-sync';\nimport Logger from 'gulplog';\nimport src from '../lib/gulp/src';\nimport PushStream from '../lib/gulp/PushStream';\nimport PullStream from '../lib/gulp/PullStream';\nimport AtviseFile from '../lib/server/AtviseFile';\nimport ServerWatcher from '../lib/server/Watcher';\nimport ProjectConfig from '../config/ProjectConfig';\nimport { validateDirectoryExists } from '../util/fs';\nimport NodeStream from '../lib/server/NodeStream';\n\n/**\n * The task executed when running `atscm watch`.\n */\nexport class WatchTask {\n\n  /**\n   * Creates a new watch task instance. Also creates a new Browsersync instance.\n   */\n  constructor() {\n    /**\n     * The Browsersync instance used.\n     * @type {events~Emitter}\n     */\n    this.browserSyncInstance = browserSync.create();\n\n    /**\n     * If the task is currently pulling.\n     * @type {boolean}\n     */\n    this._pulling = false;\n\n    /**\n     * If the task is currently pushing.\n     * @type {boolean}\n     */\n    this._pushing = false;\n\n    /**\n     * Timestamp of the last pull\n     * @type {number}\n     */\n    this._lastPull = 0;\n\n    /**\n     * The {@link NodeId} of the last push.\n     * @type {?NodeId}\n     */\n    this._lastPushed = null;\n  }\n\n  /**\n   * The directory to watch.\n   * @type {string}\n   */\n  get directoryToWatch() {\n    return './src';\n  }\n\n  /**\n   * Waits for a watcher (which can actually be any kind of {@link events~Emitter}) to emit a\n   * \"ready\" event.\n   * @param {events~Emitter} watcher The watcher to wait for.\n   * @return {Promise<events~Emitter, Error>} Fulfilled with the set up watcher or rejected with the\n   * watcher error that occurred while waiting for it to get ready.\n   */\n  _waitForWatcher(watcher) {\n    return new Promise((resolve, reject) => {\n      watcher.on('error', err => reject(err));\n      watcher.on('ready', () => resolve(watcher));\n    });\n  }\n\n  /**\n   * Starts a file watcher for the directory {@link WatchTask#directoryToWatch}.\n   * @return {Promise<sane~Watcher, Error>} Fulfilled with the file watcher once it is ready or\n   * rejected with the error that occurred while starting the watcher.\n   */\n  startFileWatcher() {\n    return validateDirectoryExists(this.directoryToWatch)\n      .catch(err => {\n        if (err.code === 'ENOENT') {\n          Logger.info(`Create a directory at ${this.directoryToWatch} or run \\`atscm pull\\` first`);\n\n          Object.assign(err, {\n            message: `Directory ${this.directoryToWatch} does not exist`,\n          });\n        }\n\n        throw err;\n      })\n      .then(() => this._waitForWatcher(sane(this.directoryToWatch, {\n        glob: '**/*.*',\n        watchman: process.platform === 'darwin',\n      })));\n  }\n\n  /**\n   * Starts a watcher that watches the atvise server for changes.\n   * @return {Promise<Watcher, Error>} Fulfilled with the server watcher once it is ready or\n   * rejected with the error that occurred while starting the watcher.\n   */\n  startServerWatcher() {\n    return this._waitForWatcher(new ServerWatcher());\n  }\n\n  /**\n   * Initializes {@link WatchTask#browserSyncInstance}.\n   * @param {Object} options The options to pass to browsersync.\n   * @see https://browsersync.io/docs/options\n   */\n  initBrowserSync(options) {\n    this.browserSyncInstance.init(Object.assign({\n      proxy: `${ProjectConfig.host}:${ProjectConfig.port.http}`,\n      ws: true,\n      // logLevel: 'debug', FIXME: Use log level specified in cli options\n      // logPrefix: '',\n    }, options));\n\n    /* bs.logger.logOne = function(args, msg, level, unprefixed) {\n      args = args.slice(2);\n\n      if (this.config.useLevelPrefixes && !unprefixed) {\n        msg = this.config.prefixes[level] + msg;\n      }\n\n      msg = this.compiler.compile(msg, unprefixed);\n\n      args.unshift(msg);\n\n      Logger[level](format(...args));\n\n      this.resetTemps();\n\n      return this;\n    }; */\n  }\n\n  /**\n   * Handles a file change.\n   * @param {string} path The path of the file that changed.\n   * @param {string} root The root of the file that changed.\n   * @param {fs~Stats} stats The stats of the file that changed.\n   * @return {Promise<boolean>} Resolved with `true` if the change triggered a push operation,\n   * with `false` otherwise.\n   */\n  handleFileChange(path, root, stats) {\n    return new Promise(resolve => {\n      if (!this._pulling && AtviseFile.normalizeMtime(stats.mtime) > this._lastPull) {\n        this._pushing = true;\n        Logger.info(path, 'changed');\n\n        const source = src(join(root, path), { base: root, recursive: false });\n\n        (new PushStream(source))\n          .on('data', file => (this._lastPushed = file.nodeId.toString()))\n          .on('end', () => {\n            this._pushing = false;\n            this.browserSyncInstance.reload();\n\n            resolve(true);\n          });\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  /**\n   * Handles an atvise server change.\n   * @param {ReadStream.ReadResult} readResult The read result of the modification.\n   * @return {Promise<boolean>} Resolved with `true` if the change triggered a pull operation,\n   * with `false` otherwise.\n   */\n  handleServerChange(readResult) {\n    return new Promise(resolve => {\n      if (!this._pushing) {\n        if (readResult.nodeId.toString() !== this._lastPushed) {\n          this._pulling = true;\n          Logger.info(readResult.nodeId.toString(), 'changed');\n\n          // FIXME: Reuse read value\n          const stream = new NodeStream([readResult.nodeId], { recursive: false });\n\n          (new PullStream(stream))\n            .on('finish', () => {\n              this._pulling = false;\n              this._lastPull = AtviseFile.normalizeMtime(readResult.mtime);\n              this.browserSyncInstance.reload();\n\n              resolve(true);\n            });\n        } else {\n          this._lastPushed = null;\n\n          resolve(false);\n        }\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  /**\n   * Starts the file and server watchers, initializes Browsersync and registers change event\n   * handlers.\n   * @param {Object} [options] The options to pass to browsersync.\n   * @param {boolean} [options.open=true] If the browser should be opened once browsersync is up.\n   * @return {Promise<{ serverWatcher: Watcher, fileWatcher: sane~Watcher }, Error>} Fulfilled once\n   * all watchers are set up and Browsersync was initialized.\n   */\n  run({ open = true } = { open: true }) {\n    return Promise.all([\n      this.startFileWatcher(),\n      this.startServerWatcher(),\n    ])\n      .then(([fileWatcher, serverWatcher]) => {\n        this.browserSyncInstance.emitter.on('service:running', () => {\n          Logger.info('Watching for changes...');\n          Logger.debug('Press Ctrl-C to exit');\n        });\n\n        fileWatcher.on('change', this.handleFileChange.bind(this));\n        serverWatcher.on('change', this.handleServerChange.bind(this));\n\n        this.initBrowserSync({ open });\n\n        return { fileWatcher, serverWatcher };\n      });\n  }\n\n}\n\n/**\n * The gulp task invoced when running `atscm watch`.\n * @param {Object} options The options to pass to the watch task, see {@link WatchTask#run} for\n * available options.\n * @return {Promise<{ serverWatcher: Watcher, fileWatcher: sane~Watcher }, Error>} Fulfilled once\n * all watchers are set up and Browsersync was initialized.\n */\nexport default function watch(options) {\n  return (new WatchTask()).run(options);\n}\n\nwatch.description = 'Watch local files and atvise server nodes to trigger pull/push on change';\n"],"file":"watch.js"}