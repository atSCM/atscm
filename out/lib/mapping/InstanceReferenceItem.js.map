{"version":3,"sources":["../../../src/lib/mapping/InstanceReferenceItem.js"],"names":["InstanceReferenceItem","constructor","nodeId","references","itemTypeDefinition","ReferenceDescription","Error","source","configObj","map","ref","addRefToConfig","config","createConfigItem","shouldBeRead","createRefConfig","refConfig","referenceName","referenceTypeId","value","items","push","referenceIdValue","dataType","String","arrayType","Scalar","JSON","stringify","typeDefinition"],"mappings":";;;;;;AAAA;;AAMA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;AAIe,MAAMA,qBAAN,+BAAgD;;AAE7D;;;;AAIAC,cAAYC,MAAZ,EAAoBC,UAApB,EAAgCC,kBAAhC,EAAoD;AAClD,QAAI,CAAC,0BAAUF,MAAV,mBAAD,IAA8B,CAAC,0BAAUC,UAAV,EAAsB,0BAAcE,oBAApC,CAA/B,IACF,CAAC,0BAAUD,kBAAV,mBADH,EAC0C;AACxC,YAAM,IAAIE,KAAJ,CAAU,mEAAV,CAAN;AACD;;AAED,UAAMJ,MAAN;;AAEA;;;;AAIA,SAAKK,MAAL,GAAcJ,UAAd;;AAEA;;;;AAIA,SAAKC,kBAAL,GAA0BA,kBAA1B;;AAEA,UAAMI,YAAY,EAAlB;;AAEAL,eAAWM,GAAX,CAAeC,OAAO,KAAKC,cAAL,CAAoBD,GAApB,EAAyBF,SAAzB,CAAtB;AACA,SAAKI,MAAL,GAAc,KAAKC,gBAAL,CAAsBL,SAAtB,CAAd;AACD;;AAED;;;;AAIA,MAAIM,YAAJ,GAAmB;AACjB,WAAO,KAAP;AACD;;AAED;;;;;;AAMAC,kBAAgBL,GAAhB,EAAqB;AAAE;AACrB,UAAM,IAAIJ,KAAJ,CAAU,mDACd,kCADI,CAAN;AAED;;AAED;;;;;AAKAK,iBAAeD,GAAf,EAAoBM,SAApB,EAA+B;AAC7B,UAAMC,gBAAgB,kCAAwBP,IAAIQ,eAAJ,CAAoBC,KAA5C,CAAtB;;AAEA,QAAIH,UAAUC,aAAV,CAAJ,EAA8B;AAC5B;AACAD,gBAAUC,aAAV,EAAyBG,KAAzB,CAA+BC,IAA/B,CAAoC,KAAKN,eAAL,CAAqBL,GAArB,CAApC;AACD,KAHD,MAGO;AACL;AACAM,gBAAUC,aAAV,IAA2B;AACzBK,0BAAkB,4BAAiBL,aAAjB,CADO;AAEzBG,eAAO,CAAC,KAAKL,eAAL,CAAqBL,GAArB,CAAD;AAFkB,OAA3B;AAID;AACF;;AAED;;;;AAIAG,mBAAiBD,MAAjB,EAAyB;AACvB,WAAO;AACLV,cAAQ,KAAKA,MADR;AAELqB,gBAAU,oBAASC,MAFd;AAGLC,iBAAW,4BAAiBC,MAHvB;AAILP,aAAOQ,KAAKC,SAAL,CAAehB,MAAf,CAJF;AAKLiB,sBAAgB,KAAKzB;AALhB,KAAP;AAOD;AAnF4D;kBAA1CJ,qB","file":"InstanceReferenceItem.js","sourcesContent":["import {\n  browse_service as BrowseService,\n  ReferenceTypeIds,\n  DataType,\n  VariantArrayType,\n} from 'node-opcua';\nimport checkType from '../../util/validation';\nimport NodeId from '../ua/NodeId';\nimport MappingItem from './MappingItem';\nimport ReverseReferenceTypeIds from '../ua/ReverseReferenceTypeIds';\n\n/**\n * Mapping item for node type definitions and other reference types\n * @abstract\n */\nexport default class InstanceReferenceItem extends MappingItem {\n\n  /**\n   * Creates a new InstanceReferenceItem\n   * @param {node-opcua~NodeId} nodeId The browsed nodeId.\n   */\n  constructor(nodeId, references, itemTypeDefinition) {\n    if (!checkType(nodeId, NodeId) || !checkType(references, BrowseService.ReferenceDescription) ||\n      !checkType(itemTypeDefinition, NodeId)) {\n      throw new Error('InstanceReferenceItem#constructor: Can not parse given arguments!');\n    }\n\n    super(nodeId);\n\n    /**\n     * Mapping item configuration source\n     * @type {node-opcua~ReferenceDescription[]}\n     */\n    this.source = references;\n\n    /**\n     * The item type definition\n     * @type {node-opcua~NodeId}\n     */\n    this.itemTypeDefinition = itemTypeDefinition;\n\n    const configObj = {};\n\n    references.map(ref => this.addRefToConfig(ref, configObj));\n    this.config = this.createConfigItem(configObj);\n  }\n\n  /**\n   * `true` for read node mapping items.\n   * @type {Boolean}\n   */\n  get shouldBeRead() {\n    return false;\n  }\n\n  /**\n   * Returns a configuration object for the given {node-opcua~ReferenceDescription}.\n   * @param {node-opcua~ReferenceDescription} ref The reference description to process\n   * @return {*} The configuration for the given reference\n   * @abstract\n   */\n  createRefConfig(ref) { // eslint-disable-line no-unused-vars\n    throw new Error('InstanceReferenceItem#createRefConfigObj must ' +\n      'be implemented by all subclasses');\n  }\n\n  /**\n   * Adds the given {node-opcua~ReferenceDescription} to the config object.\n   * @param {node-opcua~ReferenceDescription} ref The reference description to process\n   * @param {Object} refConfig The reference object to add the given reference\n   */\n  addRefToConfig(ref, refConfig) {\n    const referenceName = ReverseReferenceTypeIds[ref.referenceTypeId.value];\n\n    if (refConfig[referenceName]) {\n      // eslint-disable-next-line no-param-reassign\n      refConfig[referenceName].items.push(this.createRefConfig(ref));\n    } else {\n      // eslint-disable-next-line no-param-reassign\n      refConfig[referenceName] = {\n        referenceIdValue: ReferenceTypeIds[referenceName],\n        items: [this.createRefConfig(ref)],\n      };\n    }\n  }\n\n  /**\n   * Creates a node configuration object for type definitions and atvise reference types\n   * @param {Object} config The object that contains the reference configuration\n   */\n  createConfigItem(config) {\n    return {\n      nodeId: this.nodeId,\n      dataType: DataType.String,\n      arrayType: VariantArrayType.Scalar,\n      value: JSON.stringify(config),\n      typeDefinition: this.itemTypeDefinition,\n    };\n  }\n}\n"]}