{"version":3,"sources":["../../../src/lib/mapping/ReadNodeItem.js"],"names":["ReadNodeItem","constructor","nodeId","reference","ReferenceDescription","Error","source","dataValueAdded","shouldBeRead","createConfigItemFromDataValue","dataValue","config","variant","value","typeDefinition","dataType","$dataType","arrayType","$arrayType","mtime","sourceTimestamp"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;AAGe,MAAMA,YAAN,+BAAuC;AACpD;;;;;;AAMAC,cAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAC7B,QAAI,CAAC,0BAAUD,MAAV,mBAAD,IAA8B,CAAC,0BAAUC,SAAV,EAAqB,0BAAcC,oBAAnC,CAAnC,EAA6F;AAC3F,YAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAED,UAAMF,UAAUD,MAAhB;;AAEA;;;;AAIA,SAAKI,MAAL,GAAcH,SAAd;;AAGA;;;;AAIA,SAAKI,cAAL,GAAsB,KAAtB;AACD;;AAED;;;;AAIA,MAAIC,YAAJ,GAAmB;AACjB,WAAO,IAAP;AACD;;AAGD;;;;;;AAMAC,gCAA8BC,SAA9B,EAAyC;AACvC,UAAMC,SAAS,KAAKA,MAApB;AACA,UAAMC,UAAUF,UAAUG,KAA1B;AACA,UAAMP,SAAS,KAAKA,MAApB;;AAEA,SAAKC,cAAL,GAAsB,IAAtB;;AAEAI,WAAOT,MAAP,GAAgBI,OAAOJ,MAAvB;AACAS,WAAOG,cAAP,GAAwBR,OAAOQ,cAA/B;AACAH,WAAOE,KAAP,GAAeD,QAAQC,KAAvB;AACAF,WAAOI,QAAP,GAAkBH,QAAQI,SAA1B;AACAL,WAAOM,SAAP,GAAmBL,QAAQM,UAA3B;AACAP,WAAOQ,KAAP,GAAeT,UAAUU,eAAzB;AACD;AAxDmD;kBAAjCpB,Y","file":"ReadNodeItem.js","sourcesContent":["import { browse_service as BrowseService } from 'node-opcua';\nimport checkType from '../../util/validation';\nimport NodeId from '../ua/NodeId';\nimport MappingItem from './MappingItem';\n\n/**\n * Mapping item object for variable nodes\n */\nexport default class ReadNodeItem extends MappingItem {\n  /**\n   * Creates a new ReadNodeItem.\n   * @param {node-opcua~NodeId} nodeId The browsed nodeId.\n   * @param {node-opcua~ReferenceDescription} reference The {@link node-opcua~ReferenceDescription}\n   * to create the read node mapping item for.\n   */\n  constructor(nodeId, reference) {\n    if (!checkType(nodeId, NodeId) || !checkType(reference, BrowseService.ReferenceDescription)) {\n      throw new Error('MappingItem#constructor: Can not parse given arguments!');\n    }\n\n    super(reference.nodeId);\n\n    /**\n     * configItem source\n     * @type {node-opcua~ReferenceDescription}\n     */\n    this.source = reference;\n\n\n    /**\n     * 'true' for read node items that already contain a read datavalue info\n     * @type {node-opcua~ReferenceDescription}\n     */\n    this.dataValueAdded = false;\n  }\n\n  /**\n   * `true` for read node mapping items.\n   * @type {Boolean}\n   */\n  get shouldBeRead() {\n    return true;\n  }\n\n\n  /**\n   * Creates the config object from the given {node-opcua~DataValue}\n   * options.\n   * @param {node-opcua~DataValue} dataValue The data value object that is added to\n   * the read node config\n   */\n  createConfigItemFromDataValue(dataValue) {\n    const config = this.config;\n    const variant = dataValue.value;\n    const source = this.source;\n\n    this.dataValueAdded = true;\n\n    config.nodeId = source.nodeId;\n    config.typeDefinition = source.typeDefinition;\n    config.value = variant.value;\n    config.dataType = variant.$dataType;\n    config.arrayType = variant.$arrayType;\n    config.mtime = dataValue.sourceTimestamp;\n  }\n}\n"]}