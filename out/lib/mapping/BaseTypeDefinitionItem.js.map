{"version":3,"sources":["../../../src/lib/mapping/BaseTypeDefinitionItem.js"],"names":["BaseTypeDefinitionResourceId","BaseTypeDefinitionItem","constructor","nodeId","reference","ReferenceDescription","Error","source","config","dataType","String","arrayType","Scalar","value","JSON","stringify","createRefConfigObj","typeDefinition","shouldBeRead","ref","nodeClass","$nodeClass","key","refNodeId","toString"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAGA;;;;AAIA,MAAMA,+BAA+B,qBAAW,2BAAX,CAArC;;AAGA;;;;AAIe,MAAMC,sBAAN,+BAAiD;;AAE9D;;;;;;AAMAC,cAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAC7B,QAAI,CAAC,0BAAUD,MAAV,mBAAD,IAA8B,CAAC,0BAAUC,SAAV,EAAqB,0BAAcC,oBAAnC,CAAnC,EAA6F;AAC3F,YAAM,IAAIC,KAAJ,CAAU,oEAAV,CAAN;AACD;;AAED,UAAMF,UAAUD,MAAhB;;AAEA;;;;AAIA,SAAKI,MAAL,GAAcH,SAAd;;AAEA,SAAKI,MAAL,GAAc;AACZL,cAAQC,UAAUD,MADN;AAEZM,gBAAU,oBAASC,MAFP;AAGZC,iBAAW,4BAAiBC,MAHhB;AAIZC,aAAOC,KAAKC,SAAL,CAAe,KAAKC,kBAAL,CAAwBZ,SAAxB,CAAf,CAJK;AAKZa,sBAAgBjB;AALJ,KAAd;AAOD;;AAED;;;;AAIA,MAAIkB,YAAJ,GAAmB;AACjB,WAAO,KAAP;AACD;;AAED;;;;;AAKAF,qBAAmBG,GAAnB,EAAwB;AACtB,WAAO;AACLC,iBAAWD,IAAIE,UAAJ,CAAeC,GADrB;AAELC,iBAAWJ,IAAIF,cAAJ,CAAmBO,QAAnB;AAFN,KAAP;AAID;AAhD6D;kBAA3CvB,sB","file":"BaseTypeDefinitionItem.js","sourcesContent":["import { browse_service as BrowseService, DataType, VariantArrayType } from 'node-opcua';\nimport checkType from '../../util/validation';\nimport NodeId from '../ua/NodeId';\nimport MappingItem from './MappingItem';\n\n\n/**\n * Custom Atvise File Type for base type definitions\n * @type {node-opcua~NodeId}\n */\nconst BaseTypeDefinitionResourceId = new NodeId('Custom.BaseTypeDefinition');\n\n\n/**\n * Mapping item object for variable nodes\n */\n\nexport default class BaseTypeDefinitionItem extends MappingItem {\n\n  /**\n   * Creates a new ReadNodeItem.\n   * @param {node-opcua~NodeId} nodeId The browsed nodeId.\n   * @param {node-opcua~ReferenceDescription} reference The {@link node-opcua~ReferenceDescription}\n   * to create the read node mapping item for.\n   */\n  constructor(nodeId, reference) {\n    if (!checkType(nodeId, NodeId) || !checkType(reference, BrowseService.ReferenceDescription)) {\n      throw new Error('BaseTypeDefinitionItem#constructor: Can not parse given arguments!');\n    }\n\n    super(reference.nodeId);\n\n    /**\n     * configItem source\n     * @type {node-opcua~ReferenceDescription}\n     */\n    this.source = reference;\n\n    this.config = {\n      nodeId: reference.nodeId,\n      dataType: DataType.String,\n      arrayType: VariantArrayType.Scalar,\n      value: JSON.stringify(this.createRefConfigObj(reference)),\n      typeDefinition: BaseTypeDefinitionResourceId,\n    };\n  }\n\n  /**\n   * `true` for read node mapping items.\n   * @type {Boolean}\n   */\n  get shouldBeRead() {\n    return false;\n  }\n\n  /**\n   * Returns a configuration object for the given {node-opcua~ReferenceDescription}.\n   * @param {node-opcua~ReferenceDescription} ref The reference description to process\n   * @return {Object} The configuration object for the given reference\n   */\n  createRefConfigObj(ref) {\n    return {\n      nodeClass: ref.$nodeClass.key,\n      refNodeId: ref.typeDefinition.toString(),\n    };\n  }\n}\n"]}