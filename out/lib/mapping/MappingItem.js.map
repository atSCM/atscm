{"version":3,"sources":["../../../src/lib/mapping/MappingItem.js"],"names":["MappingItem","constructor","nodeId","Error","config","source","undefined","shouldBeRead","configObj","configSource"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAGA;;;;;AAKe,MAAMA,WAAN,CAAkB;AAC/B;;;;AAIAC,cAAYC,MAAZ,EAAoB;AAClB,QAAI,CAAC,0BAAUA,MAAV,mBAAL,EAAgC;AAC9B,YAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAED;;;;AAIA,SAAKD,MAAL,GAAcA,MAAd;;AAEA;;;;AAIA,SAAKE,MAAL,GAAc,EAAd;;AAEA;;;;AAIA,SAAKC,MAAL,GAAcC,SAAd;AACD;;AAED;;;;AAIA,MAAIC,YAAJ,GAAmB;AACjB,UAAM,IAAIJ,KAAJ,CAAU,gEAAV,CAAN;AACD;;AAED;;;;AAIA,MAAIK,SAAJ,GAAgB;AACd,QAAI,CAAC,KAAKJ,MAAV,EAAkB;AAChB,YAAM,IAAID,KAAJ,CAAU,2DAAV,CAAN;AACD;AACD,WAAO,KAAKC,MAAZ;AACD;;AAED;;;;AAIA,MAAIK,YAAJ,GAAmB;AACjB,QAAI,CAAC,KAAKJ,MAAV,EAAkB;AAChB,YAAM,IAAIF,KAAJ,CAAU,8DAAV,CAAN;AACD;AACD,WAAO,KAAKE,MAAZ;AACD;AAzD8B;kBAAZL,W","file":"MappingItem.js","sourcesContent":["import checkType from '../../util/validation';\nimport NodeId from '../ua/NodeId';\n\n\n/**\n * Contains the configuration object for atvise nodes and references tht\n * are mapped on the file system\n * @abstract\n */\nexport default class MappingItem {\n  /**\n   * Creates a new MappingItem\n   * @param {node-opcua~NodeId} nodeId The browsed nodeId.\n   */\n  constructor(nodeId) {\n    if (!checkType(nodeId, NodeId)) {\n      throw new Error('MappingItem#constructor: Can not parse given arguments!');\n    }\n\n    /**\n     * The browsed node id\n     * @type {node-opcua~NodeId}\n     */\n    this.nodeId = nodeId;\n\n    /**\n     * Contains mapping item config\n     * @type {Object}\n     */\n    this.config = {};\n\n    /**\n     * Contains mapping item config\n     * @type {node-opcua~ReferenceDescription or node-opcua~ReferenceDescription[]}\n     */\n    this.source = undefined;\n  }\n\n  /**\n   * `true` for read node mapping items.\n   * @type {Boolean}\n   */\n  get shouldBeRead() {\n    throw new Error('MappingItem#shouldBeRead must be implemented by all subclasses');\n  }\n\n  /**\n   * The mapping item configuration object\n   * @type {Object}\n   */\n  get configObj() {\n    if (!this.config) {\n      throw new Error('MappingItem#configObj Configuration object is not defined');\n    }\n    return this.config;\n  }\n\n  /**\n   * The mapping item configuration source\n   * @type {node-opcua~ReferenceDescription or node-opcua~ReferenceDescription[]}\n   */\n  get configSource() {\n    if (!this.source) {\n      throw new Error('MappingItem#configSource Configuration source is not defined');\n    }\n    return this.source;\n  }\n}\n"]}