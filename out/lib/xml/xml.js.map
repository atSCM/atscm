{"version":3,"sources":["../../../src/lib/xml/xml.js"],"names":["util","require","xml","XML_TYPE","TEXT","ELEMENT","CDATA","COMMENT","NODESET","UNKNOWN","NodeSet","nodes","children","arguments","length","Array","isArray","apply","prototype","toJSON","toString","forEach","methodName","append","node","push","__defineGetter__","get","expr","filter","is","bind","explode","reduce","result","tag","concat","find","_expr","split","currentExpr","shift","matched","$","pop","text","keepArray","extractNSetText","nset","join","hasAttr","name","Tag","attr","isAttr","value","eq","index","attrs","parent","_attrs","_parent","call","inherits","jsonTag","Object","keys","hasOwnProperty","Comment","comment","CData","chunk","rawData","data","cached","getData","cdata","isNode","getXMLType","obj","module","exports"],"mappings":";;AAAA;AACA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;AAAA,IACIC,MAAM,EADV;;AAGA;;;;;;;AAOA,IAAIC,WAAWD,IAAIC,QAAJ,GAAe;AAC1BC,UAAO,QADmB;AAE1BC,aAAU,WAFgB;AAG1BC,WAAQ,SAHkB;AAI1BC,aAAU,WAJgB;AAK1BC,aAAU,GALgB;AAM1BC,aAAU;AANgB,CAA9B;;AASA;;;;;;;;;AASA,IAAIC,UAAUR,IAAIQ,OAAJ,GAAc,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AAChD,SAAKC,QAAL,GAAiBC,UAAUC,MAAV,KAAqB,CAArB,IAA2BC,MAAMC,OAAN,CAAcL,KAAd,CAA5B,GAAqDA,KAArD,GAA6DI,MAAME,KAAN,CAAYF,KAAZ,EAAmBF,SAAnB,CAA7E;AACH,CAFD;;AAIA;;;;;AAKAH,QAAQQ,SAAR,CAAkBC,MAAlB,GAA2B,YAAW;AAClC,WAAO,KAAKP,QAAZ;AACH,CAFD;;AAIA;;;;;AAKAF,QAAQQ,SAAR,CAAkBE,QAAlB,GAA6B,YAAW;AACpC,WAAO,KAAKR,QAAL,CAAcQ,QAAd,EAAP;AACH,CAFD;;AAIA;;;;AAIA,CACI,MADJ,EACY,SADZ,EACuB,aADvB,EACsC,SADtC,EACiD,KADjD,EACwD,QADxD,EAEI,aAFJ,EAEmB,QAFnB,EAE6B,MAF7B,EAEqC,OAFrC,EAE8C,QAF9C,EAEwD,OAFxD,EAGEC,OAHF,CAGU,UAASC,UAAT,EAAqB;AACvBZ,YAAQQ,SAAR,CAAkBI,UAAlB,IAAgC,YAAW;AACvC,eAAOP,MAAMG,SAAN,CAAgBI,UAAhB,EAA4BL,KAA5B,CAAkC,KAAKL,QAAvC,EAAiDC,SAAjD,CAAP;AACH,KAFD;AAGH,CAPL;;AASA;;;;;;;AAOAH,QAAQQ,SAAR,CAAkBK,MAAlB,GAA2B,UAASC,IAAT,EAAe;AACtC,SAAKZ,QAAL,CAAca,IAAd,CAAmBD,IAAnB;AACA,WAAO,IAAP;AACH,CAHD;;AAKA;;;AAGAd,QAAQQ,SAAR,CAAkBQ,gBAAlB,CAAmC,QAAnC,EAA6C,YAAW;AACpD,WAAO,KAAKd,QAAL,CAAcE,MAArB;AACH,CAFD;;AAIA;;;;AAIAJ,QAAQQ,SAAR,CAAkBS,GAAlB,GAAwB,UAASC,IAAT,EAAe;AACnC,WAAO,IAAIlB,OAAJ,CAAY,KAAKmB,MAAL,CAAYC,GAAGC,IAAH,CAAQ,IAAR,EAAcH,IAAd,CAAZ,CAAZ,CAAP;AACH,CAFD;;AAIA;;;;AAIAlB,QAAQQ,SAAR,CAAkBc,OAAlB,GAA4B,YAAW;AACnC,WAAO,KAAKC,MAAL,CAAY,UAASC,MAAT,EAAiBC,GAAjB,EAAsB;AACrC,YAAIA,eAAezB,OAAnB,EAA4B;AACxBwB,mBAAOtB,QAAP,GAAkBsB,OAAOtB,QAAP,CAAgBwB,MAAhB,CAAuBD,IAAIvB,QAA3B,CAAlB;AACH;AACD,eAAOsB,MAAP;AACH,KALM,EAKJ,IAAIxB,OAAJ,EALI,CAAP;AAMH,CAPD;;AASA;;;;;;AAMAA,QAAQQ,SAAR,CAAkBmB,IAAlB,GAAyB,UAAST,IAAT,EAAe;AACpC,QAAIU,QAAS,OAAOV,IAAP,KAAgB,QAAjB,GAA6BA,KAAKW,KAAL,CAAW,GAAX,CAA7B,GAA+CX,IAA3D;AAAA,QACIY,cAAcF,MAAMG,KAAN,EADlB;AAAA,QAEIC,UAAU,KAAKf,GAAL,CAASa,WAAT,CAFd;;AAIA,WAAQF,MAAMxB,MAAN,GAAe,CAAf,IAAoB4B,QAAQ5B,MAAR,GAAiB,CAAtC,GAA2C4B,QAAQV,OAAR,GAAkBK,IAAlB,CAAuBC,KAAvB,CAA3C,GAA2EI,OAAlF;AACH,CAND;;AAQA;;;;;;AAMAhC,QAAQQ,SAAR,CAAkByB,CAAlB,GAAsB,UAASf,IAAT,EAAe;AACjC,QAAIM,SAAS,KAAKG,IAAL,CAAUT,IAAV,CAAb;;AAEA,WAAQA,KAAKW,KAAL,CAAW,GAAX,EAAgBK,GAAhB,OAA0BzC,SAASC,IAApC,GAA4C8B,OAAOW,IAAP,EAA5C,GAA4DX,MAAnE;AACH,CAJD;;AAMA;;;;AAIAxB,QAAQQ,SAAR,CAAkB2B,IAAlB,GAAyB,UAASC,SAAT,EAAoB;AACzC,QAAIZ,SAAU,SAASa,eAAT,CAAyBC,IAAzB,EAA+B;AACrC,YAAId,SAAS,EAAb;;AAEAc,aACK3B,OADL,CACa,UAASG,IAAT,EAAe;AACpB,gBAAIM,GAAG3B,SAASC,IAAZ,EAAkBoB,IAAlB,CAAJ,EAA6B;AACzBU,uBAAOT,IAAP,CAAYD,IAAZ;AACH,aAFD,MAEO,IAAIM,GAAG3B,SAASE,OAAZ,EAAqBmB,IAArB,CAAJ,EAAgC;AACnCU,yBAASA,OAAOE,MAAP,CAAcW,gBAAgBvB,IAAhB,CAAd,CAAT;AACH;AACJ,SAPL;;AASA,eAAOU,MAAP;AACH,KAbQ,CAaN,IAbM,CAAb;;AAeA,WAAS,CAAEY,SAAJ,GAAiBZ,OAAOe,IAAP,CAAY,GAAZ,CAAjB,GAAoCf,MAA3C;AACH,CAjBD;;AAmBA;;;;AAIAxB,QAAQQ,SAAR,CAAkBgC,OAAlB,GAA4B,UAASC,IAAT,EAAe;AACvC,WAAO,IAAIzC,OAAJ,CAAY,KAAKmB,MAAL,CAAY,UAASL,IAAT,EAAe;AAC1C,eAAQA,gBAAgB4B,GAAjB,IAAyB5B,KAAK6B,IAAL,CAAUF,IAAV,MAAoB,IAApD;AACH,KAFkB,CAAZ,CAAP;AAGH,CAJD;;AAMA;;;;;AAKAzC,QAAQQ,SAAR,CAAkBoC,MAAlB,GAA2B,UAASH,IAAT,EAAeI,KAAf,EAAsB;AAC7C,WAAO,IAAI7C,OAAJ,CAAY,KAAKmB,MAAL,CAAY,UAASL,IAAT,EAAe;AAC1C,eAAQA,gBAAgB4B,GAAjB,IAAyB5B,KAAK6B,IAAL,CAAUF,IAAV,MAAoBI,KAApD;AACH,KAFkB,CAAZ,CAAP;AAGH,CAJD;;AAMA;;;;AAIA7C,QAAQQ,SAAR,CAAkBsC,EAAlB,GAAuB,UAASC,KAAT,EAAgB;AACnC,WAAO,KAAK7C,QAAL,CAAc6C,KAAd,KAAwB,IAA/B;AACH,CAFD;;AAIA;;;;;;;;;AASA;AACA,IAAIL,MAAMlD,IAAIkD,GAAJ,GAAU,SAASA,GAAT,CAAaD,IAAb,EAAmBO,KAAnB,EAA0BC,MAA1B,EAAkC;AAClD,QAAIC,SAASF,SAAS,EAAtB;AAAA,QACIG,UAAUF,MADd;;AAGAjD,YAAQoD,IAAR,CAAa,IAAb;;AAEA;AACA,QAAI,OAAOH,MAAP,KAAkB,WAAlB,IAAkCD,iBAAiBhD,OAAvD,EAAiE;AAC7DkD,iBAAS,EAAT;AACAC,kBAAUH,KAAV;AACH;;AAED,SAAKP,IAAL,GAAYA,IAAZ;AACA,SAAKO,KAAL,GAAaE,MAAb;AACA,SAAKD,MAAL,GAAcE,OAAd;AACH,CAfD;;AAiBA;;;AAGA7D,KAAK+D,QAAL,CAAcX,GAAd,EAAmB1C,OAAnB;;AAEA;;;;;;;;AAQA0C,IAAIlC,SAAJ,CAAcC,MAAd,GAAuB,YAAW;AAC9B,QAAI6C,UAAU,EAAEb,MAAO,KAAKA,IAAd,EAAd;;AAEA,QAAI,OAAO,KAAKO,KAAZ,KAAsB,QAAtB,IAAkCO,OAAOC,IAAP,CAAY,KAAKR,KAAjB,EAAwB5C,MAAxB,GAAiC,CAAvE,EAA0E;AACtEkD,gBAAQN,KAAR,GAAgB,KAAKA,KAArB;AACH;;AAED,QAAI,KAAK5C,MAAL,KAAgB,CAAhB,IAAqB,OAAO,KAAKF,QAAL,CAAc,CAAd,CAAP,KAA4B,QAArD,EAA+D;AAC3DoD,gBAAQnB,IAAR,GAAe,KAAKjC,QAAL,CAAc,CAAd,CAAf;AACH,KAFD,MAEO,IAAI,KAAKE,MAAL,GAAc,CAAlB,EAAqB;AACxBkD,gBAAQpD,QAAR,GAAmB,KAAKA,QAAxB;AACH;;AAED,WAAOoD,OAAP;AACH,CAdD;;AAgBA;;;;AAIAZ,IAAIlC,SAAJ,CAAcmC,IAAd,GAAqB,UAASF,IAAT,EAAe;AAChC,WAAOc,OAAO/C,SAAP,CAAiBiD,cAAjB,CAAgCL,IAAhC,CAAqC,KAAKJ,KAA1C,EAAiDP,IAAjD,IAAyD,KAAKO,KAAL,CAAWP,IAAX,CAAzD,GAA4E,IAAnF;AACH,CAFD;;AAIA;;;;;;AAMAC,IAAIlC,SAAJ,CAAcS,GAAd,GAAoB,UAASC,IAAT,EAAe;AAC/B,WAAQA,SAAS,IAAV,GAAkB,KAAK+B,MAAvB,GAAgCjD,QAAQQ,SAAR,CAAkBS,GAAlB,CAAsBmC,IAAtB,CAA2B,IAA3B,EAAiClC,IAAjC,CAAvC;AACH,CAFD;;AAIA;;;;;;AAMA,IAAIwC,UAAUlE,IAAIkE,OAAJ,GAAc,SAASA,OAAT,CAAiBC,OAAjB,EAA0B;AAClD,SAAKA,OAAL,GAAeA,OAAf;AACH,CAFD;;AAIA;;;AAGAD,QAAQlD,SAAR,CAAkBE,QAAlB,GAA6B,YAAW;AACpC,WAAO,KAAKiD,OAAZ;AACH,CAFD;;AAIA;;;;;;AAMA,IAAIC,QAAQpE,IAAIoE,KAAJ,GAAY,SAASA,KAAT,CAAeC,KAAf,EAAsB;AAC1C,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,MAAL,GAAc,IAAd;;AAEA,QAAI,OAAOH,KAAP,KAAiB,WAArB,EAAkC;AAC9B,aAAK9C,IAAL,CAAU8C,KAAV;AACH;AACJ,CARD;;AAUA;;;;AAIAD,MAAMpD,SAAN,CAAgBO,IAAhB,GAAuB,UAAS8C,KAAT,EAAgB;AACnC,SAAKC,OAAL,CAAa/C,IAAb,CAAkB8C,KAAlB;AACA,SAAKG,MAAL,GAAc,KAAd;AACH,CAHD;;AAKA;;;AAGAJ,MAAMpD,SAAN,CAAgByD,OAAhB,GAA0B,YAAW;AACjC,QAAK,CAAE,KAAKD,MAAZ,EAAoB;AAChB,aAAKD,IAAL,GAAY,KAAKD,OAAL,CAAavB,IAAb,CAAkB,EAAlB,CAAZ;AACA,aAAKyB,MAAL,GAAc,IAAd;AACH;;AAED,WAAO,KAAKD,IAAZ;AACH,CAPD;;AASA;;;AAGAH,MAAMpD,SAAN,CAAgBE,QAAhB,GAA2B,YAAW;AAClC,WAAO,KAAKuD,OAAL,EAAP;AACH,CAFD;;AAIA;;;AAGAL,MAAMpD,SAAN,CAAgBC,MAAhB,GAAyB,YAAW;AAChC,WAAO,EAAEyD,OAAQ,KAAKD,OAAL,EAAV,EAAP;AACH,CAFD;;AAIA;;;;AAIA,IAAIE,SAAS3E,IAAI2E,MAAJ,GAAa,UAASrD,IAAT,EAAe;AACrC,WAAQ,OAAOA,IAAP,KAAgB,QAAjB,IACFA,gBAAgB4C,OADd,IAEF5C,gBAAgB8C,KAFd,IAGF9C,gBAAgB4B,GAHrB;AAIH,CALD;;AAOA;;;;;;;AAOA;AACA,IAAItB,KAAK5B,IAAI4B,EAAJ,GAAS,UAASF,IAAT,EAAeJ,IAAf,EAAqB;AACnC,WAAQI,SAAS,QAAT,IAAqBiD,OAAOrD,IAAP,CAAtB,IACFI,SAASzB,SAASC,IAAlB,IAA2B,OAAOoB,IAAP,KAAgB,QADzC,IAEFI,SAASzB,SAASI,OAAlB,IAA8BiB,gBAAgB4C,OAF5C,IAGFxC,SAASzB,SAASG,KAAlB,IAA4BkB,gBAAgB8C,KAH1C,IAID9C,gBAAgB4B,GAAjB,KAA0BxB,SAAS,GAAT,IAAgBA,SAASzB,SAASE,OAAlC,IAA6CuB,SAASJ,KAAK2B,IAArF,CAJL;AAKH,CAND;;AAQA;;;;AAIAjD,IAAI4E,UAAJ,GAAiB,UAASC,GAAT,EAAc;AAC3B,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzB,eAAO5E,SAASC,IAAhB;AACH,KAFD,MAEO,IAAI,OAAO2E,GAAP,KAAe,QAAf,IAA2BA,QAAQ,IAAvC,EAA6C;AAChD,eAAO5E,SAASM,OAAhB;AACH,KAFM,MAEA,IAAIsE,eAAe3B,GAAnB,EAAwB;AAC3B,eAAOjD,SAASE,OAAhB;AACH,KAFM,MAEA,IAAI0E,eAAeT,KAAnB,EAA0B;AAC7B,eAAOnE,SAASG,KAAhB;AACH,KAFM,MAEA,IAAIyE,eAAeX,OAAnB,EAA4B;AAC/B,eAAOjE,SAASI,OAAhB;AACH,KAFM,MAEA,IAAIwE,eAAerE,OAAnB,EAA4B;AAC/B,eAAOP,SAASK,OAAhB;AACH;;AAED,WAAOL,SAASM,OAAhB;AACH,CAhBD;;AAkBAuE,OAAOC,OAAP,GAAiB/E,GAAjB;AACA","file":"xml.js","sourcesContent":["/*eslint-disable */\nvar util = require('util'),\n    xml = {};\n\n/**\n * Enumeration of all possible XML objects types\n * @const\n * @type {{TEXT: string, ELEMENT: string, CDATA: string, COMMENT: string, NODESET: string, UNKNOWN: null}}\n * @public\n * @readonly\n */\nvar XML_TYPE = xml.XML_TYPE = {\n    TEXT : 'text()',\n    ELEMENT : 'element()',\n    CDATA : 'cdata()',\n    COMMENT : 'comment()',\n    NODESET : '.',\n    UNKNOWN : null\n};\n\n/**\n * Node set\n * If only one argument is passed and it's instance of Array,\n * then its contents will became children of NodeSet,\n * else all arguments added to new NodeSet as children.\n *\n * @param {Array|*} nodes\n * @constructor\n */\nvar NodeSet = xml.NodeSet = function NodeSet(nodes) {\n    this.children = (arguments.length === 1 && (Array.isArray(nodes))) ? nodes : Array.apply(Array, arguments);\n};\n\n/**\n * Serialize NodeSet as Array\n *\n * @returns {Array}\n */\nNodeSet.prototype.toJSON = function() {\n    return this.children;\n};\n\n/**\n * evaluate to String as Array\n *\n * @returns {String}\n */\nNodeSet.prototype.toString = function() {\n    return this.children.toString();\n};\n\n/**\n * Expose most of array instance methods to NodeSet instance,\n * mutators are not exposed to keep `children` safe.\n */\n[\n    'join', 'indexOf', 'lastIndexOf', 'forEach', 'map', 'reduce',\n    'reduceRight', 'filter', 'some', 'every', 'concat', 'slice'\n].forEach(function(methodName) {\n        NodeSet.prototype[methodName] = function() {\n            return Array.prototype[methodName].apply(this.children, arguments);\n        };\n    });\n\n/**\n * Append node to node set.\n * This method is one and only mutator of the `children`.\n *\n * @param {Tag|Comment|String} node\n * @private\n */\nNodeSet.prototype.append = function(node) {\n    this.children.push(node);\n    return this;\n};\n\n/**\n * @property {Number} length\n */\nNodeSet.prototype.__defineGetter__('length', function() {\n    return this.children.length;\n});\n\n/**\n * @param {String} expr XPath-like expression part\n * @returns {NodeSet} NodeSet of nodes `expr` can applied for.\n */\nNodeSet.prototype.get = function(expr) {\n    return new NodeSet(this.filter(is.bind(null, expr)));\n};\n\n/**\n * @returns {NodeSet|*} of children at one level deeper\n * @private\n */\nNodeSet.prototype.explode = function() {\n    return this.reduce(function(result, tag) {\n        if (tag instanceof NodeSet) {\n            result.children = result.children.concat(tag.children);\n        }\n        return result;\n    }, new NodeSet());\n};\n\n/**\n * Creates node set of nodes meeting the path.\n *\n * @param {String|Array} expr XPath-like conditional expression.\n * @returns {NodeSet|String}\n */\nNodeSet.prototype.find = function(expr) {\n    var _expr = (typeof expr === 'string') ? expr.split('/') : expr,\n        currentExpr = _expr.shift(),\n        matched = this.get(currentExpr);\n\n    return (_expr.length > 0 && matched.length > 0) ? matched.explode().find(_expr) : matched;\n};\n\n/**\n * Same as NodeSet#find, but automatically joins results of `text()` expression\n *\n * @param {String|Array} expr XPath-like conditional expression.\n * @returns {NodeSet|String}\n */\nNodeSet.prototype.$ = function(expr) {\n    var result = this.find(expr);\n\n    return (expr.split('/').pop() === XML_TYPE.TEXT) ? result.text() : result;\n};\n\n/**\n * @param {Boolean} [keepArray=false] if `true` returns Array of strings, else concatenate it\n * @returns {Array|String} children text nodes\n */\nNodeSet.prototype.text = function(keepArray) {\n    var result = (function extractNSetText(nset) {\n            var result = [];\n\n            nset\n                .forEach(function(node) {\n                    if (is(XML_TYPE.TEXT, node)) {\n                        result.push(node);\n                    } else if (is(XML_TYPE.ELEMENT, node)) {\n                        result = result.concat(extractNSetText(node));\n                    }\n                });\n\n            return result;\n        })(this);\n\n    return ( ! keepArray) ? result.join(' ') : result;\n};\n\n/**\n * @param {String} name Attribute name.\n * @returns {NodeSet} of tags in the ctx which have attribute `name`\n */\nNodeSet.prototype.hasAttr = function(name) {\n    return new NodeSet(this.filter(function(node) {\n        return (node instanceof Tag) && node.attr(name) !== null;\n    }));\n};\n\n/**\n * @param {String} name Element ('tag') attribute name.\n * @param {String|null} value Attribute value or null if attribute must absent.\n * @returns {NodeSet} of tags which attribute `name` equals `value`.\n */\nNodeSet.prototype.isAttr = function(name, value) {\n    return new NodeSet(this.filter(function(node) {\n        return (node instanceof Tag) && node.attr(name) === value;\n    }));\n};\n\n/**\n * @param {Number} index\n * @returns {Tag|Comment|String} node by `index` or `null` if `index` out of bounds\n */\nNodeSet.prototype.eq = function(index) {\n    return this.children[index] || null;\n};\n\n/**\n * Represents XML element ('tag').\n *\n * @param {String} name Tag name\n * @param {Object} [attrs] Tag attributes hash\n * @param {NodeSet} [parent] Parent NodeSet\n * @constructor\n * @augments NodeSet\n */\n/* jshint latedef:false */\nvar Tag = xml.Tag = function Tag(name, attrs, parent) {\n    var _attrs = attrs || {},\n        _parent = parent;\n\n    NodeSet.call(this);\n\n    // called with two args, there second one is parent, not the attributes hash\n    if (typeof parent === 'undefined' && (attrs instanceof NodeSet)) {\n        _attrs = {};\n        _parent = attrs;\n    }\n\n    this.name = name;\n    this.attrs = _attrs;\n    this.parent = _parent;\n};\n\n/**\n * Yeah, Tag is NodeSet\n */\nutil.inherits(Tag, NodeSet);\n\n/**\n * Custom Tag#toJSON()\n * * doesn't expose `parent` property to JSON;\n * * expose non-empty `attrs` and `children` properties;\n * * if Tag has only one text child, expose it as `text` instead of `children` array.\n *\n * @returns {Object}\n */\nTag.prototype.toJSON = function() {\n    var jsonTag = { name : this.name };\n\n    if (typeof this.attrs === 'object' && Object.keys(this.attrs).length > 0) {\n        jsonTag.attrs = this.attrs;\n    }\n\n    if (this.length === 1 && typeof this.children[0] === 'string') {\n        jsonTag.text = this.children[0];\n    } else if (this.length > 0) {\n        jsonTag.children = this.children;\n    }\n\n    return jsonTag;\n};\n\n/**\n * @param {String} name Attribute name\n * @returns {String|null} Attribute value or null if no one exists.\n */\nTag.prototype.attr = function(name) {\n    return Object.prototype.hasOwnProperty.call(this.attrs, name) ? this.attrs[name] : null;\n};\n\n/**\n * Extends NodeSet#get with `..` support.\n *\n * @param {String} expr\n * @returns {NodeSet}\n */\nTag.prototype.get = function(expr) {\n    return (expr === '..') ? this.parent : NodeSet.prototype.get.call(this, expr);\n};\n\n/**\n * Dummy constructor for comments to differ text nodes (String) and comments in the NodeSet.\n *\n * @param {String} comment Comment contents\n * @constructor\n */\nvar Comment = xml.Comment = function Comment(comment) {\n    this.comment = comment;\n};\n\n/**\n * @returns {String}\n */\nComment.prototype.toString = function() {\n    return this.comment;\n};\n\n/**\n * Dummy constructor for comments to differ text nodes (String) and CData in the NodeSet.\n *\n * @param {String} [chunk] chunk of CDATA content\n * @constructor\n */\nvar CData = xml.CData = function CData(chunk) {\n    this.rawData = [];\n    this.data = '';\n    this.cached = true;\n\n    if (typeof chunk !== 'undefined') {\n        this.push(chunk);\n    }\n};\n\n/**\n * Add data chunk to CData object\n * @param {String} chunk\n */\nCData.prototype.push = function(chunk) {\n    this.rawData.push(chunk);\n    this.cached = false;\n};\n\n/**\n * @returns {String}\n */\nCData.prototype.getData = function() {\n    if ( ! this.cached) {\n        this.data = this.rawData.join('');\n        this.cached = true;\n    }\n\n    return this.data;\n};\n\n/**\n * @returns {String}\n */\nCData.prototype.toString = function() {\n    return this.getData();\n};\n\n/**\n * @returns {Object}\n */\nCData.prototype.toJSON = function() {\n    return { cdata : this.getData() };\n};\n\n/**\n * @param {String|Comment|CData|Tag|*} node\n * @returns {Boolean}\n */\nvar isNode = xml.isNode = function(node) {\n    return (typeof node === 'string') ||\n        (node instanceof Comment) ||\n        (node instanceof CData) ||\n        (node instanceof Tag);\n};\n\n/**\n * Checks expression appliance to node\n *\n * @param {String} expr XPath-like expression part\n * @param {String|Comment|Tag|*} node Node to test\n * @returns {Boolean}\n */\n/* jshint latedef:false */\nvar is = xml.is = function(expr, node) {\n    return (expr === 'node()' && isNode(node)) ||\n        (expr === XML_TYPE.TEXT && (typeof node === 'string')) ||\n        (expr === XML_TYPE.COMMENT && (node instanceof Comment)) ||\n        (expr === XML_TYPE.CDATA && (node instanceof CData)) ||\n        ((node instanceof Tag) && (expr === '*' || expr === XML_TYPE.ELEMENT || expr === node.name));\n};\n\n/**\n * @param {*} obj\n * @returns {XML_TYPE.*}\n */\nxml.getXMLType = function(obj) {\n    if (typeof obj === 'string') {\n        return XML_TYPE.TEXT;\n    } else if (typeof obj !== 'object' || obj === null) {\n        return XML_TYPE.UNKNOWN;\n    } else if (obj instanceof Tag) {\n        return XML_TYPE.ELEMENT;\n    } else if (obj instanceof CData) {\n        return XML_TYPE.CDATA;\n    } else if (obj instanceof Comment) {\n        return XML_TYPE.COMMENT;\n    } else if (obj instanceof NodeSet) {\n        return XML_TYPE.NODESET;\n    }\n\n    return XML_TYPE.UNKNOWN;\n};\n\nmodule.exports = xml;\n/*eslint-enable */\n"]}