{"version":3,"sources":["../../../src/lib/xml/parse.js"],"names":["sax","require","xml","NodeSet","Tag","Comment","CData","module","exports","parse","options","callback","parser","path","buildPath","target","pointer","firstError","inPath","check","changePath","joinedPath","push","join","pop","test","trim","RegExp","split","reduce","idx","resultCheck","replace","strict","onopentag","node","name","tag","attributes","append","onclosetag","parent","oncomment","comment","onopencdata","cdata","oncdata","chunk","children","length","onclosecdata","ontext","text","onerror","error","resume","onend","write","close"],"mappings":"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","file":"parse.js","sourcesContent":["/*eslint-disable */\nvar sax = require('sax'),\n    xml = require('./xml'),\n    NodeSet = xml.NodeSet,\n    Tag = xml.Tag,\n    Comment = xml.Comment,\n    CData = xml.CData;\n\n/**\n * @param {String} xml String contains source XML\n * @param {Object} options Sax-js options hash\n *      @param {String} options.buildPath\n * @param {Function} callback function(error, result)\n * @returns {Object}\n * @see https://github.com/isaacs/sax-js\n */\nmodule.exports = function parse(xml, options, callback) {\n    var parser,\n        path = [],\n        buildPath,\n        target = new NodeSet(),\n        pointer = target,\n        firstError = null,\n        inPath = function(check, changePath) {\n            var joinedPath;\n\n            if ( ! buildPath) {\n                return true;\n            }\n\n            check && path.push(check);\n            joinedPath = path.join('/');\n            check && ( ! changePath) && path.pop();\n\n            return buildPath.test(joinedPath);\n        };\n\n    if (typeof options === 'function') {\n        callback = options;\n        options = {};\n    }\n\n    // set sax-js option `trim` to `true` by default,\n    // because it looks like commonly desired behaviour\n    if (typeof options.trim === 'undefined') {\n        options.trim = true;\n    }\n\n    buildPath = options.buildPath || false;\n\n    // construct RegExp from buildPath string\n    if (buildPath) {\n        // for WebStorm:\n        // noinspection JSValidateTypes\n        buildPath = new RegExp(buildPath.split('/').reduce(function(path, check, idx) {\n            var resultCheck = check\n                .replace('(', '(')\n                .replace(')', ')');\n\n            if (check === '*' || check === 'element()') {\n                resultCheck = '[^/()]+';\n            } else if (check === 'node()') {\n                resultCheck = '[^/]+';\n            }\n\n            return [ path, resultCheck ].join(idx ? '/' : '');\n        }, '^'));\n    }\n\n    parser = sax.parser(options.strict !== false, options);\n\n    parser.onopentag = function(node) {\n        if ( ! inPath(node.name, true)) { return; }\n\n        var tag = new Tag(node.name, node.attributes, pointer);\n        pointer.append(tag);\n        pointer = tag;\n    };\n\n    /* jshint unused:false */\n    parser.onclosetag = function(node) {\n        if (inPath()) {\n            pointer = pointer.parent;\n        }\n        path.pop();\n    };\n\n    parser.oncomment = function(comment) {\n        if ( ! inPath('comment()')) {\n            return;\n        }\n        pointer.append(new Comment(comment));\n    };\n\n    parser.onopencdata = function() {\n        if ( ! options.cdata || ! inPath('cdata()', true)) {\n            return;\n        }\n        pointer.append(new CData());\n    };\n\n    parser.oncdata = function(chunk) {\n        if ( ! options.cdata || ! inPath()) {\n            return;\n        }\n        pointer.children[pointer.children.length - 1].push(chunk);\n    };\n\n    parser.onclosecdata = function() {\n        if ( ! options.cdata || ! inPath()) {\n            return;\n        }\n        path.pop();\n    };\n\n    parser.ontext = function(text) {\n        if ( ! inPath('text()')) { return; }\n        pointer.append(text);\n    };\n\n    parser.onerror = function(error) {\n        if ( ! firstError) {\n            firstError = error;\n        }\n\n        parser.resume();\n    };\n\n    parser.onend = function() {\n        callback(firstError, firstError ? null : target);\n    };\n\n    parser.write(xml).close();\n};\n/*eslint-enable */\n"]}