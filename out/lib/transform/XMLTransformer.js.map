{"version":3,"sources":["../../../src/lib/transform/XMLTransformer.js"],"names":["XMLTransformer","constructor","options","build","object","buildOptions","declaration","Object","assign","attributes","version","encoding","standalone","attributeValueFn","val","replace","_fromDBBuilder","compact","spaces","_fromFilesystemBuilder","xml","builder","direction","FromDB","decodeContents","file","callback","contents","e","encodeContents"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;;;AAEA;;;AAGe,MAAMA,cAAN,wCAAkD;;AAE/D;;;;AAIAC,cAAYC,OAAZ,EAAqB;AACnB,UAAMA,OAAN;;AAEA,aAASC,KAAT,CAAeC,MAAf,EAAuBC,YAAvB,EAAqC;AACnC,UAAI,CAACD,OAAOE,WAAZ,EAAyB;AACvBC,eAAOC,MAAP,CAAcJ,MAAd,EAAsB;AACpBE,uBAAa;AACXG,wBAAY,EAAEC,SAAS,KAAX,EAAkBC,UAAU,OAA5B,EAAqCC,YAAY,IAAjD;AADD;AADO,SAAtB;AAKD;;AAED,aAAO,mBAAOR,MAAP,EAAeG,OAAOC,MAAP,CAAcH,YAAd,EAA4B;AAChDQ,yBAAiBC,GAAjB,EAAsB;AACpB,iBAAOA,IACJC,OADI,CACI,YADJ,EACkB,OADlB,EAEJA,OAFI,CAEI,IAFJ,EAEU,MAFV,CAAP;AAGD;AAL+C,OAA5B,CAAf,CAAP;AAOD;;AAED;AACA;;;;AAIA,SAAKC,cAAL,GAAsBZ,UAAUD,MAAMC,MAAN,EAAc,EAAEa,SAAS,KAAX,EAAkBC,QAAQ,CAA1B,EAAd,CAAhC;;AAEA;AACA;;;;AAIA,SAAKC,sBAAL,GAA8Bf,UAAU;AACtC,YAAMgB,MAAMjB,MAAMC,MAAN,EAAc,EAAEa,SAAS,KAAX,EAAkBC,QAAQ,CAA1B,EAAd,CAAZ;AACA,aAAOE,IAAIL,OAAJ,CAAY,QAAZ,EAAsB,MAAtB,CAAP;AACD,KAHD;AAID;;AAED;;;;AAIA,MAAIM,OAAJ,GAAc;AACZ,WAAO,KAAKC,SAAL,KAAmB,gCAAmBC,MAAtC,GACL,KAAKP,cADA,GAEL,KAAKG,sBAFP;AAGD;;AAED;;;;;;AAMAK,iBAAeC,IAAf,EAAqBC,QAArB,EAA+B;AAC7B,QAAI;AACFA,eAAS,IAAT,EAAe,mBAAOD,KAAKE,QAAZ,EAAsB,EAAEV,SAAS,KAAX,EAAtB,CAAf;AACD,KAFD,CAEE,OAAOW,CAAP,EAAU;AACVF,eAASE,CAAT;AACD;AACF;;AAED;;;;;;AAMAC,iBAAezB,MAAf,EAAuBsB,QAAvB,EAAiC;AAC/B,QAAI;AACFA,eAAS,IAAT,EAAe,KAAKL,OAAL,CAAajB,MAAb,CAAf;AACD,KAFD,CAEE,OAAOwB,CAAP,EAAU;AACVF,eAASE,CAAT;AACD;AACF;;AAjF8D;kBAA5C5B,c","file":"XMLTransformer.js","sourcesContent":["import { xml2js, js2xml } from 'xml-js';\nimport { TransformDirection } from './Transformer';\nimport SplittingTransformer from './SplittingTransformer';\n\n/**\n * A transformer used to transform XML documents.\n */\nexport default class XMLTransformer extends SplittingTransformer {\n\n  /**\n   * Creates a new XMLTransformer based on some options.\n   * @param {Object} options The options to use.\n   */\n  constructor(options) {\n    super(options);\n\n    function build(object, buildOptions) {\n      if (!object.declaration) {\n        Object.assign(object, {\n          declaration: {\n            attributes: { version: '1.0', encoding: 'UTF-8', standalone: 'no' },\n          },\n        });\n      }\n\n      return js2xml(object, Object.assign(buildOptions, {\n        attributeValueFn(val) {\n          return val\n            .replace(/&(?!amp;)/g, '&amp;')\n            .replace(/</g, '&lt;');\n        },\n      }));\n    }\n\n    // eslint-disable-next-line jsdoc/require-param\n    /**\n     * The builder to use with direction {@link TransformDirection.FromDB}.\n     * @type {function(object: Object): string}\n     */\n    this._fromDBBuilder = object => build(object, { compact: false, spaces: 2 });\n\n    // eslint-disable-next-line jsdoc/require-param\n    /**\n     * The builder to use with direction {@link TransformDirection.FromFilesystem}.\n     * @type {function(object: Object): string}\n     */\n    this._fromFilesystemBuilder = object => {\n      const xml = build(object, { compact: false, spaces: 1 });\n      return xml.replace(/\\r?\\n/g, '\\r\\n');\n    };\n  }\n\n  /**\n   * Returns the XML builder to use based on the current {@link Transformer#direction}.\n   * @type {function(object: Object): string}\n   */\n  get builder() {\n    return this.direction === TransformDirection.FromDB ?\n      this._fromDBBuilder :\n      this._fromFilesystemBuilder;\n  }\n\n  /**\n   * Parses XML in a file's contents.\n   * @param {AtviseFile} file The file to process.\n   * @param {function(err: ?Error, result: ?Object)} callback Called with the parsed document or the\n   * parse error that occurred.\n   */\n  decodeContents(file, callback) {\n    try {\n      callback(null, xml2js(file.contents, { compact: false }));\n    } catch (e) {\n      callback(e);\n    }\n  }\n\n  /**\n   * Builds an XML string from an object.\n   * @param {Object} object The object to encode.\n   * @param {function(err: ?Error, result: ?String)} callback Called with the resulting string or\n   * the error that occurred while building.\n   */\n  encodeContents(object, callback) {\n    try {\n      callback(null, this.builder(object));\n    } catch (e) {\n      callback(e);\n    }\n  }\n\n}\n"]}