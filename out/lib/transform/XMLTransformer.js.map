{"version":3,"sources":["../../../src/lib/transform/XMLTransformer.js"],"names":["START_CDATA","END_CDATA","XMLTransformer","constructor","options","_fromDBBuilder","cdata","newline","_fromFilesystemBuilder","renderOpts","pretty","indent","xmldec","version","encoding","standalone","builder","direction","FromDB","decodeContents","file","callback","contents","encodeContents","object","buildObject","replace","RegExp","e","tagNotEmpty","tag","Boolean","length","forceCData","string"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEA;;;;AAIA,MAAMA,cAAc,YAApB;;AAEA;;;;AAIA,MAAMC,YAAY,UAAlB;;AAEA;;;AAGe,MAAMC,cAAN,wCAAkD;;AAE/D;;;;AAIAC,cAAYC,OAAZ,EAAqB;AACnB,UAAMA,OAAN;;AAEA;;;;AAIA,SAAKC,cAAL,GAAsB,oBAAe;AACnCC,aAAO,KAD4B;AAEnCC;AAFmC,KAAf,CAAtB;;AAKA;;;;AAIA,SAAKC,sBAAL,GAA8B,oBAAe;AAC3CC,kBAAY;AACVC,gBAAQ,IADE;AAEVC,gBAAQ,GAFE;AAGVJ,iBAAS;AAHC,OAD+B;AAM3CK,cAAQ;AACNC,iBAAS,KADH;AAENC,kBAAU,OAFJ;AAGNC,oBAAY;AAHN,OANmC;AAW3CT,aAAO;AAXoC,KAAf,CAA9B;AAaD;;AAED;;;;AAIA,MAAIU,OAAJ,GAAc;AACZ,WAAO,KAAKC,SAAL,KAAmB,gCAAmBC,MAAtC,GACL,KAAKb,cADA,GAEL,KAAKG,sBAFP;AAGD;;AAED;;;;;;AAMAW,iBAAeC,IAAf,EAAqBC,QAArB,EAA+B;AAC7B,6BAASD,KAAKE,QAAd,EAAwBD,QAAxB;AACD;;AAED;;;;;;AAMAE,iBAAeC,MAAf,EAAuBH,QAAvB,EAAiC;AAC/B,QAAI;AACFA,eAAS,IAAT,EACE,KAAKL,OAAL,CAAaS,WAAb,CAAyBD,MAAzB,EACGE,OADH,CACW,IAAIC,MAAJ,CAAY,mBAAkB3B,WAAY,EAA1C,CADX,EACyD,WADzD,EAEG0B,OAFH,CAEW,IAAIC,MAAJ,CAAY,GAAE1B,SAAU,YAAxB,CAFX,EAEiD,KAFjD,CADF;AAKD,KAND,CAME,OAAO2B,CAAP,EAAU;AACVP,eAASO,CAAT;AACD;AACF;;AAED;;;;;AAKAC,cAAYC,GAAZ,EAAiB;AACf,WAAOC,QAAQD,OAAOA,IAAIE,MAAJ,GAAa,CAA5B,CAAP;AACD;;AAED;;;;;AAKA,SAAOC,UAAP,CAAkBC,MAAlB,EAA0B;AACxB,WAAQ,GAAElC,WAAY,GAAEkC,MAAO,GAAEjC,SAAU,EAA3C;AACD;;AA3F8D;kBAA5CC,c","file":"XMLTransformer.js","sourcesContent":["import { EOL } from 'os';\nimport { parseString as parseXML, Builder as XMLBuilder } from 'xml2js';\nimport { TransformDirection } from './Transformer';\nimport SplittingTransformer from './SplittingTransformer';\n\n/**\n * A special token used to encode CData section beginnings.\n * @type {String}\n */\nconst START_CDATA = 'STARTCDATA';\n\n/**\n * A special token used to encode CData section endings.\n * @type {String}\n */\nconst END_CDATA = 'ENDCDATA';\n\n/**\n * A transformer used to transform XML documents.\n */\nexport default class XMLTransformer extends SplittingTransformer {\n\n  /**\n   * Creates a new XMLTransformer based on some options.\n   * @param {Object} options The options to use.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * The builder to use with direction {@link TransformDirection.FromDB}.\n     * @type {xml2js~Builder}\n     */\n    this._fromDBBuilder = new XMLBuilder({\n      cdata: false,\n      newline: EOL,\n    });\n\n    /**\n     * The builder to use with direction {@link TransformDirection.FromFilesystem}.\n     * @type {xml2js~Builder}\n     */\n    this._fromFilesystemBuilder = new XMLBuilder({\n      renderOpts: {\n        pretty: true,\n        indent: ' ',\n        newline: '\\r\\n',\n      },\n      xmldec: {\n        version: '1.0',\n        encoding: 'UTF-8',\n        standalone: false,\n      },\n      cdata: true,\n    });\n  }\n\n  /**\n   * Returns the XML builder instance to use base on the current {@link Transformer#direction}.\n   * @type {xml2js~Builder}\n   */\n  get builder() {\n    return this.direction === TransformDirection.FromDB ?\n      this._fromDBBuilder :\n      this._fromFilesystemBuilder;\n  }\n\n  /**\n   * Parses XML in a file's contents.\n   * @param {AtviseFile} file The file to process.\n   * @param {function(err: ?Error, result: ?Object)} callback Called with the parsed document or the\n   * parse error that occurred.\n   */\n  decodeContents(file, callback) {\n    parseXML(file.contents, callback);\n  }\n\n  /**\n   * Builds an XML string from an object.\n   * @param {Object} object The object to encode.\n   * @param {function(err: ?Error, result: ?String)} callback Called with the resulting string or\n   * the error that occurred while building.\n   */\n  encodeContents(object, callback) {\n    try {\n      callback(null,\n        this.builder.buildObject(object)\n          .replace(new RegExp(`(<!\\\\[CDATA\\\\[)?${START_CDATA}`), '<![CDATA[')\n          .replace(new RegExp(`${END_CDATA}(\\\\]\\\\]>)?`), ']]>')\n      );\n    } catch (e) {\n      callback(e);\n    }\n  }\n\n  /**\n   * Helper function: Returns `true` if the given tag exists and is not empty.\n   * @param {Object} tag A tag in a parsed xml document.\n   * @return {Boolean} `true` if the given tag exists and is not empty.\n   */\n  tagNotEmpty(tag) {\n    return Boolean(tag && tag.length > 0);\n  }\n\n  /**\n   * Forces `string`, when assigned as textContent to a node, to be wrapped in a CDATA-section.\n   * @param {String} string The string to force a CDATA-section for.\n   * @return {String} The string to assign as textContent to a node.\n   */\n  static forceCData(string) {\n    return `${START_CDATA}${string}${END_CDATA}`;\n  }\n\n}\n"]}