{"version":3,"sources":["../../../src/lib/transform/PartialTransformer.js"],"names":["ModernPartialTransformer","Transformer","shouldBeTransformed","file","Error"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;AAee,MAAMA,wBAAN,SAAuCC,oBAAvC,CAAmD;AAEhE;;;;;AAKAC,EAAAA,mBAAmB,CAACC,IAAD,EAAO;AAAE;AAC1B,UAAM,IAAIC,KAAJ,CAAU,8EAAV,CAAN;AACD;;AAT+D","sourcesContent":["import Transformer from './Transformer';\n\n/**\n * A transformer that transforms only some of the files read.\n * @abstract\n * @example <caption>Minimum implementation</caption>\n * class MyTransformer extends PartialTransformer {\n *   shouldBeTransformed(node) {\n *     return true; // or false\n *   }\n *   transformFromFilesystem(state, context) {\n *     if (!this.shouldBeTransformed(state.node)) { return; }\n *\n *     // Apply actual transformation\n *   }\n * }\n */\nexport default class ModernPartialTransformer extends Transformer {\n\n  /**\n   * `true` if `file` should be transformed.\n   * @param {AtviseFile} file The file to transform or not.\n   * @abstract\n   */\n  shouldBeTransformed(file) { // eslint-disable-line no-unused-vars\n    throw new Error('PartialTransformer#shouldBeTransformed must be implemented by all subclasses');\n  }\n\n\n}\n"],"file":"PartialTransformer.js"}