{"version":3,"sources":["../../../src/lib/transform/PartialTransformer.js"],"names":["PartialTransformer","constructor","options","filter","file","shouldBeTransformed","restore","Error","_transform","enc","callback","applyToStream","stream","direction","filteredStream","pipe","applyToFilteredStream","withDirection"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA;;;;AAIe,MAAMA,kBAAN,+BAA6C;;AAE1D;;;;;AAKAC,cAAYC,UAAU,EAAtB,EAA0B;AACxB,UAAMA,OAAN;;AAEA;;;;AAIA,SAAKC,MAAL,GAAc,0BAAOC,QAAQ,KAAKC,mBAAL,CAAyBD,IAAzB,CAAf,EAA+C,EAAEE,SAAS,IAAX,EAA/C,CAAd;AACD;;AAED;;;;;AAKAD,sBAAoBD,IAApB,EAA0B;AAAE;AAC1B,UAAM,IAAIG,KAAJ,CAAU,8EAAV,CAAN;AACD;;AAED;;;;;;;AAOAC,aAAWJ,IAAX,EAAiBK,GAAjB,EAAsBC,QAAtB,EAAgC;AAC9B,QAAI,KAAKL,mBAAL,CAAyBD,IAAzB,CAAJ,EAAoC;AAClC,YAAMI,UAAN,CAAiBJ,IAAjB,EAAuBK,GAAvB,EAA4BC,QAA5B;AACD,KAFD,MAEO;AACLA,eAAS,IAAT,EAAeN,IAAf;AACD;AACF;;AAED;;;;;;;;;;AAUAO,gBAAcC,MAAd,EAAsBC,SAAtB,EAAiC;AAC/B,UAAMC,iBAAiBF,OAAOG,IAAP,CAAY,KAAKZ,MAAjB,CAAvB;;AAEA,WAAO,CAAC,KAAKa,qBAAL,CAA2BF,cAA3B,EAA2CD,SAA3C,KACNC,eAAeC,IAAf,CAAoB,KAAKE,aAAL,CAAmBJ,SAAnB,CAApB,CADK,EAEJE,IAFI,CAEC,KAAKZ,MAAL,CAAYG,OAFb,CAAP;AAGD;;AAED;;;;;;;;AAQAU,wBAAsBJ,MAAtB,EAA8BC,SAA9B,EAAyC;AAAE;AACzC,WAAO,KAAP;AACD;;AArEyD;kBAAvCb,kB","file":"PartialTransformer.js","sourcesContent":["import filter from 'gulp-filter';\nimport Transformer from './Transformer';\n\n/**\n * A transformer that transforms only some of the files read.\n * @abstract\n */\nexport default class PartialTransformer extends Transformer {\n\n  /**\n   * Creates a new partial transformer with the specified options.\n   * @param {Object} options The options to use. See {@link Transformer#constructor} for available\n   * options.\n   */\n  constructor(options = {}) {\n    super(options);\n\n    /**\n     * The filter stream used.\n     * @type {Stream}\n     */\n    this.filter = filter(file => this.shouldBeTransformed(file), { restore: true });\n  }\n\n  /**\n   * `true` if `file` should be transformed.\n   * @param {AtviseFile} file The file to transform or not.\n   * @abstract\n   */\n  shouldBeTransformed(file) { // eslint-disable-line no-unused-vars\n    throw new Error('PartialTransformer#shouldBeTransformed must be implemented by all subclasses');\n  }\n\n  /**\n   * Transforms a file if {@link PartialTransformer#shouldBeTransformed} returns `true`.\n   * @param {AtviseFile} file The file to transform.\n   * @param {String} enc The encoding used.\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Called with the error that occured\n   * while transforming or (optionally) the transformed file.\n   */\n  _transform(file, enc, callback) {\n    if (this.shouldBeTransformed(file)) {\n      super._transform(file, enc, callback);\n    } else {\n      callback(null, file);\n    }\n  }\n\n  /**\n   * Applies the transformer to the given stream. It does so by running the following steps:\n   *  - Pipe the {@link PartialTransformer#filter} stream\n   *  - If PartialTransformer#applyToFilteredStream is overrridden, apply it.\n   *  - Otherwise pipe {@link Transformer#withDirection}.\n   *  - Restore the filter stream\n   * @param {Stream} stream The stream to apply the transformer to.\n   * @param {TransformDirection} direction The direction to use.\n   * @return {Stream} The resulting stream.\n   */\n  applyToStream(stream, direction) {\n    const filteredStream = stream.pipe(this.filter);\n\n    return (this.applyToFilteredStream(filteredStream, direction) ||\n      filteredStream.pipe(this.withDirection(direction)))\n      .pipe(this.filter.restore);\n  }\n\n  /**\n   * Applies a stream transformer to the given, already filtered stream. Override this method if you\n   * want to pipe streams directly. Returning a falsy value (e.g. false, null, undefined) invokes\n   * {@link Transformer#transformFromDB} or {@link Transformer#transformFromFilesystem} instead.\n   * @param {Stream} stream The stream to apply the transformer to.\n   * @param {TransformDirection} direction The direction to use.\n   * @return {?Stream} The resulting stream.\n   */\n  applyToFilteredStream(stream, direction) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n}\n"]}