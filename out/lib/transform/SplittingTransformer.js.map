{"version":3,"sources":["../../../src/lib/transform/SplittingTransformer.js"],"names":["CombineFilesCache","constructor","_files","_required","missingExtensions","dirname","required","files","filter","ext","undefined","gotAllFiles","file","callback","err","name","map","extname","length","SplittingTransformer","options","_combineFilesCache","createCombinedFile","lastFile","Error","transformFromFilesystem","enc","allFiles","splitFile","newExtension","newFile","clone","basename","stem","combineFiles","path","_flush","missingDirnames","Object","keys","Promise","all","firstFile","missing","paths","debug","i","read","cwd","base","then","resolve","reject","push","catch"],"mappings":"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","file":"SplittingTransformer.js","sourcesContent":["import { readdir } from 'fs';\nimport { extname, basename, join } from 'path';\nimport Logger from 'gulplog';\nimport AtviseFile from '../server/AtviseFile';\nimport PartialTransformer from './PartialTransformer';\n\n/**\n * Determines which files are needed to create a combined file and stores these files as long as\n * some of them are missing.\n */\nexport class CombineFilesCache {\n\n  /**\n   * Creates a new DisplayCache.\n   */\n  constructor() {\n    /**\n     * The files caches for the given path.\n     * @type {Map<String, vinyl~File>}\n     */\n    this._files = {};\n\n    /**\n     * The extensions of the files required.\n     * @type {String[]}\n     */\n    this._required = {};\n  }\n\n  /**\n   * Returns the extensions of the missing files for the given `dirname`.\n   * @param {string} dirname The cache key to look for.\n   * @return {String[]} Extensions of the missing files.\n   */\n  missingExtensions(dirname) {\n    const required = this._required[dirname];\n    const files = this._files[dirname];\n\n    return required.filter(ext => files[ext] === undefined);\n  }\n\n  /**\n   * Checks if, when `file` is added, all required files are cached.\n   * @param {vinyl~File} file The file to add before checking.\n   * @param {function(err: ?Error, files: ?Map<String, vinyl~File>)} callback Called with the error\n   * that occured while checking or all files related to `file` if all required files are already\n   * cached.\n   */\n  gotAllFiles(file, callback) {\n    const dirname = file.dirname;\n\n    if (!this._required[dirname]) {\n      readdir(dirname, (err, files) => {\n        if (err) {\n          callback(err);\n        } else {\n          this._files[dirname] = {};\n          this._required[dirname] = files\n            .filter(name => name[0] !== '.')\n            .map(name => extname(name));\n\n          this.gotAllFiles(file, callback);\n        }\n      });\n    } else {\n      this._files[dirname][file.extname] = file;\n\n      if (this.missingExtensions(dirname).length === 0) {\n        const files = this._files[dirname];\n        callback(null, files);\n\n        delete this._files[dirname];\n        delete this._required[dirname];\n      } else {\n        callback(null);\n      }\n    }\n  }\n\n}\n\n/**\n * A transformer that splits files into multiple others.\n * @abstract\n */\nexport default class SplittingTransformer extends PartialTransformer {\n\n  /**\n   * Creates a new SplittingTransformer.\n   * @param {Object} options The options to apply.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * The cache used when collecting files to combine.\n     * @type {CombineFilesCache}\n     */\n    this._combineFilesCache = new CombineFilesCache();\n  }\n\n  /**\n   * Creates a combined file from the cached split files.\n   * @param {Map<String, AtviseFile>} files The cached files stored against their extensions.\n   * @param {AtviseFile} lastFile The last file collected. This is the only file guaranteed to be\n   * set, therefore us if for error messages, etc.\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Should be called with any errors\n   * that occur while combining the files, or optionally the resulting file.\n   * @abstract\n   */\n  createCombinedFile(files, lastFile, callback) { // eslint-disable-line no-unused-vars\n    throw new Error(\n      'SplittingTransformer#createCombinedFile must be implemented by all subclasses'\n    );\n  }\n\n  /**\n   * Calls {@link SplittingTransformer#createCombinedFile} as soon as all dependencies are\n   * required files are cached.\n   * @param {AtviseFile} file The read file.\n   * @param {string} enc The encoding used.\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Called with the error occured while\n   * caching files or creating the combined file or optionally the resulting combined file.\n   */\n  transformFromFilesystem(file, enc, callback) {\n    this._combineFilesCache.gotAllFiles(file, (err, allFiles) => {\n      if (err) {\n        callback(err);\n      } else if (allFiles) {\n        this.createCombinedFile(allFiles, file, callback);\n      } else {\n        callback(null);\n      }\n    });\n  }\n\n  /**\n   * Splits a {@link vinyl~File}: The resulting is a clone of the input file, with a different path.\n   * @param {vinyl~File} file The file to split.\n   * @param {?String} newExtension The extension the resulting file gets.\n   * @return {vinyl~File} The resulting file.\n   * @example\n   * // Assuming that `original` is a File with the path \"path/to/file.type.xml\":\n   * const result = SplittingTransformer.splitFile(original, '.another');\n   * // `result` is a new File, with the contents of `original` and the path\n   * // \"path/to/file.type/file.another\"\n   */\n  static splitFile(file, newExtension) {\n    const newFile = file.clone();\n\n    newFile.basename = `${newFile.stem}/${newFile.stem}`;\n    newFile.extname = newExtension;\n\n    return newFile;\n  }\n\n  /**\n   * Combines split files to a single one.\n   * @param {vinyl~File[]} files The files to combine.\n   * @param {string} newExtension The extension the resulting file gets.\n   * @return {vinyl~File} The resulting file.\n   */\n  static combineFiles(files, newExtension) {\n    const newFile = files[0].clone();\n\n    newFile.path = `${newFile.dirname}${newExtension}`;\n\n    return newFile;\n  }\n\n  /**\n   * If there are any missing files this method loads these files and calls\n   * {SplittingTransformer#createCombinedFile} with them.\n   * @param {function(err: ?Error)} callback Called with the error that occurred while loading\n   * missing files.\n   */\n  _flush(callback) {\n    const missingDirnames = Object.keys(this._combineFilesCache._files);\n\n    if (missingDirnames.length > 0) {\n      Promise.all(\n        missingDirnames.map(dirname => {\n          const files = this._combineFilesCache._files[dirname];\n          const firstFile = files[Object.keys(files)[0]];\n\n          const missing = this._combineFilesCache.missingExtensions(dirname);\n          const stem = basename(dirname, extname(dirname));\n          const paths = missing.map(ext => join(dirname, '/', `${stem}${ext}`));\n\n          delete this._combineFilesCache._files[dirname];\n          delete this._combineFilesCache._required[dirname];\n\n          Logger.debug('Loading', paths.length, 'required file(s)');\n\n          return Promise.all(\n            paths.map((path, i) => AtviseFile.read({\n              cwd: firstFile.cwd,\n              base: firstFile.base,\n              path,\n            })\n              .then(file => {\n                files[missing[i]] = file;\n              })\n            )\n          )\n            .then(() => new Promise((resolve, reject) => {\n              this.createCombinedFile(files, firstFile, (err, file) => {\n                if (err) {\n                  reject(err);\n                } else {\n                  this.push(file);\n\n                  resolve(file);\n                }\n              });\n            }));\n        })\n      )\n        .then(files => Logger.debug('Created', files.length, 'additional file(s)'))\n        .then(() => callback())\n        .catch(err => callback(err));\n    } else {\n      callback();\n    }\n  }\n\n}\n\n"]}