{"version":3,"sources":["../../../src/lib/ua/NodeId.js"],"names":["Type","NodeIdType","ExtensionsToRemove","TypeForIdentifier","i","NUMERIC","s","STRING","g","GUID","b","BYTESTRING","NodeId","constructor","typeOrValue","value","namespace","get","m","match","Number","isNaN","parseInt","n","t","v","fromFilePath","path","separator","extension","indexOf","split","reduce","result","current","next","filePath","parts","join","browseName","lastSeperator","substr","lastIndexOf","parentNodeId","inspect","depth","options","stylize","identifierType"],"mappings":"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","file":"NodeId.js","sourcesContent":["import { sep, extname, dirname } from 'path';\nimport { NodeId as OpcNodeId } from 'node-opcua';\n\n/**\n * OPC-UA node id types.\n * @type {Map<String, node-opcua~NodeIdType>}\n */\nconst Type = OpcNodeId.NodeIdType;\n\n/**\n * File extensions to remove\n * @type {String[]}\n */\nconst ExtensionsToRemove = ['.script', '.display', '.qd'];\n\n/**\n * OPC-UA node id types mapped against node-id identifiers (e.g. i, s ...).\n * @type {Map<String, node-opcua~NodeIdType>}\n */\nconst TypeForIdentifier = {\n  i: Type.NUMERIC,\n  s: Type.STRING,\n  g: Type.GUID,\n  b: Type.BYTESTRING,\n};\n\n/**\n * A wrapper around {@link node-opcua~NodeId}.\n */\nexport default class NodeId extends OpcNodeId {\n\n  /**\n   * Creates a new NodeId. Can be called in multiple ways:\n   *  - with a {@link node-opcua~NodeIdType}, a value and a namespace (defaults to 0),\n   *  - with a value only (type will be taken from it, namespace defaults to 1) or\n   *  - with a {@link NodeId}s string representation (e.g. `ns=1;s=AGENT.DISPLAYS`).\n   * @param {node-opcua~NodeIdType|String|Number} typeOrValue The type or value to use.\n   * @param {(Number|String)} [value] The value to use.\n   * @param {Number} [namespace=1] The namespace to use.\n   */\n  constructor(typeOrValue, value, namespace = 1) {\n    if (!(Type.get(typeOrValue))) {\n      let m = null;\n\n      if (typeof typeOrValue === 'string') {\n        m = typeOrValue.match(/^ns=([0-9]+);(i|s|g|b)=(.*)$/);\n      }\n\n      if (m === null) {\n        super(\n          Number.isNaN(Number.parseInt(typeOrValue, 10)) ? Type.STRING : Type.NUMERIC,\n          typeOrValue,\n          1\n        );\n      } else {\n        const n = Number.parseInt(m[1], 10);\n        const t = TypeForIdentifier[m[2]];\n        const v = t === Type.NUMERIC ? Number.parseInt(m[3], 10) : m[3];\n\n        super(t, v, n);\n      }\n    } else {\n      super(typeOrValue, value, namespace);\n    }\n  }\n\n  /**\n   * Creates a new NodeId based on a file path.\n   * @param {String} path The file path to use.\n   * @return {NodeId} The resulting NodeId.\n   */\n  static fromFilePath(path) {\n    let separator = '.';\n    const extension = extname(path);\n\n    // step one directory outside for split files\n    if (ExtensionsToRemove.indexOf(extension) > -1) {\n      // eslint-disable-next-line no-param-reassign\n      path = dirname(path);\n    }\n\n    const value = path.split(sep)\n      .reduce((result, current) => {\n        const next = `${result}${separator}${current}`;\n\n        if (current === 'RESOURCES') {\n          separator = '/';\n        }\n\n        return next;\n      });\n\n    return new NodeId(NodeId.NodeIdType.STRING, value, 1);\n  }\n\n  /**\n   * The node id's value, encoded to a file path.\n   * @type {String}\n   */\n  get filePath() {\n    const parts = this.value.split('RESOURCES');\n    parts[0] = parts[0].split('.').join('/');\n\n    return parts.join('RESOURCES');\n  }\n\n  /**\n   * The node id's browsename as string\n   * @type {String}\n   */\n  get browseName() {\n    const lastSeperator = this.value.indexOf('/') > -1 ?\n      '/' : '.';\n\n    return this.value.substr(this.value.lastIndexOf(lastSeperator) + 1);\n  }\n\n  /**\n   * The parent node id\n   * @type {NodeId}\n   */\n  get parentNodeId() {\n    const lastSeperator = this.value.indexOf('/') > -1 ?\n      '/' : '.';\n\n    return new NodeId(this.value.substr(0, this.value.lastIndexOf(lastSeperator)));\n  }\n\n\n  /**\n   * Returns a string in the format 'namespace value' that is printed when inspecting the NodeId\n   * using node.js's *util.inspect*.\n   * @see https://nodejs.org/api/util.html#util_util_inspect_object_options\n   * @param {Number} depth The depth to inspect.\n   * @param {Object} options The options to use.\n   * @return {String} A string in the format 'namespace value'.\n   */\n  inspect(depth, options) {\n    return [\n      options.stylize(this.namespace, 'number'),\n      options.stylize(this.value, this.identifierType === Type.NUMERIC ? 'number' : 'string'),\n    ].join(' ');\n  }\n}\n"]}