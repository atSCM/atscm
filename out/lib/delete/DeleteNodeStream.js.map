{"version":3,"sources":["../../../src/lib/delete/DeleteNodeStream.js"],"names":["DeleteNodeScriptParameterName","DeleteNodeStream","constructor","processErrorMessage","nodeId","toString","createParameters","paramValue","dataType","String","value","paramNames","paramValues","handleCallback","results","handleErrors","outputArguments","Good","Error","deleteSuccessful","debug","error","done"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;AAGA;;;;AAIA,MAAMA,gCAAgC,QAAtC;;AAGA;;;AAGe,MAAMC,gBAAN,oCAAgD;;AAE7D;;;AAGAC,gBAAc;AACZ,UAAM,qBAAW,6DAAX,CAAN;AACD;;AAGD;;;;;AAKAC,sBAAoBC,MAApB,EAA4B;AAC1B,WAAQ,yBAAwBA,OAAOC,QAAP,EAAkB,EAAlD;AACD;;AAED;;;;;;AAMAC,mBAAiBF,MAAjB,EAAyB;AACvB,UAAMG,aAAa,uBAAY;AAC7BC,gBAAU,oBAASC,MADU;AAE7BC,aAAON,OAAOC,QAAP;AAFsB,KAAZ,CAAnB;;AAKA,WAAO,EAAEM,YAAY,CAACX,6BAAD,CAAd,EAA+CY,aAAa,CAACL,UAAD,CAA5D,EAAP;AACD;;AAED;;;;;;;AAOAM,iBAAeC,OAAf,EAAwBV,MAAxB,EAAgCW,YAAhC,EAA8C;AAC5C,UAAMC,kBAAkBF,QAAQ,CAAR,EAAWE,eAAnC;;AAEA,QAAIA,gBAAgB,CAAhB,EAAmBN,KAAnB,CAAyBA,KAAzB,KAAmC,uBAAYO,IAAZ,CAAiBP,KAAxD,EAA+D;AAC7DK,mBAAa,IAAIG,KAAJ,CAAUF,gBAAgB,CAAhB,EAAmBN,KAA7B,CAAb;AACD,KAFD,MAEO;AACL,YAAMS,mBAAmBH,gBAAgB,CAAhB,EAAmBN,KAAnB,CAAyB,CAAzB,EAA4BA,KAA5B,KAAsC,uBAAYO,IAAZ,CAAiBP,KAAhF;;AAEA,UAAIS,gBAAJ,EAAsB;AACpB,0BAAOC,KAAP,CAAc,6BAA4BhB,OAAOC,QAAP,EAAkB,EAA5D;AACD,OAFD,MAEO;AACL,0BAAOgB,KAAP,CAAc,uBAAsBjB,OAAOC,QAAP,EAAkB,GAAtD,EACE,oDADF;AAED;AACF;AACDU,iBAAa,IAAb,EAAmB,uBAAYE,IAA/B,EAAqCK,QAAQA,MAA7C;AACD;AAzD4D;kBAA1CrB,gB","file":"DeleteNodeStream.js","sourcesContent":["import Logger from 'gulplog';\nimport { StatusCodes, DataType, Variant } from 'node-opcua';\nimport CallScriptStream from '../script/CallScriptStream';\nimport NodeId from '../ua/NodeId';\n\n\n/**\n * Definition for the parameter name of the Delete node script\n * @type {String}\n */\nconst DeleteNodeScriptParameterName = 'nodeId';\n\n\n/**\n * A stream that deletes atvise server nodes for the given node ids.\n */\nexport default class DeleteNodeStream extends CallScriptStream {\n\n  /**\n   * Creates a new CreateNodeStream\n   */\n  constructor() {\n    super(new NodeId('ns=1;s=SYSTEM.LIBRARY.ATVISE.SERVERSCRIPTS.atscm.DeleteNode'));\n  }\n\n\n  /**\n   * Returns an error message specifically for the given combined file.\n   * @param {NodeId} nodeId The nodeId to create the error message for\n   * @return {String} The specific error message.\n   */\n  processErrorMessage(nodeId) {\n    return `Error deleting node:  ${nodeId.toString()}`;\n  }\n\n  /**\n   * Creates the parameter object for creating nodes\n   * @param {NodeId} nodeId The nodeId to use as parameter\n   * parameter object for.\n   * @return {Object} The resulting parameter object.\n   */\n  createParameters(nodeId) {\n    const paramValue = new Variant({\n      dataType: DataType.String,\n      value: nodeId.toString(),\n    });\n\n    return { paramNames: [DeleteNodeScriptParameterName], paramValues: [paramValue] };\n  }\n\n  /**\n   * Handles the call script methods callback\n   * @param {Array} results The result of the call\n   * @param {node} nodeId The nodeId to process\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  handleCallback(results, nodeId, handleErrors) {\n    const outputArguments = results[0].outputArguments;\n\n    if (outputArguments[0].value.value !== StatusCodes.Good.value) {\n      handleErrors(new Error(outputArguments[1].value));\n    } else {\n      const deleteSuccessful = outputArguments[3].value[0].value === StatusCodes.Good.value;\n\n      if (deleteSuccessful) {\n        Logger.debug(`Successfully deleted node ${nodeId.toString()}`);\n      } else {\n        Logger.error(`Error deleting node ${nodeId.toString()}.`,\n          'Node does not exist in atvise server address space');\n      }\n    }\n    handleErrors(null, StatusCodes.Good, done => done());\n  }\n}\n\n"]}