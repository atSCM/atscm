{"version":3,"sources":["../../../src/lib/pull/ReadStream.js"],"names":["ReadStream","processErrorMessage","mappingItem","nodeId","toString","processChunk","handleErrors","shouldBeRead","dataValueAdded","push","Good","done","session","read","err","nodesToRead","results","length","Error","statusCode","dataValue","value","error","createConfigItemFromDataValue"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA;;;AAGe,MAAMA,UAAN,+BAAqC;;AAElD;;;;;;AAMAC,sBAAoBC,WAApB,EAAiC;AAC/B,WAAQ,yDAAwDA,YAAYC,MAAZ,CAAmBC,QAAnB,EAA8B,EAA9F;AACD;;AAED;;;;;;;;;AASAC,eAAaH,WAAb,EAA0BI,YAA1B,EAAwC;AACtC,UAAMH,SAASD,YAAYC,MAA3B;;AAEA;AACA,QAAI,CAACD,YAAYK,YAAb,IAA6BL,YAAYM,cAA7C,EAA6D;AAC3D,WAAKC,IAAL,CAAUP,WAAV;AACAI,mBAAa,IAAb,EAAmB,uBAAYI,IAA/B,EAAqCC,QAAQA,MAA7C;AACD,KAHD,MAGO;AACL,WAAKC,OAAL,CAAaC,IAAb,CAAkB,CAAC,EAAEV,MAAF,EAAD,CAAlB,EAAgC,CAACW,GAAD,EAAMC,WAAN,EAAmBC,OAAnB,KAA+B;AAC7D,YAAI,CAACF,GAAD,KAAS,CAACE,OAAD,IAAYA,QAAQC,MAAR,KAAmB,CAAxC,CAAJ,EAAgD;AAC9CX,uBAAa,IAAIY,KAAJ,CAAU,YAAV,CAAb;AACD,SAFD,MAEO;AACLZ,uBAAaQ,GAAb,EAAkBE,WAAWA,QAAQC,MAAR,GAAiB,CAA5B,GAAgCD,QAAQ,CAAR,EAAWG,UAA3C,GAAwD,IAA1E,EAAgFR,QAAQ;AACtF,kBAAMS,YAAYJ,QAAQ,CAAR,CAAlB;;AAEA,gBAAII,UAAUC,KAAV,IAAmB,IAAvB,EAA6B;AAC3B,gCAAOC,KAAP,CAAc,kCAAiCnB,OAAOC,QAAP,EAAkB,EAAjE;AACD,aAFD,MAEO;AACLF,0BAAYqB,6BAAZ,CAA0CH,SAA1C;AACA,mBAAKX,IAAL,CAAUP,WAAV;AACD;;AAEDS;AACD,WAXD;AAYD;AACF,OAjBD;AAkBD;AACF;AAhDiD;kBAA/BX,U","file":"ReadStream.js","sourcesContent":["import Logger from 'gulplog';\nimport { StatusCodes } from 'node-opcua';\nimport QueueStream from '../stream/QueueStream';\n\n/**\n * A stream that reads atvise server nodes for the {@link node-opcua~ReferenceDescription}s passed.\n */\nexport default class ReadStream extends QueueStream {\n\n  /**\n   * Returns an error message specifically for the given mapping item.\n   * @param {MappingItem} mappingItem The reference description to get\n   * the error message for.\n   * @return {String} The specific error message.\n   */\n  processErrorMessage(mappingItem) {\n    return `ReadStream#processErrorMessage: Error processing item ${mappingItem.nodeId.toString()}`;\n  }\n\n  /**\n   * Adds the data of read {node-opcua~DataValue}s for given {@link MappingItem}s.\n   * @param {MappingItem} mappingItem The mappingItem to process\n   * If the proccessed item is not a type definition, the node value will be read from\n   * the atvise server\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n\n  processChunk(mappingItem, handleErrors) {\n    const nodeId = mappingItem.nodeId;\n\n    // skip reference and type definition files and read node files that already contain a config\n    if (!mappingItem.shouldBeRead || mappingItem.dataValueAdded) {\n      this.push(mappingItem);\n      handleErrors(null, StatusCodes.Good, done => done());\n    } else {\n      this.session.read([{ nodeId }], (err, nodesToRead, results) => {\n        if (!err && (!results || results.length === 0)) {\n          handleErrors(new Error('No results'));\n        } else {\n          handleErrors(err, results && results.length > 0 ? results[0].statusCode : null, done => {\n            const dataValue = results[0];\n\n            if (dataValue.value == null) {\n              Logger.error(`Unable to read value of node:  ${nodeId.toString()}`);\n            } else {\n              mappingItem.createConfigItemFromDataValue(dataValue);\n              this.push(mappingItem);\n            }\n\n            done();\n          });\n        }\n      });\n    }\n  }\n}\n\n"]}