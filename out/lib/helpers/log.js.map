{"version":3,"sources":["../../../src/lib/helpers/log.js"],"names":["reportProgress","task","getter","formatter","level","logResult","start","Date","now","ops","value","toFixed","message","interval","setInterval","Logger","listenerCount","readline","cursorTo","process","stdout","moveCursor","done","err","clearInterval","clearLine","then"],"mappings":";;;;;;;AAEA;;AACA;;;;AAHA;;AAKA;;;;;;;;;;;;;;;;;;;;;AAqBO,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,SAAV;AAAqBC,EAAAA,KAAK,GAAG,MAA7B;AAAqCC,EAAAA,SAAS,GAAG;AAAjD,IAA0D,EAAxF,EAA4F;AACjG,QAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAd;;AACA,QAAMC,GAAG,GAAGC,KAAK,IAAI,CAACA,KAAK,IAAI,CAACH,IAAI,CAACC,GAAL,KAAaF,KAAd,IAAuB,IAA3B,CAAN,EAAwCK,OAAxC,CAAgD,CAAhD,CAArB;;AACA,QAAMC,OAAO,GAAG,MAAM;AACpB,UAAMF,KAAK,GAAGR,MAAM,EAApB;AACA,WAAQ,GAAEC,SAAS,CAACO,KAAD,CAAQ,KAAID,GAAG,CAACC,KAAD,CAAQ,KAA1C;AACD,GAHD;;AAKA,QAAMG,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,QAAIC,iBAAOC,aAAP,CAAqBZ,KAArB,IAA8B,CAAlC,EAAqC;AACnCW,uBAAOX,KAAP,EAAcQ,OAAO,EAArB;;AAEAK,wBAASC,QAAT,CAAkBC,OAAO,CAACC,MAA1B,EAAkC,CAAlC;;AACAH,wBAASI,UAAT,CAAoBF,OAAO,CAACC,MAA5B,EAAoC,CAApC,EAAuC,CAAC,CAAxC;AACD;AACF,GAP2B,EAOzB,EAPyB,CAA5B;;AASA,QAAME,IAAI,GAAGC,GAAG,IAAI;AAClBC,IAAAA,aAAa,CAACX,QAAD,CAAb;;AAEA,QAAIR,SAAS,IAAI,CAACkB,GAAlB,EAAuB;AACrBR,uBAAOX,KAAP,EAAcQ,OAAO,EAArB;AACD,KAFD,MAEO,IAAIG,iBAAOC,aAAP,CAAqBZ,KAArB,IAA8B,CAAlC,EAAqC;AAC1Ca,wBAASC,QAAT,CAAkBC,OAAO,CAACC,MAA1B,EAAkC,CAAlC;;AACAH,wBAASQ,SAAT,CAAmBN,OAAO,CAACC,MAA3B;AACD;;AAED,QAAIG,GAAJ,EAAS;AACP,YAAMA,GAAN;AACD;AACF,GAbD;;AAeA,SAAOtB,IAAI,CAACyB,IAAL,CAAU,MAAMJ,IAAI,EAApB,EAAwBC,GAAG,IAAID,IAAI,CAACC,GAAD,CAAnC,CAAP;AACD","sourcesContent":["/* eslint-disable import/prefer-default-export */\n\nimport readline from 'readline';\nimport Logger from 'gulplog';\n\n/**\n * Prints the progress of a task.\n * @param {Promise<any>} task The task to print the progress for.\n * @param {Object} options The options used.\n * @param {function(): number} options.getter A function returning the current progress.\n * @param {function(value: number): string} options.formatter A function returning a log message for\n * the progress passed.\n * @param {string} [options.level='info'] The log level to use.\n * @param {boolean} [options.logResult=true] If the final progress should be printed.\n * @example <caption>A basic implementation</caption>\n * const task = doSomething(); // Returns a Promise\n *\n * reportProgress(task, {\n *   getter: () => getTaskProgress(), // returns a number, e.g. 13 if 13 files have been written\n *   formatter: value => `${value} files written`,\n * })\n *  .then(result => { // Results get passed directly from `task`\n *    console.log(`The result is: ${result}`);\n *  })\n *  .catch(console.error) // which means you need error handling as well!\n */\nexport function reportProgress(task, { getter, formatter, level = 'info', logResult = true } = {}) {\n  const start = Date.now();\n  const ops = value => (value / ((Date.now() - start) / 1000)).toFixed(1);\n  const message = () => {\n    const value = getter();\n    return `${formatter(value)} (${ops(value)}/s)`;\n  };\n\n  const interval = setInterval(() => {\n    if (Logger.listenerCount(level) > 0) {\n      Logger[level](message());\n\n      readline.cursorTo(process.stdout, 0);\n      readline.moveCursor(process.stdout, 0, -1);\n    }\n  }, 80);\n\n  const done = err => {\n    clearInterval(interval);\n\n    if (logResult && !err) {\n      Logger[level](message());\n    } else if (Logger.listenerCount(level) > 0) {\n      readline.cursorTo(process.stdout, 0);\n      readline.clearLine(process.stdout);\n    }\n\n    if (err) {\n      throw err;\n    }\n  };\n\n  return task.then(() => done(), err => done(err));\n}\n"],"file":"log.js"}