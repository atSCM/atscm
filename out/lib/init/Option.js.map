{"version":3,"sources":["../../../src/lib/init/Option.js"],"names":["InitOption","constructor","messageOrOptions","defaultOrUndefined","undefined","Error","length","type","DefaultType","message","default","choices","validate","when"],"mappings":";;;;;AAAA;;;;AAIe,MAAMA,UAAN,CAAiB;;AAE9B;;;;;;;;;;;;;;;AAeAC,cAAYC,gBAAZ,EAA8BC,kBAA9B,EAAkD;AAChD,QAAID,qBAAqBE,SAAzB,EAAoC;AAClC,YAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,QAAI,OAAOH,gBAAP,KAA4B,QAAhC,EAA0C;AACxC,UAAIA,iBAAiBI,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,cAAM,IAAID,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED;;;;AAIA,WAAKE,IAAL,GAAYP,WAAWQ,WAAvB;;AAEA;;;;AAIA,WAAKC,OAAL,GAAgB,GAAEP,gBAAiB,GAAnC;;AAEA;;;;AAIA,WAAKQ,OAAL,GAAeP,kBAAf;AACD,KAtBD,MAsBO;AACL,UAAI,CAACD,iBAAiBO,OAAlB,IAA6BP,iBAAiBI,MAAjB,KAA4B,CAA7D,EAAgE;AAC9D,cAAM,IAAID,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED,WAAKE,IAAL,GAAYL,iBAAiBK,IAAjB,IAAyBP,WAAWQ,WAAhD;AACA,WAAKC,OAAL,GAAgB,GAAEP,iBAAiBO,OAAQ,GAA3C;AACA,WAAKC,OAAL,GAAeR,iBAAiBQ,OAAhC;;AAEA;;;;AAIA,WAAKC,OAAL,GAAeT,iBAAiBS,OAAhC;;AAEA;;;;AAIA,WAAKC,QAAL,GAAgBV,iBAAiBU,QAAjC;;AAEA;;;;AAIA,WAAKC,IAAL,GAAYX,iBAAiBW,IAA7B;AACD;AACF;;AAED;;;;AAIA,aAAWL,WAAX,GAAyB;AACvB,WAAO,OAAP;AACD;;AA/E6B;kBAAXR,U","file":"Option.js","sourcesContent":["/**\n * An option the 'atscm init' command handles.\n * TODO: Support function values for name, message, default, choices...\n */\nexport default class InitOption {\n\n  /**\n   * Creates a new option based either on a message and (optionally) a default value or some\n   * options.\n   * @param {String|Object} messageOrOptions The message or options to use.\n   * @param {inquirer~PromptType} [messageOrOptions.type] The option's type.\n   * @param {string} messageOrOptions.message The option's message. Required if `messageOrOptions`\n   * is an object.\n   * @param {String|Number} [messageOrOptions.default] The options's default value.\n   * @param {inquirer~Validator} [messageOrOptions.validate] A function that validates user input.\n   * @param {String[]|Number[]} [messageOrOptions.choices] The options's choices. Applies to to list\n   * types only.\n   * @param {Boolean|function(answers: Object): Boolean} [messageOrOptions.when] Weather or not to\n   * prompt this option.\n   * @param {String|Number} [defaultOrUndefined] The default value to use.\n   */\n  constructor(messageOrOptions, defaultOrUndefined) {\n    if (messageOrOptions === undefined) {\n      throw new Error('message or options required');\n    }\n\n    if (typeof messageOrOptions === 'string') {\n      if (messageOrOptions.length === 0) {\n        throw new Error('message is required');\n      }\n\n      /**\n       * The option's {@link inquirer~PromptType}. Defaults to 'input'.\n       * @type {inquirer~PromptType}\n       */\n      this.type = InitOption.DefaultType;\n\n      /**\n       * The option's message. A '?' sign is added automatically.\n       * @type {String}\n       */\n      this.message = `${messageOrOptions}?`;\n\n      /**\n       * The default value to use.\n       * @type {String|Number|undefined}\n       */\n      this.default = defaultOrUndefined;\n    } else {\n      if (!messageOrOptions.message || messageOrOptions.length === 0) {\n        throw new Error('message is required');\n      }\n\n      this.type = messageOrOptions.type || InitOption.DefaultType;\n      this.message = `${messageOrOptions.message}?`;\n      this.default = messageOrOptions.default;\n\n      /**\n       * The choices available. Applies to list types only.\n       * @type {String[]|Number[]|undefined}\n       */\n      this.choices = messageOrOptions.choices;\n\n      /**\n       * Validates the user input for this option.\n       * @type {inquirer~Validator}\n       */\n      this.validate = messageOrOptions.validate;\n\n      /**\n       * A function or boolean that indicates weather or not to prompt this option.\n       * @type {Boolean|function(answers: Object): Boolean|undefined}\n       */\n      this.when = messageOrOptions.when;\n    }\n  }\n\n  /**\n   * The default {@link inquirer~PromptType} to use. Equals 'input'.\n   * @return {inquirer~PromptType} The default {@link inquirer~PromptType} to use.\n   */\n  static get DefaultType() {\n    return 'input';\n  }\n\n}\n"]}