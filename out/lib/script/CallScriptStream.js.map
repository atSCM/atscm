{"version":3,"sources":["../../../src/lib/script/CallScriptStream.js"],"names":["CallScriptMethodId","CallScriptMethodBaseNodeId","parentNodeId","CallScriptStream","constructor","targetScriptId","Error","targetScriptBaseId","createCallObject","combinedNodeFile","parameters","createParameters","objectId","toString","methodId","inputArguments","dataType","NodeId","value","String","arrayType","Array","paramNames","Variant","paramValues","chunk","handleCallback","err","results","handleErrors","processChunk","callObj","session","call","statusCode","Good","done","e"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;AAIA,MAAMA,qBAAqB,qBAAW,wCAAX,CAA3B;;AAEA;;;;AAIA,MAAMC,6BAA6BD,mBAAmBE,YAAtD;;AAGA;;;;AAIe,MAAMC,gBAAN,+BAA2C;;AAExDC,cAAYC,cAAZ,EAA4B;AAC1B,QAAI,CAAC,0BAAUA,cAAV,mBAAL,EAAwC;AACtC,YAAM,IAAIC,KAAJ,CAAU,oEACd,uBADI,CAAN;AAED;;AAED;AACA,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKE,kBAAL,GAA0BF,eAAeH,YAAzC;AACD;;AAED;;;;;;AAMAM,mBAAiBC,gBAAjB,EAAmC;AACjC,UAAMC,aAAa,KAAKC,gBAAL,CAAsBF,gBAAtB,CAAnB;;AAEA,WAAO;AACLG,gBAAUX,2BAA2BY,QAA3B,EADL;AAELC,gBAAUd,mBAAmBa,QAAnB,EAFL;AAGLE,sBAAgB,CACd;AACEC,kBAAU,oBAASC,MADrB;AAEEC,eAAO,KAAKb;AAFd,OADc,EAKd;AACEW,kBAAU,oBAASC,MADrB;AAEEC,eAAO,KAAKX;AAFd,OALc,EASd;AACES,kBAAU,oBAASG,MADrB;AAEEC,mBAAW,4BAAiBC,KAF9B;AAGEH,eAAOR,WAAWY;AAHpB,OATc,EAcd;AACEN,kBAAU,oBAASO,OADrB;AAEEH,mBAAW,4BAAiBC,KAF9B;AAGEH,eAAOR,WAAWc;AAHpB,OAdc;AAHX,KAAP;AAwBD;;AAED;;;;;;;AAOAb,mBAAiBc,KAAjB,EAAwB;AAAE;AACxB,UAAM,IAAInB,KAAJ,CAAU,yEAAV,CAAN;AACD;;AAED;;;;;;;;AAQAoB,iBAAeC,GAAf,EAAoBC,OAApB,EAA6BC,YAA7B,EAA2C;AAAE;AAC3C,UAAM,IAAIvB,KAAJ,CAAU,uEAAV,CAAN;AACD;;AAED;;;;;;AAMAwB,eAAaL,KAAb,EAAoBI,YAApB,EAAkC;AAChC,UAAME,UAAU,KAAKvB,gBAAL,CAAsBiB,KAAtB,CAAhB;;AAEA,QAAI;AACF,WAAKO,OAAL,CAAaC,IAAb,CAAkB,CAACF,OAAD,CAAlB,EAA6B,CAACJ,GAAD,EAAMC,OAAN,KAAkB;AAC7C,YAAID,GAAJ,EAAS;AACPE,uBAAaF,GAAb;AACD,SAFD,MAEO,IAAIC,QAAQ,CAAR,EAAWM,UAAX,CAAsBhB,KAAtB,KAAgC,uBAAYiB,IAAZ,CAAiBjB,KAArD,EAA4D;AACjEW,uBAAaF,GAAb,EAAkBC,QAAQ,CAAR,EAAWM,UAA7B,EAAyCE,QAAQA,MAAjD;AACD,SAFM,MAEA;AACL,eAAKV,cAAL,CAAoBE,OAApB,EAA6BH,KAA7B,EAAoCI,YAApC;AACD;AACF,OARD;AASD,KAVD,CAUE,OAAOQ,CAAP,EAAU;AACVR,mBAAaQ,CAAb;AACD;AACF;AA7FuD;kBAArClC,gB","file":"CallScriptStream.js","sourcesContent":["import { DataType, StatusCodes, VariantArrayType } from 'node-opcua';\nimport QueueStream from '../stream/QueueStream';\nimport NodeId from '../ua/NodeId';\nimport checkType from '../../util/validation';\n\n/**\n * Call script node id\n * @type {node-opcua~NodeId}\n */\nconst CallScriptMethodId = new NodeId('ns=1;s=AGENT.SCRIPT.METHODS.callScript');\n\n/**\n * Base node id for callscript node\n * @type {node-opcua~NodeId}\n */\nconst CallScriptMethodBaseNodeId = CallScriptMethodId.parentNodeId;\n\n\n/**\n * A stream that processes atvise server requests in parallel.\n * @abstract\n */\nexport default class CallScriptStream extends QueueStream {\n\n  constructor(targetScriptId) {\n    if (!checkType(targetScriptId, NodeId)) {\n      throw new Error('CallScriptStream#constructor: Given targetScriptId is undefined' +\n        ' or has invalid type!');\n    }\n\n    super();\n    this.targetScriptId = targetScriptId;\n    this.targetScriptBaseId = targetScriptId.parentNodeId;\n  }\n\n  /**\n   * Returns an error message specifically for the given combined file.\n   * @param {CombinedNodeFile} combinedNodeFile The combined file to process\n   * the error message for.\n   * @return {Object} The resulting call script object.\n   */\n  createCallObject(combinedNodeFile) {\n    const parameters = this.createParameters(combinedNodeFile);\n\n    return {\n      objectId: CallScriptMethodBaseNodeId.toString(),\n      methodId: CallScriptMethodId.toString(),\n      inputArguments: [\n        {\n          dataType: DataType.NodeId,\n          value: this.targetScriptId,\n        },\n        {\n          dataType: DataType.NodeId,\n          value: this.targetScriptBaseId,\n        },\n        {\n          dataType: DataType.String,\n          arrayType: VariantArrayType.Array,\n          value: parameters.paramNames,\n        },\n        {\n          dataType: DataType.Variant,\n          arrayType: VariantArrayType.Array,\n          value: parameters.paramValues,\n        },\n      ],\n    };\n  }\n\n  /**\n   * Creates the script parameters for the given chunk\n   * @param {*} chunk The chunk to create the parameter object for\n   * the error message for.\n   * @return {Object} The resulting script parameters. The object always needs to contain a\n   * 'paramNames' and a 'paramValues' array as property\n   */\n  createParameters(chunk) { // eslint-disable-line no-unused-vars\n    throw new Error('CallScriptStream#createParameters must be implemented by all subclasses');\n  }\n\n  /**\n   * Handles the node-opcua call script method callback\n   * @param {Error} err If the call throw an error or not\n   * @param {Array} results The result of the call\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   * @abstract\n   */\n  handleCallback(err, results, handleErrors) { // eslint-disable-line no-unused-vars\n    throw new Error('CallScriptStream#handleCallback must be implemented by all subclasses');\n  }\n\n  /**\n   * Performs opcua method calls for the given call object configuration\n   * @param {*} chunk The chunk being processed.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk(chunk, handleErrors) {\n    const callObj = this.createCallObject(chunk);\n\n    try {\n      this.session.call([callObj], (err, results) => {\n        if (err) {\n          handleErrors(err);\n        } else if (results[0].statusCode.value !== StatusCodes.Good.value) {\n          handleErrors(err, results[0].statusCode, done => done());\n        } else {\n          this.handleCallback(results, chunk, handleErrors);\n        }\n      });\n    } catch (e) {\n      handleErrors(e);\n    }\n  }\n}\n\n"]}