{"version":3,"sources":["../../../src/lib/push/AddReferenceStream.js"],"names":["AddReferencesScriptParameterName","AddReferenceStream","constructor","processErrorMessage","referenceConfigFile","nodeId","toString","createParameters","paramObj","references","JSON","parse","value","paramValue","dataType","String","stringify","paramNames","paramValues","handleCallback","results","handleErrors","outputArguments","Good","Error","failedAttempts","length","map","targetNodeId","error","debug","done"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;AAGA;;;;AAIA,MAAMA,mCAAmC,gBAAzC;;AAGA;;;;AAIe,MAAMC,kBAAN,oCAAkD;AAC/D;;;AAGAC,gBAAc;AACZ,UAAM,qBAAW,gEAAX,CAAN;AACD;;AAGD;;;;;;AAMAC,sBAAoBC,mBAApB,EAAyC;AACvC,WAAQ,6BAA4BA,oBAAoBC,MAApB,CAA2BC,QAA3B,EAAsC,EAA1E;AACD;;AAGD;;;;;;AAMAC,mBAAiBH,mBAAjB,EAAsC;AACpC,UAAMI,WAAW;AACfH,cAAQD,oBAAoBC,MADb;AAEfI,kBAAYC,KAAKC,KAAL,CAAWP,oBAAoBQ,KAA/B;AAFG,KAAjB;;AAKA,UAAMC,aAAa,uBAAY;AAC7BC,gBAAU,oBAASC,MADU;AAE7BH,aAAOF,KAAKM,SAAL,CAAeR,QAAf;AAFsB,KAAZ,CAAnB;;AAKA,WAAO,EAAES,YAAY,CAACjB,gCAAD,CAAd,EAAkDkB,aAAa,CAACL,UAAD,CAA/D,EAAP;AACD;;AAGD;;;;;;;AAOAM,iBAAeC,OAAf,EAAwBhB,mBAAxB,EAA6CiB,YAA7C,EAA2D;AACzD,UAAMhB,SAASD,oBAAoBC,MAAnC;AACA,UAAMiB,kBAAkBF,QAAQ,CAAR,EAAWE,eAAnC;;AAEA,QAAIA,gBAAgB,CAAhB,EAAmBV,KAAnB,CAAyBA,KAAzB,KAAmC,uBAAYW,IAAZ,CAAiBX,KAAxD,EAA+D;AAC7DS,mBAAa,IAAIG,KAAJ,CAAUF,gBAAgB,CAAhB,EAAmBV,KAA7B,CAAb;AACD,KAFD,MAEO;AACL,YAAMa,iBAAiBH,gBAAgB,CAAhB,EAAmBV,KAAnB,CAAyB,CAAzB,EAA4BA,KAAnD;;AAEA,UAAIa,cAAJ,EAAoB;AAClB,YAAIA,eAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7BD,yBAAeE,GAAf,CAAmBC,gBAAgB;AACjC,8BAAOC,KAAP,CAAc,yBAAwBxB,MAAO,OAAMuB,YAAa,SAAhE;AACA,mBAAO,KAAP;AACD,WAHD;AAID,SALD,MAKO;AACL,4BAAOE,KAAP,CAAc,uCAAsCzB,MAAO,EAA3D;AACD;AACF;AACDgB,mBAAa,IAAb,EAAmB,uBAAYE,IAA/B,EAAqCQ,QAAQA,MAA7C;AACD;AACF;AArE8D;kBAA5C9B,kB","file":"AddReferenceStream.js","sourcesContent":["import Logger from 'gulplog';\nimport { StatusCodes, DataType, Variant } from 'node-opcua';\nimport CallScriptStream from '../script/CallScriptStream';\nimport NodeId from '../ua/NodeId';\n\n\n/**\n * Definition for the parameter name of the CreateNode script\n * @type {Array}\n */\nconst AddReferencesScriptParameterName = 'paramObjString';\n\n\n/**\n * A stream that adds node references for the given reference config {AtviseFile}'s\n * on the atvise server.\n */\nexport default class AddReferenceStream extends CallScriptStream {\n  /**\n   * Creates a new CreateNodeStream\n   */\n  constructor() {\n    super(new NodeId('ns=1;s=SYSTEM.LIBRARY.ATVISE.SERVERSCRIPTS.atscm.AddReferences'));\n  }\n\n\n  /**\n   * Returns an error message specifically for the given combined file.\n   * @param {AtviseFile} referenceConfigFile The combined file to process\n   * the error message for.\n   * @return {String} The specific error message.\n   */\n  processErrorMessage(referenceConfigFile) {\n    return `Error adding references:  ${referenceConfigFile.nodeId.toString()}`;\n  }\n\n\n  /**\n   * Creates the parameter object for creating nodes\n   * @param {AtviseFile} referenceConfigFile The referenceConfig file to create the call\n   * parameter object for.\n   * @return {Object} The resulting parameter object.\n   */\n  createParameters(referenceConfigFile) {\n    const paramObj = {\n      nodeId: referenceConfigFile.nodeId,\n      references: JSON.parse(referenceConfigFile.value),\n    };\n\n    const paramValue = new Variant({\n      dataType: DataType.String,\n      value: JSON.stringify(paramObj),\n    });\n\n    return { paramNames: [AddReferencesScriptParameterName], paramValues: [paramValue] };\n  }\n\n\n  /**\n   * Handles the call script methods callback\n   * @param {Array} results The result of the call\n   * @param {AtviseFile} referenceConfigFile The referenceConfig file to process\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  handleCallback(results, referenceConfigFile, handleErrors) {\n    const nodeId = referenceConfigFile.nodeId;\n    const outputArguments = results[0].outputArguments;\n\n    if (outputArguments[0].value.value !== StatusCodes.Good.value) {\n      handleErrors(new Error(outputArguments[1].value));\n    } else {\n      const failedAttempts = outputArguments[3].value[0].value;\n\n      if (failedAttempts) {\n        if (failedAttempts.length > 0) {\n          failedAttempts.map(targetNodeId => {\n            Logger.error(`Adding reference from ${nodeId} to ${targetNodeId} failed`);\n            return false;\n          });\n        } else {\n          Logger.debug(`Successfully created references for ${nodeId}`);\n        }\n      }\n      handleErrors(null, StatusCodes.Good, done => done());\n    }\n  }\n}\n\n"]}