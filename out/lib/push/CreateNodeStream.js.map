{"version":3,"sources":["../../../src/lib/push/CreateNodeStream.js"],"names":["TypeDefinitionKey","HasTypeDefinition","ModellingRuleKey","HasModellingRule","CreateNodeScriptParameterName","CreateNodeStream","constructor","processErrorMessage","combinedNodeFile","typeDefinitionFile","nodeId","toString","createParameters","typeDefinitionConfig","JSON","parse","value","paramObjString","dataType","String","typeDefinition","modellingRuleRefs","isBaseTypeDefinition","items","configObj","parentNodeId","browseName","nodeClass","refNodeId","modellingRule","isTypeDefOnlyFile","contentFile","valueRank","arrayType","createNodeValue","stringify","paramNames","paramValues","handleCallback","results","handleErrors","outputArguments","Good","Error","createdNode","creatingNodeFailed","error","info","done"],"mappings":";;;;;;AAAA;;;;AACA;;AAOA;;;;AACA;;;;AACA;;;;;;AAGA;;;;AAIA,MAAMA,oBAAoB,kCAAwB,4BAAiBC,iBAAzC,CAA1B;;AAEA;;;;AAIA,MAAMC,mBAAmB,kCAAwB,4BAAiBC,gBAAzC,CAAzB;;AAGA;;;;AAIA,MAAMC,gCAAgC,gBAAtC;;AAGA;;;AAGe,MAAMC,gBAAN,oCAAgD;;AAE7D;;;AAGAC,gBAAc;AACZ,UAAM,qBAAW,6DAAX,CAAN;AACD;;AAGD;;;;;;AAMAC,sBAAoBC,gBAApB,EAAsC;AACpC,WAAQ,yBAAwBA,iBAAiBC,kBAAjB,CAAoCC,MAApC,CAA2CC,QAA3C,EAAsD,EAAtF;AACD;;AAGD;;;;;;AAMAC,mBAAiBJ,gBAAjB,EAAmC;AACjC,UAAMC,qBAAqBD,iBAAiBC,kBAA5C;AACA,UAAMC,SAASD,mBAAmBC,MAAlC;AACA,UAAMG,uBAAuBC,KAAKC,KAAL,CAAWN,mBAAmBO,KAA9B,CAA7B;AACA,UAAMC,iBAAiB,uBAAY,EAAEC,UAAU,oBAASC,MAArB,EAA6BH,OAAO,EAApC,EAAZ,CAAvB;AACA,QAAII,iBAAiB,EAArB;AACA,QAAIC,iBAAJ;;AAEA,QAAIZ,mBAAmBa,oBAAvB,EAA6C;AAC3CF,uBAAiBP,oBAAjB;AACD,KAFD,MAEO;AACLO,uBAAiBP,qBAAqBb,iBAArB,EAAwCuB,KAAxC,CAA8C,CAA9C,CAAjB;AACAF,0BAAoBR,qBAAqBX,gBAArB,CAApB;AACD;;AAED,UAAMsB,YAAY;AAChBd,cAAQA,OAAOM,KADC;AAEhBS,oBAAcf,OAAOe,YAAP,CAAoBT,KAFlB;AAGhBU,kBAAYhB,OAAOgB,UAHH;AAIhBC,iBAAW,qBAAUP,eAAeO,SAAzB,EAAoCX,KAJ/B;AAKhBI,sBAAgB,qBAAWA,eAAeQ,SAA1B,EAAqCZ,KALrC;AAMhBa,qBAAeR,oBAAoB,qBAAWA,kBAAkBE,KAAlB,CAAwB,CAAxB,EAA2BK,SAAtC,EAAiDZ,KAArE,GACb;AAPc,KAAlB;;AAUA,QAAI,CAACR,iBAAiBsB,iBAAtB,EAAyC;AACvC,YAAMC,cAAcvB,iBAAiBuB,WAArC;AACA,YAAMb,WAAWa,YAAYb,QAAZ,CAAqBF,KAAtC;;AAEAQ,gBAAUN,QAAV,GAAqBA,QAArB;AACAM,gBAAUQ,SAAV,GAAsBD,YAAYE,SAAZ,CAAsBjB,KAA5C;AACAQ,gBAAUR,KAAV,GAAkBe,YAAYG,eAA9B;AACD;;AAEDjB,mBAAeD,KAAf,GAAuBF,KAAKqB,SAAL,CAAeX,SAAf,CAAvB;;AAEA,WAAO,EAAEY,YAAY,CAAChC,6BAAD,CAAd,EAA+CiC,aAAa,CAACpB,cAAD,CAA5D,EAAP;AACD;;AAED;;;;;;;AAOAqB,iBAAeC,OAAf,EAAwB/B,gBAAxB,EAA0CgC,YAA1C,EAAwD;AACtD,UAAMC,kBAAkBF,QAAQ,CAAR,EAAWE,eAAnC;;AAEA,QAAIA,gBAAgB,CAAhB,EAAmBzB,KAAnB,CAAyBA,KAAzB,KAAmC,uBAAY0B,IAAZ,CAAiB1B,KAAxD,EAA+D;AAC7DwB,mBAAa,IAAIG,KAAJ,CAAUF,gBAAgB,CAAhB,EAAmBzB,KAA7B,CAAb;AACD,KAFD,MAEO;AACL,YAAM4B,cAAcH,gBAAgB,CAAhB,EAAmBzB,KAAnB,CAAyB,CAAzB,EAA4BA,KAAhD;AACA,YAAM6B,qBAAqBJ,gBAAgB,CAAhB,EAAmBzB,KAAnB,CAAyB,CAAzB,EAA4BA,KAAvD;;AAEA,UAAI6B,kBAAJ,EAAwB;AACtB,0BAAOC,KAAP,CAAc,QACZtC,iBAAiBC,kBAAjB,CAAoCC,MAApC,CAA2CC,QAA3C,EACC,wBAFH;AAGD,OAJD,MAIO,IAAIiC,WAAJ,EAAiB;AACtB,0BAAOG,IAAP,CAAa,kBACXvC,iBAAiBC,kBAAjB,CAAoCC,MAApC,CAA2CC,QAA3C,EACC,EAFH;AAGD;AACD6B,mBAAa,IAAb,EAAmB,uBAAYE,IAA/B,EAAqCM,QAAQA,MAA7C;AACD;AACF;AA7F4D;kBAA1C3C,gB","file":"CreateNodeStream.js","sourcesContent":["import Logger from 'gulplog';\nimport {\n  ReferenceTypeIds,\n  StatusCodes,\n  DataType,\n  NodeClass,\n  Variant,\n} from 'node-opcua';\nimport CallScriptStream from '../script/CallScriptStream';\nimport NodeId from '../ua/NodeId';\nimport ReverseReferenceTypeIds from '../ua/ReverseReferenceTypeIds';\n\n\n/**\n * Type definition key for type definition files\n * @type {String}\n */\nconst TypeDefinitionKey = ReverseReferenceTypeIds[ReferenceTypeIds.HasTypeDefinition];\n\n/**\n * Modelling rule key for type definition files\n * @type {String}\n */\nconst ModellingRuleKey = ReverseReferenceTypeIds[ReferenceTypeIds.HasModellingRule];\n\n\n/**\n * Definition for the parameter name of the CreateNode script\n * @type {Array}\n */\nconst CreateNodeScriptParameterName = 'paramObjString';\n\n\n/**\n * A stream that creates atvise server nodes for the given{@link CombinedNodeFiles}s\n */\nexport default class CreateNodeStream extends CallScriptStream {\n\n  /**\n   * Creates a new CreateNodeStream\n   */\n  constructor() {\n    super(new NodeId('ns=1;s=SYSTEM.LIBRARY.ATVISE.SERVERSCRIPTS.atscm.CreateNode'));\n  }\n\n\n  /**\n   * Returns an error message specifically for the given combined file.\n   * @param {CombinedNodeFile} combinedNodeFile The combined file to process\n   * the error message for.\n   * @return {String} The specific error message.\n   */\n  processErrorMessage(combinedNodeFile) {\n    return `Error creating node:  ${combinedNodeFile.typeDefinitionFile.nodeId.toString()}`;\n  }\n\n\n  /**\n   * Creates the parameter object for creating nodes\n   * @param {CombinedNodeFile} combinedNodeFile The combined node file to process\n   * the error message for.\n   * @return {Object} The resulting parameter object.\n   */\n  createParameters(combinedNodeFile) {\n    const typeDefinitionFile = combinedNodeFile.typeDefinitionFile;\n    const nodeId = typeDefinitionFile.nodeId;\n    const typeDefinitionConfig = JSON.parse(typeDefinitionFile.value);\n    const paramObjString = new Variant({ dataType: DataType.String, value: '' });\n    let typeDefinition = {};\n    let modellingRuleRefs;\n\n    if (typeDefinitionFile.isBaseTypeDefinition) {\n      typeDefinition = typeDefinitionConfig;\n    } else {\n      typeDefinition = typeDefinitionConfig[TypeDefinitionKey].items[0];\n      modellingRuleRefs = typeDefinitionConfig[ModellingRuleKey];\n    }\n\n    const configObj = {\n      nodeId: nodeId.value,\n      parentNodeId: nodeId.parentNodeId.value,\n      browseName: nodeId.browseName,\n      nodeClass: NodeClass[typeDefinition.nodeClass].value,\n      typeDefinition: new NodeId(typeDefinition.refNodeId).value,\n      modellingRule: modellingRuleRefs ? new NodeId(modellingRuleRefs.items[0].refNodeId).value :\n        null,\n    };\n\n    if (!combinedNodeFile.isTypeDefOnlyFile) {\n      const contentFile = combinedNodeFile.contentFile;\n      const dataType = contentFile.dataType.value;\n\n      configObj.dataType = dataType;\n      configObj.valueRank = contentFile.arrayType.value;\n      configObj.value = contentFile.createNodeValue;\n    }\n\n    paramObjString.value = JSON.stringify(configObj);\n\n    return { paramNames: [CreateNodeScriptParameterName], paramValues: [paramObjString] };\n  }\n\n  /**\n   * Handles the call script methods callback\n   * @param {Array} results The result of the call\n   * @param {CombinedNodeFile} combinedNodeFile The combined file to process\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  handleCallback(results, combinedNodeFile, handleErrors) {\n    const outputArguments = results[0].outputArguments;\n\n    if (outputArguments[0].value.value !== StatusCodes.Good.value) {\n      handleErrors(new Error(outputArguments[1].value));\n    } else {\n      const createdNode = outputArguments[3].value[0].value;\n      const creatingNodeFailed = outputArguments[3].value[1].value;\n\n      if (creatingNodeFailed) {\n        Logger.error(`Node ${\n          combinedNodeFile.typeDefinitionFile.nodeId.toString()\n          }: Creating node failed`);\n      } else if (createdNode) {\n        Logger.info(`Created node:  ${\n          combinedNodeFile.typeDefinitionFile.nodeId.toString()\n          }`);\n      }\n      handleErrors(null, StatusCodes.Good, done => done());\n    }\n  }\n}\n"]}