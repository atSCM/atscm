{"version":3,"sources":["../../../src/lib/push/WriteStream.js"],"names":["WriteStream","constructor","options","createNodes","processErrorMessage","combinedNodeFile","contentFile","nodeId","toString","processChunk","handleErrors","isTypeDefOnlyFile","push","Good","done","session","writeSingleNode","dataType","arrayType","value","err","statusCode","BadUserAccessDenied","warn","BadNodeIdUnknown","debug","info","emit","e"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA;;;;AAIe,MAAMA,WAAN,+BAAsC;;AAGnD;;;;AAIAC,cAAYC,UAAU,EAAtB,EAA0B;AACxB;;AAEA;;;;AAIA,SAAKC,WAAL,GAAmBD,QAAQC,WAAR,IAAuB,KAA1C;AACD;;AAGD;;;;;;AAMAC,sBAAoBC,gBAApB,EAAsC;AACpC,WAAQ,2BAA0BA,iBAAiBC,WAAjB,CAA6BC,MAA7B,CAAoCC,QAApC,EAA+C,EAAjF;AACD;;AAED;;;;;;;AAOAC,eAAaJ,gBAAb,EAA+BK,YAA/B,EAA6C;AAC3C,UAAMJ,cAAcD,iBAAiBC,WAArC;;AAEA,QAAI,KAAKH,WAAL,IAAoBE,iBAAiBM,iBAAzC,EAA4D;AAC1D,WAAKC,IAAL,CAAUP,gBAAV;AACAK,mBAAa,IAAb,EAAmB,uBAAYG,IAA/B,EAAqCC,QAAQA,MAA7C;AACD,KAHD,MAGO;AACL,UAAI;AACF,aAAKC,OAAL,CAAaC,eAAb,CAA6BV,YAAYC,MAAZ,CAAmBC,QAAnB,EAA7B,EAA4D;AAC1DS,oBAAUX,YAAYW,QADoC;AAE1DC,qBAAWZ,YAAYY,SAFmC;AAG1DC,iBAAOb,YAAYa;AAHuC,SAA5D,EAIG,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACtB,cAAIA,WAAWF,KAAX,KAAqB,uBAAYG,mBAAZ,CAAgCH,KAAzD,EAAgE;AAC9D,8BAAOI,IAAP,CAAa,sBACXjB,YAAYC,MAAZ,CAAmBC,QAAnB,EACD,gDAFD;;AAIAE,yBAAaU,GAAb,EAAkB,uBAAYP,IAA9B,EAAoCC,QAAQA,MAA5C;AACD,WAND,MAMO,IAAIO,eAAe,uBAAYG,gBAA/B,EAAiD;AACtD,gBAAI,KAAKrB,WAAT,EAAsB;AACpB,gCAAOsB,KAAP,CAAc,QACZnB,YAAYC,MAAZ,CAAmBC,QAAnB,EACC,sDAFH;;AAIA,mBAAKI,IAAL,CAAUP,gBAAV;AACD,aAND,MAMO;AACL,gCAAOqB,IAAP,CAAa,QACXpB,YAAYC,MAAZ,CAAmBC,QAAnB,EACC,iDAFH;AAGD;;AAEDE,yBAAaU,GAAb,EAAkB,uBAAYP,IAA9B,EAAoCC,QAAQA,MAA5C;AACD,WAdM,MAcA;AACL,iBAAKa,IAAL,CAAU,kBAAV,EAA8BrB,WAA9B;AACAI,yBAAaU,GAAb,EAAkB,uBAAYP,IAA9B,EAAoCC,QAAQA,MAA5C;AACD;AACF,SA7BD;AA8BD,OA/BD,CA+BE,OAAOc,CAAP,EAAU;AACVlB,qBAAakB,CAAb;AACD;AACF;AACF;AA7EkD;kBAAhC5B,W","file":"WriteStream.js","sourcesContent":["import Logger from 'gulplog';\nimport { StatusCodes } from 'node-opcua';\nimport QueueStream from '../stream/QueueStream';\n\n/**\n * A stream that writes all read {@link CombinedNodeFiles}s to their corresponding\n * nodes on atvise server.\n */\nexport default class WriteStream extends QueueStream {\n\n\n  /**\n   * Creates a new WriteStream based on a source file stream.\n   * @param {Object} options The stream configuration options.\n   */\n  constructor(options = {}) {\n    super();\n\n    /**\n     * Defines wether the stream works with {CombinedNodeFiles} or {AtviseFile}s.\n     * @type {Boolean}\n     */\n    this.createNodes = options.createNodes || false;\n  }\n\n\n  /**\n   * Returns an error message specifically for the given combined file.\n   * @param {CombinedNodeFile} combinedNodeFile The combined file to process\n   * the error message for.\n   * @return {String} The specific error message.\n   */\n  processErrorMessage(combinedNodeFile) {\n    return `Error processing file:  ${combinedNodeFile.contentFile.nodeId.toString()}`;\n  }\n\n  /**\n   * Writes {@link CombinedNodeFile.contentFile}'s values to the corresponding nodes on\n   * the atvise server.\n   * @param {CombinedNodeFile} combinedNodeFile The combined file to process.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk(combinedNodeFile, handleErrors) {\n    const contentFile = combinedNodeFile.contentFile;\n\n    if (this.createNodes && combinedNodeFile.isTypeDefOnlyFile) {\n      this.push(combinedNodeFile);\n      handleErrors(null, StatusCodes.Good, done => done());\n    } else {\n      try {\n        this.session.writeSingleNode(contentFile.nodeId.toString(), {\n          dataType: contentFile.dataType,\n          arrayType: contentFile.arrayType,\n          value: contentFile.value,\n        }, (err, statusCode) => {\n          if (statusCode.value === StatusCodes.BadUserAccessDenied.value) {\n            Logger.warn(`Error writing node ${\n              contentFile.nodeId.toString()\n            }: Make sure it is not opened in atvise builder`);\n\n            handleErrors(err, StatusCodes.Good, done => done());\n          } else if (statusCode === StatusCodes.BadNodeIdUnknown) {\n            if (this.createNodes) {\n              Logger.debug(`Node ${\n                contentFile.nodeId.toString()\n                }: does not exist and is pushed to create node stream`);\n\n              this.push(combinedNodeFile);\n            } else {\n              Logger.info(`Node ${\n                contentFile.nodeId.toString()\n                }: does not exist in atvise server address space`);\n            }\n\n            handleErrors(err, StatusCodes.Good, done => done());\n          } else {\n            this.emit('write-successful', contentFile);\n            handleErrors(err, StatusCodes.Good, done => done());\n          }\n        });\n      } catch (e) {\n        handleErrors(e);\n      }\n    }\n  }\n}\n"]}