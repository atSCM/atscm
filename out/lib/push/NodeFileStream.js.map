{"version":3,"sources":["../../../src/lib/push/NodeFileStream.js"],"names":["NodeFileStream","constructor","options","createNodes","combinedFilesCache","processErrorMessage","file","nodeId","toString","processChunk","handleErrors","combinedFile","hasValidType","Error","addFile","isComplete","Good","done","push"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA;;;;AAIe,MAAMA,cAAN,+BAAyC;;AAEtD;;;AAGAC,cAAYC,UAAU,EAAtB,EAA0B;AACxB;;AAEA;;;;AAIA,SAAKC,WAAL,GAAmBD,QAAQC,WAAR,IAAuB,KAA1C;;AAGA;;;;AAIA,SAAKC,kBAAL,GAA0B,EAA1B;AACD;;AAED;;;;;;AAMAC,sBAAoBC,IAApB,EAA0B;AACxB,WAAQ,uCAAsCA,KAAKC,MAAL,CAAYC,QAAZ,EAAuB,EAArE;AACD;;AAED;;;;;;;;AAQAC,eAAaH,IAAb,EAAmBI,YAAnB,EAAiC;AAC/B,UAAMH,SAASD,KAAKC,MAApB;AACA,QAAII,eAAe,EAAnB;;AAEA,QAAI,CAAC,2BAAiBC,YAAjB,CAA8BN,IAA9B,CAAL,EAA0C;AACxCI,mBAAa,IAAIG,KAAJ,CAAW,2CAA0CN,OAAOC,QAAP,EAAkB,EAAvE,CAAb;AACD;;AAED,QAAI,KAAKJ,kBAAL,CAAwBG,MAAxB,CAAJ,EAAqC;AACnCI,qBAAe,KAAKP,kBAAL,CAAwBG,MAAxB,CAAf;;AAEA,UAAI,CAACI,aAAaG,OAAb,CAAqBR,IAArB,CAAL,EAAiC;AAC/BI,qBAAa,IAAIG,KAAJ,CAAW,oCAAmCN,OAAOC,QAAP,EAAkB,EAAhE,CAAb;AACD;AACF,KAND,MAMO;AACL,WAAKJ,kBAAL,CAAwBG,MAAxB,IAAkC,+BAAqBD,IAArB,EAA2B,KAAKH,WAAhC,CAAlC;AACAQ,qBAAe,KAAKP,kBAAL,CAAwBG,MAAxB,CAAf;AACD;;AAED,QAAII,aAAaI,UAAjB,EAA6B;AAC3BL,mBAAa,IAAb,EAAmB,uBAAYM,IAA/B,EAAqCC,QAAQ;AAC3C,aAAKC,IAAL,CAAUP,YAAV;AACA,eAAO,KAAKP,kBAAL,CAAwBG,MAAxB,CAAP;AACAU;AACD,OAJD;AAKD,KAND,MAMO;AACLP,mBAAa,IAAb,EAAmB,uBAAYM,IAA/B,EAAqCC,QAAQA,MAA7C;AACD;AACF;AApEqD;kBAAnCjB,c","file":"NodeFileStream.js","sourcesContent":["import { StatusCodes } from 'node-opcua';\nimport QueueStream from '../stream/QueueStream';\nimport CombinedNodeFile from './CombinedNodeFile';\n\n/**\n * A stream that combines content {@link AtviseFile}s with type definition {@link AtviseFile}s\n * to {@link CombinedNodeFile}s.\n */\nexport default class NodeFileStream extends QueueStream {\n\n  /**\n   * Creates a new NodeFileStream.\n   */\n  constructor(options = {}) {\n    super();\n\n    /**\n     * Defines wether the stream works with {CombinedNodeFiles} or {AtviseFile}s.\n     * @type {Boolean}\n     */\n    this.createNodes = options.createNodes || false;\n\n\n    /**\n     * The file cache\n     * @type {Map<node-opcua~NodeId, CombinedNodeFile>}\n     */\n    this.combinedFilesCache = {};\n  }\n\n  /**\n   * Returns an error message specifically for the given atvise file\n   * @param {AtviseFile} file The file to get\n   * the error message for.\n   * @return {String} The specific error message.\n   */\n  processErrorMessage(file) {\n    return `Error processing file with node id: ${file.nodeId.toString()}`;\n  }\n\n  /**\n   * Mapps the given content {@link AtviseFiles}s with the given type\n   * definition{@link AtviseFiles}s.\n   * @param {AtviseFile} file The file to process\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n\n  processChunk(file, handleErrors) {\n    const nodeId = file.nodeId;\n    let combinedFile = {};\n\n    if (!CombinedNodeFile.hasValidType(file)) {\n      handleErrors(new Error(`NodeFileStream: File has invalid type:  ${nodeId.toString()}`));\n    }\n\n    if (this.combinedFilesCache[nodeId]) {\n      combinedFile = this.combinedFilesCache[nodeId];\n\n      if (!combinedFile.addFile(file)) {\n        handleErrors(new Error(`NodeFileStream: Duplicate file:  ${nodeId.toString()}`));\n      }\n    } else {\n      this.combinedFilesCache[nodeId] = new CombinedNodeFile(file, this.createNodes);\n      combinedFile = this.combinedFilesCache[nodeId];\n    }\n\n    if (combinedFile.isComplete) {\n      handleErrors(null, StatusCodes.Good, done => {\n        this.push(combinedFile);\n        delete this.combinedFilesCache[nodeId];\n        done();\n      });\n    } else {\n      handleErrors(null, StatusCodes.Good, done => done());\n    }\n  }\n}\n\n"]}