{"version":3,"sources":["../../../src/lib/push/CombinedNodeFile.js"],"names":["TypeDefinitionKey","HasTypeDefinition","CombinedNodeFile","constructor","file","createNodes","Boolean","Error","hasValidType","contentFile","typeDefinitionFile","isTypeDefinition","isAtviseReferenceConfig","isDirectory","isComplete","typeDefFileComplete","isTypeDefOnlyFile","typeDefinitionContent","JSON","parse","value","typeDefinition","isBaseTypeDefinition","items","nodeClass","Variable","addFile","fileTypeWasAlreadyAdded"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;AAIA,MAAMA,oBAAoB,kCAAwB,4BAAiBC,iBAAzC,CAA1B;;AAGe,MAAMC,gBAAN,CAAuB;;AAEpC;;;;AAIAC,cAAYC,IAAZ,EAAkBC,WAAlB,EAA+B;AAC7B,QAAI,CAAC,0BAAUD,IAAV,uBAAD,IAAgC,CAAC,0BAAUC,WAAV,EAAuBC,OAAvB,CAArC,EAAsE;AACpE,YAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD,KAFD,MAEO,IAAI,CAACL,iBAAiBM,YAAjB,CAA8BJ,IAA9B,CAAL,EAA0C;AAC/C,YAAM,IAAIG,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED;;;;AAIA,SAAKE,WAAL,GAAmB,EAAnB;;AAGA;;;;AAIA,SAAKJ,WAAL,GAAmBA,WAAnB;;AAGA;;;;AAIA,SAAKK,kBAAL,GAA0B,EAA1B;;AAEA,QAAIN,KAAKO,gBAAT,EAA2B;AACzB,WAAKD,kBAAL,GAA0BN,IAA1B;AACD,KAFD,MAEO;AACL,WAAKK,WAAL,GAAmBL,IAAnB;AACD;AACF;;AAED;;;;;AAKA,SAAOI,YAAP,CAAoBJ,IAApB,EAA0B;AACxB,WAAO,CAACA,KAAKQ,uBAAN,IAAiC,CAACR,KAAKS,WAAL,EAAzC;AACD;;AAED;;;;AAIA,MAAIC,UAAJ,GAAiB;AACf,UAAMC,sBAAsB,0BAAU,KAAKL,kBAAf,uBAA5B;;AAEA,QAAI,KAAKL,WAAT,EAAsB;AACpB,UAAI,CAACU,mBAAL,EAA0B;AACxB,eAAO,KAAP;AACD;;AAED,aAAO,KAAKC,iBAAL,GAAyBD,mBAAzB,GACL,0BAAU,KAAKN,WAAf,2BAA2CM,mBAD7C;AAED;;AAED,WAAO,0BAAU,KAAKN,WAAf,uBAAP;AACD;;AAED;;;;AAIA,MAAIO,iBAAJ,GAAwB;AACtB,UAAMC,wBAAwBC,KAAKC,KAAL,CAAW,KAAKT,kBAAL,CAAwBU,KAAnC,CAA9B;AACA,QAAIC,iBAAiB,EAArB;;AAEA,QAAI,KAAKX,kBAAL,CAAwBY,oBAA5B,EAAkD;AAChDD,uBAAiBJ,qBAAjB;AACD,KAFD,MAEO;AACLI,uBAAiBJ,sBAAsBjB,iBAAtB,EAAyCuB,KAAzC,CAA+C,CAA/C,CAAjB;AACD;;AAED,WAAO,qBAAUF,eAAeG,SAAzB,EAAoCJ,KAApC,KAA8C,qBAAUK,QAAV,CAAmBL,KAAxE;AACD;;AAED;;;;;AAKAM,UAAQtB,IAAR,EAAc;AACZ,QAAI,KAAKuB,uBAAL,CAA6BvB,IAA7B,CAAJ,EAAwC;AACtC,aAAO,KAAP;AACD;;AAED,QAAIA,KAAKO,gBAAT,EAA2B;AACzB,WAAKD,kBAAL,GAA0BN,IAA1B;AACD,KAFD,MAEO;AACL,WAAKK,WAAL,GAAmBL,IAAnB;AACD;;AAED,WAAO,IAAP;AACD;;AAED;;;;;AAKAuB,0BAAwBvB,IAAxB,EAA8B;AAC5B,WAAOA,KAAKO,gBAAL,GAAwB,0BAAU,KAAKD,kBAAf,uBAAxB,GACL,0BAAU,KAAKD,WAAf,uBADF;AAED;AAhHmC;kBAAjBP,gB","file":"CombinedNodeFile.js","sourcesContent":["import { ReferenceTypeIds, NodeClass } from 'node-opcua';\nimport checkType from '../../util/validation';\nimport AtviseFile from '../mapping/AtviseFile';\nimport ReverseReferenceTypeIds from '../ua/ReverseReferenceTypeIds';\n\n/**\n * Type definition key for type definition files\n * @type {String}\n */\nconst TypeDefinitionKey = ReverseReferenceTypeIds[ReferenceTypeIds.HasTypeDefinition];\n\n\nexport default class CombinedNodeFile {\n\n  /**\n   * Creates a new CombinedNodeFile based on given atvise File.\n   * @param {AtviseFile} file The file to add in first place\n   */\n  constructor(file, createNodes) {\n    if (!checkType(file, AtviseFile) || !checkType(createNodes, Boolean)) {\n      throw new Error('Class CombinedNodeFile: Can not parse given argument!');\n    } else if (!CombinedNodeFile.hasValidType(file)) {\n      throw new Error('Class CombinedNodeFile: File has wrong type!');\n    }\n\n    /**\n     * The content atvise file\n     * @type {AtviseFile}\n     */\n    this.contentFile = {};\n\n\n    /**\n     * Defines wether the stream works with {CombinedNodeFiles} or {AtviseFile}s.\n     * @type {Boolean}\n     */\n    this.createNodes = createNodes;\n\n\n    /**\n     * The type definition atvise file\n     * @type {AtviseFile}\n     */\n    this.typeDefinitionFile = {};\n\n    if (file.isTypeDefinition) {\n      this.typeDefinitionFile = file;\n    } else {\n      this.contentFile = file;\n    }\n  }\n\n  /**\n   * Checks if the given file has a valid type for combined files\n   * @param {AtviseFile} file The file to check\n   * @return {Boolean} file has valid type(=true) or not(=false)\n   */\n  static hasValidType(file) {\n    return !file.isAtviseReferenceConfig && !file.isDirectory();\n  }\n\n  /**\n   * `true` for files that already contain necessary information.\n   * @type {Boolean}\n   */\n  get isComplete() {\n    const typeDefFileComplete = checkType(this.typeDefinitionFile, AtviseFile);\n\n    if (this.createNodes) {\n      if (!typeDefFileComplete) {\n        return false;\n      }\n\n      return this.isTypeDefOnlyFile ? typeDefFileComplete :\n        checkType(this.contentFile, AtviseFile) && typeDefFileComplete;\n    }\n\n    return checkType(this.contentFile, AtviseFile);\n  }\n\n  /**\n   * `true` for files that contain type definitions.\n   * @type {Boolean}\n   */\n  get isTypeDefOnlyFile() {\n    const typeDefinitionContent = JSON.parse(this.typeDefinitionFile.value);\n    let typeDefinition = {};\n\n    if (this.typeDefinitionFile.isBaseTypeDefinition) {\n      typeDefinition = typeDefinitionContent;\n    } else {\n      typeDefinition = typeDefinitionContent[TypeDefinitionKey].items[0];\n    }\n\n    return NodeClass[typeDefinition.nodeClass].value !== NodeClass.Variable.value;\n  }\n\n  /**\n   * Adds the given file to the combined file\n   * @param{AtviseFile} file The file to add\n   * @return {Bool} file type was already added(=true) or not(=false)\n   */\n  addFile(file) {\n    if (this.fileTypeWasAlreadyAdded(file)) {\n      return false;\n    }\n\n    if (file.isTypeDefinition) {\n      this.typeDefinitionFile = file;\n    } else {\n      this.contentFile = file;\n    }\n\n    return true;\n  }\n\n  /**\n   * checks if the given file type was already added\n   * @param{AtviseFile} file The file to add\n   * @return {Bool} file type was already added(=true) or not(=false)\n   */\n  fileTypeWasAlreadyAdded(file) {\n    return file.isTypeDefinition ? checkType(this.typeDefinitionFile, AtviseFile) :\n      checkType(this.contentFile, AtviseFile);\n  }\n}\n"]}