{"version":3,"sources":["../../../src/lib/gulp/PushStream.js"],"names":["PushStream","constructor","srcStream","mappingStream","direction","FromFilesystem","createStream","addReferencesStream","writeStream","printProgress","setInterval","info","_processed","opsPerSecond","toFixed","listenerCount","cursorTo","process","stdout","moveCursor","applyTransformers","pipe","useTransformers","on","clearLine","clearInterval"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;AAGe,MAAMA,UAAN,CAAiB;;AAE9B;;;;AAIAC,cAAYC,SAAZ,EAAuB;AACrB,UAAMC,gBAAgB,sBAAuB,EAAEC,WAAW,gCAAmBC,cAAhC,EAAvB,CAAtB;AACA,UAAMC,eAAe,gCAArB;AACA,UAAMC,sBAAsB,mCAA5B;AACA,UAAMC,cAAc,0BAAgBF,YAAhB,EAA8BC,mBAA9B,CAApB;;AAEA,UAAME,gBAAgBC,YAAY,MAAM;AACtC,wBAAOC,IAAP,CACG,WAAUH,YAAYI,UAAW,KAAIJ,YAAYK,YAAZ,CAAyBC,OAAzB,CAAiC,CAAjC,CAAoC,SAD5E;;AAIA,UAAI,kBAAOC,aAAP,CAAqB,MAArB,IAA+B,CAAnC,EAAsC;AACpC,2BAASC,QAAT,CAAkBC,QAAQC,MAA1B,EAAkC,CAAlC;AACA,2BAASC,UAAT,CAAoBF,QAAQC,MAA5B,EAAoC,CAApC,EAAuC,CAAC,CAAxC;AACD;AACF,KATqB,EASnB,IATmB,CAAtB;;AAWA,WAAO,sBAAYE,iBAAZ,CACLlB,UACGmB,IADH,CACQlB,aADR,CADK,EAGL,wBAAcmB,eAHT,EAIL,gCAAmBjB,cAJd,EAMJgB,IANI,CAMCb,WAND,EAOJa,IAPI,CAOCf,YAPD,EAQJe,IARI,CAQCd,mBARD,EASJgB,EATI,CASD,QATC,EASS,MAAM;AAClB,UAAI,kBAAOR,aAAP,CAAqB,MAArB,IAA+B,CAAnC,EAAsC;AACpC,2BAASC,QAAT,CAAkBC,QAAQC,MAA1B,EAAkC,CAAlC;AACA,2BAASM,SAAT,CAAmBP,QAAQC,MAA3B;AACD;;AAEDO,oBAAchB,aAAd;AACD,KAhBI,CAAP;AAiBD;;AAxC6B;kBAAXT,U","file":"PushStream.js","sourcesContent":["import readline from 'readline';\nimport Logger from 'gulplog';\nimport ProjectConfig from '../../config/ProjectConfig';\nimport Transformer, { TransformDirection } from '../transform/Transformer';\nimport MappingTransformer from '../../transform/Mapping';\nimport WriteStream from '../server/WriteStream';\nimport CreateNodeStream from '../server/CreateNodeStream';\nimport AddReferencesStream from '../server/AddReferencesStream';\n\n/**\n * A stream that transforms read {@link vinyl~File}s and pushes them to atvise server.\n */\nexport default class PushStream {\n\n  /**\n   * Creates a new PushSteam based on a source file stream.\n   * @param {Stream} srcStream The file stream to read from.\n   */\n  constructor(srcStream) {\n    const mappingStream = new MappingTransformer({ direction: TransformDirection.FromFilesystem });\n    const createStream = new CreateNodeStream();\n    const addReferencesStream = new AddReferencesStream();\n    const writeStream = new WriteStream(createStream, addReferencesStream);\n\n    const printProgress = setInterval(() => {\n      Logger.info(\n        `Pushed: ${writeStream._processed} (${writeStream.opsPerSecond.toFixed(1)} ops/s)`\n      );\n\n      if (Logger.listenerCount('info') > 0) {\n        readline.cursorTo(process.stdout, 0);\n        readline.moveCursor(process.stdout, 0, -1);\n      }\n    }, 1000);\n\n    return Transformer.applyTransformers(\n      srcStream\n        .pipe(mappingStream),\n      ProjectConfig.useTransformers,\n      TransformDirection.FromFilesystem\n    )\n      .pipe(writeStream)\n      .pipe(createStream)\n      .pipe(addReferencesStream)\n      .on('finish', () => {\n        if (Logger.listenerCount('info') > 0) {\n          readline.cursorTo(process.stdout, 0);\n          readline.clearLine(process.stdout);\n        }\n\n        clearInterval(printProgress);\n      });\n  }\n\n}\n"]}