{"version":3,"sources":["../../../src/lib/gulp/PushStream.js"],"names":["PushStream","constructor","srcStream","createStream","CreateNodeStream","addReferencesStream","AddReferencesStream","writeStream","WriteStream","printProgress","setInterval","Logger","info","_processed","opsPerSecond","toFixed","listenerCount","readline","cursorTo","process","stdout","moveCursor","Transformer","applyTransformers","ProjectConfig","useTransformers","TransformDirection","FromFilesystem","pipe","on","clearLine","clearInterval"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA;;;AAGe,MAAMA,UAAN,CAAiB;AAC9B;;;;AAIAC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB,UAAMC,YAAY,GAAG,IAAIC,yBAAJ,EAArB;AACA,UAAMC,mBAAmB,GAAG,IAAIC,4BAAJ,EAA5B;AACA,UAAMC,WAAW,GAAG,IAAIC,oBAAJ,CAAgBL,YAAhB,EAA8BE,mBAA9B,CAApB;AAEA,UAAMI,aAAa,GAAGC,WAAW,CAAC,MAAM;AACtCC,uBAAOC,IAAP,CACG,WAAUL,WAAW,CAACM,UAAW,KAAIN,WAAW,CAACO,YAAZ,CAAyBC,OAAzB,CAAiC,CAAjC,CAAoC,SAD5E;;AAIA,UAAIJ,iBAAOK,aAAP,CAAqB,MAArB,IAA+B,CAAnC,EAAsC;AACpCC,0BAASC,QAAT,CAAkBC,OAAO,CAACC,MAA1B,EAAkC,CAAlC;;AACAH,0BAASI,UAAT,CAAoBF,OAAO,CAACC,MAA5B,EAAoC,CAApC,EAAuC,CAAC,CAAxC;AACD;AACF,KATgC,EAS9B,IAT8B,CAAjC;AAWA,WAAOE,qBAAYC,iBAAZ,CACLrB,SADK,EAELsB,uBAAcC,eAFT,EAGLC,gCAAmBC,cAHd,EAKJC,IALI,CAKCrB,WALD,EAMJqB,IANI,CAMCzB,YAND,EAOJyB,IAPI,CAOCvB,mBAPD,EAQJwB,EARI,CAQD,QARC,EAQS,MAAM;AAClB,UAAIlB,iBAAOK,aAAP,CAAqB,MAArB,IAA+B,CAAnC,EAAsC;AACpCC,0BAASC,QAAT,CAAkBC,OAAO,CAACC,MAA1B,EAAkC,CAAlC;;AACAH,0BAASa,SAAT,CAAmBX,OAAO,CAACC,MAA3B;AACD;;AAEDW,MAAAA,aAAa,CAACtB,aAAD,CAAb;AACD,KAfI,CAAP;AAgBD;;AArC6B","sourcesContent":["import readline from 'readline';\nimport Logger from 'gulplog';\nimport ProjectConfig from '../../config/ProjectConfig';\nimport Transformer, { TransformDirection } from '../transform/Transformer';\nimport WriteStream from '../server/WriteStream';\nimport CreateNodeStream from '../server/CreateNodeStream';\nimport AddReferencesStream from '../server/AddReferencesStream';\n\n/**\n * A stream that transforms read {@link vinyl~File}s and pushes them to atvise server.\n */\nexport default class PushStream {\n  /**\n   * Creates a new PushSteam based on a source file stream.\n   * @param {Stream} srcStream The file stream to read from.\n   */\n  constructor(srcStream) {\n    const createStream = new CreateNodeStream();\n    const addReferencesStream = new AddReferencesStream();\n    const writeStream = new WriteStream(createStream, addReferencesStream);\n\n    const printProgress = setInterval(() => {\n      Logger.info(\n        `Pushed: ${writeStream._processed} (${writeStream.opsPerSecond.toFixed(1)} ops/s)`\n      );\n\n      if (Logger.listenerCount('info') > 0) {\n        readline.cursorTo(process.stdout, 0);\n        readline.moveCursor(process.stdout, 0, -1);\n      }\n    }, 1000);\n\n    return Transformer.applyTransformers(\n      srcStream,\n      ProjectConfig.useTransformers,\n      TransformDirection.FromFilesystem\n    )\n      .pipe(writeStream)\n      .pipe(createStream)\n      .pipe(addReferencesStream)\n      .on('finish', () => {\n        if (Logger.listenerCount('info') > 0) {\n          readline.cursorTo(process.stdout, 0);\n          readline.clearLine(process.stdout);\n        }\n\n        clearInterval(printProgress);\n      });\n  }\n}\n"],"file":"PushStream.js"}