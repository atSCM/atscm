{"version":3,"sources":["../../../src/lib/gulp/PullStream.js"],"names":["PullStream","constructor","readStream","mappingStream","direction","FromDB","printProgress","setInterval","info","processed","opsPerSecond","toFixed","listenerCount","cursorTo","process","stdout","moveCursor","applyTransformers","pipe","useTransformers","concat","on","clearLine","clearInterval"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;AAGe,MAAMA,UAAN,CAAiB;;AAE9B;;;;;AAKAC,cAAYC,UAAZ,EAAwB;AACtB,UAAMC,gBAAgB,sBAAuB,EAAEC,WAAW,gCAAmBC,MAAhC,EAAvB,CAAtB;;AAEA,UAAMC,gBAAgBC,YAAY,MAAM;AACtC,wBAAOC,IAAP,CAAa,WAAUN,WAAWO,SAAU,KAAIP,WAAWQ,YAAX,CAAwBC,OAAxB,CAAgC,CAAhC,CAAmC,SAAnF;;AAEA,UAAI,kBAAOC,aAAP,CAAqB,MAArB,IAA+B,CAAnC,EAAsC;AACpC,2BAASC,QAAT,CAAkBC,QAAQC,MAA1B,EAAkC,CAAlC;AACA,2BAASC,UAAT,CAAoBF,QAAQC,MAA5B,EAAoC,CAApC,EAAuC,CAAC,CAAxC;AACD;AACF,KAPqB,EAOnB,IAPmB,CAAtB;;AASA,WAAO,sBAAYE,iBAAZ,CACLf,WACGgB,IADH,CACQf,aADR,CADK,EAGL,wBAAcgB,eAAd,CACGC,MADH,CACU,wBADV,CAHK,EAKL,gCAAmBf,MALd,EAOJa,IAPI,CAOC,gBAAK,OAAL,CAPD,EAQJG,EARI,CAQD,QARC,EAQS,MAAM;AAClB,UAAI,kBAAOT,aAAP,CAAqB,MAArB,IAA+B,CAAnC,EAAsC;AACpC,2BAASU,SAAT,CAAmBR,QAAQC,MAA3B,EAAmC,CAAnC;AACA,2BAASF,QAAT,CAAkBC,QAAQC,MAA1B,EAAkC,CAAlC;AACD;;AAEDQ,oBAAcjB,aAAd;AACD,KAfI,CAAP;AAgBD;;AAnC6B;kBAAXN,U","file":"PullStream.js","sourcesContent":["import readline from 'readline';\nimport { dest } from 'gulp';\nimport Logger from 'gulplog';\nimport ProjectConfig from '../../config/ProjectConfig';\nimport Transformer, { TransformDirection } from '../transform/Transformer';\nimport MappingTransformer from '../../transform/Mapping';\nimport NewlinesTransformer from '../../transform/Newlines';\n\n/**\n * A stream that transforms read {@link ReadStream.ReadResult}s and stores the on the filesystem.\n */\nexport default class PullStream {\n\n  /**\n   * Creates a new PullStream based on a stream that writes {@link ReadStream.ReadResult} which may\n   * be an instance of {@link ReadStream}.\n   * @param {ReadStream} readStream The stream to read from.\n   */\n  constructor(readStream) {\n    const mappingStream = new MappingTransformer({ direction: TransformDirection.FromDB });\n\n    const printProgress = setInterval(() => {\n      Logger.info(`Pulled: ${readStream.processed} (${readStream.opsPerSecond.toFixed(1)} ops/s)`);\n\n      if (Logger.listenerCount('info') > 0) {\n        readline.cursorTo(process.stdout, 0);\n        readline.moveCursor(process.stdout, 0, -1);\n      }\n    }, 1000);\n\n    return Transformer.applyTransformers(\n      readStream\n        .pipe(mappingStream),\n      ProjectConfig.useTransformers\n        .concat(new NewlinesTransformer()),\n      TransformDirection.FromDB\n    )\n      .pipe(dest('./src'))\n      .on('finish', () => {\n        if (Logger.listenerCount('info') > 0) {\n          readline.clearLine(process.stdout, 0);\n          readline.cursorTo(process.stdout, 0);\n        }\n\n        clearInterval(printProgress);\n      });\n  }\n\n}\n"]}