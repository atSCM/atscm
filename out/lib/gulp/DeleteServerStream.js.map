{"version":3,"sources":["../../../src/lib/gulp/DeleteServerStream.js"],"names":["DeleteFsStream","constructor","options","deleteFileName","lineReader","createInterface","input","deleteNodeStream","printProgress","setInterval","info","processed","opsPerSecond","toFixed","listenerCount","cursorTo","process","stdout","moveCursor","on","line","trimmedLine","trim","lineArray","split","nodeString","length","indexOf","nodeId","filePath","write","_flush","clearInterval","emit"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA;;;AAGe,MAAMA,cAAN,CAAqB;;AAElC;;;;;AAKAC,cAAYC,UAAU,EAAtB,EAA0B;AACxB;;;;AAIA,UAAMC,iBAAiBD,QAAQC,cAAR,IAA0B,kBAAjD;;AAEA,UAAMC,aAAa,mBAASC,eAAT,CAAyB;AAC1CC,aAAO,0BAAiBH,cAAjB;AADmC,KAAzB,CAAnB;;AAIA,UAAMI,mBAAmB,gCAAzB;;AAEA,UAAMC,gBAAgBC,YAAY,MAAM;AACtC,wBAAOC,IAAP,CACG,YAAWH,iBAAiBI,SAAU,EADzC,EAEG,IAAGJ,iBAAiBK,YAAjB,CAA8BC,OAA9B,CAAsC,CAAtC,CAAyC,SAF/C;;AAKA,UAAI,kBAAOC,aAAP,CAAqB,MAArB,IAA+B,CAAnC,EAAsC;AACpC,2BAASC,QAAT,CAAkBC,QAAQC,MAA1B,EAAkC,CAAlC;AACA,2BAASC,UAAT,CAAoBF,QAAQC,MAA5B,EAAoC,CAApC,EAAuC,CAAC,CAAxC;AACD;AACF,KAVqB,EAUnB,IAVmB,CAAtB;;AAYAb,eAAWe,EAAX,CAAc,MAAd,EAAsBC,QAAQ;AAC5B,YAAMC,cAAcD,KAAKE,IAAL,EAApB;AACA,YAAMC,YAAYF,YAAYG,KAAZ,CAAkB,SAAlB,CAAlB;AACA,UAAIC,aAAa,EAAjB;;AAEA,UAAIF,UAAUG,MAAV,GAAmB,CAAvB,EAA0B;AACxBD,qBAAaF,UAAU,CAAV,CAAb;;AAEA,YAAIE,WAAWE,OAAX,CAAmB,iBAAnB,IAAwC,CAAC,CAA7C,EAAgD;AAC9CF,uBAAaA,WAAWD,KAAX,CAAiB,iBAAjB,EAAoC,CAApC,CAAb;AACD;AACF,OAND,MAMO;AACLC,qBAAaJ,WAAb;AACD;;AAED,UAAII,UAAJ,EAAgB;AACd,cAAMG,SAAS,qBAAWH,UAAX,CAAf;;AAEA,YAAIA,eAAeG,OAAOC,QAA1B,EAAoC;AAClCtB,2BAAiBuB,KAAjB,CAAuBF,MAAvB;AACD;AACF;AACF,KAtBD;;AAwBArB,qBAAiBY,EAAjB,CAAoB,SAApB,EAA+B,MAAM;AACnCZ,uBAAiBwB,MAAjB,CAAwB,MAAM;AAC5BC,sBAAcxB,aAAd;AACAD,yBAAiB0B,IAAjB,CAAsB,QAAtB;AACD,OAHD;AAID,KALD;;AAOA,WAAO1B,gBAAP;AACD;AAhEiC;kBAAfP,c","file":"DeleteServerStream.js","sourcesContent":["import readline from 'readline';\nimport Logger from 'gulplog';\nimport { createReadStream } from 'fs';\nimport DeleteNodeStream from '../delete/DeleteNodeStream';\nimport NodeId from '../ua/NodeId';\n\n/**\n * A stream that deletes listed nodes from atvise server\n */\nexport default class DeleteFsStream {\n\n  /**\n   * Creates a new DeleteServerStream based on the given options.\n   * @param {Object} options The stream configuration options.\n   * @param {String} [options.deleteFileName] The delete file name.\n   */\n  constructor(options = {}) {\n    /**\n     * The delete file name\n     * @type {String}\n     */\n    const deleteFileName = options.deleteFileName || 'deleteServer.txt';\n\n    const lineReader = readline.createInterface({\n      input: createReadStream(deleteFileName),\n    });\n\n    const deleteNodeStream = new DeleteNodeStream();\n\n    const printProgress = setInterval(() => {\n      Logger.info(\n        `Deleted: ${deleteNodeStream.processed}`,\n        `(${deleteNodeStream.opsPerSecond.toFixed(1)} ops/s)`\n      );\n\n      if (Logger.listenerCount('info') > 0) {\n        readline.cursorTo(process.stdout, 0);\n        readline.moveCursor(process.stdout, 0, -1);\n      }\n    }, 1000);\n\n    lineReader.on('line', line => {\n      const trimmedLine = line.trim();\n      const lineArray = trimmedLine.split('nodeId=');\n      let nodeString = '';\n\n      if (lineArray.length > 1) {\n        nodeString = lineArray[1];\n\n        if (nodeString.indexOf(', nodeFilePath=') > -1) {\n          nodeString = nodeString.split(', nodeFilePath=')[0];\n        }\n      } else {\n        nodeString = trimmedLine;\n      }\n\n      if (nodeString) {\n        const nodeId = new NodeId(nodeString);\n\n        if (nodeString !== nodeId.filePath) {\n          deleteNodeStream.write(nodeId);\n        }\n      }\n    });\n\n    deleteNodeStream.on('drained', () => {\n      deleteNodeStream._flush(() => {\n        clearInterval(printProgress);\n        deleteNodeStream.emit('finish');\n      });\n    });\n\n    return deleteNodeStream;\n  }\n}\n"]}