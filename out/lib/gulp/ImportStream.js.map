{"version":3,"sources":["../../../src/lib/gulp/ImportStream.js"],"names":["scopeId","NodeId","NodeIdType","NUMERIC","ImportStream","CallMethodStream","methodId","inputArguments","file","dataType","DataType","value","XmlElement","contents","processErrorMessage","relative","handleOutputArguments","outputArguments","callback","importStatus","Logger","debug","Error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA;;;;AAIA,MAAMA,OAAO,GAAG,IAAIC,eAAJ,CAAWA,gBAAOC,UAAP,CAAkBC,OAA7B,EAAsC,CAAtC,EAAyC,CAAzC,CAAhB;AAEA;;;;AAGe,MAAMC,YAAN,SAA2BC,yBAA3B,CAA4C;AAEzD;;;;AAIA,MAAIC,QAAJ,GAAe;AACb,WAAO,IAAIL,eAAJ,CAAW,wCAAX,CAAP;AACD;AAED;;;;;;;;;AAOAM,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnB,WAAO,CACL;AACEC,MAAAA,QAAQ,EAAEC,kBAAST,MADrB;AAEEU,MAAAA,KAAK,EAAEX;AAFT,KADK,EAKL;AACES,MAAAA,QAAQ,EAAEC,kBAASE,UADrB;AAEED,MAAAA,KAAK,EAAEH,IAAI,CAACK;AAFd,KALK,CAAP;AAUD;AAED;;;;;;;AAKAC,EAAAA,mBAAmB,CAACN,IAAD,EAAO;AACxB,WAAQ,yBAAwBA,IAAI,CAACO,QAAS,EAA9C;AACD;AAED;;;;;;;;;AAOAC,EAAAA,qBAAqB,CAACR,IAAD,EAAOS,eAAP,EAAwBC,QAAxB,EAAkC;AACrD,UAAM,CAACC,YAAD,IAAiBF,eAAe,IAAI,CAAC,EAAD,CAA1C;;AAEA,QAAIE,YAAY,CAACR,KAAjB,EAAwB;AACtBS,uBAAOC,KAAP,CAAc,+BAA8Bb,IAAI,CAACO,QAAS,EAA1D;;AAEAG,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAJD,MAIO;AACLA,MAAAA,QAAQ,CAAC,IAAII,KAAJ,CAAU,eAAV,CAAD,CAAR;AACD;AACF;;AAxDwD","sourcesContent":["import { DataType } from 'node-opcua/lib/datamodel/variant';\nimport Logger from 'gulplog';\nimport NodeId from '../model/opcua/NodeId';\nimport CallMethodStream from '../server/scripts/CallMethodStream';\n\n/**\n * The import operation's scope, which is set to be *absolute*.\n * @type {NodeId}\n */\nconst scopeId = new NodeId(NodeId.NodeIdType.NUMERIC, 0, 0);\n\n/**\n * A stream that imports xml files in parallel.\n */\nexport default class ImportStream extends CallMethodStream {\n\n  /**\n   * Id of the `importNodes` OPC-UA method.\n   * @type {NodeId}\n   */\n  get methodId() {\n    return new NodeId('ns=1;s=AGENT.OPCUA.METHODS.importNodes');\n  }\n\n  /**\n   * Returns the arguments the `importNodes` needs to be called with for the given file.\n   * @param {vinyl~File} file The file being processed.\n   * @return {node-opcua~Variant[]} The arguments for the `importNodes` method:\n   *  - The import scope (which is set to be absolute)\n   *  - The XML code (read from *file*)\n   */\n  inputArguments(file) {\n    return [\n      {\n        dataType: DataType.NodeId,\n        value: scopeId,\n      },\n      {\n        dataType: DataType.XmlElement,\n        value: file.contents,\n      },\n    ];\n  }\n\n  /**\n   * Returns an error message specifically for the given file.\n   * @param {vinyl~File} file The file to generate the error message for.\n   * @return {string} The specific error message.\n   */\n  processErrorMessage(file) {\n    return `Error importing file: ${file.relative}`;\n  }\n\n  /**\n   * Checks if the import succeeded and calls `callback` with an error otherwise.\n   * @param {vinyl~File} file The file that was processed.\n   * @param {?node-opcua~Variant[]} outputArguments The import status output arguments (Array with a\n   * single entry).\n   * @param {function(err: ?Error)} callback The callback called with an error if import failed.\n   */\n  handleOutputArguments(file, outputArguments, callback) {\n    const [importStatus] = outputArguments || [{}];\n\n    if (importStatus.value) {\n      Logger.debug(`Successfully imported file: ${file.relative}`);\n\n      callback(null);\n    } else {\n      callback(new Error('Import failed'));\n    }\n  }\n\n}\n"],"file":"ImportStream.js"}