{"version":3,"sources":["../../../src/lib/gulp/ImportXmlStream.js"],"names":["ImportNodesMethodId","ImportNodesMethodBaseNodeId","parentNodeId","ImportXmlStream","createCallObject","file","objectId","toString","methodId","inputArguments","dataType","NodeId","value","NodeIdType","NUMERIC","XmlElement","contents","processErrorMessage","path","processChunk","handleErrors","callObj","session","call","err","results","statusCode","Good","done","importSuccessFull","outputArguments","info","error","e"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;AAIA,MAAMA,sBAAsB,qBAAW,wCAAX,CAA5B;;AAEA;;;;AAIA,MAAMC,8BAA8BD,oBAAoBE,YAAxD;;AAGA;;;AAGe,MAAMC,eAAN,+BAA0C;;AAEvD;;;;;AAKAC,mBAAiBC,IAAjB,EAAuB;AACrB,WAAO;AACLC,gBAAUL,4BAA4BM,QAA5B,EADL;AAELC,gBAAUR,oBAAoBO,QAApB,EAFL;AAGLE,sBAAgB,CACd;AACEC,kBAAU,oBAASC,MADrB;AAEEC,eAAO,qBAAW,iBAAOC,UAAP,CAAkBC,OAA7B,EAAsC,CAAtC,EAAyC,CAAzC,CAFT,CAEsD;AAFtD,OADc,EAKd;AACEJ,kBAAU,oBAASK,UADrB;AAEEH,eAAOP,KAAKW;AAFd,OALc;AAHX,KAAP;AAcD;;AAED;;;;;AAKAC,sBAAoBZ,IAApB,EAA0B;AACxB,WAAQ,yBAAwBA,KAAKa,IAAK,EAA1C;AACD;;AAGD;;;;;;AAMAC,eAAad,IAAb,EAAmBe,YAAnB,EAAiC;AAC/B,UAAMC,UAAU,KAAKjB,gBAAL,CAAsBC,IAAtB,CAAhB;;AAEA,QAAI;AACF,WAAKiB,OAAL,CAAaC,IAAb,CAAkB,CAACF,OAAD,CAAlB,EAA6B,CAACG,GAAD,EAAMC,OAAN,KAAkB;AAC7C,YAAID,GAAJ,EAAS;AACPJ,uBAAaI,GAAb;AACD,SAFD,MAEO,IAAIC,QAAQ,CAAR,EAAWC,UAAX,CAAsBd,KAAtB,KAAgC,uBAAYe,IAAZ,CAAiBf,KAArD,EAA4D;AACjEQ,uBAAaI,GAAb,EAAkBC,QAAQ,CAAR,EAAWC,UAA7B,EAAyCE,QAAQA,MAAjD;AACD,SAFM,MAEA;AACL,gBAAMC,oBAAoBJ,QAAQ,CAAR,EAAWK,eAAX,CAA2B,CAA3B,EAA8BlB,KAAxD;;AAEA,cAAIiB,iBAAJ,EAAuB;AACrB,8BAAOE,IAAP,CAAa,+BAA8B1B,KAAKa,IAAK,EAArD;AACD,WAFD,MAEO;AACL,8BAAOc,KAAP,CAAa,KAAKf,mBAAL,CAAyBZ,IAAzB,CAAb;AACD;;AAEDe,uBAAaI,GAAb,EAAkB,uBAAYG,IAA9B,EAAoCC,QAAQA,MAA5C;AACD;AACF,OAhBD;AAiBD,KAlBD,CAkBE,OAAOK,CAAP,EAAU;AACVb,mBAAaa,CAAb;AACD;AACF;AAhEsD;kBAApC9B,e","file":"ImportXmlStream.js","sourcesContent":["import { DataType, StatusCodes } from 'node-opcua';\nimport Logger from 'gulplog';\nimport QueueStream from '../stream/QueueStream';\nimport NodeId from '../ua/NodeId';\n\n/**\n * Call script node id\n * @type {node-opcua~NodeId}\n */\nconst ImportNodesMethodId = new NodeId('ns=1;s=AGENT.OPCUA.METHODS.importNodes');\n\n/**\n * Base node id for callscript node\n * @type {node-opcua~NodeId}\n */\nconst ImportNodesMethodBaseNodeId = ImportNodesMethodId.parentNodeId;\n\n\n/**\n * A stream that imports xml files in parallel.\n */\nexport default class ImportXmlStream extends QueueStream {\n\n  /**\n   * @param {vinyl~file} file The file to create the call object for.\n   * Creates the call object for the given file\n   * @return {Object} The resulting call script object.\n   */\n  createCallObject(file) {\n    return {\n      objectId: ImportNodesMethodBaseNodeId.toString(),\n      methodId: ImportNodesMethodId.toString(),\n      inputArguments: [\n        {\n          dataType: DataType.NodeId,\n          value: new NodeId(NodeId.NodeIdType.NUMERIC, 0, 0), // absolute import\n        },\n        {\n          dataType: DataType.XmlElement,\n          value: file.contents,\n        },\n      ],\n    };\n  }\n\n  /**\n   * Returns an error message specifically for the given file.\n   * @param {vinyl~file} file The file to generate the error message for\n   * @return {String} The specific error message.\n   */\n  processErrorMessage(file) {\n    return `Error importing file: ${file.path}`;\n  }\n\n\n  /**\n   * Performs opcua method calls for the given call object configuration\n   * @param {vinyl~file} file The file being processed.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk(file, handleErrors) {\n    const callObj = this.createCallObject(file);\n\n    try {\n      this.session.call([callObj], (err, results) => {\n        if (err) {\n          handleErrors(err);\n        } else if (results[0].statusCode.value !== StatusCodes.Good.value) {\n          handleErrors(err, results[0].statusCode, done => done());\n        } else {\n          const importSuccessFull = results[0].outputArguments[0].value;\n\n          if (importSuccessFull) {\n            Logger.info(`Successfully imported file: ${file.path}`);\n          } else {\n            Logger.error(this.processErrorMessage(file));\n          }\n\n          handleErrors(err, StatusCodes.Good, done => done());\n        }\n      });\n    } catch (e) {\n      handleErrors(e);\n    }\n  }\n}\n\n"]}