{"version":3,"sources":["../../../src/lib/gulp/DeleteFsStream.js"],"names":["DeleteFsStream","constructor","options","deleteFileName","processed","base","process","cwd","RelativeSourceDirectoryPath","lineReader","createInterface","input","printProgress","setInterval","info","listenerCount","cursorTo","stdout","moveCursor","on","line","trimmedLine","trim","lineArray","split","filePath","length","indexOf","path","catch","err","error","message","clearInterval"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;AAEA;;;AAGe,MAAMA,cAAN,CAAqB;;AAElC;;;;;AAKAC,cAAYC,UAAU,EAAtB,EAA0B;AACxB;;;;AAIA,UAAMC,iBAAiBD,QAAQC,cAAR,IAA0B,cAAjD;;AAEA,QAAIC,YAAY,CAAhB;AACA,UAAMC,OAAO,gBAAKC,QAAQC,GAAR,EAAL,EAAoB,wBAAcC,2BAAlC,CAAb;;AAEA,UAAMC,aAAa,mBAASC,eAAT,CAAyB;AAC1CC,aAAO,+BAAiBR,cAAjB;AADmC,KAAzB,CAAnB;;AAIA,UAAMS,gBAAgBC,YAAY,MAAM;AACtC,wBAAOC,IAAP,CAAa,YAAWV,SAAU,EAAlC;;AAEA,UAAI,kBAAOW,aAAP,CAAqB,MAArB,IAA+B,CAAnC,EAAsC;AACpC,2BAASC,QAAT,CAAkBV,QAAQW,MAA1B,EAAkC,CAAlC;AACA,2BAASC,UAAT,CAAoBZ,QAAQW,MAA5B,EAAoC,CAApC,EAAuC,CAAC,CAAxC;AACD;AACF,KAPqB,EAOnB,IAPmB,CAAtB;;AASAR,eAAWU,EAAX,CAAc,MAAd,EAAsBC,QAAQ;AAC5B,YAAMC,cAAcD,KAAKE,IAAL,EAApB;AACA,YAAMC,YAAYF,YAAYG,KAAZ,CAAkB,eAAlB,CAAlB;AACA,UAAIC,WAAW,EAAf;;AAEA,UAAIF,UAAUG,MAAV,GAAmB,CAAvB,EAA0B;AACxBD,mBAAWF,UAAU,CAAV,CAAX;;AAEA,YAAIE,SAASE,OAAT,CAAiB,WAAjB,IAAgC,CAAC,CAArC,EAAwC;AACtCF,qBAAWA,SAASD,KAAT,CAAe,WAAf,EAA4B,CAA5B,CAAX;AACD;AACF,OAND,MAMO;AACLC,mBAAWJ,WAAX;AACD;;AAEDjB;;AAEA,UAAIqB,QAAJ,EAAc;AACZ,cAAMG,OAAO,gBAAKvB,IAAL,EAAWoB,QAAX,CAAb;;AAEA,YAAI,yBAAWG,IAAX,CAAJ,EAAsB;AACpB,+BAAOA,IAAP,EACGC,KADH,CACSC,OAAO,kBAAOC,KAAP,CAAc,yBAAwBH,IAAK,eAAcE,IAAIE,OAAQ,EAArE,CADhB;AAED;AACF;AACF,KAzBD;;AA2BAvB,eAAWU,EAAX,CAAc,OAAd,EAAuB,MAAM;AAC3Bc,oBAAcrB,aAAd;AACD,KAFD;;AAIA,WAAOH,UAAP;AACD;AA9DiC;kBAAfT,c","file":"DeleteFsStream.js","sourcesContent":["import readline from 'readline';\nimport Logger from 'gulplog';\nimport { join } from 'path';\nimport { remove, existsSync, createReadStream } from 'fs-extra';\nimport ProjectConfig from '../../config/ProjectConfig';\n\n/**\n * A stream that deletes listed nodes on the filesystem\n */\nexport default class DeleteFsStream {\n\n  /**\n   * Creates a new DeleteFsStream based on the given options.\n   * @param {Object} options The stream configuration options.\n   * @param {String} [options.deleteFileName] The delete file name.\n   */\n  constructor(options = {}) {\n    /**\n     * The delete file name\n     * @type {String}\n     */\n    const deleteFileName = options.deleteFileName || 'deleteFs.txt';\n\n    let processed = 0;\n    const base = join(process.cwd(), ProjectConfig.RelativeSourceDirectoryPath);\n\n    const lineReader = readline.createInterface({\n      input: createReadStream(deleteFileName),\n    });\n\n    const printProgress = setInterval(() => {\n      Logger.info(`Deleted: ${processed}`);\n\n      if (Logger.listenerCount('info') > 0) {\n        readline.cursorTo(process.stdout, 0);\n        readline.moveCursor(process.stdout, 0, -1);\n      }\n    }, 1000);\n\n    lineReader.on('line', line => {\n      const trimmedLine = line.trim();\n      const lineArray = trimmedLine.split('nodeFilePath=');\n      let filePath = '';\n\n      if (lineArray.length > 1) {\n        filePath = lineArray[1];\n\n        if (filePath.indexOf(', nodeId=') > -1) {\n          filePath = filePath.split(', nodeId=')[0];\n        }\n      } else {\n        filePath = trimmedLine;\n      }\n\n      processed++;\n\n      if (filePath) {\n        const path = join(base, filePath);\n\n        if (existsSync(path)) {\n          remove(path)\n            .catch(err => Logger.error(`Error removing file: '${path}', message: ${err.message}`));\n        }\n      }\n    });\n\n    lineReader.on('close', () => {\n      clearInterval(printProgress);\n    });\n\n    return lineReader;\n  }\n}\n"]}