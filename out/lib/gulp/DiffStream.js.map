{"version":3,"sources":["../../../src/lib/gulp/DiffStream.js"],"names":["DiffStream","constructor","options","nodesToDiff","diffFilePath","filePath","fsFileStream","nodesToTransform","applyTransformers","pipe","fileType","FileType","FsFile","serverFileTransformer","serverFileStream","stream","ServerFile","diffItemStream","diffResultStream","equalFilesFilter","diffItem","state","value","DiffStates","Equal","logger","combinedStream","pauseStreams","write","append","printProgress","setInterval","info","_processed","opsPerSecond","toFixed","listenerCount","cursorTo","process","stdout","moveCursor","once","itemsCache","Object","values","states","addedItems","deletedItems","length","clearInterval","forEach","Added","push","Deleted","file"],"mappings":"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","file":"DiffStream.js","sourcesContent":["import readline from 'readline';\nimport Logger from 'gulplog';\nimport filter from 'gulp-filter';\nimport CombinedStream from 'combined-stream';\nimport DiffResultStream from '../diff/DiffResultStream';\nimport DiffItemStream from '../diff/DiffItemStream';\nimport DiffFileStream from '../diff/DiffFileStream';\nimport DiffFile from '../diff/DiffFile';\nimport DiffItem from '../diff/DiffItem';\nimport UaNodeToAtviseFileTransformer from '../../transform/UaNodeToAtviseFileTransformer';\nimport FileToAtviseFileTransformer from '../../transform/FileToAtviseFileTransformer';\n\n/**\n * A stream that diff atvise server resources with file system resources.\n */\nexport default class DiffStream {\n\n  /**\n   * Creates a new DiffStream based on the given options.\n   * @param {Object} options The stream configuration options.\n   * @param {NodeId[]} [options.nodesToDiff] The nodes to diff.\n   * @param {String|Path|Buffer} [options.filePath] The diff files path.\n   */\n  constructor(options = {}) {\n    /**\n     * The nodes to diff\n     * @type {NodeId[]}\n     */\n    const nodesToDiff = options.nodesToDiff || [];\n\n    /**\n     * The diff file path\n     * @type {String|Path|Buffer}\n     */\n    const diffFilePath = options.filePath || 'diff.log';\n\n    // diff file streams\n    const fsFileStream = new FileToAtviseFileTransformer(\n      {\n        nodesToTransform: nodesToDiff,\n        applyTransformers: false,\n      })\n      .pipe(new DiffFileStream({ fileType: DiffFile.FileType.FsFile }));\n\n    const serverFileTransformer = new UaNodeToAtviseFileTransformer(\n        { nodesToTransform: nodesToDiff }\n    );\n\n    const serverFileStream = serverFileTransformer.stream\n      .pipe(new DiffFileStream({ fileType: DiffFile.FileType.ServerFile }));\n\n    // diff file processors\n    const diffItemStream = new DiffItemStream();\n\n    const diffResultStream = new DiffResultStream({ filePath: diffFilePath });\n    const equalFilesFilter = filter(\n      diffItem => diffItem.state.value !== DiffItem.DiffStates.Equal.value\n    );\n    const logger = diffResultStream.logger;\n\n    const combinedStream = new CombinedStream({ pauseStreams: false });\n\n    logger.write('Modified:\\n');\n\n    combinedStream.append(fsFileStream);\n    combinedStream.append(serverFileStream);\n\n    const printProgress = setInterval(() => {\n      Logger.info(\n        `Diffed: ${diffResultStream._processed} (${diffResultStream.opsPerSecond.toFixed(1)} ops/s)`\n      );\n\n      if (Logger.listenerCount('info') > 0) {\n        readline.cursorTo(process.stdout, 0);\n        readline.moveCursor(process.stdout, 0, -1);\n      }\n    }, 1000);\n\n\n    return combinedStream\n      .pipe(diffItemStream)\n      .pipe(equalFilesFilter)\n      .pipe(diffResultStream)\n      .once('finish', () => {\n        const itemsCache = Object.values(diffItemStream.itemsCache);\n        const states = DiffItem.DiffStates;\n        const addedItems = [];\n        const deletedItems = [];\n\n        if (itemsCache.length > 0) {\n          diffResultStream.once('drained', () => {\n            clearInterval(printProgress);\n          });\n\n          itemsCache.forEach(diffItem => {\n            if (diffItem.state.value === states.Added.value) {\n              addedItems.push(diffItem);\n            } else if (diffItem.state.value === states.Deleted.value) {\n              deletedItems.push(diffItem);\n            }\n          });\n\n          logger.write('\\nAdded:\\n');\n          addedItems.forEach(file => diffResultStream.write(file));\n          logger.write('\\nDeleted:\\n');\n          deletedItems.forEach(file => diffResultStream.write(file));\n        } else {\n          clearInterval(printProgress);\n        }\n      });\n  }\n}\n"]}