{"version":3,"sources":["../../../src/lib/diff/DiffFile.js"],"names":["DiffFile","constructor","file","fileType","fileValue","value","String","Error","isValidFileType","undefined","toString","nodeId","path","relativeFilePath","FileType","ServerFile","FsFile","isServerFile","isFsFile","includes"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AACA;;;AAGe,MAAMA,QAAN,CAAe;;AAE5B;;;;AAIAC,cAAYC,IAAZ,EAAkBC,QAAlB,EAA4B;AAC1B,QAAIC,YAAYF,KAAKG,KAArB;;AAEA,QAAI,CAAC,0BAAUH,IAAV,uBAAD,IAAgC,CAAC,0BAAUC,QAAV,EAAoBG,MAApB,CAArC,EAAkE;AAChE,YAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACD,KAFD,MAEO,IAAI,CAACP,SAASQ,eAAT,CAAyBL,QAAzB,CAAL,EAAyC;AAC9C,YAAM,IAAII,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAGD;AACA,QAAIH,cAAc,IAAlB,EAAwB;AACtBA,kBAAY,MAAZ;AACD,KAFD,MAEO,IAAIA,cAAcK,SAAlB,EAA6B;AAClCL,kBAAY,WAAZ;AACD,KAFM,MAEA;AACLA,kBAAYA,UAAUM,QAAV,EAAZ;AACD;;AAGD;;;;AAIA,SAAKP,QAAL,GAAgBA,QAAhB;;AAEA;;;;AAIA,SAAKE,KAAL,GAAaD,SAAb;;AAEA;;;;AAIA,SAAKO,MAAL,GAAcT,KAAKS,MAAnB;;AAEA;;;;AAIA,SAAKC,IAAL,GAAYV,KAAKW,gBAAjB;AACD;;AAED;;;;AAIA,aAAWC,QAAX,GAAsB;AACpB,WAAO;AACLC,kBAAY,YADP;AAELC,cAAQ;AAFH,KAAP;AAID;;AAGD;;;;AAIA,MAAIC,YAAJ,GAAmB;AACjB,WAAO,KAAKd,QAAL,KAAkBH,SAASc,QAAT,CAAkBC,UAA3C;AACD;;AAED;;;;AAIA,MAAIG,QAAJ,GAAe;AACb,WAAO,KAAKf,QAAL,KAAkBH,SAASc,QAAT,CAAkBE,MAA3C;AACD;;AAED;;;;;AAKA,SAAOR,eAAP,CAAuBL,QAAvB,EAAiC;AAC/B,WAAO,CACLH,SAASc,QAAT,CAAkBC,UADb,EAELf,SAASc,QAAT,CAAkBE,MAFb,EAGLG,QAHK,CAGIhB,QAHJ,CAAP;AAID;AAzF2B;kBAATH,Q","file":"DiffFile.js","sourcesContent":["import checkType from '../../util/validation';\nimport AtviseFile from '../mapping/AtviseFile';\n/**\n * An Object that creates diff items for the given {AtviseFiles}\n */\nexport default class DiffFile {\n\n  /**\n   * Creates a new DiffFile based on given {AtviseFile} and file type.\n   * @param {AtviseFile} file The file to add in first place\n   */\n  constructor(file, fileType) {\n    let fileValue = file.value;\n\n    if (!checkType(file, AtviseFile) || !checkType(fileType, String)) {\n      throw new Error('DiffFile#constructor: Can not parse given argument!');\n    } else if (!DiffFile.isValidFileType(fileType)) {\n      throw new Error('DiffFile#constructor: File has wrong item type!');\n    }\n\n\n    // handle empty an undefined file values\n    if (fileValue === null) {\n      fileValue = 'null';\n    } else if (fileValue === undefined) {\n      fileValue = 'undefined';\n    } else {\n      fileValue = fileValue.toString();\n    }\n\n\n    /**\n     * Defines wether the given file is a fs resource or a atvise server resource.\n     * @type {DiffFile.ItemType}\n     */\n    this.fileType = fileType;\n\n    /**\n     * The file's value\n     * @type {AtviseFile}\n     */\n    this.value = fileValue;\n\n    /**\n     * The files's nodeId\n     * @type {NodeId}\n     */\n    this.nodeId = file.nodeId;\n\n    /**\n     * The files relative path\n     * @type {vinyl~path}\n     */\n    this.path = file.relativeFilePath;\n  }\n\n  /**\n   * The directions a transformer can be run in.\n   * @type {{DBToServer: String, ServerToDB: String}}\n   */\n  static get FileType() {\n    return {\n      ServerFile: 'ServerFile',\n      FsFile: 'FsFile',\n    };\n  }\n\n\n  /**\n   * 'true' for {AtviseFiles}'s created from atvise server resources\n   * @type {Bool}\n   */\n  get isServerFile() {\n    return this.fileType === DiffFile.FileType.ServerFile;\n  }\n\n  /**\n   * 'true' for {AtviseFiles}'s created from file system resources\n   * @type {Bool}\n   */\n  get isFsFile() {\n    return this.fileType === DiffFile.FileType.FsFile;\n  }\n\n  /**\n   * Returns an error message specifically for the given mapping item.\n   * @param {DiffFile.ItemType} fileType The fileType to check\n   * @return {Bool} 'true' for valid item types.\n   */\n  static isValidFileType(fileType) {\n    return [\n      DiffFile.FileType.ServerFile,\n      DiffFile.FileType.FsFile,\n    ].includes(fileType);\n  }\n}\n"]}