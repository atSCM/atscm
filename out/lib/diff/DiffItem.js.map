{"version":3,"sources":["../../../src/lib/diff/DiffItem.js"],"names":["DiffItem","constructor","file","Error","serverFile","fsFile","nodeId","path","isServerFile","hasValidType","isAtviseReferenceConfig","isDirectory","DiffStates","Equal","text","value","Added","Modified","Deleted","isComplete","filesAreEqual","state","states","addFile","fileTypeWasAlreadyAdded"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEe,MAAMA,QAAN,CAAe;;AAE5B;;;;AAIAC,cAAYC,IAAZ,EAAkB;AAChB,QAAI,CAAC,0BAAUA,IAAV,qBAAL,EAAgC;AAC9B,YAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED;;;;AAIA,SAAKC,UAAL,GAAkB,EAAlB;;AAEA;;;;AAIA,SAAKC,MAAL,GAAc,EAAd;;AAEA;;;;AAIA,SAAKC,MAAL,GAAcJ,KAAKI,MAAnB;;AAEA;;;;AAIA,SAAKC,IAAL,GAAYL,KAAKK,IAAjB;;AAEA,QAAIL,KAAKM,YAAT,EAAuB;AACrB,WAAKJ,UAAL,GAAkBF,IAAlB;AACD,KAFD,MAEO;AACL,WAAKG,MAAL,GAAcH,IAAd;AACD;AACF;;AAED;;;;;AAKA,SAAOO,YAAP,CAAoBP,IAApB,EAA0B;AACxB,WAAO,CAACA,KAAKQ,uBAAN,IAAiC,CAACR,KAAKS,WAAL,EAAzC;AACD;;AAED;;;;AAIA,aAAWC,UAAX,GAAwB;AACtB,WAAO;AACLC,aAAO,EAAEC,MAAM,KAAR,EAAeC,OAAO,CAAtB,EADF;AAELC,aAAO,EAAEF,MAAM,KAAR,EAAeC,OAAO,CAAtB,EAFF;AAGLE,gBAAU,EAAEH,MAAM,KAAR,EAAeC,OAAO,CAAtB,EAHL;AAILG,eAAS,EAAEJ,MAAM,KAAR,EAAeC,OAAO,CAAtB;AAJJ,KAAP;AAMD;;AAED;;;;AAIA,MAAII,UAAJ,GAAiB;AACf,WAAO,0BAAU,KAAKd,MAAf,yBAAoC,0BAAU,KAAKD,UAAf,qBAA3C;AACD;;AAED;;;;AAIA,MAAIgB,aAAJ,GAAoB;AAClB,QAAI,CAAC,KAAKD,UAAV,EAAsB;AACpB,aAAO,KAAP;AACD;;AAED,WAAO,KAAKd,MAAL,CAAYU,KAAZ,KAAsB,KAAKX,UAAL,CAAgBW,KAA7C;AACD;;AAGD;;;;AAIA,MAAIM,KAAJ,GAAY;AACV,UAAMC,SAAStB,SAASY,UAAxB;AACA,QAAIS,KAAJ;;AAEA,QAAI,KAAKD,aAAT,EAAwB;AACtBC,cAAQC,OAAOT,KAAf;AACD,KAFD,MAEO,IAAI,KAAKM,UAAT,EAAqB;AAC1BE,cAAQC,OAAOL,QAAf;AACD,KAFM,MAEA,IAAI,CAAC,0BAAU,KAAKb,UAAf,qBAAL,EAA2C;AAChDiB,cAAQC,OAAOJ,OAAf;AACD,KAFM,MAEA,IAAI,CAAC,0BAAU,KAAKb,MAAf,qBAAL,EAAuC;AAC5CgB,cAAQC,OAAON,KAAf;AACD;;AAED,WAAOK,KAAP;AACD;;AAED;;;;;AAKAE,UAAQrB,IAAR,EAAc;AACZ,QAAI,KAAKsB,uBAAL,CAA6BtB,IAA7B,CAAJ,EAAwC;AACtC,YAAM,IAAIC,KAAJ,CAAW,0BAAyBD,KAAKK,IAAK,oBAA9C,CAAN;AACD;;AAED,QAAIL,KAAKM,YAAT,EAAuB;AACrB,WAAKJ,UAAL,GAAkBF,IAAlB;AACD,KAFD,MAEO;AACL,WAAKG,MAAL,GAAcH,IAAd;AACD;AACF;;AAED;;;;;AAKAsB,0BAAwBtB,IAAxB,EAA8B;AAC5B,QAAIA,KAAKM,YAAT,EAAuB;AACrB,aAAO,0BAAU,KAAKJ,UAAf,qBAAP;AACD;;AAED,WAAO,0BAAU,KAAKC,MAAf,qBAAP;AACD;AAtI2B;kBAATL,Q","file":"DiffItem.js","sourcesContent":["import checkType from '../../util/validation';\nimport DiffFile from '../diff/DiffFile';\n\nexport default class DiffItem {\n\n  /**\n   * Creates a new CombinedNodeFile based on given atvise File.\n   * @param {DiffFile} file The file to add in first place\n   */\n  constructor(file) {\n    if (!checkType(file, DiffFile)) {\n      throw new Error('DiffItem#constructor: Can not parse given argument!');\n    }\n\n    /**\n     * The server resource file\n     * @type {DiffFile}\n     */\n    this.serverFile = {};\n\n    /**\n     * The file system resource file\n     * @type {DiffFile}\n     */\n    this.fsFile = {};\n\n    /**\n     * The items's nodeId\n     * @type {NodeId}\n     */\n    this.nodeId = file.nodeId;\n\n    /**\n     * The file's path\n     * @type {vinyl~path}\n     */\n    this.path = file.path;\n\n    if (file.isServerFile) {\n      this.serverFile = file;\n    } else {\n      this.fsFile = file;\n    }\n  }\n\n  /**\n   * Checks if the given file has a valid type for combined files\n   * @param {AtviseFile} file The file to check\n   * @return {Boolean} file has valid type(=true) or not(=false)\n   */\n  static hasValidType(file) {\n    return !file.isAtviseReferenceConfig && !file.isDirectory();\n  }\n\n  /**\n   * The possible diff states\n   * @type {{Equal:Object, Added: Object, Modified: Object, Deleted: Object}}\n   */\n  static get DiffStates() {\n    return {\n      Equal: { text: 'Equ', value: 0 },\n      Added: { text: 'Add', value: 1 },\n      Modified: { text: 'Mod', value: 2 },\n      Deleted: { text: 'Del', value: 3 },\n    };\n  }\n\n  /**\n   * `true` for diff items that already contain an file system and an server resource.\n   * @type {Boolean}\n   */\n  get isComplete() {\n    return checkType(this.fsFile, DiffFile) && checkType(this.serverFile, DiffFile);\n  }\n\n  /**\n   * `true` if the server resource file and the mapped fs file are equal.\n   * @type {Boolean}\n   */\n  get filesAreEqual() {\n    if (!this.isComplete) {\n      return false;\n    }\n\n    return this.fsFile.value === this.serverFile.value;\n  }\n\n\n  /**\n   * The diff items state\n   * @type {DiffItem.DiffStates}\n   */\n  get state() {\n    const states = DiffItem.DiffStates;\n    let state;\n\n    if (this.filesAreEqual) {\n      state = states.Equal;\n    } else if (this.isComplete) {\n      state = states.Modified;\n    } else if (!checkType(this.serverFile, DiffFile)) {\n      state = states.Deleted;\n    } else if (!checkType(this.fsFile, DiffFile)) {\n      state = states.Added;\n    }\n\n    return state;\n  }\n\n  /**\n   * Adds the given file\n   * @param{DiffFile} file The file to add\n   * @return {Bool} file type was already added(=true) or not(=false)\n   */\n  addFile(file) {\n    if (this.fileTypeWasAlreadyAdded(file)) {\n      throw new Error(`DiffItem#addFile: File ${file.path} was already added`);\n    }\n\n    if (file.isServerFile) {\n      this.serverFile = file;\n    } else {\n      this.fsFile = file;\n    }\n  }\n\n  /**\n   * checks if the given file type was already added\n   * @param{DiffFile} file The file to add\n   * @return {Bool} file type was already added(=true) or not(=false)\n   */\n  fileTypeWasAlreadyAdded(file) {\n    if (file.isServerFile) {\n      return checkType(this.serverFile, DiffFile);\n    }\n\n    return checkType(this.fsFile, DiffFile);\n  }\n}\n"]}