{"version":3,"sources":["../../../../src/lib/server/scripts/CallMethodStream.js"],"names":["CallMethodStream","methodId","Error","methodBaseId","parent","inputArguments","file","callRequest","args","objectId","handleOutputArguments","outputArgs","callback","processErrorMessage","toString","relative","processChunk","handleErrors","request","Good","done","session","call","err","result","statusCode","value","outputArguments","outputError","e"],"mappings":";;;;;;AAAA;;AACA;;;;;;AAEA;;;;AAIe,MAAMA,gBAAN,+BAA2C;;AAExD;;;;AAIA,MAAIC,QAAJ,GAAe;AACb,UAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED;;;;;AAKA,MAAIC,YAAJ,GAAmB;AACjB,WAAO,KAAKF,QAAL,CAAcG,MAArB;AACD;;AAED;;;;;;AAMAC,iBAAeC,IAAf,EAAqB;AAAE;AACrB,WAAO,EAAP;AACD;;AAED;;;;;AAKAC,cAAYD,IAAZ,EAAkB;AAChB,UAAME,OAAO,KAAKH,cAAL,CAAoBC,IAApB,CAAb;;AAEA,QAAIE,SAAS,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,WAAO;AACLC,gBAAU,KAAKN,YADV;AAELF,gBAAU,KAAKA,QAFV;AAGLI,sBAAgBG;AAHX,KAAP;AAKD;;AAED;;;;;;;;;AASAE,wBAAsBJ,IAAtB,EAA4BK,UAA5B,EAAwCC,QAAxC,EAAkD;AAAE;AAClD,UAAM,IAAIV,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED;;;;;AAKAW,sBAAoBP,IAApB,EAA0B;AACxB,WAAQ,iBAAgB,KAAKL,QAAL,CAAca,QAAd,EAAyB,QAAOR,KAAKS,QAAS,EAAtE;AACD;;AAED;;;;;;AAMAC,eAAaV,IAAb,EAAmBW,YAAnB,EAAiC;AAC/B,QAAI;AACF,YAAMC,UAAU,KAAKX,WAAL,CAAiBD,IAAjB,CAAhB;;AAEA,UAAI,CAACY,OAAL,EAAc;AACZD,qBAAa,IAAb,EAAmB,uBAAYE,IAA/B,EAAqCC,QAAQA,MAA7C;AACA;AACD;;AAED,WAAKC,OAAL,CAAaC,IAAb,CAAkB,CAACJ,OAAD,CAAlB,EAA6B,CAACK,GAAD,EAAM,CAACC,MAAD,IAAW,EAAjB,KAAwB;AACnD,YAAID,GAAJ,EAAS;AACPN,uBAAaM,GAAb;AACD,SAFD,MAEO,IAAIC,OAAOC,UAAP,CAAkBC,KAAlB,KAA4B,uBAAYP,IAAZ,CAAiBO,KAAjD,EAAwD;AAC7DT,uBAAaM,GAAb,EAAkBC,OAAOC,UAAzB,EAAqCL,QAAQA,MAA7C;AACD,SAFM,MAEA;AACL,eAAKV,qBAAL,CAA2BJ,IAA3B,EAAiCkB,OAAOG,eAAxC,EAAyDC,eAAe;AACtEX,yBAAaW,WAAb,EAA0B,uBAAYT,IAAtC,EAA4CC,QAAQA,MAApD;AACD,WAFD;AAGD;AACF,OAVD;AAWD,KAnBD,CAmBE,OAAOS,CAAP,EAAU;AACVZ,mBAAaY,CAAb;AACD;AACF;;AAnGuD;kBAArC7B,gB","file":"CallMethodStream.js","sourcesContent":["import { StatusCodes } from 'node-opcua';\nimport QueueStream from '../QueueStream';\n\n/**\n * A stream that calls an OPC-UA method for all input files.\n * @abstract\n */\nexport default class CallMethodStream extends QueueStream {\n\n  /**\n   * **Must be implemented in all subclasses:** The {@link NodeId} of the method to call.\n   * @type {NodeId} The method's id.\n   */\n  get methodId() {\n    throw new Error('Must be implemented in all subclasses');\n  }\n\n  /**\n   * The {@link NodeId} of the object from which the method should get called. Defaults to the value\n   * of {@link NodeId#parent} of {@link CallMethodStream#methodId}.\n   * @type {NodeId} The call-object's id.\n   */\n  get methodBaseId() {\n    return this.methodId.parent;\n  }\n\n  /**\n   * The input arguments the method should be called with for a file. Needs to be overridden by\n   * subclasses in most cases. Returning `null` indicates no method call is needed.\n   * @param {vinyl~File} file The file beeing processed.\n   * @return {?node-opcua~Variant[]} The resulting input arguments.\n   */\n  inputArguments(file) { // eslint-disable-line no-unused-vars\n    return [];\n  }\n\n  /**\n   * Creates a call method request object for a file.\n   * @param {vinyl~File} file The file beeing processed.\n   * @return {?node-opcua~CallMethodRequest} The resulting call request.\n   */\n  callRequest(file) {\n    const args = this.inputArguments(file);\n\n    if (args === null) {\n      return null;\n    }\n\n    return {\n      objectId: this.methodBaseId,\n      methodId: this.methodId,\n      inputArguments: args,\n    };\n  }\n\n  /**\n   * **Must be implemented by all subclasses:** If the method call returns a status code of\n   * *{@link node-opcua~StatusCodes}.Good*, this method decides if the output matches the expected\n   * results.\n   * @param {vinyl~File} file The file beeing processed.\n   * @param {node-opcua~Variant[]} outputArgs The output arguments.\n   * @param {function(err: Error)} callback Call this method with an error to indicate the method\n   * call didn't work as expected.\n   */\n  handleOutputArguments(file, outputArgs, callback) { // eslint-disable-line no-unused-vars\n    throw new Error('Must be implemented in all subclasses');\n  }\n\n  /**\n   * Returns an error message specifically for the given file.\n   * @param {vinyl~File} file The file to generate the error message for.\n   * @return {string} The specific error message.\n   */\n  processErrorMessage(file) {\n    return `Error running ${this.methodId.toString()} for ${file.relative}`;\n  }\n\n  /**\n   * Performs an opcua method call for the given file.\n   * @param {vinyl~File} file The file being processed.\n   * @param {function(err: Error, status: node-opcua~StatusCodes, success: function)} handleErrors\n   * The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk(file, handleErrors) {\n    try {\n      const request = this.callRequest(file);\n\n      if (!request) {\n        handleErrors(null, StatusCodes.Good, done => done());\n        return;\n      }\n\n      this.session.call([request], (err, [result] = []) => {\n        if (err) {\n          handleErrors(err);\n        } else if (result.statusCode.value !== StatusCodes.Good.value) {\n          handleErrors(err, result.statusCode, done => done());\n        } else {\n          this.handleOutputArguments(file, result.outputArguments, outputError => {\n            handleErrors(outputError, StatusCodes.Good, done => done());\n          });\n        }\n      });\n    } catch (e) {\n      handleErrors(e);\n    }\n  }\n\n}\n"]}