{"version":3,"sources":["../../../src/lib/server/ReadStream.js"],"names":["ReadStream","processErrorMessage","referenceDescription","nodeId","value","processChunk","nodeClass","references","parent","handleErrors","Variable","session","read","err","nodesToRead","results","status","length","statusCode","Error","Good","id","debug","description","done","error","push","mtime","sourceTimestamp"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;;;AAEA;;;AAGe,MAAMA,UAAN,+BAAqC;;AAElD;;;;;;AAMAC,sBAAoBC,oBAApB,EAA0C;AACxC,WAAQ,sBAAqBA,qBAAqBC,MAArB,CAA4BC,KAAM,EAA/D;AACD;;AAED;;;;;;;;;AASAC,eAAa,EAAEC,SAAF,EAAaH,MAAb,EAAqBI,UAArB,EAAiCC,MAAjC,EAAb,EAAwDC,YAAxD,EAAsE;AACpE,QAAIH,UAAUF,KAAV,KAAoB,qBAAUM,QAAV,CAAmBN,KAA3C,EAAkD;AAChD,WAAKO,OAAL,CAAaC,IAAb,CAAkB,CAAC,EAAET,MAAF,EAAD,CAAlB,EAAgC,CAACU,GAAD,EAAMC,WAAN,EAAmBC,OAAnB,KAA+B;AAC7D,YAAIF,GAAJ,EAAS;AACP,gBAAMG,SAASD,WAAWA,QAAQE,MAAnB,IAA6BF,QAAQ,CAAR,EAAWG,UAAvD;AACAT,uBAAaI,GAAb,EAAkBG,MAAlB;AACD,SAHD,MAGO,IAAI,CAACD,OAAD,IAAYA,QAAQE,MAAR,KAAmB,CAAnC,EAAsC;AAC3CR,uBAAa,IAAIU,KAAJ,CAAU,YAAV,CAAb;AACD,SAFM,MAEA;AACL,cAAIH,SAASD,QAAQ,CAAR,EAAWG,UAAxB;;AAEA,cAAIF,WAAW,+BAAYI,IAA3B,EAAiC;AAC/B,kBAAMC,KAAKlB,OAAOC,KAAlB;;AAEA,gBAAIW,QAAQ,CAAR,EAAWX,KAAf,EAAsB;AACpBY,uBAAS,+BAAYI,IAArB;AACA,gCAAOE,KAAP,CAAc,QAAOD,EAAG,oBAAmBN,QAAQ,CAAR,EAAWG,UAAX,CAAsBK,WAAY,EAA7E;AACD,aAHD,MAGO;AACLd,2BAAaI,GAAb,EAAkB,+BAAYO,IAA9B,EAAoCI,QAAQ;AAC1C,kCAAOC,KAAP,CAAc,kBAAiBJ,EAAG,KAAIN,QAAQ,CAAR,EAAWG,UAAX,CAAsBK,WAAY,EAAxE;AACAC;AACD,eAHD;AAIA;AACD;AACF;;AAEDf,uBAAaI,GAAb,EAAkBG,MAAlB,EAA0BQ,QAAQ;AAChC,iBAAKE,IAAL,CAAU;AACRpB,uBADQ;AAERH,oBAFQ;AAGRI,wBAHQ;AAIRC,oBAJQ;AAKRJ,qBAAOW,QAAQ,CAAR,EAAWX,KALV;AAMRuB,qBAAOZ,QAAQ,CAAR,EAAWa;AANV,aAAV;AAQAJ;AACD,WAVD;AAWD;AACF,OApCD;AAqCD,KAtCD,MAsCO;AACLf,mBAAa,IAAb,EAAmB,+BAAYW,IAA/B,EAAqCI,QAAQ;AAC3C,aAAKE,IAAL,CAAU;AACRpB,mBADQ;AAERH,gBAFQ;AAGRI,oBAHQ;AAIRC;AAJQ,SAAV;;AAOAgB;AACD,OATD;AAUD;AACF;;AAxEiD;kBAA/BxB,U","file":"ReadStream.js","sourcesContent":["import { StatusCodes } from 'node-opcua/lib/datamodel/opcua_status_code';\nimport { NodeClass } from 'node-opcua/lib/datamodel/nodeclass';\nimport Logger from 'gulplog';\nimport QueueStream from './QueueStream';\n\n/**\n * A stream that reads atvise server nodes for the {@link node-opcua~ReferenceDescription}s passed.\n */\nexport default class ReadStream extends QueueStream {\n\n  /**\n   * Returns an error message specifically for the given reference description.\n   * @param {node-opcua~ReferenceDescription} referenceDescription The reference description to get\n   * the error message for.\n   * @return {string} The specific error message.\n   */\n  processErrorMessage(referenceDescription) {\n    return `Error reading node ${referenceDescription.nodeId.value}`;\n  }\n\n  /**\n   * Returns a {@link ReadStream.ReadResult} for the given {@link NodeStream.BrowseResult}.\n   * @param {NodeStream.BrowseResult} browseResult The browse result to process:\n   *  - If {@link NodeStream.BrowseResult#nodeClass} equals {@link node-opcua~NodeClass}*.Variable*\n   *    the browse result is passed as-is to piped streams.\n   *  - Otherwise the node's value is read from *atvise server*.\n   * @param {function(err: Error, status: node-opcua~StatusCodes, success: function)} handleErrors\n   * The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk({ nodeClass, nodeId, references, parent }, handleErrors) {\n    if (nodeClass.value === NodeClass.Variable.value) {\n      this.session.read([{ nodeId }], (err, nodesToRead, results) => {\n        if (err) {\n          const status = results && results.length && results[0].statusCode;\n          handleErrors(err, status);\n        } else if (!results || results.length === 0) {\n          handleErrors(new Error('No results'));\n        } else {\n          let status = results[0].statusCode;\n\n          if (status !== StatusCodes.Good) {\n            const id = nodeId.value;\n\n            if (results[0].value) {\n              status = StatusCodes.Good;\n              Logger.debug(`Node ${id} has bad status: ${results[0].statusCode.description}`);\n            } else {\n              handleErrors(err, StatusCodes.Good, done => {\n                Logger.error(`Unable to read ${id}: ${results[0].statusCode.description}`);\n                done();\n              });\n              return;\n            }\n          }\n\n          handleErrors(err, status, done => {\n            this.push({\n              nodeClass,\n              nodeId,\n              references,\n              parent,\n              value: results[0].value,\n              mtime: results[0].sourceTimestamp,\n            });\n            done();\n          });\n        }\n      });\n    } else {\n      handleErrors(null, StatusCodes.Good, done => {\n        this.push({\n          nodeClass,\n          nodeId,\n          references,\n          parent,\n        });\n\n        done();\n      });\n    }\n  }\n\n}\n"]}