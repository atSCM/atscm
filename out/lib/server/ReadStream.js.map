{"version":3,"sources":["../../../src/lib/server/ReadStream.js"],"names":["ReadStream","processErrorMessage","referenceDescription","nodeId","value","processChunk","nodeClass","references","handleErrors","Variable","session","read","err","nodesToRead","results","status","length","statusCode","Error","BadServerNotConnected","Good","done","warn","push","mtime","sourceTimestamp"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA;;;AAGe,MAAMA,UAAN,+BAAqC;;AAElD;;;;;;AAMAC,sBAAoBC,oBAApB,EAA0C;AACxC,WAAQ,sBAAqBA,qBAAqBC,MAArB,CAA4BC,KAAM,EAA/D;AACD;;AAED;;;;;;;;;AASAC,eAAa,EAAEC,SAAF,EAAaH,MAAb,EAAqBI,UAArB,EAAb,EAAgDC,YAAhD,EAA8D;AAC5D,QAAIF,UAAUF,KAAV,KAAoB,qBAAUK,QAAV,CAAmBL,KAA3C,EAAkD;AAChD,WAAKM,OAAL,CAAaC,IAAb,CAAkB,CAAC,EAAER,MAAF,EAAD,CAAlB,EAAgC,CAACS,GAAD,EAAMC,WAAN,EAAmBC,OAAnB,KAA+B;AAC7D,YAAIF,GAAJ,EAAS;AACP,gBAAMG,SAASD,WAAWA,QAAQE,MAAnB,IAA6BF,QAAQ,CAAR,EAAWG,UAAvD;AACAT,uBAAaI,GAAb,EAAkBG,MAAlB;AACD,SAHD,MAGO,IAAI,CAACD,OAAD,IAAYA,QAAQE,MAAR,KAAmB,CAAnC,EAAsC;AAC3CR,uBAAa,IAAIU,KAAJ,CAAU,YAAV,CAAb;AACD,SAFM,MAEA,IAAIJ,QAAQ,CAAR,EAAWG,UAAX,KAA0B,uBAAYE,qBAA1C,EAAiE;AACtEX,uBAAaI,GAAb,EAAkB,uBAAYQ,IAA9B,EAAoCC,QAAQ;AAC1C,8BAAOC,IAAP,CAAa,GACXnB,OAAOC,KACR,6DAFD;AAGAiB;AACD,WALD;AAMD,SAPM,MAOA;AACLb,uBAAaI,GAAb,EAAkBE,QAAQ,CAAR,EAAWG,UAA7B,EAAyCI,QAAQ;AAC/C,iBAAKE,IAAL,CAAU;AACRjB,uBADQ;AAERH,oBAFQ;AAGRI,wBAHQ;AAIRH,qBAAOU,QAAQ,CAAR,EAAWV,KAJV;AAKRoB,qBAAOV,QAAQ,CAAR,EAAWW;AALV,aAAV;AAOAJ;AACD,WATD;AAUD;AACF,OAzBD;AA0BD,KA3BD,MA2BO;AACLb,mBAAa,IAAb,EAAmB,uBAAYY,IAA/B,EAAqCC,QAAQ;AAC3C,aAAKE,IAAL,CAAU;AACRjB,mBADQ;AAERH,gBAFQ;AAGRI;AAHQ,SAAV;;AAMAc;AACD,OARD;AASD;AACF;;AA5DiD;kBAA/BrB,U","file":"ReadStream.js","sourcesContent":["import { StatusCodes, NodeClass } from 'node-opcua';\nimport Logger from 'gulplog';\nimport QueueStream from './QueueStream';\n\n/**\n * A stream that reads atvise server nodes for the {@link node-opcua~ReferenceDescription}s passed.\n */\nexport default class ReadStream extends QueueStream {\n\n  /**\n   * Returns an error message specifically for the given reference description.\n   * @param {node-opcua~ReferenceDescription} referenceDescription The reference description to get\n   * the error message for.\n   * @return {string} The specific error message.\n   */\n  processErrorMessage(referenceDescription) {\n    return `Error reading node ${referenceDescription.nodeId.value}`;\n  }\n\n  /**\n   * Returns a {@link ReadStream.ReadResult} for the given {@link NodeStream.BrowseResult}.\n   * @param {NodeStream.BrowseResult} browseResult The browse result to process:\n   *  - If {@link NodeStream.BrowseResult#nodeClass} equals {@link node-opcua~NodeClass}*.Variable*\n   *    the browse result is passed as-is to piped streams.\n   *  - Otherwise the node's value is read from *atvise server*.\n   * @param {function(err: Error, status: node-opcua~StatusCodes, success: function)} handleErrors\n   * The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk({ nodeClass, nodeId, references }, handleErrors) {\n    if (nodeClass.value === NodeClass.Variable.value) {\n      this.session.read([{ nodeId }], (err, nodesToRead, results) => {\n        if (err) {\n          const status = results && results.length && results[0].statusCode;\n          handleErrors(err, status);\n        } else if (!results || results.length === 0) {\n          handleErrors(new Error('No results'));\n        } else if (results[0].statusCode === StatusCodes.BadServerNotConnected) {\n          handleErrors(err, StatusCodes.Good, done => {\n            Logger.warn(`${\n              nodeId.value\n            } could not be read because it's datasource is not connected`);\n            done();\n          });\n        } else {\n          handleErrors(err, results[0].statusCode, done => {\n            this.push({\n              nodeClass,\n              nodeId,\n              references,\n              value: results[0].value,\n              mtime: results[0].sourceTimestamp,\n            });\n            done();\n          });\n        }\n      });\n    } else {\n      handleErrors(null, StatusCodes.Good, done => {\n        this.push({\n          nodeClass,\n          nodeId,\n          references,\n        });\n\n        done();\n      });\n    }\n  }\n\n}\n"]}