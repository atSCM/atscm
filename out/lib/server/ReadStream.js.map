{"version":3,"sources":["../../../src/lib/server/ReadStream.js"],"names":["ReadStream","processErrorMessage","referenceDescription","nodeId","toString","processChunk","nodeClass","references","handleErrors","value","Variable","session","read","err","nodesToRead","results","length","Error","statusCode","done","push","mtime","sourceTimestamp","Good"],"mappings":";;;;;;AAAA;;AACA;;;;;;AAEA;;;AAGe,MAAMA,UAAN,+BAAqC;;AAElD;;;;;;AAMAC,sBAAoBC,oBAApB,EAA0C;AACxC,WAAQ,sBAAqBA,qBAAqBC,MAArB,CAA4BC,QAA5B,EAAuC,EAApE;AACD;;AAED;;;;;;;;;AASAC,eAAa,EAAEC,SAAF,EAAaH,MAAb,EAAqBI,UAArB,EAAb,EAAgDC,YAAhD,EAA8D;AAC5D,QAAIF,UAAUG,KAAV,KAAoB,qBAAUC,QAAV,CAAmBD,KAA3C,EAAkD;AAChD,WAAKE,OAAL,CAAaC,IAAb,CAAkB,CAAC,EAAET,MAAF,EAAD,CAAlB,EAAgC,CAACU,GAAD,EAAMC,WAAN,EAAmBC,OAAnB,KAA+B;AAC7D,YAAI,CAACF,GAAD,KAAS,CAACE,OAAD,IAAYA,QAAQC,MAAR,KAAmB,CAAxC,CAAJ,EAAgD;AAC9CR,uBAAa,IAAIS,KAAJ,CAAU,YAAV,CAAb;AACD,SAFD,MAEO;AACLT,uBAAaK,GAAb,EAAkBE,WAAWA,QAAQC,MAAR,GAAiB,CAA5B,GAAgCD,QAAQ,CAAR,EAAWG,UAA3C,GAAwD,IAA1E,EAAgFC,QAAQ;AACtF,iBAAKC,IAAL,CAAU;AACRd,uBADQ;AAERH,oBAFQ;AAGRI,wBAHQ;AAIRE,qBAAOM,QAAQ,CAAR,EAAWN,KAJV;AAKRY,qBAAON,QAAQ,CAAR,EAAWO;AALV,aAAV;AAOAH;AACD,WATD;AAUD;AACF,OAfD;AAgBD,KAjBD,MAiBO;AACLX,mBAAa,IAAb,EAAmB,uBAAYe,IAA/B,EAAqCJ,QAAQ;AAC3C,aAAKC,IAAL,CAAU;AACRd,mBADQ;AAERH,gBAFQ;AAGRI;AAHQ,SAAV;;AAMAY;AACD,OARD;AASD;AACF;;AAlDiD;kBAA/BnB,U","file":"ReadStream.js","sourcesContent":["import { StatusCodes, NodeClass } from 'node-opcua';\nimport QueueStream from './QueueStream';\n\n/**\n * A stream that reads atvise server nodes for the {@link node-opcua~ReferenceDescription}s passed.\n */\nexport default class ReadStream extends QueueStream {\n\n  /**\n   * Returns an error message specifically for the given reference description.\n   * @param {node-opcua~ReferenceDescription} referenceDescription The reference description to get\n   * the error message for.\n   * @return {string} The specific error message.\n   */\n  processErrorMessage(referenceDescription) {\n    return `Error reading node ${referenceDescription.nodeId.toString()}`;\n  }\n\n  /**\n   * Returns a {@link ReadStream.ReadResult} for the given {@link NodeStream.BrowseResult}.\n   * @param {NodeStream.BrowseResult} browseResult The browse result to process:\n   *  - If {@link NodeStream.BrowseResult#nodeClass} equals {@link node-opcua~NodeClass}*.Variable*\n   *    the browse result is passed as-is to piped streams.\n   *  - Otherwise the node's value is read from *atvise server*.\n   * @param {function(err: Error, status: node-opcua~StatusCodes, success: function)} handleErrors\n   * The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk({ nodeClass, nodeId, references }, handleErrors) {\n    if (nodeClass.value === NodeClass.Variable.value) {\n      this.session.read([{ nodeId }], (err, nodesToRead, results) => {\n        if (!err && (!results || results.length === 0)) {\n          handleErrors(new Error('No results'));\n        } else {\n          handleErrors(err, results && results.length > 0 ? results[0].statusCode : null, done => {\n            this.push({\n              nodeClass,\n              nodeId,\n              references,\n              value: results[0].value,\n              mtime: results[0].sourceTimestamp,\n            });\n            done();\n          });\n        }\n      });\n    } else {\n      handleErrors(null, StatusCodes.Good, done => {\n        this.push({\n          nodeClass,\n          nodeId,\n          references,\n        });\n\n        done();\n      });\n    }\n  }\n\n}\n"]}