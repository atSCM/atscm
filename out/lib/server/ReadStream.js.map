{"version":3,"sources":["../../../src/lib/server/ReadStream.js"],"names":["ReadStream","processErrorMessage","referenceDescription","nodeId","toString","processChunk","handleErrors","session","read","err","nodesToRead","results","length","Error","statusCode","done","push","value","mtime","sourceTimestamp"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;AAGe,MAAMA,UAAN,+BAAqC;;AAElD;;;;;;AAMAC,sBAAoBC,oBAApB,EAA0C;AACxC,WAAQ,sBAAqBA,qBAAqBC,MAArB,CAA4BC,QAA5B,EAAuC,EAApE;AACD;;AAED;;;;;;;AAOAC,eAAaH,oBAAb,EAAmCI,YAAnC,EAAiD;AAC/C,UAAMH,SAASD,qBAAqBC,MAApC;;AAEA,SAAKI,OAAL,CAAaC,IAAb,CAAkB,CAAC,EAAEL,MAAF,EAAD,CAAlB,EAAgC,CAACM,GAAD,EAAMC,WAAN,EAAmBC,OAAnB,KAA+B;AAC7D,UAAI,CAACF,GAAD,KAAS,CAACE,OAAD,IAAYA,QAAQC,MAAR,KAAmB,CAAxC,CAAJ,EAAgD;AAC9CN,qBAAa,IAAIO,KAAJ,CAAU,YAAV,CAAb;AACD,OAFD,MAEO;AACLP,qBAAaG,GAAb,EAAkBE,WAAWA,QAAQC,MAAR,GAAiB,CAA5B,GAAgCD,QAAQ,CAAR,EAAWG,UAA3C,GAAwD,IAA1E,EAAgFC,QAAQ;AACtF,eAAKC,IAAL,CAAU;AACRb,kBADQ;AAERc,mBAAON,QAAQ,CAAR,EAAWM,KAFV;AAGRf,gCAHQ;AAIRgB,mBAAOP,QAAQ,CAAR,EAAWQ;AAJV,WAAV;AAMAJ;AACD,SARD;AASD;AACF,KAdD;AAeD;;AArCiD;;kBAA/Bf,U,EAyCrB","file":"ReadStream.js","sourcesContent":["import QueueStream from './QueueStream';\n\n/**\n * A stream that reads atvise server nodes for the {@link node-opcua~ReferenceDescription}s passed.\n */\nexport default class ReadStream extends QueueStream {\n\n  /**\n   * Returns an error message specifically for the given reference description.\n   * @param {node-opcua~ReferenceDescription} referenceDescription The reference description to get\n   * the error message for.\n   * @return {String} The specific error message.\n   */\n  processErrorMessage(referenceDescription) {\n    return `Error reading node ${referenceDescription.nodeId.toString()}`;\n  }\n\n  /**\n   * Returns a {ReadStream.ReadResult} for the given reference description.\n   * @param {node-opcua~ReferenceDescription} referenceDescription The reference description to read\n   * the atvise server node for.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk(referenceDescription, handleErrors) {\n    const nodeId = referenceDescription.nodeId;\n\n    this.session.read([{ nodeId }], (err, nodesToRead, results) => {\n      if (!err && (!results || results.length === 0)) {\n        handleErrors(new Error('No results'));\n      } else {\n        handleErrors(err, results && results.length > 0 ? results[0].statusCode : null, done => {\n          this.push({\n            nodeId,\n            value: results[0].value,\n            referenceDescription,\n            mtime: results[0].sourceTimestamp,\n          });\n          done();\n        });\n      }\n    });\n  }\n\n}\n\n/**\n * @typedef {Object} ReadStream.ReadResult\n * @property {NodeId} nodeId The read node's id.\n * @property {?node-opcua~DataValue} value The read value.\n * @property {Object} referenceDescription Additional info on the read node.\n * @property {Date} mtime The timestamp the node's value last changed.\n */\n"]}