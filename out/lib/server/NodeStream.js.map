{"version":3,"sources":["../../../src/lib/server/NodeStream.js"],"names":["NodeStream","Readable","constructor","nodesToBrowse","options","Array","length","Error","ignoreNodes","Object","assign","objectMode","recursive","undefined","Project","_start","Date","now","nodes","filter","nodeId","ignored","isIgnored","Logger","warn","info","_isDestroyed","_browser","NodeBrowser","onNode","node","match","push","stop","onEnd","destroy","onError","err","isDestroyed","emit","_read","start","_destroy","callback","then","catch","destroyErr","processed","_pushed","size","opsPerSecond"],"mappings":"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","sourcesContent":["import { Readable } from 'stream';\nimport Logger from 'gulplog';\nimport Project from '../../config/ProjectConfig';\nimport NodeBrowser from './NodeBrowser';\n\n/**\n * A stream of server nodes.\n */\nexport default class NodeStream extends Readable {\n\n  /**\n   * Creates new node stream.\n   * @param {NodeId[]} nodesToBrowse The nodes to browse.\n   * @param {Object} [options] The options to use.\n   * @param {boolean} [options.recursive] If the stream should recurse child nodes.\n   * @param {NodeId[]} [options.ignoreNodes] The nodes to ignore.\n   */\n  constructor(nodesToBrowse, options = {}) {\n    if (!nodesToBrowse || !(nodesToBrowse instanceof Array) || nodesToBrowse.length === 0) {\n      throw new Error('nodesToBrowse is required');\n    }\n\n    if (options && options.ignoreNodes && !(options.ignoreNodes instanceof Array)) {\n      throw new Error('ignoreNodes must be an array of node ids');\n    }\n\n    super(Object.assign({}, options, { objectMode: true }));\n\n    // Handle options\n    /**\n     * If the discovered nodes should be browsed as well.\n     * @type {Boolean}\n     */\n    this.recursive = true;\n    if (options.recursive !== undefined) {\n      this.recursive = options.recursive;\n    }\n\n    let ignoreNodes = Project.ignoreNodes;\n    if (options.ignoreNodes !== undefined) {\n      ignoreNodes = options.ignoreNodes;\n    }\n\n    /**\n     * The timestamp when the stream started.\n     * @type {number}\n     */\n    this._start = Date.now();\n\n    const nodes = nodesToBrowse.filter(nodeId => {\n      // FIXME: Move to node browser and implement\n      const ignored = false && this.isIgnored({ nodeId });\n\n      if (ignored) {\n        Logger.warn(`${nodeId} is set to be browsed, but ignored.`);\n        Logger.info(` - Remove ${nodeId} from Atviseproject#nodes if this is intentionally.`);\n      }\n\n      return !ignored;\n    });\n\n    if (!nodes.length) {\n      throw new Error('Nothing to browse');\n    }\n\n    /**\n     * If the stream is destroyed.\n     * @type {boolean}\n     */\n    this._isDestroyed = false;\n\n    // Write nodes to read\n\n    /**\n     * The stream's browser\n     * @type {NodeBrowser}\n     */\n    this._browser = new NodeBrowser({\n      nodes,\n      ignoreNodes,\n      recursive: options.recursive === undefined ? true : options.recursive,\n    });\n\n    this._browser.onNode = node => {\n      if (node.nodeId.match(/\\s$/)) {\n        Logger.warn(`Node '${node.nodeId}' has trailing spaces in it's name.`);\n        Logger.info(' - Rename it to prevent errors on windows.');\n      }\n      if (!this.push(node)) { this._browser.stop(); }\n    };\n\n    this._browser.onEnd = () => {\n      this.push(null);\n      this.destroy();\n    };\n\n    this._browser.onError = err => {\n      if (this.isDestroyed) { return; }\n      this.emit('error', err);\n      this.destroy();\n    };\n  }\n\n  /**\n   * If the stream is destoyed.\n   * @type {boolean}\n   */\n  get isDestroyed() {\n    return this._isDestroyed;\n  }\n\n  /**\n   * Starts the browser.\n   */\n  _read() {\n    this._browser.start();\n  }\n\n  /**\n   * Destroys the stream.\n   * @param {?Error} err The error that caused the destroy.\n   * @param {function(err: ?Error): void} callback Called once finished.\n   */\n  _destroy(err, callback) {\n    this._isDestroyed = true;\n\n    super.destroy(err, () => {\n      this._browser.destroy()\n        .then(() => callback(err))\n        .catch(destroyErr => callback(err || destroyErr));\n    });\n  }\n\n  /**\n   * The number of processed nodes.\n   * @type {number}\n   */\n  get processed() {\n    return this._browser._pushed.size;\n  }\n\n  /**\n   * The number of processed chunks per second.\n   * @type {number}\n   */\n  get opsPerSecond() {\n    return (this.processed / ((Date.now() - this._start) / 1000)) || 0;\n  }\n\n}\n"],"file":"NodeStream.js"}