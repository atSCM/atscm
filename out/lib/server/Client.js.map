{"version":3,"sources":["../../../src/lib/server/Client.js"],"names":["Client","create","client","OPCUAClient","requestedSessionTimeout","keepSessionAlive","certificateFile","__dirname","privateKeyFile","Promise","resolve","reject","endpoint","ProjectConfig","host","port","opc","setTimeout","Error","connect","err","message"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;AAGe,MAAMA,MAAN,CAAa;AAE1B;;;;;AAKA,SAAOC,MAAP,GAAgB;AACd,UAAMC,MAAM,GAAG,IAAIC,yBAAJ,CAAgB;AAC7BC,MAAAA,uBAAuB,EAAE,MADI;AAE7BC,MAAAA,gBAAgB,EAAE,IAFW;AAG7BC,MAAAA,eAAe,EAAE,gBAAKC,SAAL,EAAgB,2CAAhB,CAHY;AAI7BC,MAAAA,cAAc,EAAE,gBAAKD,SAAL,EAAgB,mCAAhB;AAJa,KAAhB,CAAf;AAOA,WAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,QAAQ,GAAI,aAAYC,uBAAcC,IAAK,IAAGD,uBAAcE,IAAd,CAAmBC,GAAI,EAA3E;AAEAC,MAAAA,UAAU,CAAC,MAAMN,MAAM,CACrB,IAAIO,KAAJ,CAAW,wBAAuBN,QAAS,wBAA3C,CADqB,CAAb,EAEP,IAFO,CAAV;AAIAV,MAAAA,MAAM,CAACiB,OAAP,CAAeP,QAAf,EAAyBQ,GAAG,IAAI;AAC9B,YAAIA,GAAJ,EAAS;AACPT,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAW,wBAAuBN,QAAS,KAAIQ,GAAG,CAACC,OAAQ,EAA3D,CAAD,CAAN;AACD,SAFD,MAEO;AACLX,UAAAA,OAAO,CAACR,MAAD,CAAP;AACD;AACF,OAND;AAOD,KAdM,CAAP;AAeD;;AA9ByB","sourcesContent":["import { join } from 'path';\nimport { OPCUAClient } from 'node-opcua/lib/client/opcua_client';\nimport ProjectConfig from '../../config/ProjectConfig';\n\n/**\n * A wrapper around {@link node-opcua~OPCUAClient} used to connect to atvise server.\n */\nexport default class Client {\n\n  /**\n   * Creates and connects a new instance of {@link node-opcua~OPCUAClient}.\n   * @return {Promise<node-opcua~OPCUAClient, Error>} Fulfilled with an already connected\n   * {@link node-opcua~OPCUAClient} instance, rejected if an error occured.\n   */\n  static create() {\n    const client = new OPCUAClient({\n      requestedSessionTimeout: 600000,\n      keepSessionAlive: true,\n      certificateFile: join(__dirname, '../../../res/certificates/certificate.pem'),\n      privateKeyFile: join(__dirname, '../../../res/certificates/key.pem'),\n    });\n\n    return new Promise((resolve, reject) => {\n      const endpoint = `opc.tcp://${ProjectConfig.host}:${ProjectConfig.port.opc}`;\n\n      setTimeout(() => reject(\n        new Error(`Unable to connect to ${endpoint}: Connection timed out`)\n      ), 5000);\n\n      client.connect(endpoint, err => {\n        if (err) {\n          reject(new Error(`Unable to connect to ${endpoint}: ${err.message}`));\n        } else {\n          resolve(client);\n        }\n      });\n    });\n  }\n\n}\n"],"file":"Client.js"}