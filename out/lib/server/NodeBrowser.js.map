{"version":3,"sources":["../../../src/lib/server/NodeBrowser.js"],"names":["HierachicalReferencesTypeIds","Set","ReferenceTypeIds","HasChild","Aggregates","HasComponent","HasOrderedComponent","HasHistoricalConfiguration","HasProperty","HasSubtype","HasEventSource","HasNotifier","Organizes","BrowsedNode","ServerNode","constructor","parent","reference","nodeClass","name","browseName","addReference","toParent","referenceTypeId","value","id","nodeId","addReferences","references","forEach","createChild","options","node","NodeBrowser","concurrency","ignoreNodes","ProjectConfig","handleNode","recursive","queue","PromiseQueue","_handled","Map","_waitingFor","_ignoreNodesRegExp","RegExp","map","n","join","_recursive","_handleNode","_pushed","_readValue","isVariable","Promise","resolve","reject","_session","readVariableValue","err","result","then","toRead","AttributeIds","DataType","ValueRank","attributeId","read","_","dataType","valueRank","arrayType","VariantArrayType","Scalar","Array","_browse","browseDirection","BrowseDirection","Forward","resultMask","browse","_browseNode","allReferences","children","typeDefinitionReference","find","ref","HasTypeDefinition","isUserGroup","Object","setPrototypeOf","NodeId","prototype","ignored","test","external","_isExternalReference","has","split","length","push","get","undefined","Logger","debug","ReferenceTypeNames","_push","error","set","isPaused","addAll","child","_process","idValue","dep","dependencies","add","catch","_reject","addNode","transform","_sourceNodesRegExp","_hasDependencies","dependencyCount","values","concat","_getSourceNodes","nodeIds","browseUp","path","Inverse","unshift","ObjectIds","RootFolder","Error","browseDown","target","all","i","pathDown","reduce","replace","Session","create","nodes","processError","pause","clear","onIdle","close","keys","unresolved","entries","to","c","from","type","refs","pushed"],"mappings":"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","sourcesContent":["import { ObjectIds } from 'node-opcua/lib/opcua_node_ids.js';\nimport { BrowseDirection } from 'node-opcua/lib/services/browse_service.js';\nimport { AttributeIds } from 'node-opcua/lib/services/read_service';\nimport { VariantArrayType } from 'node-opcua/lib/datamodel/variant';\nimport Logger from 'gulplog';\nimport PromiseQueue from 'p-queue';\nimport ProjectConfig from '../../config/ProjectConfig';\nimport NodeId from '../model/opcua/NodeId';\nimport { ServerNode, ReferenceTypeIds, ReferenceTypeNames } from '../model/Node';\nimport Session from './Session';\n\n/**\n * A set of all hierarchical reference types.\n * @type {Set<number>}\n */\nconst HierachicalReferencesTypeIds = new Set([\n  ReferenceTypeIds.HasChild,\n  ReferenceTypeIds.Aggregates,\n  ReferenceTypeIds.HasComponent,\n  ReferenceTypeIds.HasOrderedComponent,\n  ReferenceTypeIds.HasHistoricalConfiguration,\n  ReferenceTypeIds.HasProperty,\n  ReferenceTypeIds.HasSubtype,\n  ReferenceTypeIds.HasEventSource,\n  ReferenceTypeIds.HasNotifier,\n  ReferenceTypeIds.Organizes,\n]);\n\n/**\n * A node discovered while browsing the server's database.\n */\nexport class BrowsedNode extends ServerNode {\n\n  /**\n   * Creates a new node.\n   * @param {Object} options The options to use.\n   * @param {?BrowsedNode} options.parent The parent node.\n   * @param {Object} options.reference The reference to pick metadata from.\n   */\n  constructor({ parent, reference, nodeClass, name }) {\n    super({\n      parent,\n      nodeClass: reference ? reference.nodeClass : nodeClass,\n      name: reference ? reference.browseName.name : name,\n    });\n\n    if (reference) { // NOTE: You should always provide reference, this only for #createChild\n      this.addReference(ReferenceTypeIds.toParent, reference.referenceTypeId.value);\n\n      /** The node's id. @type {NodeId} */\n      this.id = reference.nodeId;\n    }\n\n    /** The node's value\n     * @type {node-opcua~Variant} */\n    this.value = {};\n  }\n\n  /**\n   * Add multiple references at once.\n   * @param {Object[]} references The references to add.\n   */\n  addReferences(references) {\n    references.forEach(reference => {\n      this.addReference(reference.referenceTypeId.value, reference.nodeId.value);\n    });\n  }\n\n  /**\n   * Creates new child node.\n   * @param {Object} options The options to use.\n   * @see {Node#createChild}\n   */\n  createChild(options) {\n    const node = super.createChild(options);\n\n    node.id = this.id;\n\n    return node;\n  }\n\n}\n\n/**\n * Browses the server database.\n */\nexport default class NodeBrowser {\n\n  /**\n   * Creates a new node browser.\n   * @param {Object} options The options to use.\n   * @param {number} [options.concurrency=250] The maximum of nodes to process in parallel.\n   * @param {function(node: BrowsedNode): Promise<any>} options.handleNode A custom node handler.\n   * @param {boolean} [options.recursive] If the whole node tree should be processed.\n   */\n  constructor({\n    concurrency = 250,\n    ignoreNodes = ProjectConfig.ignoreNodes,\n    handleNode,\n    recursive = true,\n  } = {}) {\n    /** The queue used to process nodes in parallel\n     * @type {p-queue~PQueue} */\n    this.queue = new PromiseQueue({\n      // autoStart: false,\n      concurrency,\n    });\n\n    /** A map of nodes already handled. Keys are ids, values are `true` if the node was already\n     * pushed and `false` otherwise.\n     * @type {Map<string, boolean>}\n     * */\n    this._handled = new Map();\n\n    this._waitingFor = {};\n\n    /** A regular expression matching all ignored nodes. @type {RegExp} */\n    this._ignoreNodesRegExp = new RegExp(`^(${ignoreNodes\n      .map(n => n.value)\n      .join('|')})`);\n\n    /** If the browser should recurse. @type {boolean} */\n    this._recursive = recursive;\n\n    /** The custom node handler. @type {function(node: BrowsedNode): Promise<any>} */\n    this._handleNode = handleNode;\n\n    /** The number of pushed (discovered and handled) nodes. @type {number} */\n    this._pushed = 0;\n  }\n\n  /**\n   * Reads the given node's value.\n   * @param {BrowsedNode} node The node to read.\n   */\n  _readValue(node) {\n    if (!node.isVariable) { return null; }\n    return new Promise((resolve, reject) => {\n      this._session.readVariableValue(node.id, (err, result) => {\n        if (err) { return reject(err); }\n        return resolve(result && result.value);\n      });\n    })\n      .then(value => {\n        if (value) { return value; }\n\n        // Node is a variable but has no value -> Need to read dataType and arrayType directly.\n        return new Promise((resolve, reject) => {\n          const toRead = [AttributeIds.DataType, AttributeIds.ValueRank]\n            .map(attributeId => ({ nodeId: node.id, attributeId }));\n          this._session.read(toRead, (err, _, [\n            { value: { value: dataType } },\n            { value: { value: valueRank } },\n          ] = []) => {\n            if (err) return reject(err);\n\n            // FIXME: valueRank -2 (Any) and -3 (ScalarOrOneDimension) are not handled properly here\n            const arrayType = valueRank < 0 ? VariantArrayType.Scalar : VariantArrayType.Array;\n\n            return resolve({\n              dataType,\n              arrayType,\n              value: null,\n            });\n          });\n        });\n      });\n  }\n\n  // FIXME: Debounce á la https://runkit.com/5c347d277da2ad00125b6bc2/5c50161cbc21520012c42290\n  // FIXME: Move to api\n  /**\n   * Browses the server address space at the given node id.\n   * @param {Object} options The options to use.\n   */\n  _browse({ nodeId, browseDirection = BrowseDirection.Forward, resultMask = 63 }) {\n    return new Promise((resolve, reject) => {\n      this._session.browse({ nodeId, browseDirection, resultMask },\n        (err, [{ references }] = []) => (err ? reject(err) : resolve(references)));\n    });\n  }\n\n  /**\n   * Browses a node.\n   * @param {BrowsedNode} node The node to browse.\n   */\n  _browseNode(node) {\n    return this._browse({ nodeId: node.id })\n      .then(allReferences => {\n        const children = [];\n        const references = [];\n\n        const typeDefinitionReference = allReferences\n          .find(ref => ref.referenceTypeId.value === ReferenceTypeIds.HasTypeDefinition);\n\n        const isUserGroup = typeDefinitionReference &&\n          typeDefinitionReference.nodeId.value === 'ObjectTypes.ATVISE.Group';\n\n        allReferences.forEach(reference => {\n          // \"Cast\" ref.nodeId to NodeId\n          Object.setPrototypeOf(reference.nodeId, NodeId.prototype);\n\n          const ignored = this._ignoreNodesRegExp.test(reference.nodeId.value);\n          const external = this._isExternalReference(reference.nodeId.value);\n\n          if (\n            HierachicalReferencesTypeIds.has(reference.referenceTypeId.value) &&\n            !ignored &&\n            !external\n          ) {\n            if (isUserGroup && reference.nodeId.value.split(node.nodeId).length === 1) {\n              references.push(reference);\n              return;\n            }\n            if (this._handled.get(reference.nodeId.value) === undefined) {\n              children.push(new BrowsedNode({\n                parent: node,\n                reference,\n              }));\n            } // else node is already handled\n          } else if (reference.referenceTypeId.value !== 50) { // Added by atvise builder\n            // Do not add ignored\n            if (!ignored) {\n              references.push(reference);\n            } else {\n              Logger.debug(`Ignored reference from ${node.id.value} (${\n                ReferenceTypeNames[reference.referenceTypeId.value]\n              }) to ${reference.nodeId.value}`);\n            }\n          }\n        });\n\n        // eslint-disable-next-line no-param-reassign\n        node.children = children;\n        node.addReferences(references);\n\n        return { children, references };\n      });\n  }\n\n  /**\n   * Finishes processing a given node: After calling {@link NodeBrowser#_handleNode}, it resolves\n   * is's dependencies.\n   * @param {BrowsedNode} node The node handled.\n   */\n  async _push(node) {\n    if (this._handled.get(node.id.value)) {\n      Logger.error('Prevented duplicate handling of', node.id.value);\n      return;\n    }\n\n    // Prevent duplicate pushes while reading value file\n    this._handled.set(node.id.value, 'processing');\n\n    // eslint-disable-next-line no-param-reassign\n    node.value = (await this._readValue(node) || node.value);\n\n    // TODO: Remove additional properties (children, ...) for better memory-usage\n\n    await this._handleNode(node);\n\n    this._pushed += 1;\n\n    // Do not proceed if queue is stopped (because an error occured)\n    if (!this._recursive || this.queue.isPaused) {\n      // Queue is stopped, not adding...\n      return;\n    }\n\n    this.queue.addAll(node.children.map(child => () => this._process(child)));\n\n    const idValue = node.id.value;\n    this._handled.set(idValue, true);\n\n    // Handle dependencies\n    if (this._waitingFor[idValue]) {\n      this._waitingFor[idValue].forEach(dep => {\n        // eslint-disable-next-line no-param-reassign\n        if (--dep.dependencies === 0) {\n          // Adding as dependencies are resolved\n          this.queue.add(() => this._push(dep)).catch(this._reject);\n        }\n      });\n\n      delete this._waitingFor[idValue];\n    }\n  }\n\n  /**\n   * Instructs the browser to handle a node that would otherwise be queued behind others (eg: its\n   * parent node).\n   * @param {BrowsedNode} node The node to add.\n   * @return {Promise<?BrowsedNode>} The fully processed node.\n   */\n  addNode(node) {\n    if (this.queue.isPaused) {\n      Logger.debug('Queue is stopped, not adding...');\n      return Promise.resolve();\n    }\n\n    return this.queue.add(\n      () => this._handleNode(node, { transform: false })\n    )\n      .catch(this._reject);\n  }\n\n  /**\n   * Returns `true` for node ids that should be treated as external references.\n   * @param {string|number} idValue Value of the id to check.\n   * @return {boolean} If the id should be treated as external.\n   */\n  _isExternalReference(idValue) { // FIXME: Allow plugins\n    return typeof idValue !== 'string' || !this._sourceNodesRegExp.test(idValue);\n  }\n\n  /**\n   * Returns `true` if a node has dependencies it should be queued behind.\n   * @param {BrowsedNode} node The node to check.\n   */\n  _hasDependencies(node) {\n    let dependencyCount = 0;\n\n    for (const references of node.references.values()) {\n      for (const reference of references) {\n        if (\n          (this._handled.get(reference) !== true) &&\n          !this._isExternalReference(reference) &&\n          !this._ignoreNodesRegExp.test(reference)\n        ) {\n          dependencyCount++;\n          this._waitingFor[reference] = (this._waitingFor[reference] || []).concat(node);\n        }\n      }\n    }\n\n    // eslint-disable-next-line no-param-reassign\n    node.dependencies = dependencyCount;\n\n    return dependencyCount > 0;\n  }\n\n  /**\n   * Processes a single node: Requires special error handling.\n   * @param {BrowsedNode} node The node to process.\n   * @return {Promise<?BrowsedNode>} The fully processed node.\n   */\n  async _process(node) {\n    try {\n      if (this._handled.has(node.id.value)) { // Already queued\n        return undefined;\n      }\n      this._handled.set(node.id.value, false);\n      await this._browseNode(node);\n\n      if (!this._hasDependencies(node)) {\n        await this._push(node);\n      }\n    } catch (err) {\n      this._reject(err);\n    }\n\n    return node;\n  }\n\n  /**\n   * Discovers and browses the source nodes.\n   * @param {Array<string, NodeId>} nodeIds The source ids.\n   * @return {Promise<Node[]>} Resolved once finished.\n   */\n  _getSourceNodes(nodeIds) {\n    const browseUp = ({ nodeId, path = [] }) => this._browse({\n      nodeId,\n      browseDirection: BrowseDirection.Inverse,\n    })\n      .then(references => {\n        for (const reference of references) {\n          if (HierachicalReferencesTypeIds.has(reference.referenceTypeId.value)) {\n            path.unshift(reference.nodeId);\n            return reference.nodeId.value === ObjectIds.RootFolder ?\n              path :\n              browseUp({ nodeId: reference.nodeId, path });\n          }\n        }\n        throw new Error(`Unable to find parent node of ${nodeId}`);\n      });\n\n    const browseDown = (path, target) => Promise.all(path\n      .map((nodeId, i) => this._browse({ nodeId })\n        .then(references => references\n          .find(ref => ref.nodeId.value === (\n            path[i + 1] ? path[i + 1].value : target.value\n          ))\n        )\n      )\n    );\n\n    return Promise.all(nodeIds\n      .map(nodeId => browseUp({ nodeId })\n        .then(path => browseDown(path, nodeId))\n        .then(pathDown => pathDown\n          .reduce((parent, reference) => new BrowsedNode({ parent, reference }), null)\n        )\n      )\n    );\n  }\n\n  /**\n   * Starts the browser of the given nodes.\n   * @param {NodeId[]} nodeIds The nodes to browse.\n   * @return {Promise<any>} Resolved once all nodes are finished.\n   */\n  async browse(nodeIds) {\n    this._sourceNodesRegExp = new RegExp(`^(${nodeIds\n      .map(({ value }) => `${value.replace(/\\./g, '\\\\.')}`)\n      .join('|')})`);\n\n    this._session = await Session.create();\n\n    // Add source nodes\n    const nodes = await this._getSourceNodes(nodeIds);\n    this.queue.addAll(nodes.map(node => () => this._process(node)));\n\n    // Queue error handling\n    let processError = null;\n    this._reject = err => {\n      if (processError) {\n        // Multiple errors occured. In most cases this means, that the server connection was closed\n        // after the first error.\n        Logger.debug('Additional error', err);\n        return;\n      }\n\n      processError = err;\n      this.queue.pause();\n      this.queue.clear();\n    };\n\n    return new Promise((resolve, reject) => {\n      this.queue.onIdle()\n        .then(async () => {\n          await Session.close(this._session);\n\n          if (processError) {\n            reject(processError);\n            return;\n          }\n\n          if (Object.keys(this._waitingFor).length) {\n            const unresolved = Object.entries(this._waitingFor)\n              .reduce((all, [to, children]) => all.concat(children\n                .map(c => ({\n                  from: c.id.value,\n                  to,\n                  type: ReferenceTypeNames[\n                    Array.from(c.references).find(([, refs]) => refs.has(to))[0]\n                  ],\n                }))\n              ), []);\n\n            reject(new Error(`Unable to resolve reference${unresolved.length > 1 ? 's' : ''}:\n\n  ${\n  unresolved\n    .map(({ from, type, to }) => `${from} → (${type}) → ${to}`)\n    .join('\\n  ')\n}\n`));\n            return;\n          }\n\n          if (Array.from(this._handled).find(([, pushed]) => !pushed)) {\n            throw new Error('A node was processed, but not pushed');\n          }\n\n          resolve();\n        });\n    });\n  }\n\n}\n"],"file":"NodeBrowser.js"}