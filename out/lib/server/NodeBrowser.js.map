{"version":3,"sources":["../../../src/lib/server/NodeBrowser.js"],"names":["HierachicalReferencesTypeIds","Set","ReferenceTypeIds","HasChild","Aggregates","HasComponent","HasOrderedComponent","HasHistoricalConfiguration","HasProperty","HasSubtype","HasEventSource","HasNotifier","Organizes","BrowsedNode","ServerNode","constructor","parent","reference","nodeClass","name","browseName","addReference","toParent","referenceTypeId","value","id","nodeId","addReferences","references","forEach","createChild","options","node","NodeBrowser","nodes","ignoreNodes","recursive","_sourceNodes","_sourceNodesRegExp","RegExp","map","replace","join","_ignoreNodesRegExp","n","_recursive","_discoveredNodes","_nextToBrowse","_queued","_pushed","_dependingNodes","_dependencies","_isStopped","_isDestroyed","_ended","Session","create","then","session","_session","_getSourceNodes","_browseNext","catch","err","_isDisconnected","onError","disconnect","close","destroy","stop","_browse","Promise","resolve","reject","browse","results","_readValues","readVariableValue","_discoveredNode","dependencyCount","values","namespace","has","test","push","_pushNode","onNode","add","dependency","_getSourcePaths","paths","browseNext","index","browsePath","items","browseDirection","BrowseService","BrowseDirection","Inverse","resultMask","result","i","statusCode","Error","ObjectIds","RootFolder","unshift","length","_browseSourcePaths","targets","remainingPaths","Array","browsePaths","p","shift","Forward","item","next","find","validateSourceNodes","JSON","stringify","ProjectConfig","NodeClass","Object","browseCount","Math","min","Logger","debug","browseNow","splice","all","setPrototypeOf","NodeId","prototype","onEnd","start"],"mappings":"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","sourcesContent":["import { ObjectIds, browse_service as BrowseService } from 'node-opcua';\nimport { NodeClass } from 'node-opcua/lib/datamodel/nodeclass.js';\nimport Logger from 'gulplog';\nimport ProjectConfig from '../../config/ProjectConfig';\nimport NodeId from '../model/opcua/NodeId';\nimport { ServerNode, ReferenceTypeIds } from '../model/Node';\nimport Session from './Session';\n\n/**\n * A set of all hierarchical reference types.\n * @type {Set<number>}\n */\nconst HierachicalReferencesTypeIds = new Set([\n  ReferenceTypeIds.HasChild,\n  ReferenceTypeIds.Aggregates,\n  ReferenceTypeIds.HasComponent,\n  ReferenceTypeIds.HasOrderedComponent,\n  ReferenceTypeIds.HasHistoricalConfiguration,\n  ReferenceTypeIds.HasProperty,\n  ReferenceTypeIds.HasSubtype,\n  ReferenceTypeIds.HasEventSource,\n  ReferenceTypeIds.HasNotifier,\n  ReferenceTypeIds.Organizes,\n]);\n\n/**\n * A node discovered while browsing the server's database.\n */\nexport class BrowsedNode extends ServerNode {\n\n  /**\n   * Creates a new node.\n   * @param {Object} options The options to use.\n   * @param {?BrowsedNode} options.parent The parent node.\n   * @param {Object} options.reference The reference to pick metadata from.\n   */\n  constructor({ parent, reference }) {\n    super({\n      parent,\n      nodeClass: reference.nodeClass,\n      name: reference.browseName.name,\n    });\n\n    this.addReference(ReferenceTypeIds.toParent, reference.referenceTypeId.value);\n\n    /** The node's id. @type {NodeId} */\n    this.id = reference.nodeId;\n  }\n\n  /**\n   * Add multiple references at once.\n   * @param {Object[]} references The references to add.\n   */\n  addReferences(references) {\n    references.forEach(reference => {\n      this.addReference(reference.referenceTypeId.value, reference.nodeId.value);\n    });\n  }\n\n  /**\n   * Creates new child node.\n   * @param {Object} options The options to use.\n   * @see {Node#createChild}\n   */\n  createChild(options) {\n    const node = super.createChild(options);\n\n    node.id = this.id;\n\n    return node;\n  }\n\n}\n\n/**\n * Browses the server database.\n */\nexport default class NodeBrowser {\n\n  /**\n   * Creates a new browser.\n   * @param {Object} options The options to use.\n   * @param {NodeId[]} options.nodes The nodes to browse.\n   * @param {NodeId[]} options.ignoreNodes The nodes to igore.\n   * @param {boolean} options.recursive If the browser should recurse.\n   */\n  constructor({ nodes, ignoreNodes, recursive }/* : { nodes: NodeId[] } */ = {}) {\n    /** The browser's source nodes @type {NodeId[]} */\n    this._sourceNodes = nodes;\n\n    /** A regular expression matching all source nodes. @type {RegExp} */\n    this._sourceNodesRegExp = new RegExp(`^(${nodes\n      .map(({ value }) => `${value.replace(/\\./g, '\\\\.')}`)\n      .join('|')})`);\n    /** A regular expression matching all ignored nodes. @type {RegExp} */\n    this._ignoreNodesRegExp = new RegExp(`^(${ignoreNodes\n      .map(n => n.value)\n      .join('|')})`);\n\n    /** If the browser should recurse. @type {boolean} */\n    this._recursive = recursive;\n\n    /** Nodes discovered but not yet pushed. @type {ServerNode[]} */\n    this._discoveredNodes = [];\n    /** Nodes that should be browsed next. @type {NodeId[]} */\n    this._nextToBrowse = [];\n    /** Nodes queued. @type {Set<string>} */\n    this._queued = new Set();\n    /** Nodes pushed. @type {Set<string>} */\n    this._pushed = new Set();\n    /** Node dependency map. @type {Map<string, SourceNode[]>} */\n    this._dependingNodes = {};\n    /** The count of dependencies for nodes. @type {Map<string, number>} */\n    this._dependencies = {};\n\n    /** If the browser is stopped. @type {boolean} */\n    this._isStopped = false;\n    /** If the browser is destroyed. @type {boolean} */\n    this._isDestroyed = false;\n    /** If the browser ended. @type {boolean} */\n    this._ended = false;\n\n    Session.create()\n      .then(session => (this._session = session))\n      .then(() => this._getSourceNodes())\n      .then(() => this._browseNext())\n      .catch(err => {\n        if (!this._isDisconnected) {\n          this.onError(err);\n        }\n      });\n  }\n\n  /**\n   * Disconnects the browser.\n   * @return {Promise<void>} Resolved once finished.\n   */\n  disconnect() {\n    this._isDestroyed = true;\n    return Session.close(this._session);\n  }\n\n  /**\n   * Destroys the browser.\n   * @return {Promise<void>} Resolved once finished.\n   */\n  destroy() {\n    this.stop();\n    this._isDestroyed = true;\n\n    return this.disconnect();\n  }\n\n  /**\n   * Browses the given nodes.\n   * @param {NodeId[]} nodes The nodes to browse.\n   * @return {Promise<Object[]>} The browse results.\n   */\n  _browse(nodes) {\n    return new Promise((resolve, reject) => {\n      this._session.browse(nodes, (err, results) => {\n        if (err) { return reject(err); }\n        return resolve(results);\n      });\n    });\n  }\n\n  /**\n   * Reads the given nodes.\n   * @param {NodeId[]} nodes The nodes to read.\n   * @return {Promise<Object[]>} The read results.\n   */\n  _readValues(nodes) {\n    return new Promise((resolve, reject) => {\n      this._session.readVariableValue(nodes, (err, results) => {\n        if (err) { return reject(err); }\n        return resolve(results);\n      });\n    });\n  }\n\n  /**\n   * Called once a new node was discovered. Pushes it if possible.\n   * @param {ServerNode} node The discovered node.\n   */\n  _discoveredNode(node) {\n    let dependencyCount = 0;\n\n    for (const references of node.references.values()) {\n      for (const reference of references) {\n        if (\n          reference.namespace &&\n          !this._pushed.has(reference) &&\n          !this._sourceNodesRegExp.test(reference)\n        ) {\n          this._dependingNodes[reference] = this._dependingNodes[reference] || [];\n          this._dependingNodes[reference].push(node);\n          dependencyCount += 1;\n        }\n      }\n    }\n\n    if (dependencyCount) { // has dependencies\n      this._dependencies[node.id.value] = dependencyCount;\n    } else {\n      this._pushNode(node);\n    }\n  }\n\n  /**\n   * Pushes the given node and queues it's dependents.\n   * @param {ServerNode} node The pushed node.\n   */\n  _pushNode(node) {\n    if (!this._isStopped) {\n      this.onNode(node);\n    } else {\n      this._discoveredNodes.push(node);\n    }\n\n    this._pushed.add(node.id.value);\n\n    if (this._dependingNodes[node.id.value]) {\n      this._dependingNodes[node.id.value].forEach(dependency => {\n        this._dependencies[dependency.id.value] -= 1;\n\n        if (this._dependencies[dependency.id.value] === 0) {\n          this._pushNode(dependency);\n        } // else: Still got dependencies\n      });\n\n      delete this._dependingNodes[node.id.value];\n    }\n  }\n\n  /**\n   * Browses the source node to the root node.\n   * @param {NodeId[]} nodes The current nodes.\n   * @return {Promise<string[]>} The discovered source path.\n   */\n  async _getSourcePaths(nodes) {\n    const paths = nodes.map(() => []);\n\n    let browseNext = nodes.map((nodeId, index) => ({ nodeId, index }));\n    const browsePath = async items => {\n      browseNext = [];\n\n      const results = await this._browse(items.map(({ nodeId }) => ({\n        nodeId,\n        browseDirection: BrowseService.BrowseDirection.Inverse,\n        resultMask: 63,\n      })));\n\n      results.forEach((result, i) => {\n        if (result.statusCode.value !== 0) {\n          throw new Error(`Unable to browse ${items[i].nodeId}`);\n        }\n\n        for (const reference of result.references) {\n          if (HierachicalReferencesTypeIds.has(reference.referenceTypeId.value)) {\n            const index = items[i].index;\n\n            if (reference.nodeId.value !== ObjectIds.RootFolder) {\n              browseNext.push({ nodeId: reference.nodeId, index });\n            }\n\n            paths[index].unshift(reference.nodeId);\n\n            return;\n          }\n        }\n\n        throw new Error(`Unable to get parent node of ${items[i].nodeId}`);\n      });\n    };\n\n    while (browseNext.length) {\n      await browsePath(browseNext);\n    }\n\n    return paths;\n  }\n\n  /**\n   * Browses the source nodes's root paths.\n   * @param {string[][]} paths The source paths.\n   * @param {NodeId} targets The target nodes to browse onto.\n   */\n  async _browseSourcePaths(paths, targets) {\n    const remainingPaths = paths;\n    const nodes = new Array(paths.length);\n\n    const browsePaths = async () => {\n      const browse = [];\n      remainingPaths.forEach((p, index) => {\n        if (p.length) { browse.push({ nodeId: p.shift(), index }); }\n      });\n\n      const results = await this._browse(browse.map(({ nodeId }) => ({\n        nodeId,\n        browseDirection: BrowseService.BrowseDirection.Forward,\n        resultMask: 63,\n      })));\n\n      results.forEach((result, i) => {\n        const item = browse[i];\n        const next = remainingPaths[item.index][0] || targets[item.index];\n\n        for (const reference of result.references) {\n          if (reference.nodeId.value === next.value) {\n            nodes[item.index] = new BrowsedNode({\n              parent: nodes[item.index],\n              reference,\n            });\n\n            return;\n          }\n        }\n\n        throw new Error('Fatal error');\n      });\n    };\n\n    while (remainingPaths.find(i => i.length)) {\n      await browsePaths();\n    }\n\n    return nodes;\n  }\n\n  /**\n   * Discovers and browses the source nodes.\n   * @return {Promise<void>} Resolved once finished.\n   */\n  _getSourceNodes() {\n    const validateSourceNodes = JSON.stringify(this._sourceNodes) ===\n      JSON.stringify(ProjectConfig.nodes);\n\n    return this._getSourcePaths(this._sourceNodes)\n      .then(paths => this._browseSourcePaths(paths, this._sourceNodes))\n      .then(nodes => {\n        nodes.forEach(node => {\n          if (validateSourceNodes && node.nodeClass !== NodeClass.Object) {\n            throw new Error(`Source node '${node.id.value}' is not an Object.\n - You could use it's parent (${node.parent.id.value}) inside your project configuration instead.`);\n          }\n          this._nextToBrowse.push(node);\n        });\n      });\n  }\n\n  /**\n   * Browses the next nodes queued.\n   */\n  async _browseNext() {\n    if (this._isDestroyed) { return Promise.resolve(); }\n\n    const browseCount = Math.min(this._nextToBrowse.length, 10000);\n    Logger.debug('browsing', browseCount, 'nodes...');\n    const browseNow = this._nextToBrowse.splice(0, browseCount);\n\n    const [results, values] = await Promise.all([\n      this._browse(browseNow.map(node => ({\n        nodeId: node.id,\n        browseDirection: BrowseService.BrowseDirection.Forward,\n        resultMask: 63,\n      }))),\n      this._readValues(browseNow.map(node => node.id)),\n    ]);\n\n    results.forEach((result, i) => {\n      const node = browseNow[i];\n      const references = [];\n\n      // FIXME: Check status\n      node.value = values[i].value;\n\n      result.references.forEach(reference => {\n        // \"Cast\" ref.nodeId to NodeId\n        Object.setPrototypeOf(reference.nodeId, NodeId.prototype);\n\n        if (\n          HierachicalReferencesTypeIds.has(reference.referenceTypeId.value) &&\n          !this._ignoreNodesRegExp.test(reference.nodeId.value)\n        ) {\n          if (!this._queued.has(reference.nodeId.value) && this._recursive) {\n            this._queued.add(reference.nodeId.value);\n            this._nextToBrowse.push(new BrowsedNode({\n              parent: node,\n              reference,\n            }));\n          }\n        } else if (reference.referenceTypeId.value !== 50) { // Added by atvise builder\n          references.push(reference);\n        }\n      });\n\n      node.addReferences(references);\n      this._discoveredNode(node);\n    });\n\n    if (this._nextToBrowse.length) {\n      return this._browseNext();\n    }\n\n    // All nodes have been browsed\n    if (this._isStopped) {\n      this._ended = true;\n      return Promise.resolve();\n    }\n    return this.onEnd();\n  }\n\n  /**\n   * Starts the browser.\n   */\n  start() {\n    this._isStopped = false;\n\n    while (this._discoveredNodes.length) {\n      this.onNode(this._discoveredNodes.shift());\n      if (this._isStopped) { break; }\n    }\n\n    if (!this._discoveredNodes.length && this._ended) {\n      this.onEnd();\n    }\n  }\n\n  /**\n   * Stops the browser.\n   */\n  stop() {\n    this._isStopped = true;\n  }\n\n}\n"],"file":"NodeBrowser.js"}