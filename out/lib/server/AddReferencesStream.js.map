{"version":3,"sources":["../../../src/lib/server/AddReferencesStream.js"],"names":["serverNodes","Set","ServerRelatedNodes","map","id","value","ignoredReferences","toParent","HasTypeDefinition","HasModellingRule","AddReferencesStream","constructor","options","_retry","referencesToAdd","file","additionalReferences","Object","assign","references","dependenciesFor","refs","values","reduce","deps","nodes","concat","filter","has","scriptId","NodeIdType","STRING","scriptParameters","result","key","s","referenceKeys","keys","length","paramObjString","dataType","String","JSON","stringify","nodeId","type","referenceIdValue","parseInt","items","processErrorMessage","handleOutputArguments","outArgs","callback","Good","Error","failures","retryKey","delete","join","add","once","write"],"mappings":"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","file":"AddReferencesStream.js","sourcesContent":["import { DataType } from 'node-opcua/lib/datamodel/variant';\nimport { StatusCodes } from 'node-opcua/lib/datamodel/opcua_status_code';\nimport NodeId from '../model/opcua/NodeId';\nimport { ReferenceTypeIds } from '../model/Node';\nimport Atviseproject from '../config/Atviseproject';\nimport CallScriptStream from './scripts/CallScriptStream';\nimport { waitForDependencies } from './WaitingStream';\n\nconst serverNodes = new Set(Atviseproject.ServerRelatedNodes.map(id => id.value));\n\nconst ignoredReferences = new Set([\n  ReferenceTypeIds.toParent,\n  ReferenceTypeIds.HasTypeDefinition,\n  ReferenceTypeIds.HasModellingRule,\n]);\n\n/**\n * A stream that adds non-standard references to nodes when pushed.\n */\nexport default class AddReferencesStream extends waitForDependencies(CallScriptStream) {\n\n  /**\n   * Creates a new stream for adding references to pushed nodes.\n   * @param {Object} options The options to pass to the {@link CallScriptStream}.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * A stack of {@link NodeId#value}s to be retried afterwards.\n     * @type {Set<string>}\n     */\n    this._retry = new Set();\n  }\n\n  /**\n   * Returns the references that need to be set for a file.\n   * @param {AtviseFile} file The file to check.\n   * @return {Object} The files's references.\n   */\n  referencesToAdd(file) {\n    const additionalReferences = Object.assign({}, file.references);\n    delete additionalReferences.toParent;\n    delete additionalReferences.HasTypeDefinition;\n    delete additionalReferences.HasModellingRule;\n\n    return additionalReferences;\n  }\n\n  /**\n   * Returns the referenced nodes that should be processed before the given file.\n   * @param {AtviseFile} file The file to check.\n   * @return {NodeId[]} The files dependencies.\n   */\n  dependenciesFor(file) {\n    const refs = this.referencesToAdd(file);\n\n    return Object.values(refs)\n      .reduce((deps, nodes) => deps.concat(nodes), [])\n      .filter(({ value }) => !serverNodes.has(value));\n  }\n\n  /**\n   * Id of the *CreateNode* script added with `atscm import`.\n   * @type {NodeId}\n   */\n  get scriptId() {\n    return new NodeId(NodeId.NodeIdType.STRING,\n      'SYSTEM.LIBRARY.ATVISE.SERVERSCRIPTS.atscm.AddReferences',\n      1\n    );\n  }\n\n  /**\n   * The options required to add references to the node for the given file.\n   * @param {AtviseFile} file The processed file.\n   * @return {Object} The options passed to the *AddReferences* script.\n   */\n  scriptParameters(file) {\n    const references = [...file.references]\n      .reduce((result, [key, value]) => {\n        if (ignoredReferences.has(key)) { return result; }\n\n        return Object.assign(result, {\n          [key]: [...value].map(s => (typeof s === 'string' ? `ns=1;s=${s}` : s)),\n        });\n      }, {});\n\n    const referenceKeys = Object.keys(references);\n\n    if (referenceKeys.length > 0) {\n      return {\n        paramObjString: {\n          dataType: DataType.String,\n          value: JSON.stringify({\n            nodeId: file.nodeId,\n            references: referenceKeys\n              .map(type => ({\n                referenceIdValue: parseInt(type, 10),\n                items: references[type],\n              })),\n          }),\n        },\n      };\n    }\n\n    // No need to add references\n    return null;\n  }\n\n  /**\n   * Prints an error message telling that adding one or more references failed.\n   * @param {AtviseFile} file The file who's node could not be created.\n   * @return {string} The resulting error message.\n   */\n  processErrorMessage(file) {\n    return `Error adding references to node ${file.nodeId}`;\n  }\n\n  /**\n   * Handles the results of a script call.\n   * @param {AtviseFile} file The file the script was called with.\n   * @param {node-opcua~Variant[]} outArgs The raw method results.\n   * @param {function(err: Error)} callback Called once finished.\n   */\n  handleOutputArguments(file, outArgs, callback) {\n    if (outArgs[0].value !== StatusCodes.Good) {\n      callback(new Error(outArgs[1].value));\n    } else {\n      const [{ value: failures }] = outArgs[3].value;\n\n      if (failures && failures.length) {\n        const retryKey = file.nodeId.value;\n\n        if (this._retry.has(retryKey)) {\n          this._retry.delete(retryKey);\n          callback(new Error(`Failed to create references to ${failures.join(', ')}`));\n        } else {\n          this._retry.add(retryKey);\n          callback(null);\n\n          this.once('drained', () => {\n            this.write(file);\n          });\n        }\n\n        return;\n      }\n\n      callback(null);\n    }\n  }\n\n}\n"]}