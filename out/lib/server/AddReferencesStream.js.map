{"version":3,"sources":["../../../src/lib/server/AddReferencesStream.js"],"names":["AddReferencesStream","scriptId","NodeIdType","STRING","scriptParameters","file","additionalReferences","Object","assign","references","toParent","HasTypeDefinition","HasModellingRule","additionalKeys","keys","length","paramObjString","dataType","String","value","JSON","stringify","nodeId","map","type","referenceIdValue","items","i","toJSON","processErrorMessage","handleOutputArguments","outArgs","callback","Good","Error","failures","join"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA;;;AAGe,MAAMA,mBAAN,oCAAmD;;AAEhE;;;;AAIA,MAAIC,QAAJ,GAAe;AACb,WAAO,qBAAW,iBAAOC,UAAP,CAAkBC,MAA7B,EACL,yDADK,EAEL,CAFK,CAAP;AAID;;AAED;;;;;AAKAC,mBAAiBC,IAAjB,EAAuB;AACrB,UAAMC,uBAAuBC,OAAOC,MAAP,CAAc,EAAd,EAAkBH,KAAKI,UAAvB,CAA7B;AACA,WAAOH,qBAAqBI,QAA5B;AACA,WAAOJ,qBAAqBK,iBAA5B;AACA,WAAOL,qBAAqBM,gBAA5B;;AAEA,UAAMC,iBAAiBN,OAAOO,IAAP,CAAYR,oBAAZ,CAAvB;;AAEA,QAAIO,eAAeE,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,aAAO;AACLC,wBAAgB;AACdC,oBAAU,oBAASC,MADL;AAEdC,iBAAOC,KAAKC,SAAL,CAAe;AACpBC,oBAAQjB,KAAKiB,MADO;AAEpBb,wBAAYI,eACTU,GADS,CACLC,SAAS;AACZC,gCAAkB,4BAAiBD,IAAjB,CADN;AAEZE,qBAAOpB,qBAAqBkB,IAArB,EACJD,GADI,CACAI,KAAKA,EAAEC,MAAF,EADL;AAFK,aAAT,CADK;AAFQ,WAAf;AAFO;AADX,OAAP;AAcD;;AAED;AACA,WAAO,IAAP;AACD;;AAED;;;;;AAKAC,sBAAoBxB,IAApB,EAA0B;AACxB,WAAQ,mCAAkCA,KAAKiB,MAAL,CAAYH,KAAM,EAA5D;AACD;;AAED;;;;;;AAMAW,wBAAsBzB,IAAtB,EAA4B0B,OAA5B,EAAqCC,QAArC,EAA+C;AAC7C,QAAID,QAAQ,CAAR,EAAWZ,KAAX,KAAqB,uBAAYc,IAArC,EAA2C;AACzCD,eAAS,IAAIE,KAAJ,CAAUH,QAAQ,CAAR,EAAWZ,KAArB,CAAT;AACD,KAFD,MAEO;AACL,YAAM,CAAC,EAAEA,OAAOgB,QAAT,EAAD,IAAwBJ,QAAQ,CAAR,EAAWZ,KAAzC;;AAEA,UAAIgB,YAAYA,SAASpB,MAAzB,EAAiC;AAC/BiB,iBAAS,IAAIE,KAAJ,CAAW,kCAAiCC,SAASC,IAAT,CAAc,IAAd,CAAoB,EAAhE,CAAT;AACA;AACD;;AAEDJ,eAAS,IAAT;AACD;AACF;;AA3E+D;kBAA7ChC,mB","file":"AddReferencesStream.js","sourcesContent":["import { DataType, StatusCodes, ReferenceTypeIds } from 'node-opcua';\nimport NodeId from '../model/opcua/NodeId';\nimport CallScriptStream from './scripts/CallScriptStream';\n\n/**\n * A stream that adds non-standard references to nodes when pushed.\n */\nexport default class AddReferencesStream extends CallScriptStream {\n\n  /**\n   * Id of the *CreateNode* script added with `atscm import`.\n   * @type {NodeId}\n   */\n  get scriptId() {\n    return new NodeId(NodeId.NodeIdType.STRING,\n      'SYSTEM.LIBRARY.ATVISE.SERVERSCRIPTS.atscm.AddReferences',\n      1\n    );\n  }\n\n  /**\n   * The options required to add references to the node for the given file.\n   * @param {AtviseFile} file The processed file.\n   * @return {Object} The options passed to the *AddReferences* script.\n   */\n  scriptParameters(file) {\n    const additionalReferences = Object.assign({}, file.references);\n    delete additionalReferences.toParent;\n    delete additionalReferences.HasTypeDefinition;\n    delete additionalReferences.HasModellingRule;\n\n    const additionalKeys = Object.keys(additionalReferences);\n\n    if (additionalKeys.length > 0) {\n      return {\n        paramObjString: {\n          dataType: DataType.String,\n          value: JSON.stringify({\n            nodeId: file.nodeId,\n            references: additionalKeys\n              .map(type => ({\n                referenceIdValue: ReferenceTypeIds[type],\n                items: additionalReferences[type]\n                  .map(i => i.toJSON()),\n              })),\n          }),\n        },\n      };\n    }\n\n    // No need to add references\n    return null;\n  }\n\n  /**\n   * Prints an error message telling that adding one or more references failed.\n   * @param {AtviseFile} file The file who's node could not be created.\n   * @return {string} The resulting error message.\n   */\n  processErrorMessage(file) {\n    return `Error adding references to node ${file.nodeId.value}`;\n  }\n\n  /**\n   * Handles the results of a script call.\n   * @param {AtviseFile} file The file the script was called with.\n   * @param {node-opcua~Variant[]} outArgs The raw method results.\n   * @param {function(err: Error)} callback Called once finished.\n   */\n  handleOutputArguments(file, outArgs, callback) {\n    if (outArgs[0].value !== StatusCodes.Good) {\n      callback(new Error(outArgs[1].value));\n    } else {\n      const [{ value: failures }] = outArgs[3].value;\n\n      if (failures && failures.length) {\n        callback(new Error(`Failed to create references to ${failures.join(', ')}`));\n        return;\n      }\n\n      callback(null);\n    }\n  }\n\n}\n"]}