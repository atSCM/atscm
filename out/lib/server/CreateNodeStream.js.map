{"version":3,"sources":["../../../src/lib/server/CreateNodeStream.js"],"names":["CreateNodeStream","scriptId","NodeIdType","STRING","scriptParameters","file","options","nodeId","parentNodeId","parent","nodeClass","value","typeDefinition","browseName","idName","toParentRefs","references","get","toParent","reference","rules","HasModellingRule","modellingRule","Variable","dataType","variantValue","valueRank","arrayType","paramObjString","String","JSON","stringify","processErrorMessage","handleOutputArguments","outArgs","callback","Good","Error","createdNode","createFailed","warn","toString","debug","push"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA;;;AAGe,MAAMA,gBAAN,oCAAgD;;AAE7D;;;;AAIA,MAAIC,QAAJ,GAAe;AACb,WAAO,qBAAW,iBAAOC,UAAP,CAAkBC,MAA7B,EACL,sDADK,EAEL,CAFK,CAAP;AAID;;AAED;;;;;AAKAC,mBAAiBC,IAAjB,EAAuB;AACrB,UAAMC,UAAU;AACdC,cAAQF,KAAKE,MADC;AAEdC,oBAAcH,KAAKI,MAAL,GAAcJ,KAAKI,MAAL,CAAYF,MAA1B,GAAmC,SAFnC;AAGdG,iBAAWL,KAAKK,SAAL,CAAeC,KAHZ;AAIdC,sBAAgBP,KAAKO,cAJP;AAKdC,kBAAYR,KAAKS;AALH,KAAhB;;AAQA,UAAMC,eAAeV,KAAKW,UAAL,CAAgBC,GAAhB,CAAoB,uBAAiBC,QAArC,CAArB;AACA,QAAIH,YAAJ,EAAkB;AAChBT,cAAQa,SAAR,GAAoB,yBAAmB,CAAC,GAAGJ,YAAJ,EAAkB,CAAlB,CAAnB,CAApB;AACD;;AAED,UAAMK,QAAQf,KAAKW,UAAL,CAAgBC,GAAhB,CAAoB,uBAAiBI,gBAArC,CAAd;AACA,QAAID,KAAJ,EAAW;AACTd,cAAQgB,aAAR,GAAwB,CAAC,GAAGF,KAAJ,EAAW,CAAX,CAAxB;AACD;;AAED,QAAIf,KAAKK,SAAL,CAAeC,KAAf,KAAyB,qBAAUY,QAAV,CAAmBZ,KAAhD,EAAuD;AACrDL,cAAQkB,QAAR,GAAmBnB,KAAKoB,YAAL,CAAkBD,QAAlB,CAA2Bb,KAA9C;AACAL,cAAQoB,SAAR,GAAoBrB,KAAKoB,YAAL,CAAkBE,SAAlB,CAA4BhB,KAAhD;AACAL,cAAQK,KAAR,GAAgBN,KAAKoB,YAAL,CAAkBd,KAAlC;AACD;;AAED,WAAO;AACLiB,sBAAgB;AACdJ,kBAAU,kBAASK,MADL;AAEdlB,eAAOmB,KAAKC,SAAL,CAAezB,OAAf;AAFO;AADX,KAAP;AAMD;;AAED;;;;;AAKA0B,sBAAoB3B,IAApB,EAA0B;AACxB,WAAQ,uBAAsBA,KAAKE,MAAO,EAA1C;AACD;;AAED;;;;;;AAMA0B,wBAAsB5B,IAAtB,EAA4B6B,OAA5B,EAAqCC,QAArC,EAA+C;AAC7C,QAAID,QAAQ,CAAR,EAAWvB,KAAX,KAAqB,+BAAYyB,IAArC,EAA2C;AACzCD,eAAS,IAAIE,KAAJ,CAAUH,QAAQ,CAAR,EAAWvB,KAArB,CAAT;AACD,KAFD,MAEO;AACL,YAAM,CAAC,EAAEA,OAAO2B,WAAT,EAAD,EAAyB,EAAE3B,OAAO4B,YAAT,EAAzB,IAAoDL,QAAQ,CAAR,EAAWvB,KAArE;;AAEA,UAAI4B,YAAJ,EAAkB;AAChB,0BAAOC,IAAP,CAAY,uBAAZ,EAAqCnC,KAAKE,MAAL,CAAYkC,QAAZ,EAArC;AACD,OAFD,MAEO,IAAIH,WAAJ,EAAiB;AACtB,0BAAOI,KAAP,CAAa,cAAb,EAA6BrC,KAAKE,MAAL,CAAYkC,QAAZ,EAA7B;AACA,aAAKE,IAAL,CAAUtC,IAAV;AACD,OAHM,MAGA;AACL,0BAAOqC,KAAP,CAAa,MAAb,EAAqBrC,KAAKE,MAAL,CAAYkC,QAAZ,EAArB,EAA6C,gBAA7C;AACA,aAAKE,IAAL,CAAUtC,IAAV;AACD;;AAED8B,eAAS,IAAT;AACD;AACF;;AApF4D;kBAA1CnC,gB","file":"CreateNodeStream.js","sourcesContent":["import { StatusCodes } from 'node-opcua/lib/datamodel/opcua_status_code';\nimport { DataType } from 'node-opcua/lib/datamodel/variant';\nimport { NodeClass } from 'node-opcua/lib/datamodel/nodeclass';\nimport Logger from 'gulplog';\nimport NodeId from '../model/opcua/NodeId';\nimport { ReferenceTypeIds, ReferenceTypeNames } from '../model/Node';\nimport CallScriptStream from './scripts/CallScriptStream';\n\n/**\n * A stream that creates OPC-UA nodes for the passed {@link AtviseFiles}s.\n */\nexport default class CreateNodeStream extends CallScriptStream {\n\n  /**\n   * Id of the *CreateNode* script added with `atscm import`.\n   * @type {NodeId}\n   */\n  get scriptId() {\n    return new NodeId(NodeId.NodeIdType.STRING,\n      'SYSTEM.LIBRARY.ATVISE.SERVERSCRIPTS.atscm.CreateNode',\n      1\n    );\n  }\n\n  /**\n   * The options required to create a node for the given file.\n   * @param {AtviseFile} file The processed file.\n   * @return {Object} The options passed to the *CreateNode* script.\n   */\n  scriptParameters(file) {\n    const options = {\n      nodeId: file.nodeId,\n      parentNodeId: file.parent ? file.parent.nodeId : 'Objects',\n      nodeClass: file.nodeClass.value,\n      typeDefinition: file.typeDefinition,\n      browseName: file.idName,\n    };\n\n    const toParentRefs = file.references.get(ReferenceTypeIds.toParent);\n    if (toParentRefs) {\n      options.reference = ReferenceTypeNames[[...toParentRefs][0]];\n    }\n\n    const rules = file.references.get(ReferenceTypeIds.HasModellingRule);\n    if (rules) {\n      options.modellingRule = [...rules][0];\n    }\n\n    if (file.nodeClass.value === NodeClass.Variable.value) {\n      options.dataType = file.variantValue.dataType.value;\n      options.valueRank = file.variantValue.arrayType.value;\n      options.value = file.variantValue.value;\n    }\n\n    return {\n      paramObjString: {\n        dataType: DataType.String,\n        value: JSON.stringify(options),\n      },\n    };\n  }\n\n  /**\n   * Prints an error message telling that creating a node failed.\n   * @param {AtviseFile} file The file who's node could not be created.\n   * @return {string} The resulting error message.\n  */\n  processErrorMessage(file) {\n    return `Error creating node ${file.nodeId}`;\n  }\n\n  /**\n   * Handles the results of a script call.\n   * @param {AtviseFile} file The file the script was called with.\n   * @param {node-opcua~Variant[]} outArgs The raw method results.\n   * @param {function(err: Error)} callback Called once finished.\n   */\n  handleOutputArguments(file, outArgs, callback) {\n    if (outArgs[0].value !== StatusCodes.Good) {\n      callback(new Error(outArgs[1].value));\n    } else {\n      const [{ value: createdNode }, { value: createFailed }] = outArgs[3].value;\n\n      if (createFailed) {\n        Logger.warn('Failed to create node', file.nodeId.toString());\n      } else if (createdNode) {\n        Logger.debug('Created node', file.nodeId.toString());\n        this.push(file);\n      } else {\n        Logger.debug('Node', file.nodeId.toString(), 'already exists');\n        this.push(file);\n      }\n\n      callback(null);\n    }\n  }\n\n}\n"]}