{"version":3,"sources":["../../../src/lib/server/CreateNodeStream.js"],"names":["CreateNodeStream","scriptId","NodeIdType","STRING","scriptParameters","file","options","nodeId","parentNodeId","parent","nodeClass","value","typeDefinition","browseName","Variable","dataType","valueRank","arrayType","createNodeValue","paramObjString","String","JSON","stringify","processErrorMessage","handleOutputArguments","outArgs","callback","Good","Error","createdNode","createFailed","warn","toString","debug"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;AAGe,MAAMA,gBAAN,oCAAgD;;AAE7D;;;;AAIA,MAAIC,QAAJ,GAAe;AACb,WAAO,qBAAW,iBAAOC,UAAP,CAAkBC,MAA7B,EACL,sDADK,EAEL,CAFK,CAAP;AAID;;AAED;;;;;AAKAC,mBAAiBC,IAAjB,EAAuB;AACrB,UAAMC,UAAU;AACdC,cAAQF,KAAKE,MADC;AAEdC,oBAAcH,KAAKE,MAAL,CAAYE,MAFZ;AAGdC,iBAAWL,KAAKK,SAAL,CAAeC,KAHZ;AAIdC,sBAAgBP,KAAKO,cAAL,CAAoBD,KAJtB;AAKdE,kBAAYR,KAAKE,MAAL,CAAYM;AALV,KAAhB;;AAQA,QAAIR,KAAKK,SAAL,CAAeC,KAAf,KAAyB,qBAAUG,QAAV,CAAmBH,KAAhD,EAAuD;AACrDL,cAAQS,QAAR,GAAmBV,KAAKU,QAAL,CAAcJ,KAAjC;AACAL,cAAQU,SAAR,GAAoBX,KAAKY,SAAL,CAAeN,KAAnC;AACAL,cAAQK,KAAR,GAAgBN,KAAKa,eAArB;AACD;;AAED,WAAO;AACLC,sBAAgB;AACdJ,kBAAU,oBAASK,MADL;AAEdT,eAAOU,KAAKC,SAAL,CAAehB,OAAf;AAFO;AADX,KAAP;AAMD;;AAED;;;;;AAKAiB,sBAAoBlB,IAApB,EAA0B;AACxB,WAAQ,uBAAsBA,KAAKE,MAAL,CAAYI,KAAM,EAAhD;AACD;;AAED;;;;;;AAMAa,wBAAsBnB,IAAtB,EAA4BoB,OAA5B,EAAqCC,QAArC,EAA+C;AAC7C,QAAID,QAAQ,CAAR,EAAWd,KAAX,KAAqB,uBAAYgB,IAArC,EAA2C;AACzCD,eAAS,IAAIE,KAAJ,CAAUH,QAAQ,CAAR,EAAWd,KAArB,CAAT;AACD,KAFD,MAEO;AACL,YAAM,CAAC,EAAEA,OAAOkB,WAAT,EAAD,EAAyB,EAAElB,OAAOmB,YAAT,EAAzB,IAAoDL,QAAQ,CAAR,EAAWd,KAArE;;AAEA,UAAImB,YAAJ,EAAkB;AAChB,0BAAOC,IAAP,CAAY,wBAAZ,EAAsC1B,KAAKE,MAAL,CAAYyB,QAAZ,EAAtC;AACD,OAFD,MAEO,IAAIH,WAAJ,EAAiB;AACtB,0BAAOI,KAAP,CAAa,cAAb,EAA6B5B,KAAKE,MAAL,CAAYyB,QAAZ,EAA7B;AACD,OAFM,MAEA;AACL,0BAAOC,KAAP,CAAa,MAAb,EAAqB5B,KAAKE,MAAL,CAAYyB,QAAZ,EAArB,EAA6C,gBAA7C;AACD;;AAEDN,eAAS,IAAT;AACD;AACF;;AAxE4D;kBAA1C1B,gB","file":"CreateNodeStream.js","sourcesContent":["import { StatusCodes, DataType, NodeClass } from 'node-opcua';\nimport Logger from 'gulplog';\nimport NodeId from '../model/opcua/NodeId';\nimport CallScriptStream from './scripts/CallScriptStream';\n\n/**\n * A stream that creates OPC-UA nodes for the passed {@link AtviseFiles}s.\n */\nexport default class CreateNodeStream extends CallScriptStream {\n\n  /**\n   * Id of the *CreateNode* script added with `atscm import`.\n   * @type {NodeId}\n   */\n  get scriptId() {\n    return new NodeId(NodeId.NodeIdType.STRING,\n      'SYSTEM.LIBRARY.ATVISE.SERVERSCRIPTS.atscm.CreateNode',\n      1\n    );\n  }\n\n  /**\n   * The options required to create a node for the given file.\n   * @param {AtviseFile} file The processed file.\n   * @return {Object} The options passed to the *CreateNode* script.\n   */\n  scriptParameters(file) {\n    const options = {\n      nodeId: file.nodeId,\n      parentNodeId: file.nodeId.parent,\n      nodeClass: file.nodeClass.value,\n      typeDefinition: file.typeDefinition.value,\n      browseName: file.nodeId.browseName,\n    };\n\n    if (file.nodeClass.value === NodeClass.Variable.value) {\n      options.dataType = file.dataType.value;\n      options.valueRank = file.arrayType.value;\n      options.value = file.createNodeValue;\n    }\n\n    return {\n      paramObjString: {\n        dataType: DataType.String,\n        value: JSON.stringify(options),\n      },\n    };\n  }\n\n  /**\n   * Prints an error message telling that creating a node failed.\n   * @param {AtviseFile} file The file who's node could not be created.\n   * @return {string} The resulting error message.\n  */\n  processErrorMessage(file) {\n    return `Error creating node ${file.nodeId.value}`;\n  }\n\n  /**\n   * Handles the results of a script call.\n   * @param {AtviseFile} file The file the script was called with.\n   * @param {node-opcua~Variant[]} outArgs The raw method results.\n   * @param {function(err: Error)} callback Called once finished.\n   */\n  handleOutputArguments(file, outArgs, callback) {\n    if (outArgs[0].value !== StatusCodes.Good) {\n      callback(new Error(outArgs[1].value));\n    } else {\n      const [{ value: createdNode }, { value: createFailed }] = outArgs[3].value;\n\n      if (createFailed) {\n        Logger.warn('Failed to created node', file.nodeId.toString());\n      } else if (createdNode) {\n        Logger.debug('Created node', file.nodeId.toString());\n      } else {\n        Logger.debug('Node', file.nodeId.toString(), 'already exists');\n      }\n\n      callback(null);\n    }\n  }\n\n}\n"]}