{"version":3,"sources":["../../../src/lib/server/WriteStream.js"],"names":["WriteStream","processErrorMessage","file","nodeId","toString","processChunk","handleErrors","session","writeSingleNode","dataType","arrayType","value","err","statusCode","BadUserAccessDenied","warn","Good","done","push","e"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA;;;AAGe,MAAMA,WAAN,+BAAsC;;AAEnD;;;;;AAKAC,sBAAoBC,IAApB,EAA0B;AACxB,WAAQ,iBAAgBA,KAAKC,MAAL,CAAYC,QAAZ,EAAuB,EAA/C;AACD;;AAED;;;;;;AAMAC,eAAaH,IAAb,EAAmBI,YAAnB,EAAiC;AAC/B,QAAI;AACF,WAAKC,OAAL,CAAaC,eAAb,CAA6BN,KAAKC,MAAL,CAAYC,QAAZ,EAA7B,EAAqD;AACnDK,kBAAUP,KAAKO,QADoC;AAEnDC,mBAAWR,KAAKQ,SAFmC;AAGnDC,eAAOT,KAAKS;AAHuC,OAArD,EAIG,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACtB,YAAIA,eAAe,uBAAYC,mBAA/B,EAAoD;AAClD,4BAAOC,IAAP,CAAa,sBACXb,KAAKC,MAAL,CAAYC,QAAZ,EACD,gDAFD;AAGAE,uBAAaM,GAAb,EAAkB,uBAAYI,IAA9B,EAAoCC,QAAQA,MAA5C;AACD,SALD,MAKO;AACLX,uBAAaM,GAAb,EAAkBC,UAAlB,EAA8BI,QAAQ;AACpC,iBAAKC,IAAL,CAAUhB,IAAV;AACAe;AACD,WAHD;AAID;AACF,OAhBD;AAiBD,KAlBD,CAkBE,OAAOE,CAAP,EAAU;AACVb,mBAAaa,CAAb;AACD;AACF;;AAvCkD;kBAAhCnB,W","file":"WriteStream.js","sourcesContent":["import Logger from 'gulplog';\nimport { StatusCodes } from 'node-opcua';\nimport QueueStream from './QueueStream';\n\n/**\n * A stream that writes all read {@link AtviseFile}s to their corresponding nodes on atvise server.\n */\nexport default class WriteStream extends QueueStream {\n\n  /**\n   * The error message to use when writing a file fails.\n   * @param {AtviseFile} file The file being processed.\n   * @return {String} The error message to use.\n   */\n  processErrorMessage(file) {\n    return `Error writing ${file.nodeId.toString()}`;\n  }\n\n  /**\n   * Writes an {@link AtviseFile} to it's corresponding node on atvise server.\n   * @param {AtviseFile} file The file to write.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk(file, handleErrors) {\n    try {\n      this.session.writeSingleNode(file.nodeId.toString(), {\n        dataType: file.dataType,\n        arrayType: file.arrayType,\n        value: file.value,\n      }, (err, statusCode) => {\n        if (statusCode === StatusCodes.BadUserAccessDenied) {\n          Logger.warn(`Error writing node ${\n            file.nodeId.toString()\n          }: Make sure it is not opened in atvise builder`);\n          handleErrors(err, StatusCodes.Good, done => done());\n        } else {\n          handleErrors(err, statusCode, done => {\n            this.push(file);\n            done();\n          });\n        }\n      });\n    } catch (e) {\n      handleErrors(e);\n    }\n  }\n\n}\n"]}