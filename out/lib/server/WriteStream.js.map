{"version":3,"sources":["../../../src/lib/server/WriteStream.js"],"names":["WriteStream","constructor","createStream","addReferencesStream","options","_createCallbacks","on","nodeId","key","toString","_addReferencesStream","processErrorMessage","file","_createNode","handleErrors","err","Good","done","push","dependenciesFor","processChunk","nodeClass","value","Variable","session","writeSingleNode","variantValue","statusCode","BadUserAccessDenied","BadNotWritable","warn","BadNodeIdUnknown","debug","e"],"mappings":";;;;;;AAGA;;;;AACA;;AACA;;AACA;;;;;;AAEA;;AAEA;;;;;;AAVA;AACA;;AAee,MAAMA,WAAN,iCAAwC;;AAErD;;;;;;;AAOAC,cAAYC,YAAZ,EAA0BC,mBAA1B,EAA+CC,OAA/C,EAAwD;AACtD,UAAMA,OAAN;;AAEA;;;;AAIA,SAAKC,gBAAL,GAAwB,EAAxB;;AAEAH,iBAAaI,EAAb,CAAgB,iBAAhB,EAAmC,CAAC,EAAEC,MAAF,EAAD,KAAgB;AACjD,YAAMC,MAAMD,OAAOE,QAAP,EAAZ;;AAEA,UAAI,KAAKJ,gBAAL,CAAsBG,GAAtB,CAAJ,EAAgC;AAC9B,aAAKH,gBAAL,CAAsBG,GAAtB,EAA2B,IAA3B;AACD;AACF,KAND;;AAQA;;;;AAIA,SAAKE,oBAAL,GAA4BP,mBAA5B;AACD;;AAED;;;;;AAKAQ,sBAAoBC,IAApB,EAA0B;AACxB,WAAQ,iBAAgBA,KAAKL,MAAO,EAApC;AACD;;AAED;;;;;;AAMAM,cAAYD,IAAZ,EAAkBE,YAAlB,EAAgC;AAC9B,SAAKT,gBAAL,CAAsBO,KAAKL,MAAL,CAAYE,QAAZ,EAAtB,IAAgDM,OAAO;AACrDD,mBAAaC,GAAb,EAAkB,+BAAYC,IAA9B,EAAoCC,QAAQA,MAA5C;AACD,KAFD;;AAIA,SAAKC,IAAL,CAAUN,IAAV;AACD;;AAED;;;;;AAKAO,oBAAkB;AAChB,WAAO,EAAP;AACD;;AAED;;;;;;AAMAC,eAAaR,IAAb,EAAmBE,YAAnB,EAAiC;AAC/B,QAAIF,KAAKS,SAAL,CAAeC,KAAf,KAAyB,qBAAUC,QAAV,CAAmBD,KAAhD,EAAuD;AAAE;AACvD,WAAKT,WAAL,CAAiBD,IAAjB,EAAuBE,YAAvB;AACA;AACD;;AAED,QAAI;AACF,WAAKU,OAAL,CAAaC,eAAb,CAA8B,UAASb,KAAKL,MAAO,EAAnD,EAAsDK,KAAKc,YAA3D,EACE,CAACX,GAAD,EAAMY,UAAN,KAAqB;AACnB,YACGA,eAAe,+BAAYC,mBAA5B,IACCD,eAAe,+BAAYE,cAF9B,EAGE;AACA,4BAAOC,IAAP,CAAa,sBACXlB,KAAKL,MACN;;wDAFD;AAKAO,uBAAaC,GAAb,EAAkB,+BAAYC,IAA9B,EAAoCC,QAAQA,MAA5C;AACD,SAVD,MAUO,IAAIU,eAAe,+BAAYI,gBAA/B,EAAiD;AACtD,4BAAOC,KAAP,CAAc,QACZpB,KAAKL,MACN,6CAFD;;AAIA,eAAKM,WAAL,CAAiBD,IAAjB,EAAuBE,YAAvB;AACD,SANM,MAMA;AACLA,uBAAaC,GAAb,EAAkBY,UAAlB,EAA8BV,QAAQ;AACpC;AACA,iBAAKP,oBAAL,CAA0BQ,IAA1B,CAA+BN,IAA/B;;AAEAK;AACD,WALD;AAMD;AACF,OA1BH;AA2BD,KA5BD,CA4BE,OAAOgB,CAAP,EAAU;AACVnB,mBAAamB,CAAb;AACD;AACF;;AA5GoD;kBAAlCjC,W","file":"WriteStream.js","sourcesContent":["/* Needed as long as https://github.com/gajus/eslint-plugin-jsdoc/issues/56 is open */\n/* eslint-disable jsdoc/check-param-names */\n\nimport Logger from 'gulplog';\nimport { StatusCodes } from 'node-opcua/lib/datamodel/opcua_status_code';\nimport { NodeClass } from 'node-opcua/lib/datamodel/nodeclass';\nimport WaitingStream from './WaitingStream';\n\n// FIXME: Extend QueueStream directly\n\n/**\n * A stream that writes all read {@link AtviseFile}s to their corresponding nodes on atvise server.\n * The underlying {@link TreeStream} ensures the nodes are processed in an order that respects the\n * parent-child relations between nodes. Nodes are created (if needed) before their children are\n * processed.\n */\nexport default class WriteStream extends WaitingStream {\n\n  /**\n   * Creates a new write stream with the given {@link CreateNodeStream} and\n   * {@link AddReferencesStream}. Implementer have to ensure this create stream is actually piped.\n   * @param {CreateNodeStream} createStream The stream that handles node creations.\n   * @param {AddReferencesStream} addReferencesStream The stream that adds missing node references.\n   * @param {Object} options The options passed to the underlying {@link TreeStream}.\n   */\n  constructor(createStream, addReferencesStream, options) {\n    super(options);\n\n    /**\n     * If a node has to be created first, it's callback is added to this map.\n     * @type {Map<String, function(err: Error)}\n     */\n    this._createCallbacks = {};\n\n    createStream.on('processed-chunk', ({ nodeId }) => {\n      const key = nodeId.toString();\n\n      if (this._createCallbacks[key]) {\n        this._createCallbacks[key](null);\n      }\n    });\n\n    /**\n     * The stream responsible for adding additional references.\n     * @type {AddReferencesStream}\n     */\n    this._addReferencesStream = addReferencesStream;\n  }\n\n  /**\n   * The error message to use when writing a file fails.\n   * @param {AtviseFile} file The file being processed.\n   * @return {string} The error message to use.\n   */\n  processErrorMessage(file) {\n    return `Error writing ${file.nodeId}`;\n  }\n\n  /**\n   * Pushes a node to the piped create stream and waits for the node to be created.\n   * @param {AtviseFile} file The file create the node for.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  _createNode(file, handleErrors) {\n    this._createCallbacks[file.nodeId.toString()] = err => {\n      handleErrors(err, StatusCodes.Good, done => done());\n    };\n\n    this.push(file);\n  }\n\n  /**\n   * Returns a files parent node and type definition.\n   * @param {AtviseFile} file The file to check.\n   * @return {NodeId[]} The files dependencies.\n   */\n  dependenciesFor() {\n    return [];\n  }\n\n  /**\n   * Writes an {@link AtviseFile} to it's corresponding node on atvise server.\n   * @param {AtviseFile} file The file to write.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk(file, handleErrors) {\n    if (file.nodeClass.value !== NodeClass.Variable.value) { // Non-variable nodes are just pushed\n      this._createNode(file, handleErrors);\n      return;\n    }\n\n    try {\n      this.session.writeSingleNode(`ns=1;s=${file.nodeId}`, file.variantValue,\n        (err, statusCode) => {\n          if (\n            (statusCode === StatusCodes.BadUserAccessDenied) ||\n            (statusCode === StatusCodes.BadNotWritable)\n          ) {\n            Logger.warn(`Error writing node ${\n              file.nodeId\n            }\n  - Make sure it is not opened in atvise builder\n  - Make sure the corresponding datasource is connected`);\n            handleErrors(err, StatusCodes.Good, done => done());\n          } else if (statusCode === StatusCodes.BadNodeIdUnknown) {\n            Logger.debug(`Node ${\n              file.nodeId\n            } does not exist: Attempting to create it...`);\n\n            this._createNode(file, handleErrors);\n          } else {\n            handleErrors(err, statusCode, done => {\n              // Push to add references stream\n              this._addReferencesStream.push(file);\n\n              done();\n            });\n          }\n        });\n    } catch (e) {\n      handleErrors(e);\n    }\n  }\n\n}\n"]}