{"version":3,"sources":["../../../src/lib/server/WriteStream.js"],"names":["WriteStream","processErrorMessage","file","nodeId","value","processChunk","handleErrors","nodeClass","Variable","push","Good","done","session","writeSingleNode","toString","dataType","arrayType","err","statusCode","BadUserAccessDenied","BadNotWritable","warn","BadNodeIdUnknown","debug","e"],"mappings":";;;;;;AAGA;;;;AACA;;AACA;;;;;;AAEA;;;AAGe,MAAMA,WAAN,+BAAsC;;AAEnD;;;;;AAKAC,sBAAoBC,IAApB,EAA0B;AACxB,WAAQ,iBAAgBA,KAAKC,MAAL,CAAYC,KAAM,EAA1C;AACD;;AAED;;;;;;AAMAC,eAAaH,IAAb,EAAmBI,YAAnB,EAAiC;AAC/B,QAAIJ,KAAKK,SAAL,CAAeH,KAAf,KAAyB,qBAAUI,QAAV,CAAmBJ,KAAhD,EAAuD;AAAE;AACvD,WAAKK,IAAL,CAAUP,IAAV;AACAI,mBAAa,IAAb,EAAmB,uBAAYI,IAA/B,EAAqCC,QAAQA,MAA7C;AACA;AACD;;AAED,QAAI;AACF,WAAKC,OAAL,CAAaC,eAAb,CAA6BX,KAAKC,MAAL,CAAYW,QAAZ,EAA7B,EAAqD;AACnDC,kBAAUb,KAAKa,QADoC;AAEnDC,mBAAWd,KAAKc,SAFmC;AAGnDZ,eAAOF,KAAKE;AAHuC,OAArD,EAIG,CAACa,GAAD,EAAMC,UAAN,KAAqB;AACtB,YACGA,eAAe,uBAAYC,mBAA5B,IACCD,eAAe,uBAAYE,cAF9B,EAGE;AACA,4BAAOC,IAAP,CAAa,sBACXnB,KAAKC,MAAL,CAAYC,KACb;;sDAFD;AAKAE,uBAAaW,GAAb,EAAkB,uBAAYP,IAA9B,EAAoCC,QAAQA,MAA5C;AACD,SAVD,MAUO,IAAIO,eAAe,uBAAYI,gBAA/B,EAAiD;AACtD,4BAAOC,KAAP,CAAc,QACZrB,KAAKC,MAAL,CAAYC,KACb,6CAFD;;AAIAE,uBAAaW,GAAb,EAAkB,uBAAYP,IAA9B,EAAoCC,QAAQ;AAC1C,iBAAKF,IAAL,CAAUP,IAAV;AACAS;AACD,WAHD;AAID,SATM,MASA;AACLL,uBAAaW,GAAb,EAAkBC,UAAlB,EAA8BP,QAAQA,MAAtC;AACD;AACF,OA3BD;AA4BD,KA7BD,CA6BE,OAAOa,CAAP,EAAU;AACVlB,mBAAakB,CAAb;AACD;AACF;;AAxDkD;kBAAhCxB,W,EAVrB;AACA","file":"WriteStream.js","sourcesContent":["/* Needed as long as https://github.com/gajus/eslint-plugin-jsdoc/issues/56 is open */\n/* eslint-disable jsdoc/check-param-names */\n\nimport Logger from 'gulplog';\nimport { StatusCodes, NodeClass } from 'node-opcua';\nimport QueueStream from './QueueStream';\n\n/**\n * A stream that writes all read {@link AtviseFile}s to their corresponding nodes on atvise server.\n */\nexport default class WriteStream extends QueueStream {\n\n  /**\n   * The error message to use when writing a file fails.\n   * @param {AtviseFile} file The file being processed.\n   * @return {string} The error message to use.\n   */\n  processErrorMessage(file) {\n    return `Error writing ${file.nodeId.value}`;\n  }\n\n  /**\n   * Writes an {@link AtviseFile} to it's corresponding node on atvise server.\n   * @param {AtviseFile} file The file to write.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk(file, handleErrors) {\n    if (file.nodeClass.value !== NodeClass.Variable.value) { // Non-variable nodes are just pushed\n      this.push(file);\n      handleErrors(null, StatusCodes.Good, done => done());\n      return;\n    }\n\n    try {\n      this.session.writeSingleNode(file.nodeId.toString(), {\n        dataType: file.dataType,\n        arrayType: file.arrayType,\n        value: file.value,\n      }, (err, statusCode) => {\n        if (\n          (statusCode === StatusCodes.BadUserAccessDenied) ||\n          (statusCode === StatusCodes.BadNotWritable)\n        ) {\n          Logger.warn(`Error writing node ${\n            file.nodeId.value\n          }\n- Make sure it is not opened in atvise builder\n- Make sure the corresponding datasource is connected`);\n          handleErrors(err, StatusCodes.Good, done => done());\n        } else if (statusCode === StatusCodes.BadNodeIdUnknown) {\n          Logger.debug(`Node ${\n            file.nodeId.value\n          } does not exist: Attempting to create it...`);\n\n          handleErrors(err, StatusCodes.Good, done => {\n            this.push(file);\n            done();\n          });\n        } else {\n          handleErrors(err, statusCode, done => done());\n        }\n      });\n    } catch (e) {\n      handleErrors(e);\n    }\n  }\n\n}\n"]}