{"version":3,"sources":["../../../src/lib/server/WriteStream.js"],"names":["WriteStream","constructor","createStream","addReferencesStream","options","_createCallbacks","on","nodeId","key","toString","_addReferencesStream","processErrorMessage","file","value","_createNode","handleErrors","err","Good","done","push","dependenciesFor","parent","typeDefinition","processChunk","nodeClass","Variable","session","writeSingleNode","dataType","arrayType","statusCode","BadUserAccessDenied","BadNotWritable","warn","BadNodeIdUnknown","debug","e"],"mappings":";;;;;;AAGA;;;;AACA;;AACA;;;;;;AAEA;;;;;;AAMe,MAAMA,WAAN,iCAAwC;;AAErD;;;;;;;AAOAC,cAAYC,YAAZ,EAA0BC,mBAA1B,EAA+CC,OAA/C,EAAwD;AACtD,UAAMA,OAAN;;AAEA;;;;AAIA,SAAKC,gBAAL,GAAwB,EAAxB;;AAEAH,iBAAaI,EAAb,CAAgB,iBAAhB,EAAmC,CAAC,EAAEC,MAAF,EAAD,KAAgB;AACjD,YAAMC,MAAMD,OAAOE,QAAP,EAAZ;;AAEA,UAAI,KAAKJ,gBAAL,CAAsBG,GAAtB,CAAJ,EAAgC;AAC9B,aAAKH,gBAAL,CAAsBG,GAAtB,EAA2B,IAA3B;AACD;AACF,KAND;;AAQA;;;;AAIA,SAAKE,oBAAL,GAA4BP,mBAA5B;AACD;;AAED;;;;;AAKAQ,sBAAoBC,IAApB,EAA0B;AACxB,WAAQ,iBAAgBA,KAAKL,MAAL,CAAYM,KAAM,EAA1C;AACD;;AAED;;;;;;AAMAC,cAAYF,IAAZ,EAAkBG,YAAlB,EAAgC;AAC9B,SAAKV,gBAAL,CAAsBO,KAAKL,MAAL,CAAYE,QAAZ,EAAtB,IAAgDO,OAAO;AACrDD,mBAAaC,GAAb,EAAkB,uBAAYC,IAA9B,EAAoCC,QAAQA,MAA5C;AACD,KAFD;;AAIA,SAAKC,IAAL,CAAUP,IAAV;AACD;;AAED;;;;;AAKAQ,kBAAgBR,IAAhB,EAAsB;AACpB,WAAO,CACLA,KAAKL,MAAL,CAAYc,MADP,EAELT,KAAKU,cAFA,CAAP;AAID;;AAED;;;;;;AAMAC,eAAaX,IAAb,EAAmBG,YAAnB,EAAiC;AAC/B,QAAIH,KAAKY,SAAL,CAAeX,KAAf,KAAyB,qBAAUY,QAAV,CAAmBZ,KAAhD,EAAuD;AAAE;AACvD,WAAKC,WAAL,CAAiBF,IAAjB,EAAuBG,YAAvB;AACA;AACD;;AAED,QAAI;AACF,WAAKW,OAAL,CAAaC,eAAb,CAA6Bf,KAAKL,MAAL,CAAYE,QAAZ,EAA7B,EAAqD;AACnDmB,kBAAUhB,KAAKgB,QADoC;AAEnDC,mBAAWjB,KAAKiB,SAFmC;AAGnDhB,eAAOD,KAAKC;AAHuC,OAArD,EAIG,CAACG,GAAD,EAAMc,UAAN,KAAqB;AACtB,YACGA,eAAe,uBAAYC,mBAA5B,IACCD,eAAe,uBAAYE,cAF9B,EAGE;AACA,4BAAOC,IAAP,CAAa,sBACXrB,KAAKL,MAAL,CAAYM,KACb;;sDAFD;AAKAE,uBAAaC,GAAb,EAAkB,uBAAYC,IAA9B,EAAoCC,QAAQA,MAA5C;AACD,SAVD,MAUO,IAAIY,eAAe,uBAAYI,gBAA/B,EAAiD;AACtD,4BAAOC,KAAP,CAAc,QACZvB,KAAKL,MAAL,CAAYM,KACb,6CAFD;;AAIA,eAAKC,WAAL,CAAiBF,IAAjB,EAAuBG,YAAvB;AACD,SANM,MAMA;AACLA,uBAAaC,GAAb,EAAkBc,UAAlB,EAA8BZ,QAAQ;AACpC;AACA,iBAAKR,oBAAL,CAA0BS,IAA1B,CAA+BP,IAA/B;;AAEAM;AACD,WALD;AAMD;AACF,OA7BD;AA8BD,KA/BD,CA+BE,OAAOkB,CAAP,EAAU;AACVrB,mBAAaqB,CAAb;AACD;AACF;;AAlHoD;kBAAlCpC,W,EAbrB;AACA","file":"WriteStream.js","sourcesContent":["/* Needed as long as https://github.com/gajus/eslint-plugin-jsdoc/issues/56 is open */\n/* eslint-disable jsdoc/check-param-names */\n\nimport Logger from 'gulplog';\nimport { StatusCodes, NodeClass } from 'node-opcua';\nimport WaitingStream from './WaitingStream';\n\n/**\n * A stream that writes all read {@link AtviseFile}s to their corresponding nodes on atvise server.\n * The underlying {@link TreeStream} ensures the nodes are processed in an order that respects the\n * parent-child relations between nodes. Nodes are created (if needed) before their children are\n * processed.\n */\nexport default class WriteStream extends WaitingStream {\n\n  /**\n   * Creates a new write stream with the given {@link CreateNodeStream} and\n   * {@link AddReferencesStream}. Implementer have to ensure this create stream is actually piped.\n   * @param {CreateNodeStream} createStream The stream that handles node creations.\n   * @param {AddReferencesStream} addReferencesStream The stream that adds missing node references.\n   * @param {Object} options The options passed to the underlying {@link TreeStream}.\n   */\n  constructor(createStream, addReferencesStream, options) {\n    super(options);\n\n    /**\n     * If a node has to be created first, it's callback is added to this map.\n     * @type {Map<String, function(err: Error)}\n     */\n    this._createCallbacks = {};\n\n    createStream.on('processed-chunk', ({ nodeId }) => {\n      const key = nodeId.toString();\n\n      if (this._createCallbacks[key]) {\n        this._createCallbacks[key](null);\n      }\n    });\n\n    /**\n     * The stream responsible for adding additional references.\n     * @type {AddReferencesStream}\n     */\n    this._addReferencesStream = addReferencesStream;\n  }\n\n  /**\n   * The error message to use when writing a file fails.\n   * @param {AtviseFile} file The file being processed.\n   * @return {string} The error message to use.\n   */\n  processErrorMessage(file) {\n    return `Error writing ${file.nodeId.value}`;\n  }\n\n  /**\n   * Pushes a node to the piped create stream and waits for the node to be created.\n   * @param {AtviseFile} file The file create the node for.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  _createNode(file, handleErrors) {\n    this._createCallbacks[file.nodeId.toString()] = err => {\n      handleErrors(err, StatusCodes.Good, done => done());\n    };\n\n    this.push(file);\n  }\n\n  /**\n   * Returns a files parent node and type definition.\n   * @param {AtviseFile} file The file to check.\n   * @return {NodeId[]} The files dependencies.\n   */\n  dependenciesFor(file) {\n    return [\n      file.nodeId.parent,\n      file.typeDefinition,\n    ];\n  }\n\n  /**\n   * Writes an {@link AtviseFile} to it's corresponding node on atvise server.\n   * @param {AtviseFile} file The file to write.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk(file, handleErrors) {\n    if (file.nodeClass.value !== NodeClass.Variable.value) { // Non-variable nodes are just pushed\n      this._createNode(file, handleErrors);\n      return;\n    }\n\n    try {\n      this.session.writeSingleNode(file.nodeId.toString(), {\n        dataType: file.dataType,\n        arrayType: file.arrayType,\n        value: file.value,\n      }, (err, statusCode) => {\n        if (\n          (statusCode === StatusCodes.BadUserAccessDenied) ||\n          (statusCode === StatusCodes.BadNotWritable)\n        ) {\n          Logger.warn(`Error writing node ${\n            file.nodeId.value\n          }\n- Make sure it is not opened in atvise builder\n- Make sure the corresponding datasource is connected`);\n          handleErrors(err, StatusCodes.Good, done => done());\n        } else if (statusCode === StatusCodes.BadNodeIdUnknown) {\n          Logger.debug(`Node ${\n            file.nodeId.value\n          } does not exist: Attempting to create it...`);\n\n          this._createNode(file, handleErrors);\n        } else {\n          handleErrors(err, statusCode, done => {\n            // Push to add references stream\n            this._addReferencesStream.push(file);\n\n            done();\n          });\n        }\n      });\n    } catch (e) {\n      handleErrors(e);\n    }\n  }\n\n}\n"]}