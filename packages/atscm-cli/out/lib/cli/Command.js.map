{"version":3,"sources":["../../../src/lib/cli/Command.js"],"names":["Command","constructor","name","description","options","minArguments","maxArguments","undefined","Error","_options","run","cli","requiresEnvironment","usage","arguments","demandCommand","ret","push"],"mappings":";;;;;AAAA;;;;AAIe,MAAMA,OAAN,CAAc;;AAE3B;;;;;;;;;;;;;;;AAeAC,cAAYC,IAAZ,EAAkBC,WAAlB,EAA+BC,UAAU,EAAzC,EAA6C;AAC3C;;;;AAIA,SAAKF,IAAL,GAAYA,IAAZ;;AAEA;;;;AAIA,SAAKC,WAAL,GAAmBA,WAAnB;;AAEA,QAAIC,QAAQC,YAAR,IAAwBD,QAAQE,YAAR,KAAyBC,SAAjD,IACCH,QAAQE,YAAR,GAAuBF,QAAQC,YADpC,EACkD;AAChD,YAAM,IAAIG,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAED;;;;;AAKA,SAAKC,QAAL,GAAgBL,OAAhB;AACD;;AAED;;;;;AAKAM,MAAIC,GAAJ,EAAS;AAAE;AACT,UAAM,IAAIH,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED;;;;;AAKAI,sBAAoBD,GAApB,EAAyB;AAAE;AACzB,WAAO,IAAP;AACD;;AAED;;;;AAIA,MAAIE,KAAJ,GAAY;AACV,QAAI,KAAKJ,QAAL,CAAcK,SAAlB,EAA6B;AAC3B,aAAQ,GAAE,KAAKZ,IAAK,IAAG,KAAKO,QAAL,CAAcK,SAAU,EAA/C;AACD;;AAED,WAAO,KAAKZ,IAAZ;AACD;;AAED;;;;AAIA,MAAIE,OAAJ,GAAc;AACZ,WAAO,KAAKK,QAAL,CAAcL,OAAd,IAAyB,EAAhC;AACD;;AAED;;;;AAIA,MAAIW,aAAJ,GAAoB;AAClB,UAAMC,MAAM,CAAC,KAAKP,QAAL,CAAcJ,YAAd,IAA8B,CAA/B,CAAZ;;AAEA,QAAI,KAAKI,QAAL,CAAcH,YAAd,KAA+BC,SAAnC,EAA8C;AAC5CS,UAAIC,IAAJ,CAAS,KAAKR,QAAL,CAAcH,YAAvB;AACD;;AAED,WAAOU,GAAP;AACD;;AA7F0B;kBAARhB,O","file":"Command.js","sourcesContent":["/**\n * A command that can be run through the CLI.\n * @abstract\n */\nexport default class Command {\n\n  /**\n   * Creates a new Command with the given name and options.\n   * @param {String} name The command's name.\n   * @param {String} description The command's description.\n   * @param {Object} options The options to apply.\n   * @param {Map<String, Option>} options.options The options available for this command.\n   * @param {String} [options.arguments] The command's argument string. See\n   * [yargs' documentation](http://yargs.js.org/docs/#methods-commandmodule-positional-arguments)\n   * for details.\n   * @param {Number} [options.minArguments] The minimum number or (non-option) arguments the command\n   * requires.\n   * @param {Number} [options.maxArguments] The maximum number or (non-option) arguments the command\n   * requires.\n   * @throws {Error} Throws an error if options.maxArguments is less than options.minArguments.\n   */\n  constructor(name, description, options = {}) {\n    /**\n     * The command's name.\n     * @type {String}\n     */\n    this.name = name;\n\n    /**\n     * The command descriptions.\n     * @type {String}\n     */\n    this.description = description;\n\n    if (options.minArguments && options.maxArguments !== undefined\n      && options.maxArguments < options.minArguments) {\n      throw new Error('options.maxArguments must not be less than options.minArguments');\n    }\n\n    /**\n     * The command's raw options.\n     * @type {Object}\n     * @private\n     */\n    this._options = options;\n  }\n\n  /**\n   * Runs the command with the current Cli instance. **Asynchronous commands should return a Promise\n   * here.**\n   * @param {AtSCMCli} cli The current cli instance.\n   */\n  run(cli) { // eslint-disable-line no-unused-vars\n    throw new Error('Must be implemented by all subclasses');\n  }\n\n  /**\n   * Returns `true` if the command requires a {@link Liftoff.Environment} before it can be run.\n   * @param {AtSCMCli} cli The current cli instance.\n   * @return {Boolean} `true` if the command requires a {@link Liftoff.Environment}.\n   */\n  requiresEnvironment(cli) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Returns the usage string for the command. Something like \"{name} {arguments}\".\n   * @type {String}\n   */\n  get usage() {\n    if (this._options.arguments) {\n      return `${this.name} ${this._options.arguments}`;\n    }\n\n    return this.name;\n  }\n\n  /**\n   * The options available for the command.\n   * @type {Map<String, Option>}\n   */\n  get options() {\n    return this._options.options || {};\n  }\n\n  /**\n   * The minimum and maximum number of (non-option) arguments the command handles.\n   * @type {Number[]}\n   */\n  get demandCommand() {\n    const ret = [this._options.minArguments || 0];\n\n    if (this._options.maxArguments !== undefined) {\n      ret.push(this._options.maxArguments);\n    }\n\n    return ret;\n  }\n\n}\n"]}