{"version":3,"sources":["../../../src/lib/util/Logger.js"],"names":["logConsole","process","stdout","stderr","LogFormat","path","magenta","command","bold","value","cyan","number","Logger","colors","format","prefix","pad","val","slice","now","Date","timestamp","getHours","getMinutes","getSeconds","join","gray","debug","message","info","warn","error","types","applyOptions","options","tasksSimple","silent","logLevel","on","_handled","filter","item","i","handle","forEach","level","args","concat","pipeLastLine","stream","loggedBefore","d","lines","toString","split","l","trim","moveCursor","clearLine","length","cursorTo"],"mappings":"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","file":"Logger.js","sourcesContent":["import readline from 'readline';\nimport { Console } from 'console';\nimport gulplog from 'gulplog';\nimport chalk from 'chalk';\nimport tildify from 'tildify';\n\nconst logConsole = new Console(process.stdout, process.stderr);\n\n/**\n * Formats strings to be used in the {@link Logger}.\n */\nexport class LogFormat {\n\n  /**\n   * Formats a string to represent a path.\n   * @param {String} path The path to format.\n   * @return {String} The formatted string.\n   */\n  static path(path) {\n    return chalk.magenta(tildify(path));\n  }\n\n  /**\n   * Formats a string to represent a command.\n   * @param {String} command The command to format.\n   * @return {String} The formatted string.\n   */\n  static command(command) {\n    return chalk.bold(command);\n  }\n\n  /**\n   * Formats a string to represent a value. Use this format for files, module names, etc.\n   * @param {String} value The value to format.\n   * @return {String} The formatted string.\n   */\n  static value(value) {\n    return chalk.cyan(value);\n  }\n\n  /**\n   * Formats a string to represent a number. Use this format for times, counts, etc.\n   * @param {String} number The value to format.\n   * @return {String} The formatted string.\n   */\n  static number(number) {\n    return chalk.magenta(number);\n  }\n\n}\n\n/**\n * A logger used in all console outputs.\n * **Should never be instantiated.**\n * Log levels, `--silent`-flags etc. are handled automatically by {@link gulplog}.\n */\nexport default class Logger {\n\n  /**\n   * An instance of {@link chalk}.\n   * @type {chalk}\n   */\n  static get colors() {\n    return chalk;\n  }\n\n  /**\n   * An instance of {@link LogFormat}.\n   * @type {LogFormat}\n   */\n  static get format() {\n    return LogFormat;\n  }\n\n  /**\n   * The prefix added to each log. Should always equal\n   * [fancy-logs prefix](https://github.com/js-cli/fancy-log/blob/master/index.js#L8).\n   * @type {String}\n   */\n  static get prefix() {\n    function pad(val) {\n      return `00${val}`.slice(-2);\n    }\n\n    const now = new Date();\n    const timestamp = [\n      pad(now.getHours()),\n      pad(now.getMinutes()),\n      pad(now.getSeconds()),\n    ].join(':');\n\n    return `[${chalk.gray(timestamp)}]`;\n  }\n\n  /**\n   * Print debug messages.\n   * @param {...String} message The message(s) to print.\n   */\n  static debug(...message) {\n    gulplog.debug(...message);\n  }\n\n  /**\n   * Print regular logs.\n   * @param {...String} message The message(s) to print.\n   */\n  static info(...message) {\n    gulplog.info(...message);\n  }\n\n  /**\n   * Print warnings.\n   * @param {...String} message The message(s) to print.\n   */\n  static warn(...message) {\n    gulplog.warn(...message);\n  }\n\n  /**\n   * Print error messages.\n   * @param {...String} message The message(s) to print.\n   */\n  static error(...message) {\n    gulplog.error(...message);\n  }\n\n  /**\n   * The log types available.\n   * @type {String[]}\n   */\n  static get types() {\n    return ['error', 'warn', 'info', 'debug'];\n  }\n\n  /**\n   * Apply options to the logger.\n   * **Should only be called once.**\n   * @param {Object} options Options passed to {@link gulplog}.\n   */\n  static applyOptions(options) {\n    if (options.tasksSimple || options.silent || options.logLevel === 0) {\n      gulplog.on('error', () => {});\n      return;\n    }\n\n    /**\n     * The log types handled.\n     * @type {Map<String, Boolean>}\n     */\n    this._handled = {};\n\n    this.types\n      .filter((item, i) => {\n        const handle = (i < options.logLevel);\n\n        this._handled[item] = handle;\n\n        return handle;\n      })\n      .forEach(level => gulplog.on(level, (...args) => {\n        logConsole[level === 'error' ? 'error' : 'info'](...[this.prefix].concat(args));\n      }));\n  }\n\n  /**\n   * Pipes a readable stream and logs the last line of each chunk processed.\n   * @param {node.stream.Readable} stream The stream to pipe.\n   */\n  static pipeLastLine(stream) {\n    let loggedBefore = false;\n\n    stream\n      .on('data', d => {\n        const lines = d.toString().split('\\n').filter(l => l.trim() !== '');\n\n        if (loggedBefore && this._handled.info) {\n          readline.moveCursor(process.stdout, 0, -1);\n          readline.clearLine(process.stdout);\n        }\n\n        Logger.info(lines[lines.length - 1]);\n        loggedBefore = true;\n      })\n      .on('end', () => {\n        if (loggedBefore && this._handled.info) {\n          readline.moveCursor(process.stdout, 0, -1);\n          readline.clearLine(process.stdout);\n          readline.cursorTo(process.stdout, 0);\n        }\n      });\n  }\n\n}\n"]}