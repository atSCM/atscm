{"version":3,"sources":["../../../src/lib/util/ExternalCommand.js"],"names":["ExternalCommand","resolveBin","name","Promise","resolve","reject","err","path","spawn","bin","args","options","stdout","debug","format","command","join","child","once","code","Error","trim","on","d","toString","onspawn","run","then"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA;;;AAGe,MAAMA,eAAN,CAAsB;;AAEnC;;;;;;AAMA,SAAOC,UAAP,CAAkBC,IAAlB,EAAwB;AACtB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,2BAAMH,IAAN,EAAY,CAACI,GAAD,EAAMC,IAAN,KAAe;AACzB,YAAID,GAAJ,EAAS;AACPD,iBAAOC,GAAP;AACD,SAFD,MAEO;AACLF,kBAAQG,IAAR;AACD;AACF,OAND;AAOD,KARM,CAAP;AASD;;AAED;;;;;;;;;;;;;AAaA,SAAOC,KAAP,CAAaC,GAAb,EAAkBC,OAAO,EAAzB,EAA6BC,UAAU,EAAvC,EAA2C;AACzC,WAAO,IAAIR,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAIO,SAAS,EAAb;;AAEA,uBAAOC,KAAP,CAAa,SAAb,EAAwB,iBAAOC,MAAP,CAAcC,OAAd,CAAuB,GAAEN,GAAI,IAAGC,KAAKM,IAAL,CAAU,GAAV,CAAe,EAA/C,CAAxB;AACA,YAAMC,QAAQ,0BAAMR,GAAN,EAAWC,IAAX,EAAiBC,QAAQH,KAAR,IAAiBG,OAAlC,EACXO,IADW,CACN,OADM,EACGZ,OAAOD,OAAOC,GAAP,CADV,EAEXY,IAFW,CAEN,OAFM,EAEGC,QAAQ;AACrB,YAAIA,OAAO,CAAX,EAAc;AACZd,iBAAO,IAAIe,KAAJ,CAAW,GAAEX,GAAI,IAAGC,KAAKM,IAAL,CAAU,GAAV,CAAe,kBAAiBG,IAAK,EAAzD,CAAP;AACD,SAFD,MAEO;AACLf,kBAAQQ,OAAOS,IAAP,EAAR;AACD;AACF,OARW,CAAd;;AAUAJ,YAAML,MAAN,CAAaU,EAAb,CAAgB,MAAhB,EAAwBC,KAAMX,UAAUW,EAAEC,QAAF,EAAxC;;AAEA,UAAIb,QAAQc,OAAZ,EAAqB;AACnBd,gBAAQc,OAAR,CAAgBR,KAAhB;AACD;AACF,KAnBM,CAAP;AAoBD;;AAED;;;;;;;;;;;;;;AAcA,SAAOS,GAAP,CAAWxB,IAAX,EAAiBQ,IAAjB,EAAuBC,OAAvB,EAAgC;AAC9B,WAAO,KAAKV,UAAL,CAAgBC,IAAhB,EACJyB,IADI,CACClB,OAAO,KAAKD,KAAL,CAAWC,GAAX,EAAgBC,IAAhB,EAAsBC,OAAtB,CADR,CAAP;AAED;;AAzEkC;kBAAhBX,e","file":"ExternalCommand.js","sourcesContent":["import { spawn } from 'child_process';\nimport which from 'which';\nimport Logger from './Logger';\n\n/**\n * A static class providing utilities to run external commands.\n */\nexport default class ExternalCommand {\n\n  /**\n   * Resolves the executable path for the given command.\n   * @param {string} name The command to resolve.\n   * @return {Promise<string, Error>} Fulfilled with the executable path or the error that occured\n   * while running `which`.\n   */\n  static resolveBin(name) {\n    return new Promise((resolve, reject) => {\n      which(name, (err, path) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(path);\n        }\n      });\n    });\n  }\n\n  /**\n   * Spawns an executable with the given args and options. See the [node.js docs on the\n   * `child_process` module](https://nodejs.org/api/child_process.html#child_process_child_process)\n   * for all available spawn options.\n   * @param {string} bin Path to the executable to run.\n   * @param {string[]} [args=[]] The arguments to use.\n   * @param {Object} [options] The options to use.\n   * @param {Object} [options.spawn] Options to use for the spawned process.\n   * @param {function(process: node.ChildProcess)} [options.onspawn] Callback to call once the\n   * process was created. Useful for handling stdio events etc.\n   * @return {Promise<string, Error>} Fulfilled with the child process' stdout or rejected with a\n   * spawn error or non-zero exit code.\n   */\n  static spawn(bin, args = [], options = {}) {\n    return new Promise((resolve, reject) => {\n      let stdout = '';\n\n      Logger.debug('Running', Logger.format.command(`${bin} ${args.join(' ')}`));\n      const child = spawn(bin, args, options.spawn || options)\n        .once('error', err => reject(err))\n        .once('close', code => {\n          if (code > 0) {\n            reject(new Error(`${bin} ${args.join(' ')} returned code ${code}`));\n          } else {\n            resolve(stdout.trim());\n          }\n        });\n\n      child.stdout.on('data', d => (stdout += d.toString()));\n\n      if (options.onspawn) {\n        options.onspawn(child);\n      }\n    });\n  }\n\n  /**\n   * Resolves the executable for the given command and runs it with the arguments and options given.\n   * See the [node.js docs on the\n   * `child_process` module](https://nodejs.org/api/child_process.html#child_process_child_process)\n   * for all available spawn options.\n   * @param {string} name The command to run.\n   * @param {string[]} [args] The arguments to use.\n   * @param {Object} [options] The options to use.\n   * @param {Object} [options.spawn] Options to use for the spawned process.\n   * @param {function(process: node.ChildProcess)} [options.onspawn] Callback to call once the\n   * process was created. Useful for handling stdio events etc.\n   * @return {Promise<string, Error>} Fulfilled with the child process' stdout or rejected with a\n   * spawn error, a non-zero exit code or an error that occured while running `which`.\n   */\n  static run(name, args, options) {\n    return this.resolveBin(name)\n      .then(bin => this.spawn(bin, args, options));\n  }\n\n}\n"]}