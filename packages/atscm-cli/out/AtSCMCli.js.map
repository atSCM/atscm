{"version":3,"sources":["../src/AtSCMCli.js"],"names":["AtSCMCli","BinName","Object","keys","bin","ConfigName","_reportCliError","err","error","colors","red","message","info","help","debug","stack","process","exitCode","constructor","argv","name","configName","extensions","on","magenta","runViaCli","require","resolve","_argv","commandNames","map","c","options","env","option","fail","msg","e","y","version","_","filter","includes","length","unshift","applyOptions","globalOptionNames","argumentsParser","reduce","parser","command","usage","description","group","strict","desc","demandCommand","global","alias","_exposeOverride","config","key","base","currentKey","toUpperCase","forEach","k","format","value","parseArguments","Promise","reject","parse","project","getEnvironment","findUp","launch","cwd","configPath","projectfile","environment","requireEnvironment","then","modulePath","Error","getVersion","cli","local","modulePackage","printVersion","number","runCommand","requiresEnvironment","run","warn","app","catch"],"mappings":"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","file":"AtSCMCli.js","sourcesContent":["import { realpathSync } from 'fs';\nimport { join } from 'path';\nimport Liftoff from 'liftoff';\nimport yargs from 'yargs';\nimport gulplog from 'gulplog';\nimport { jsVariants } from 'interpret';\nimport pkg from '../package.json';\nimport Logger from './lib/util/Logger';\nimport Options, { GlobalOptions } from './cli/Options';\nimport Commands from './cli/Commands';\nimport UsageError from './lib/error/UsageError';\n\n/**\n * The main class. Handles arguments and runs commands.\n * @extends {Liftoff}\n */\nexport default class AtSCMCli extends Liftoff {\n\n  /**\n   * The name under which the module is available from the command line.\n   * @type {String}\n   */\n  static get BinName() {\n    return Object.keys(pkg.bin)[0];\n  }\n\n  /**\n   * The filename used for configuration files.\n   * @type {String}\n   */\n  static get ConfigName() {\n    return 'Atviseproject';\n  }\n\n  /**\n   * Reports an error and exits the process with return code `1`.\n   * @param {Error} err The error that occurred.\n   */\n  _reportCliError(err) {\n    Logger.error(Logger.colors.red(err.message));\n\n    if (err instanceof UsageError) {\n      Logger.info(err.help);\n    } else {\n      Logger.debug(err.stack);\n    }\n\n    process.exitCode = 1;\n  }\n\n  /**\n   * Creates a new {@link AtSCMCli} object based on command line arguments.\n   * @param {String[]} argv The command line arguments to use. If no command is provided and neither\n   * `--help` nor `--version` are used, the command `run` is added.\n   * @throws {UsageError} Throws an error if option parsing fails.\n   */\n  constructor(argv = []) {\n    super({\n      name: AtSCMCli.BinName,\n      configName: AtSCMCli.ConfigName,\n      extensions: jsVariants,\n    });\n\n    this.on('require', function(name) {\n      Logger.debug('Requiring external module', Logger.colors.magenta(name));\n    });\n\n    this.on('requireFail', function(name) {\n      Logger.error(\n        Logger.colors.red('Failed to load external module'),\n        Logger.colors.magenta(name)\n      );\n    });\n\n    /**\n     * `true` if the instance was created by running the binaries, `false` if used programmatically.\n     * @type {Boolean}\n     */\n    this.runViaCli = realpathSync(process.argv[1]) === require.resolve('./bin/atscm');\n\n    /**\n     * The raw, unparsed command line arguments the Cli was created with.\n     * @type {String[]}\n     */\n    this._argv = argv;\n\n    // If no command is given, default to \"run\"\n    const commandNames = Commands.map(c => c.name);\n\n    /**\n     * The options parsed from {@link AtSCMCli#_argv}. Note that **these options are not complete**\n     * until {@link AtSCMCli#launch} was called.\n     * @type {Object}\n     */\n    this.options = yargs(argv)\n      .env('ATSCM')\n      .option(GlobalOptions)\n      .fail((msg, e, y) => {\n        const err = new UsageError(msg, y.help());\n\n        if (this.runViaCli) {\n          gulplog.on('error', () => {}); // Prevent logger to throw an error\n\n          this._reportCliError(err);\n        } else {\n          throw err;\n        }\n      })\n      .argv;\n\n    if (!this.options.help && !this.options.version) {\n      if (this.options._.filter(e => commandNames.includes(e)).length === 0) {\n        this._argv.unshift('run');\n      }\n    }\n\n    // Initialize logger\n    Logger.applyOptions(this.options);\n\n    const globalOptionNames = Object.keys(GlobalOptions);\n\n    /**\n     * An instance of {@link yargs} responible for parsing options.\n     * @type {yargs}\n     */\n    this.argumentsParser = Commands\n      .reduce(\n        (parser, command) => parser\n          .command(command.usage, command.description, y => {\n            y.usage(`Usage: $0 ${command.usage}`);\n            y.option(command.options);\n\n            y.group(Object.keys(command.options), 'Command specific options:');\n            y.group(globalOptionNames, 'Global options:');\n\n            y.strict();\n            y.help('help', Options.help.desc);\n            y.demandCommand(...command.demandCommand);\n          }, () => (this.command = command)),\n        yargs()\n          .env('ATSCM')\n          .usage('Usage: $0 [cmd=run]')\n          .options(GlobalOptions)\n          .global(globalOptionNames)\n          .strict()\n          .help('help', Options.help.desc)\n          .alias('help', 'h')\n      );\n  }\n\n  /**\n   * Used to expose project config overrides via environment variables. All project options are\n   * exposed as `ATSCM_PROJECT__{KEY}={VALUE}`.\n   * @param {Object} config The object to expose.\n   * @param {string} key The key currently handled.\n   * @param {string} [base=ATSCM_PROJECT__] The parent key.\n   */\n  _exposeOverride(config, key, base = 'ATSCM_PROJECT__') {\n    const currentKey = `${base}${key.toUpperCase()}`;\n\n    if (typeof config[key] === 'object') {\n      const c = config[key];\n\n      Object.keys(c).forEach(k => this._exposeOverride(c, k, `${currentKey}__`));\n    } else {\n      process.env[currentKey] = config[key];\n      Logger.debug(`Setting ${currentKey}:`, Logger.format.value(config[key]));\n    }\n  }\n\n  /**\n   * Parses arguments and exposes the project options as environment variables.\n   * @return {Promise<Object, UsageError>} Rejected with a {@link UsageError} if parsing failed,\n   * otherwise fulfilled with the parsed arguments.\n   */\n  parseArguments() {\n    return new Promise((resolve, reject) => {\n      this.options = this.argumentsParser\n        .fail((msg, err, y) => reject(new UsageError(msg, y.help())))\n        .parse(this._argv);\n\n      Object.keys(this.options.project)\n        .forEach(key => this._exposeOverride(this.options.project, key));\n\n      resolve(this.options);\n    });\n  }\n\n  /**\n   * Returns a {@link Liftoff.Environment} for the Cli.\n   * @param {Boolean} [findUp=false] If the environment should be searched for in parent\n   * directories.\n   * @return {Promise<Object>} Fulfilled with a {@link Liftoff} environment.\n   */\n  getEnvironment(findUp = true) {\n    return new Promise(resolve => {\n      super.launch({\n        cwd: this.options.cwd,\n        configPath: findUp ?\n          this.options.projectfile :\n          join((this.options.cwd || process.cwd()), `${this.constructor.ConfigName}.js`),\n        require: this.options.require,\n      }, env => resolve(this.environment = env));\n    });\n  }\n\n  /**\n   * Gets a {@link Liftoff.Environment} and validates a config file and a local module was found.\n   * @return {Promise<Object, Error>} Resolved with the {@link Liftoff environment}, rejected if the\n   * config file or the local module cannot be found.\n   */\n  requireEnvironment() {\n    return this.getEnvironment()\n      .then(env => {\n        if (!env.modulePath) {\n          throw new Error(`Local ${AtSCMCli.BinName} not found`);\n        }\n\n        if (!env.configPath) {\n          throw new Error('No config file found');\n        }\n\n        return env;\n      });\n  }\n\n  /**\n   * Returns the CLI version and, if a local module could be found, the local version.\n   * @return {Promise<{cli: String, local: ?String}>} Fulfilled with the found cli and local\n   * version.\n   */\n  getVersion() {\n    return this.getEnvironment()\n      .then(env => ({\n        cli: pkg.version,\n        local: env.modulePath ? env.modulePackage.version : null,\n      }));\n  }\n\n  /**\n   * Gets and prints the CLI version and, if a local module could be found, the local version.\n   * @return {Promise<{cli: String, local: ?String}>} Fulfilled with the found cli and local\n   * version.\n   */\n  printVersion() {\n    return this.getVersion()\n      .then(version => {\n        Logger.info('CLI version', Logger.format.number(version.cli));\n\n        if (version.local) {\n          Logger.info('Local version', Logger.format.number(version.local));\n        }\n\n        return version;\n      });\n  }\n\n  /**\n   * Runs the command specified in the command line arguments ({@link AtSCMCli#_argv}). **Note that\n   * this will only work if {@link AtSCMCli#parseArguments} was called before.**\n   * @return {Promise<*, Error>} Fulfilled if the command succeeded.\n   */\n  runCommand() {\n    if (this.options.version) {\n      return this.printVersion();\n    }\n\n    if (this.command) {\n      return (this.command.requiresEnvironment(this) ?\n        this.requireEnvironment() :\n        Promise.resolve()\n      )\n        .then(() => this.command.run(this));\n    }\n\n    Logger.warn('No command specified');\n\n    return Promise.resolve(this);\n  }\n\n  /**\n   * Parses arguments and runs the specified command.\n   * @return {Promise<*, Error>} Fulfilled if the command succeeded. Note that, if the instance is\n   * run through the binary all rejections will be handled.\n   */\n  launch() {\n    const app = this.parseArguments()\n      .then(() => this.runCommand());\n\n    if (this.runViaCli) {\n      return app\n        .catch(err => this._reportCliError(err));\n    }\n\n    return app;\n  }\n\n}\n"]}