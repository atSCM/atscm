{"version":3,"sources":["../../../src/cli/commands/Docs.js"],"names":["DocsCommand","RemoteDocsBase","constructor","name","description","options","cli","browser","remote","maxArguments","localDocsPath","__dirname","environment","modulePath","remoteDocsUrl","addressToOpen","address","isPath","run","getEnvironment","Promise","resolve","then","debug","format","path","requiresEnvironment"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;AAGe,MAAMA,WAAN,2BAAkC;;AAE/C;;;;AAIA,aAAWC,cAAX,GAA4B;AAC1B,WAAO,yCAAP;AACD;;AAED;;;;;AAKAC,cAAYC,IAAZ,EAAkBC,WAAlB,EAA+B;AAC7B,UAAMD,IAAN,EAAYC,WAAZ,EAAyB;AACvBC,eAAS;AACPC,aAAK,kBAAWA,GADT;AAEPC,iBAAS,kBAAWA,OAFb;AAGPC,gBAAQ,kBAAWA;AAHZ,OADc;AAMvBC,oBAAc;AANS,KAAzB;AAQD;;AAED;;;;;AAKAC,gBAAcJ,GAAd,EAAmB;AACjB,WAAO,gBACLA,IAAID,OAAJ,CAAYC,GAAZ,GACE,gBAAKK,SAAL,EAAgB,WAAhB,CADF,GAEE,gBAAKL,IAAIM,WAAJ,CAAgBC,UAArB,EAAiC,QAAjC,CAHG,EAIL,qBAJK,CAAP;AAMD;;AAED;;;;;AAKAC,gBAAcR,GAAd,EAAmB;AACjB,WAAO,kBAAQ,KAAKJ,WAAL,CAAiBD,cAAzB,EAAyCK,IAAID,OAAJ,CAAYC,GAAZ,GAC9C,WAD8C,GAE9C,OAFK,CAAP;AAGD;;AAED;;;;;;;;;;;;AAYAS,gBAAcT,GAAd,EAAmB;AACjB,QAAIA,IAAID,OAAJ,CAAYG,MAAZ,KAAuB,IAAvB,KAAgCF,IAAID,OAAJ,CAAYC,GAAZ,IAAmBA,IAAIM,WAAJ,CAAgBC,UAAnE,CAAJ,EAAoF;AAClF,aAAO;AACLG,iBAAS,KAAKN,aAAL,CAAmBJ,GAAnB,CADJ;AAELW,gBAAQ;AAFH,OAAP;AAID;;AAED,WAAO;AACLD,eAAS,KAAKF,aAAL,CAAmBR,GAAnB,CADJ;AAELW,cAAQ;AAFH,KAAP;AAID;;AAED;;;;;AAKAC,MAAIZ,GAAJ,EAAS;AACP,WAAO,CAAC,CAACA,IAAID,OAAJ,CAAYC,GAAb,IAAoB,CAACA,IAAIM,WAAzB,GAAuCN,IAAIa,cAAJ,EAAvC,GAA8DC,QAAQC,OAAR,EAA/D,EACJC,IADI,CACC,MAAM,KAAKP,aAAL,CAAmBT,GAAnB,CADP,EAEJgB,IAFI,CAEC,CAAC,EAAEN,OAAF,EAAWC,MAAX,EAAD,KAAyB;AAC7B,uBAAOM,KAAP,CAAa,SAAb,EAAwBN,SAAS,iBAAOO,MAAP,CAAcC,IAAd,CAAmBT,OAAnB,CAAT,GAAuCA,OAA/D;AACA,0BAAKA,OAAL,EAAcV,IAAID,OAAJ,CAAYE,OAA1B;AACD,KALI,CAAP;AAMD;;AAED;;;;;AAKAmB,sBAAoBpB,GAApB,EAAyB;AACvB,WAAOA,IAAID,OAAJ,CAAYG,MAAZ,KAAuB,KAAvB,IAAgC,CAACF,IAAID,OAAJ,CAAYC,GAApD;AACD;;AAlG8C;kBAA5BN,W","file":"Docs.js","sourcesContent":["import { join } from 'path';\nimport { resolve } from 'url';\nimport open from 'open';\nimport Command from '../../lib/cli/Command';\nimport CliOptions from '../Options';\nimport Logger from '../../lib/util/Logger';\n\n/**\n * The command invoked when running \"docs\". Handles the options --cli and --browser.\n */\nexport default class DocsCommand extends Command {\n\n  /**\n   * Base URL of the hosted API documentation.\n   * @type {string}\n   */\n  static get RemoteDocsBase() {\n    return 'https://doc.esdoc.org/github.com/atSCM/';\n  }\n\n  /**\n   * Creates a new {@link DocsCommand} with the specified name and description.\n   * @param {String} name The command's name.\n   * @param {String} description The command's description.\n   */\n  constructor(name, description) {\n    super(name, description, {\n      options: {\n        cli: CliOptions.cli,\n        browser: CliOptions.browser,\n        remote: CliOptions.remote,\n      },\n      maxArguments: 0,\n    });\n  }\n\n  /**\n   * Returns the path to the local api docs.\n   * @param {AtSCMCli} cli The current Cli instance.\n   * @return {string} The path to the local api docs.\n   */\n  localDocsPath(cli) {\n    return join(\n      cli.options.cli ?\n        join(__dirname, '../../../') :\n        join(cli.environment.modulePath, '../../'),\n      'docs/api/index.html'\n    );\n  }\n\n  /**\n   * Returns the URL of the remote api docs.\n   * @param {AtSCMCli} cli The current Cli instance.\n   * @return {string} The URL of the remote api docs.\n   */\n  remoteDocsUrl(cli) {\n    return resolve(this.constructor.RemoteDocsBase, cli.options.cli ?\n      'atscm-cli' :\n      'atscm');\n  }\n\n  /**\n   * Returns the path or url to open. This is resolved in the following way:\n   *  1. If `--remote` is passed, always return the URL of the hosted docs of atscm-cli or atscm\n   *     based on the `--cli` option passed.\n   *  2. If `--cli` is passed, always return the path to the local atscm-cli docs.\n   *  3. Otherwise, check if a local module was found:\n   *     - If *true* return the local module docs path,\n   *     - else return the URL of the hosted atscm docs.\n   * @param {AtSCMCli} cli The calling Cli instance.\n   * @return {{address: string, isPath: boolean}} The resolved address and a flag indicating if the\n   * address describes a file path.\n   */\n  addressToOpen(cli) {\n    if (cli.options.remote !== true && (cli.options.cli || cli.environment.modulePath)) {\n      return {\n        address: this.localDocsPath(cli),\n        isPath: true,\n      };\n    }\n\n    return {\n      address: this.remoteDocsUrl(cli),\n      isPath: false,\n    };\n  }\n\n  /**\n   * Opens the requested docs in the requested browser.\n   * @param {AtSCMCli} cli The current Cli instance.\n   * @return {Promise} Resolved after the os-specific open command was started.\n   */\n  run(cli) {\n    return (!cli.options.cli && !cli.environment ? cli.getEnvironment() : Promise.resolve())\n      .then(() => this.addressToOpen(cli))\n      .then(({ address, isPath }) => {\n        Logger.debug('Opening', isPath ? Logger.format.path(address) : address);\n        open(address, cli.options.browser);\n      });\n  }\n\n  /**\n   * Returns `false` if the `--cli` option is used.\n   * @param {AtSCMCli} cli The current cli instance.\n   * @return {Boolean} `false` if the `--cli` option is used.\n   */\n  requiresEnvironment(cli) {\n    return cli.options.remote === false && !cli.options.cli;\n  }\n\n}\n"]}