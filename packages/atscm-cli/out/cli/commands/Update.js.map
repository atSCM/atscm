{"version":3,"sources":["../../../src/cli/commands/Update.js"],"names":["UpdateCommand","getLatestVersion","then","res","data","latest","updateNeeded","latestVersion","currentVersion","debug","format","value","update","cli","run","spawn","cwd","environment","Promise","all","resolve","modulePackage","version","versions","needed","info","requiresEnvironment"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;AAGe,MAAMA,aAAN,2BAAoC;;AAEjD;;;;AAIAC,qBAAmB;AACjB,WAAO,gBAAI,sDAAJ,EACJC,IADI,CACCC,OAAOA,IAAIC,IAAJ,CAASC,MADjB,CAAP;AAED;;AAED;;;;;;;AAOAC,eAAaC,aAAb,EAA4BC,cAA5B,EAA4C;AAC1C,qBAAOC,KAAP,CAAa,qBAAb,EAAoC,iBAAOC,MAAP,CAAcC,KAAd,CAAoBJ,aAApB,CAApC;AACA,qBAAOE,KAAP,CAAa,qBAAb,EAAoC,iBAAOC,MAAP,CAAcC,KAAd,CAAoBH,cAApB,CAApC;;AAEA,WAAO,gBAAGD,aAAH,EAAkBC,cAAlB,KAAqCD,aAA5C;AACD;;AAED;;;;;;AAMAK,SAAOC,GAAP,EAAY;AACV,WAAO,0BAAgBC,GAAhB,CAAoB,KAApB,EAA2B,CAAC,SAAD,EAAY,YAAZ,EAA0B,cAA1B,CAA3B,EAAsE;AAC3EC,aAAO;AACLC,aAAKH,IAAII,WAAJ,CAAgBD;AADhB;AADoE,KAAtE,CAAP;AAKD;;AAED;;;;;;AAMAF,MAAID,GAAJ,EAAS;AACP,WAAOK,QAAQC,GAAR,CAAY,CACjB,KAAKlB,gBAAL,EADiB,EAEjBiB,QAAQE,OAAR,CAAgBP,IAAII,WAAJ,CAAgBI,aAAhB,CAA8BC,OAA9C,CAFiB,CAAZ,EAIJpB,IAJI,CAICqB,YAAY,KAAKjB,YAAL,CAAkB,GAAGiB,QAArB,CAJb,EAKJrB,IALI,CAKCsB,UAAU;AACd,UAAIA,MAAJ,EAAY;AACV,yBAAOC,IAAP,CAAY,qBAAZ,EAAmC,iBAAOf,MAAP,CAAcC,KAAd,CAAoBa,MAApB,CAAnC;;AAEA,eAAO,KAAKZ,MAAL,CAAYC,GAAZ,EACJX,IADI,CACC,MAAM,iBAAOuB,IAAP,CAAY,OAAZ,CADP,CAAP;AAED;;AAED,aAAO,iBAAOA,IAAP,CAAY,qBAAZ,CAAP;AACD,KAdI,CAAP;AAeD;;AAED;;;;AAIAC,wBAAsB;AACpB,WAAO,IAAP;AACD;;AArEgD;kBAA9B1B,a","file":"Update.js","sourcesContent":["import { get } from 'axios';\nimport { gt } from 'semver';\nimport Logger from '../../lib/util/Logger';\nimport Command from '../../lib/cli/Command';\nimport ExternalCommand from '../../lib/util/ExternalCommand';\n\n/**\n * The command invoked by running \"update\".\n */\nexport default class UpdateCommand extends Command {\n\n  /**\n   * Checks atscm's dist-tags in the npm registry and resolves with the latest version available.\n   * @return {Promise<string>} Fulfilled with the latest atscm version available.\n   */\n  getLatestVersion() {\n    return get('https://registry.npmjs.org/-/package/atscm/dist-tags')\n      .then(res => res.data.latest);\n  }\n\n  /**\n   * Checks if an update is required with the given latest and current version.\n   * @param {string} latestVersion The latest version available.\n   * @param {string} currentVersion The current version to check against.\n   * @return {boolean|string} Returns `false` if no update is required or the version to install if\n   * an update is required.\n   */\n  updateNeeded(latestVersion, currentVersion) {\n    Logger.debug('Latest version:    ', Logger.format.value(latestVersion));\n    Logger.debug('Current version:   ', Logger.format.value(currentVersion));\n\n    return gt(latestVersion, currentVersion) && latestVersion;\n  }\n\n  /**\n   * Runs `npm install --save-dev atscm@latest` in a separate process.\n   * @param {AtSCMCli} cli The cli instance used.\n   * @return {Promise<string, Error>} Fulfilled with npm's stdout or rejected with a spawn error or\n   * error code.\n   */\n  update(cli) {\n    return ExternalCommand.run('npm', ['install', '--save-dev', 'atscm@latest'], {\n      spawn: {\n        cwd: cli.environment.cwd,\n      },\n    });\n  }\n\n  /**\n   * Updates atscm if a newer version is available.\n   * @param {AtSCMCli} cli The cli instance used.\n   * @return {Promise<*>} Resolved if the command completed suceessfully, rejected with the error\n   * that occurred otherwise.\n   */\n  run(cli) {\n    return Promise.all([\n      this.getLatestVersion(),\n      Promise.resolve(cli.environment.modulePackage.version),\n    ])\n      .then(versions => this.updateNeeded(...versions))\n      .then(needed => {\n        if (needed) {\n          Logger.info('Updating to version', Logger.format.value(needed));\n\n          return this.update(cli)\n            .then(() => Logger.info('Done.'));\n        }\n\n        return Logger.info('Already up-to-date.');\n      });\n  }\n\n  /**\n   * This command always needs to be run inside an existant atscm project.\n   * @return {boolean} Always `true`.\n   */\n  requiresEnvironment() {\n    return true;\n  }\n\n}\n"]}