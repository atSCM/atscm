{"version":3,"sources":["../../../src/cli/commands/Init.js"],"names":["IgnoredFiles","InitCommand","constructor","name","description","options","force","checkDirectory","path","overwrite","Promise","resolve","reject","err","files","code","Error","format","filter","f","includes","toLowerCase","length","message","warn","colors","yellow","createEmptyPackage","Object","assign","originalMessage","install","packages","npm","child","concat","cwd","on","npmErr","pipeLastLine","stdout","installLocal","useBetaRelease","info","debug","gray","checkCliVersion","env","required","modulePackage","engines","version","command","getOptions","modulePath","require","default","writeFiles","installDependencies","deps","run","cli","getEnvironment","then","environment","beta","process","chdir","result","requiresEnvironment"],"mappings":"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","file":"Init.js","sourcesContent":["import { readdir, writeFile } from 'fs';\nimport { join } from 'path';\nimport { spawn } from 'child_process';\nimport which from 'which';\nimport { prompt } from 'inquirer';\nimport { satisfies as validVersion } from 'semver';\nimport Command from '../../lib/cli/Command';\nimport Logger from '../../lib/util/Logger';\nimport pkg from '../../../package.json';\nimport CliOptions from '../Options';\n\nconst IgnoredFiles = ['.ds_store', 'thumbs.db'];\n\n/**\n * The command invoked when running \"init\".\n */\nexport default class InitCommand extends Command {\n\n  /**\n   * Creates a new {@link InitCommand} with the specified name and description.\n   * @param {String} name The command's name.\n   * @param {String} description The command's description.\n   */\n  constructor(name, description) {\n    super(name, description, {\n      options: {\n        force: CliOptions.force,\n      },\n    });\n  }\n\n  /**\n   * Checks if the given path contains an empty directory. OS specific temporary files (.DS_Store\n   * under macOS, thumbs.db under Windows) are ignored.\n   * @param {String} path The path to check.\n   * @param {Boolean} [overwrite=false] If existing files should be overwritten.\n   * @return {Promise<String, Error>} Fulfilled with the valid directory's path, rejected if `path`\n   * contains no or a non-empty directory.\n   */\n  checkDirectory(path, overwrite = false) {\n    return new Promise((resolve, reject) => {\n      readdir(path, (err, files) => {\n        if (err) {\n          if (err.code === 'ENOENT') {\n            reject(new Error(`${Logger.format.path(path)} does not exist`));\n          } else if (err.code === 'ENOTDIR') {\n            reject(new Error(`${Logger.format.path(path)} is not a directory`));\n          } else {\n            reject(err);\n          }\n        } else if (files.filter(f => !IgnoredFiles.includes(f.toLowerCase())).length > 0) {\n          const message = `${Logger.format.path(path)} is not empty`;\n\n          if (overwrite) {\n            Logger.warn(message);\n            Logger.warn(Logger.colors.yellow('Using --force, continue...'));\n            resolve(path);\n          } else {\n            reject(new Error(message));\n          }\n        } else {\n          resolve(path);\n        }\n      });\n    });\n  }\n\n  /**\n   * Creates a an empty *package.json* file at the given path.\n   * @param {String} path The location to create the package at.\n   * @return {Promise<undefined, Error>} Rejected if an error occurred while writing the file.\n   */\n  createEmptyPackage(path) {\n    return new Promise((resolve, reject) => {\n      writeFile(join(path, 'package.json'), '{}', err => {\n        if (err) {\n          // FIXME: Call with SystemError class\n          reject(Object.assign(err, {\n            message: `Unable to create package.json at ${path}`,\n            originalMessage: err.message,\n          }));\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Runs `npm install --save-dev {packages}` at the given path.\n   * @param {String} path The path to install packages at.\n   * @param {String|String[]} packages Names of the packages to install.\n   * @return {Promise<undefined, Error>} Rejected if installing failed, resolved otherwise.\n   */\n  install(path, packages) {\n    return new Promise((resolve, reject) => {\n      which('npm', (err, npm) => {\n        if (err) {\n          reject(err);\n        } else {\n          const child = spawn(npm, ['install', '--save-dev'].concat(packages), { cwd: path })\n            .on('error', npmErr => reject(npmErr))\n            .on('close', code => {\n              if (code > 0) {\n                reject(new Error(`npm install returned code ${code}`));\n              } else {\n                resolve();\n              }\n            });\n\n          Logger.pipeLastLine(child.stdout);\n        }\n      });\n    });\n  }\n\n  /**\n   * Installs the local atscm module at the given path.\n   * @param {String} path The path to install the module at.\n   * @return {Promise<undefined, Error>} Rejected if installing failed, resolved otherwise.\n   */\n  installLocal(path, useBetaRelease) {\n    Logger.info('Installing latest version of atscm...');\n\n    if (useBetaRelease) {\n      Logger.debug(Logger.colors.gray('Using beta release'));\n    }\n\n    // FIXME: call with (path, 'atscm') once atscm is published\n    return this.install(path, useBetaRelease ? 'atscm@beta' : 'atscm');\n  }\n\n  /**\n   * Checks the version of this package against the \"engines.atscm-cli\" field of the newly installed\n   * atscm module's package.json.\n   * @param {Liftoff.Environment} env The environment to check.\n   * @return {Liftoff.Environment} The environment to check.\n   * @throws {Error} Throws an error if the atscm-cli version does not match.\n   */\n  checkCliVersion(env) {\n    Logger.debug('Checking atscm-cli version...');\n\n    const required = env.modulePackage.engines['atscm-cli'];\n    if (!validVersion(pkg.version, required)) {\n      Logger.info('Your version of atscm-cli is not compatible with the latest version atscm.');\n      Logger.info('Please run', Logger.format.command('npm install -g atscm-cli'), 'to update.');\n\n      throw new Error(`Invalid atscm-cli version: ${required} required.`);\n    }\n\n    return env;\n  }\n\n  /**\n   * Resolves the needed options from the local atscm module and asks for them. These options are\n   * stored in the `atscm` module inside `out/init/options.js`.\n   * @param {String} modulePath The path to the local module to use.\n   * @return {Promise<Object, Error>} Resolved with the chosen options.\n   */\n  getOptions(modulePath) {\n    Logger.info('Answer these questions to create a new project:');\n\n    // eslint-disable-next-line global-require\n    const options = require(join(modulePath, '../init/options')).default;\n\n    return prompt(options);\n  }\n\n  /**\n   * Runs the local atscm module's init script. This script is stored in the `atscm` module inside\n   * `out/init/init.js`.\n   * @param {String} modulePath The path to the local module to use.\n   * @param {Object} options The options to apply (Received by calling\n   * {@link InitCommand#getOptions}).\n   * @return {Promise<{install: String[]}, Error>} Resolved with information on the further init\n   * steps (e.g. which dependencies are needed), rejected with an error if running the init script\n   * failed.\n   */\n  writeFiles(modulePath, options) {\n    // eslint-disable-next-line global-require\n    return require(join(modulePath, '../init/init')).default(options);\n  }\n\n  /**\n   * Installs any additional dependencies needed after writing files.\n   * @param {String} path The path to install the dependencies at.\n   * @param {String[]} deps Names of the packages to install.\n   * @return {Promise<undefined, Error>} Rejected if installing failed, resolved otherwise.\n   */\n  installDependencies(path, deps) {\n    Logger.info('Installing dependencies...');\n\n    return this.install(path, deps);\n  }\n\n  /**\n   * Creates a new atscm project.\n   * @param {AtSCMCli} cli The current Cli instance.\n   */\n  run(cli) {\n    return cli.getEnvironment(false)\n      .then(env => this.checkDirectory(env.cwd, cli.options.force))\n      .then(() => this.createEmptyPackage(cli.environment.cwd))\n      .then(() => this.installLocal(cli.environment.cwd, cli.options.beta))\n      .then(() => cli.getEnvironment(false))\n      .then(env => this.checkCliVersion(env))\n      .then(env => process.chdir(env.cwd))\n      .then(() => this.getOptions(cli.environment.modulePath))\n      .then(options => this.writeFiles(\n        cli.environment.modulePath,\n        Object.assign({}, cli.environment, options)\n      ))\n      .then(result => this.installDependencies(cli.environment.cwd, result.install))\n      .then(() => {\n        Logger.info('Created new project at', Logger.format.path(cli.environment.cwd));\n      });\n  }\n\n  /**\n   * This command never requires an {@link Liftoff.Environment}.\n   * @return {Boolean} Always `false`.\n   */\n  requiresEnvironment() {\n    return false;\n  }\n\n}\n"]}