[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/AtSCMCli.js",
    "content": "import { realpathSync } from 'fs';\nimport { join } from 'path';\nimport Liftoff from 'liftoff';\nimport yargs from 'yargs';\nimport gulplog from 'gulplog';\nimport { jsVariants } from 'interpret';\nimport pkg from '../package.json';\nimport Logger from './lib/util/Logger';\nimport Options, { GlobalOptions } from './cli/Options';\nimport Commands from './cli/Commands';\nimport UsageError from './lib/error/UsageError';\n\n/**\n * The main class. Handles arguments and runs commands.\n * @extends {Liftoff}\n */\nexport default class AtSCMCli extends Liftoff {\n\n  /**\n   * The name under which the module is available from the command line.\n   * @type {String}\n   */\n  static get BinName() {\n    return Object.keys(pkg.bin)[0];\n  }\n\n  /**\n   * The filename used for configuration files.\n   * @type {String}\n   */\n  static get ConfigName() {\n    return 'Atviseproject';\n  }\n\n  /**\n   * Reports an error and exits the process with return code `1`.\n   * @param {Error} err The error that occurred.\n   */\n  _reportCliError(err) {\n    Logger.error(Logger.colors.red(err.message));\n\n    if (err instanceof UsageError) {\n      Logger.info(err.help);\n    } else {\n      Logger.debug(err.stack);\n    }\n\n    process.exitCode = 1;\n  }\n\n  /**\n   * Creates a new {@link AtSCMCli} object based on command line arguments.\n   * @param {String[]} argv The command line arguments to use. If no command is provided and neither\n   * `--help` nor `--version` are used, the command `run` is added.\n   * @throws {UsageError} Throws an error if option parsing fails.\n   */\n  constructor(argv = []) {\n    super({\n      name: AtSCMCli.BinName,\n      configName: AtSCMCli.ConfigName,\n      extensions: jsVariants,\n    });\n\n    this.on('require', function(name) {\n      Logger.debug('Requiring external module', Logger.colors.magenta(name));\n    });\n\n    this.on('requireFail', function(name) {\n      Logger.error(\n        Logger.colors.red('Failed to load external module'),\n        Logger.colors.magenta(name)\n      );\n    });\n\n    /**\n     * `true` if the instance was created by running the binaries, `false` if used programmatically.\n     * @type {Boolean}\n     */\n    this.runViaCli = realpathSync(process.argv[1]) === require.resolve('./bin/atscm');\n\n    /**\n     * The raw, unparsed command line arguments the Cli was created with.\n     * @type {String[]}\n     */\n    this._argv = argv;\n\n    // If no command is given, default to \"run\"\n    const commandNames = Commands.map(c => c.name);\n\n    /**\n     * The options parsed from {@link AtSCMCli#_argv}. Note that **these options are not complete**\n     * until {@link AtSCMCli#launch} was called.\n     * @type {Object}\n     */\n    this.options = yargs(argv)\n      .env('ATSCM')\n      .option(GlobalOptions)\n      .fail((msg, e, y) => {\n        const err = new UsageError(msg, y.help());\n\n        if (this.runViaCli) {\n          gulplog.on('error', () => {}); // Prevent logger to throw an error\n\n          this._reportCliError(err);\n        } else {\n          throw err;\n        }\n      })\n      .argv;\n\n    if (!this.options.help && !this.options.version) {\n      if (this.options._.filter(e => commandNames.includes(e)).length === 0) {\n        this._argv.unshift('run');\n      }\n    }\n\n    // Initialize logger\n    Logger.applyOptions(this.options);\n\n    const globalOptionNames = Object.keys(GlobalOptions);\n\n    /**\n     * An instance of {@link yargs} responible for parsing options.\n     * @type {yargs}\n     */\n    this.argumentsParser = Commands\n      .reduce(\n        (parser, command) => parser\n          .command(command.usage, command.description, y => {\n            y.usage(`Usage: $0 ${command.usage}`);\n            y.option(command.options);\n\n            y.group(Object.keys(command.options), 'Command specific options:');\n            y.group(globalOptionNames, 'Global options:');\n\n            y.strict();\n            y.help('help', Options.help.desc);\n            y.demandCommand(...command.demandCommand);\n          }, () => (this.command = command)),\n        yargs()\n          .env('ATSCM')\n          .usage('Usage: $0 [cmd=run]')\n          .options(GlobalOptions)\n          .global(globalOptionNames)\n          .strict()\n          .help('help', Options.help.desc)\n          .alias('help', 'h')\n      );\n  }\n\n  /**\n   * Used to expose project config overrides via environment variables. All project options are\n   * exposed as `ATSCM_PROJECT__{KEY}={VALUE}`.\n   * @param {Object} config The object to expose.\n   * @param {string} key The key currently handled.\n   * @param {string} [base=ATSCM_PROJECT__] The parent key.\n   */\n  _exposeOverride(config, key, base = 'ATSCM_PROJECT__') {\n    const currentKey = `${base}${key.toUpperCase()}`;\n\n    if (typeof config[key] === 'object') {\n      const c = config[key];\n\n      Object.keys(c).forEach(k => this._exposeOverride(c, k, `${currentKey}__`));\n    } else {\n      process.env[currentKey] = config[key];\n      Logger.debug(`Setting ${currentKey}:`, Logger.format.value(config[key]));\n    }\n  }\n\n  /**\n   * Parses arguments and exposes the project options as environment variables.\n   * @return {Promise<Object, UsageError>} Rejected with a {@link UsageError} if parsing failed,\n   * otherwise fulfilled with the parsed arguments.\n   */\n  parseArguments() {\n    return new Promise((resolve, reject) => {\n      this.options = this.argumentsParser\n        .fail((msg, err, y) => reject(new UsageError(msg, y.help())))\n        .parse(this._argv);\n\n      Object.keys(this.options.project)\n        .forEach(key => this._exposeOverride(this.options.project, key));\n\n      resolve(this.options);\n    });\n  }\n\n  /**\n   * Returns a {@link Liftoff.Environment} for the Cli.\n   * @param {Boolean} [findUp=false] If the environment should be searched for in parent\n   * directories.\n   * @return {Promise<Object>} Fulfilled with a {@link Liftoff} environment.\n   */\n  getEnvironment(findUp = true) {\n    return new Promise(resolve => {\n      super.launch({\n        cwd: this.options.cwd,\n        configPath: findUp ?\n          this.options.projectfile :\n          join((this.options.cwd || process.cwd()), `${this.constructor.ConfigName}.js`),\n        require: this.options.require,\n      }, env => resolve(this.environment = env));\n    });\n  }\n\n  /**\n   * Gets a {@link Liftoff.Environment} and validates a config file and a local module was found.\n   * @return {Promise<Object, Error>} Resolved with the {@link Liftoff environment}, rejected if the\n   * config file or the local module cannot be found.\n   */\n  requireEnvironment() {\n    return this.getEnvironment()\n      .then(env => {\n        if (!env.modulePath) {\n          throw new Error(`Local ${AtSCMCli.BinName} not found`);\n        }\n\n        if (!env.configPath) {\n          throw new Error('No config file found');\n        }\n\n        return env;\n      });\n  }\n\n  /**\n   * Returns the CLI version and, if a local module could be found, the local version.\n   * @return {Promise<{cli: String, local: ?String}>} Fulfilled with the found cli and local\n   * version.\n   */\n  getVersion() {\n    return this.getEnvironment()\n      .then(env => ({\n        cli: pkg.version,\n        local: env.modulePath ? env.modulePackage.version : null,\n      }));\n  }\n\n  /**\n   * Gets and prints the CLI version and, if a local module could be found, the local version.\n   * @return {Promise<{cli: String, local: ?String}>} Fulfilled with the found cli and local\n   * version.\n   */\n  printVersion() {\n    return this.getVersion()\n      .then(version => {\n        Logger.info('CLI version', Logger.format.number(version.cli));\n\n        if (version.local) {\n          Logger.info('Local version', Logger.format.number(version.local));\n        }\n\n        return version;\n      });\n  }\n\n  /**\n   * Runs the command specified in the command line arguments ({@link AtSCMCli#_argv}). **Note that\n   * this will only work if {@link AtSCMCli#parseArguments} was called before.**\n   * @return {Promise<*, Error>} Fulfilled if the command succeeded.\n   */\n  runCommand() {\n    if (this.options.version) {\n      return this.printVersion();\n    }\n\n    if (this.command) {\n      return (this.command.requiresEnvironment(this) ?\n        this.requireEnvironment() :\n        Promise.resolve()\n      )\n        .then(() => this.command.run(this));\n    }\n\n    Logger.warn('No command specified');\n\n    return Promise.resolve(this);\n  }\n\n  /**\n   * Parses arguments and runs the specified command.\n   * @return {Promise<*, Error>} Fulfilled if the command succeeded. Note that, if the instance is\n   * run through the binary all rejections will be handled.\n   */\n  launch() {\n    const app = this.parseArguments()\n      .then(() => this.runCommand());\n\n    if (this.runViaCli) {\n      return app\n        .catch(err => this._reportCliError(err));\n    }\n\n    return app;\n  }\n\n}\n",
    "static": true,
    "longname": "src/AtSCMCli.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "AtSCMCli",
    "memberof": "src/AtSCMCli.js",
    "static": true,
    "longname": "src/AtSCMCli.js~AtSCMCli",
    "access": null,
    "export": true,
    "importPath": "atscm-cli/src/AtSCMCli.js",
    "importStyle": "AtSCMCli",
    "description": "The main class. Handles arguments and runs commands.",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "Liftoff"
    ]
  },
  {
    "__docId__": 2,
    "kind": "get",
    "name": "BinName",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/AtSCMCli.js~AtSCMCli.BinName",
    "access": null,
    "description": "The name under which the module is available from the command line.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3,
    "kind": "get",
    "name": "ConfigName",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/AtSCMCli.js~AtSCMCli.ConfigName",
    "access": null,
    "description": "The filename used for configuration files.",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 4,
    "kind": "method",
    "name": "_reportCliError",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AtSCMCli.js~AtSCMCli#_reportCliError",
    "access": null,
    "description": "Reports an error and exits the process with return code `1`.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "The error that occurred."
      }
    ]
  },
  {
    "__docId__": 5,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AtSCMCli.js~AtSCMCli#constructor",
    "access": null,
    "description": "Creates a new {@link AtSCMCli} object based on command line arguments.",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "The command line arguments to use. If no command is provided and neither\n`--help` nor `--version` are used, the command `run` is added."
      }
    ],
    "throws": [
      {
        "types": [
          "UsageError"
        ],
        "description": "Throws an error if option parsing fails."
      }
    ]
  },
  {
    "__docId__": 6,
    "kind": "member",
    "name": "runViaCli",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "static": false,
    "longname": "src/AtSCMCli.js~AtSCMCli#runViaCli",
    "access": null,
    "description": "`true` if the instance was created by running the binaries, `false` if used programmatically.",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 7,
    "kind": "member",
    "name": "_argv",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "static": false,
    "longname": "src/AtSCMCli.js~AtSCMCli#_argv",
    "access": null,
    "description": "The raw, unparsed command line arguments the Cli was created with.",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 8,
    "kind": "member",
    "name": "options",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "static": false,
    "longname": "src/AtSCMCli.js~AtSCMCli#options",
    "access": null,
    "description": "The options parsed from {@link AtSCMCli#_argv}. Note that **these options are not complete**\nuntil {@link AtSCMCli#launch} was called.",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 9,
    "kind": "member",
    "name": "argumentsParser",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "static": false,
    "longname": "src/AtSCMCli.js~AtSCMCli#argumentsParser",
    "access": null,
    "description": "An instance of {@link yargs} responible for parsing options.",
    "lineNumber": 126,
    "type": {
      "nullable": null,
      "types": [
        "yargs"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 10,
    "kind": "method",
    "name": "_exposeOverride",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AtSCMCli.js~AtSCMCli#_exposeOverride",
    "access": null,
    "description": "Used to expose project config overrides via environment variables. All project options are\nexposed as `ATSCM_PROJECT__{KEY}={VALUE}`.",
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The object to expose."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key currently handled."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "ATSCM_PROJECT__",
        "defaultRaw": "ATSCM_PROJECT__",
        "name": "base",
        "description": "The parent key."
      }
    ]
  },
  {
    "__docId__": 11,
    "kind": "method",
    "name": "parseArguments",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AtSCMCli.js~AtSCMCli#parseArguments",
    "access": null,
    "description": "Parses arguments and exposes the project options as environment variables.",
    "lineNumber": 176,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, UsageError>"
      ],
      "spread": false,
      "description": "Rejected with a {@link UsageError} if parsing failed,\notherwise fulfilled with the parsed arguments."
    }
  },
  {
    "__docId__": 12,
    "kind": "member",
    "name": "options",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "static": false,
    "longname": "src/AtSCMCli.js~AtSCMCli#options",
    "access": null,
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "method",
    "name": "getEnvironment",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AtSCMCli.js~AtSCMCli#getEnvironment",
    "access": null,
    "description": "Returns a {@link Liftoff.Environment} for the Cli.",
    "lineNumber": 195,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "findUp",
        "description": "If the environment should be searched for in parent\ndirectories."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Fulfilled with a {@link Liftoff} environment."
    }
  },
  {
    "__docId__": 14,
    "kind": "method",
    "name": "requireEnvironment",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AtSCMCli.js~AtSCMCli#requireEnvironment",
    "access": null,
    "description": "Gets a {@link Liftoff.Environment} and validates a config file and a local module was found.",
    "lineNumber": 212,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "Resolved with the {@link Liftoff environment}, rejected if the\nconfig file or the local module cannot be found."
    }
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "getVersion",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AtSCMCli.js~AtSCMCli#getVersion",
    "access": null,
    "description": "Returns the CLI version and, if a local module could be found, the local version.",
    "lineNumber": 232,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{cli: String, local: ?String}>"
      ],
      "spread": false,
      "description": "Fulfilled with the found cli and local\nversion."
    }
  },
  {
    "__docId__": 16,
    "kind": "method",
    "name": "printVersion",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AtSCMCli.js~AtSCMCli#printVersion",
    "access": null,
    "description": "Gets and prints the CLI version and, if a local module could be found, the local version.",
    "lineNumber": 245,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{cli: String, local: ?String}>"
      ],
      "spread": false,
      "description": "Fulfilled with the found cli and local\nversion."
    }
  },
  {
    "__docId__": 17,
    "kind": "method",
    "name": "runCommand",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AtSCMCli.js~AtSCMCli#runCommand",
    "access": null,
    "description": "Runs the command specified in the command line arguments ({@link AtSCMCli#_argv}). **Note that\nthis will only work if {@link AtSCMCli#parseArguments} was called before.**",
    "lineNumber": 263,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise<*, Error>"
      ],
      "spread": false,
      "description": "Fulfilled if the command succeeded."
    }
  },
  {
    "__docId__": 18,
    "kind": "method",
    "name": "launch",
    "memberof": "src/AtSCMCli.js~AtSCMCli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AtSCMCli.js~AtSCMCli#launch",
    "access": null,
    "description": "Parses arguments and runs the specified command.",
    "lineNumber": 286,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise<*, Error>"
      ],
      "spread": false,
      "description": "Fulfilled if the command succeeded. Note that, if the instance is\nrun through the binary all rejections will be handled."
    }
  },
  {
    "__docId__": 19,
    "kind": "file",
    "name": "src/bin/atscm.js",
    "content": "#!/usr/bin/env node\n\nimport updateNotifier from 'update-notifier';\nimport pkg from '../../package.json';\nimport AtscmCli from '../AtSCMCli';\n\nupdateNotifier({ pkg }).notify();\n\n(new AtscmCli(process.argv.slice(2))).launch();\n",
    "static": true,
    "longname": "src/bin/atscm.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 20,
    "kind": "file",
    "name": "src/cli/Commands.js",
    "content": "import RunCommand from './commands/Run';\nimport InitCommand from './commands/Init';\nimport ConfigCommand from './commands/Config';\nimport DocsCommand from './commands/Docs';\nimport UpdateCommand from './commands/Update';\n\n/**\n * CLI commands available.\n * @type {Command[]}\n */\nconst Commands = [\n  new RunCommand('run', '(default) Run tasks.'),\n  new InitCommand('init', 'Create a new project.'),\n  new ConfigCommand('config', 'Validate and print config file.'),\n  new DocsCommand('docs', 'Open documentation.'),\n  new UpdateCommand('update', 'Update installed atscm module.'),\n];\n\nexport default Commands;\n",
    "static": true,
    "longname": "src/cli/Commands.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 21,
    "kind": "variable",
    "name": "Commands",
    "memberof": "src/cli/Commands.js",
    "static": true,
    "longname": "src/cli/Commands.js~Commands",
    "access": null,
    "export": true,
    "importPath": "atscm-cli/src/cli/Commands.js",
    "importStyle": "Commands",
    "description": "CLI commands available.",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Command[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 22,
    "kind": "file",
    "name": "src/cli/Options.js",
    "content": "import Option from '../lib/cli/Option';\n\n/**\n * Command line options available.\n * @type {Object}\n * @property {Option} browser Which browser to open in.\n * @property {Option} cli Open CLI documentation.\n * @property {Option} config Print project configuration.\n * @property {Option} cwd Manually set the CWD.\n * @property {Option} force Overwrite existing files.\n * @property {Option} help Show help.\n * @property {Option} logLevel Set the Logger level.\n * @property {Option} projectfile Manually set path of Atviseproject file to use.\n * @property {Option} remote Open hosted documentation.\n * @property {Option} silent Supress all logging.\n * @property {Option} version Print version.\n * @property {Option} beta Use atscm beta resources.\n */\nconst Options = {\n  browser: Option.string('Which browser to open in.'),\n  cli: Option.boolean('Open CLI documentation.'),\n  continue: Option.boolean('Continue execution of tasks upon failure.'),\n  cwd: Option.string('Manually set the CWD.'),\n  force: Option.boolean('Overwrite existing files.'),\n  help: Option.boolean('Show this help.'),\n  'log-level': new Option('Set the Logger level. ' +\n    '-L for least verbose and -LLLL for most verbose. -LLL is default.', {\n      alias: 'L',\n      count: true,\n      default: 3,\n    }\n  ),\n  project: new Option('Override Atviseproject values.', { default: {} }),\n  projectfile: Option.string('Manually set path of Atviseproject file to use. ' +\n    'This will set the CWD to the Atviseproject file\\'s directory as well.',\n    { alias: 'p' }),\n  require: Option.string('Will require a module before running atscm.'),\n  remote: Option.boolean('Open hosted documentation.', {\n    default: undefined,\n  }),\n  silent: Option.boolean('Suppress all logging.', { alias: 'S' }),\n  tasks: Option.boolean('Print the task dependency tree.', {\n    alias: 'T',\n  }),\n  'tasks-simple': Option.boolean('Print a plaintext list of tasks.'),\n  'tasks-json': Option.boolean('Print the task dependency tree, in JSON format.'),\n  version: Option.boolean('Print version.', { alias: 'v' }),\n  beta: Option.boolean('Use atscm beta resources.'),\n};\n\nexport default Options;\n\n/**\n * Options that can be used globally.\n * @type {Map<String, Option>}\n */\nexport const GlobalOptions = {\n  projectfile: Options.projectfile,\n  cwd: Options.cwd,\n  project: Options.project,\n  require: Options.require,\n  version: Options.version,\n  help: Options.help,\n  silent: Options.silent,\n  beta: Options.beta,\n  'log-level': Options['log-level'],\n};\n",
    "static": true,
    "longname": "src/cli/Options.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 23,
    "kind": "variable",
    "name": "GlobalOptions",
    "memberof": "src/cli/Options.js",
    "static": true,
    "longname": "src/cli/Options.js~GlobalOptions",
    "access": null,
    "export": true,
    "importPath": "atscm-cli/src/cli/Options.js",
    "importStyle": "{GlobalOptions}",
    "description": "Options that can be used globally.",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, Option>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 24,
    "kind": "variable",
    "name": "Options",
    "memberof": "src/cli/Options.js",
    "static": true,
    "longname": "src/cli/Options.js~Options",
    "access": null,
    "export": true,
    "importPath": "atscm-cli/src/cli/Options.js",
    "importStyle": "Options",
    "description": "Command line options available.",
    "lineNumber": 19,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Option"
        ],
        "spread": false,
        "optional": false,
        "name": "browser",
        "description": "Which browser to open in."
      },
      {
        "nullable": null,
        "types": [
          "Option"
        ],
        "spread": false,
        "optional": false,
        "name": "cli",
        "description": "Open CLI documentation."
      },
      {
        "nullable": null,
        "types": [
          "Option"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "Print project configuration."
      },
      {
        "nullable": null,
        "types": [
          "Option"
        ],
        "spread": false,
        "optional": false,
        "name": "cwd",
        "description": "Manually set the CWD."
      },
      {
        "nullable": null,
        "types": [
          "Option"
        ],
        "spread": false,
        "optional": false,
        "name": "force",
        "description": "Overwrite existing files."
      },
      {
        "nullable": null,
        "types": [
          "Option"
        ],
        "spread": false,
        "optional": false,
        "name": "help",
        "description": "Show help."
      },
      {
        "nullable": null,
        "types": [
          "Option"
        ],
        "spread": false,
        "optional": false,
        "name": "logLevel",
        "description": "Set the Logger level."
      },
      {
        "nullable": null,
        "types": [
          "Option"
        ],
        "spread": false,
        "optional": false,
        "name": "projectfile",
        "description": "Manually set path of Atviseproject file to use."
      },
      {
        "nullable": null,
        "types": [
          "Option"
        ],
        "spread": false,
        "optional": false,
        "name": "remote",
        "description": "Open hosted documentation."
      },
      {
        "nullable": null,
        "types": [
          "Option"
        ],
        "spread": false,
        "optional": false,
        "name": "silent",
        "description": "Supress all logging."
      },
      {
        "nullable": null,
        "types": [
          "Option"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": "Print version."
      },
      {
        "nullable": null,
        "types": [
          "Option"
        ],
        "spread": false,
        "optional": false,
        "name": "beta",
        "description": "Use atscm beta resources."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 25,
    "kind": "file",
    "name": "src/cli/commands/Config.js",
    "content": "import { inspect } from 'util';\nimport Logger from '../../lib/util/Logger';\nimport Command from '../../lib/cli/Command';\n\n/**\n * The command invoked when running \"config\".\n */\nexport default class ConfigCommand extends Command {\n\n  /**\n   * Creates a new {@link ConfigCommand} with the specified name and description.\n   * @param {String} name The command's name.\n   * @param {String} description The command's description.\n   */\n  constructor(name, description) {\n    super(name, description, {\n      maxArguments: 0,\n    });\n  }\n\n  /**\n   * Prints the project's configuration.\n   * @param {AtSCMCli} cli The current Cli instance.\n   */\n  run(cli) {\n    process.env.ATSCM_CONFIG_PATH = cli.environment.configPath;\n\n    // eslint-disable-next-line global-require\n    const config = require(cli.environment.modulePath).ProjectConfig ||\n      require(cli.environment.configPath).default; // eslint-disable-line global-require\n\n    inspect.styles.number = 'magenta';\n    inspect.styles.string = 'cyan';\n\n    Logger.info(\n      'Configuration at', Logger.format.path(cli.environment.configPath),\n      `\\n${inspect(config, { colors: true, depth: null, breakLength: 0 })}`\n    );\n\n    if (cli.options.project && config.name !== 'ProjectConfig') {\n      Logger.warn('Overriding runtime configuration requires atscm version >= 0.4');\n      Logger.info('Run', Logger.format.command('atscm update'), 'to update to the newest version');\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "src/cli/commands/Config.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 26,
    "kind": "class",
    "name": "ConfigCommand",
    "memberof": "src/cli/commands/Config.js",
    "static": true,
    "longname": "src/cli/commands/Config.js~ConfigCommand",
    "access": null,
    "export": true,
    "importPath": "atscm-cli/src/cli/commands/Config.js",
    "importStyle": "ConfigCommand",
    "description": "The command invoked when running \"config\".",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/lib/cli/Command.js~Command"
    ]
  },
  {
    "__docId__": 27,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/cli/commands/Config.js~ConfigCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Config.js~ConfigCommand#constructor",
    "access": null,
    "description": "Creates a new {@link ConfigCommand} with the specified name and description.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The command's name."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "The command's description."
      }
    ]
  },
  {
    "__docId__": 28,
    "kind": "method",
    "name": "run",
    "memberof": "src/cli/commands/Config.js~ConfigCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Config.js~ConfigCommand#run",
    "access": null,
    "description": "Prints the project's configuration.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtSCMCli"
        ],
        "spread": false,
        "optional": false,
        "name": "cli",
        "description": "The current Cli instance."
      }
    ]
  },
  {
    "__docId__": 29,
    "kind": "file",
    "name": "src/cli/commands/Docs.js",
    "content": "import { join } from 'path';\nimport { resolve } from 'url';\nimport open from 'open';\nimport Command from '../../lib/cli/Command';\nimport CliOptions from '../Options';\nimport Logger from '../../lib/util/Logger';\n\n/**\n * The command invoked when running \"docs\". Handles the options --cli and --browser.\n */\nexport default class DocsCommand extends Command {\n\n  /**\n   * Base URL of the hosted API documentation.\n   * @type {string}\n   */\n  static get RemoteDocsBase() {\n    return 'https://doc.esdoc.org/github.com/atSCM/';\n  }\n\n  /**\n   * Creates a new {@link DocsCommand} with the specified name and description.\n   * @param {String} name The command's name.\n   * @param {String} description The command's description.\n   */\n  constructor(name, description) {\n    super(name, description, {\n      options: {\n        cli: CliOptions.cli,\n        browser: CliOptions.browser,\n        remote: CliOptions.remote,\n      },\n      maxArguments: 0,\n    });\n  }\n\n  /**\n   * Returns the path to the local api docs.\n   * @param {AtSCMCli} cli The current Cli instance.\n   * @return {string} The path to the local api docs.\n   */\n  localDocsPath(cli) {\n    return join(\n      cli.options.cli ?\n        join(__dirname, '../../../') :\n        join(cli.environment.modulePath, '../../'),\n      'docs/api/index.html'\n    );\n  }\n\n  /**\n   * Returns the URL of the remote api docs.\n   * @param {AtSCMCli} cli The current Cli instance.\n   * @return {string} The URL of the remote api docs.\n   */\n  remoteDocsUrl(cli) {\n    return resolve(this.constructor.RemoteDocsBase, cli.options.cli ?\n      'atscm-cli' :\n      'atscm');\n  }\n\n  /**\n   * Returns the path or url to open. This is resolved in the following way:\n   *  1. If `--remote` is passed, always return the URL of the hosted docs of atscm-cli or atscm\n   *     based on the `--cli` option passed.\n   *  2. If `--cli` is passed, always return the path to the local atscm-cli docs.\n   *  3. Otherwise, check if a local module was found:\n   *     - If *true* return the local module docs path,\n   *     - else return the URL of the hosted atscm docs.\n   * @param {AtSCMCli} cli The calling Cli instance.\n   * @return {{address: string, isPath: boolean}} The resolved address and a flag indicating if the\n   * address describes a file path.\n   */\n  addressToOpen(cli) {\n    if (cli.options.remote !== true && (cli.options.cli || cli.environment.modulePath)) {\n      return {\n        address: this.localDocsPath(cli),\n        isPath: true,\n      };\n    }\n\n    return {\n      address: this.remoteDocsUrl(cli),\n      isPath: false,\n    };\n  }\n\n  /**\n   * Opens the requested docs in the requested browser.\n   * @param {AtSCMCli} cli The current Cli instance.\n   * @return {Promise} Resolved after the os-specific open command was started.\n   */\n  run(cli) {\n    return (!cli.options.cli && !cli.environment ? cli.getEnvironment() : Promise.resolve())\n      .then(() => this.addressToOpen(cli))\n      .then(({ address, isPath }) => {\n        Logger.debug('Opening', isPath ? Logger.format.path(address) : address);\n        open(address, cli.options.browser);\n      });\n  }\n\n  /**\n   * Returns `false` if the `--cli` option is used.\n   * @param {AtSCMCli} cli The current cli instance.\n   * @return {Boolean} `false` if the `--cli` option is used.\n   */\n  requiresEnvironment(cli) {\n    return cli.options.remote === false && !cli.options.cli;\n  }\n\n}\n",
    "static": true,
    "longname": "src/cli/commands/Docs.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 30,
    "kind": "class",
    "name": "DocsCommand",
    "memberof": "src/cli/commands/Docs.js",
    "static": true,
    "longname": "src/cli/commands/Docs.js~DocsCommand",
    "access": null,
    "export": true,
    "importPath": "atscm-cli/src/cli/commands/Docs.js",
    "importStyle": "DocsCommand",
    "description": "The command invoked when running \"docs\". Handles the options --cli and --browser.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/lib/cli/Command.js~Command"
    ]
  },
  {
    "__docId__": 31,
    "kind": "get",
    "name": "RemoteDocsBase",
    "memberof": "src/cli/commands/Docs.js~DocsCommand",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cli/commands/Docs.js~DocsCommand.RemoteDocsBase",
    "access": null,
    "description": "Base URL of the hosted API documentation.",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 32,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/cli/commands/Docs.js~DocsCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Docs.js~DocsCommand#constructor",
    "access": null,
    "description": "Creates a new {@link DocsCommand} with the specified name and description.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The command's name."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "The command's description."
      }
    ]
  },
  {
    "__docId__": 33,
    "kind": "method",
    "name": "localDocsPath",
    "memberof": "src/cli/commands/Docs.js~DocsCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Docs.js~DocsCommand#localDocsPath",
    "access": null,
    "description": "Returns the path to the local api docs.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtSCMCli"
        ],
        "spread": false,
        "optional": false,
        "name": "cli",
        "description": "The current Cli instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The path to the local api docs."
    }
  },
  {
    "__docId__": 34,
    "kind": "method",
    "name": "remoteDocsUrl",
    "memberof": "src/cli/commands/Docs.js~DocsCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Docs.js~DocsCommand#remoteDocsUrl",
    "access": null,
    "description": "Returns the URL of the remote api docs.",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtSCMCli"
        ],
        "spread": false,
        "optional": false,
        "name": "cli",
        "description": "The current Cli instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The URL of the remote api docs."
    }
  },
  {
    "__docId__": 35,
    "kind": "method",
    "name": "addressToOpen",
    "memberof": "src/cli/commands/Docs.js~DocsCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Docs.js~DocsCommand#addressToOpen",
    "access": null,
    "description": "Returns the path or url to open. This is resolved in the following way:\n 1. If `--remote` is passed, always return the URL of the hosted docs of atscm-cli or atscm\n    based on the `--cli` option passed.\n 2. If `--cli` is passed, always return the path to the local atscm-cli docs.\n 3. Otherwise, check if a local module was found:\n    - If *true* return the local module docs path,\n    - else return the URL of the hosted atscm docs.",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtSCMCli"
        ],
        "spread": false,
        "optional": false,
        "name": "cli",
        "description": "The calling Cli instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{address: string, isPath: boolean}"
      ],
      "spread": false,
      "description": "The resolved address and a flag indicating if the\naddress describes a file path."
    }
  },
  {
    "__docId__": 36,
    "kind": "method",
    "name": "run",
    "memberof": "src/cli/commands/Docs.js~DocsCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Docs.js~DocsCommand#run",
    "access": null,
    "description": "Opens the requested docs in the requested browser.",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtSCMCli"
        ],
        "spread": false,
        "optional": false,
        "name": "cli",
        "description": "The current Cli instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolved after the os-specific open command was started."
    }
  },
  {
    "__docId__": 37,
    "kind": "method",
    "name": "requiresEnvironment",
    "memberof": "src/cli/commands/Docs.js~DocsCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Docs.js~DocsCommand#requiresEnvironment",
    "access": null,
    "description": "Returns `false` if the `--cli` option is used.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtSCMCli"
        ],
        "spread": false,
        "optional": false,
        "name": "cli",
        "description": "The current cli instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`false` if the `--cli` option is used."
    }
  },
  {
    "__docId__": 38,
    "kind": "file",
    "name": "src/cli/commands/Init.js",
    "content": "import { readdir, writeFile } from 'fs';\nimport { join } from 'path';\nimport { spawn } from 'child_process';\nimport which from 'which';\nimport { prompt } from 'inquirer';\nimport { satisfies as validVersion } from 'semver';\nimport Command from '../../lib/cli/Command';\nimport Logger from '../../lib/util/Logger';\nimport pkg from '../../../package.json';\nimport CliOptions from '../Options';\n\nconst IgnoredFiles = ['.ds_store', 'thumbs.db'];\n\n/**\n * The command invoked when running \"init\".\n */\nexport default class InitCommand extends Command {\n\n  /**\n   * Creates a new {@link InitCommand} with the specified name and description.\n   * @param {String} name The command's name.\n   * @param {String} description The command's description.\n   */\n  constructor(name, description) {\n    super(name, description, {\n      options: {\n        force: CliOptions.force,\n      },\n    });\n  }\n\n  /**\n   * Checks if the given path contains an empty directory. OS specific temporary files (.DS_Store\n   * under macOS, thumbs.db under Windows) are ignored.\n   * @param {String} path The path to check.\n   * @param {Boolean} [overwrite=false] If existing files should be overwritten.\n   * @return {Promise<String, Error>} Fulfilled with the valid directory's path, rejected if `path`\n   * contains no or a non-empty directory.\n   */\n  checkDirectory(path, overwrite = false) {\n    return new Promise((resolve, reject) => {\n      readdir(path, (err, files) => {\n        if (err) {\n          if (err.code === 'ENOENT') {\n            reject(new Error(`${Logger.format.path(path)} does not exist`));\n          } else if (err.code === 'ENOTDIR') {\n            reject(new Error(`${Logger.format.path(path)} is not a directory`));\n          } else {\n            reject(err);\n          }\n        } else if (files.filter(f => !IgnoredFiles.includes(f.toLowerCase())).length > 0) {\n          const message = `${Logger.format.path(path)} is not empty`;\n\n          if (overwrite) {\n            Logger.warn(message);\n            Logger.warn(Logger.colors.yellow('Using --force, continue...'));\n            resolve(path);\n          } else {\n            reject(new Error(message));\n          }\n        } else {\n          resolve(path);\n        }\n      });\n    });\n  }\n\n  /**\n   * Creates a an empty *package.json* file at the given path.\n   * @param {String} path The location to create the package at.\n   * @return {Promise<undefined, Error>} Rejected if an error occurred while writing the file.\n   */\n  createEmptyPackage(path) {\n    return new Promise((resolve, reject) => {\n      writeFile(join(path, 'package.json'), '{}', err => {\n        if (err) {\n          // FIXME: Call with SystemError class\n          reject(Object.assign(err, {\n            message: `Unable to create package.json at ${path}`,\n            originalMessage: err.message,\n          }));\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Runs `npm install --save-dev {packages}` at the given path.\n   * @param {String} path The path to install packages at.\n   * @param {String|String[]} packages Names of the packages to install.\n   * @return {Promise<undefined, Error>} Rejected if installing failed, resolved otherwise.\n   */\n  install(path, packages) {\n    return new Promise((resolve, reject) => {\n      which('npm', (err, npm) => {\n        if (err) {\n          reject(err);\n        } else {\n          const child = spawn(npm, ['install', '--save-dev'].concat(packages), { cwd: path })\n            .on('error', npmErr => reject(npmErr))\n            .on('close', code => {\n              if (code > 0) {\n                reject(new Error(`npm install returned code ${code}`));\n              } else {\n                resolve();\n              }\n            });\n\n          Logger.pipeLastLine(child.stdout);\n        }\n      });\n    });\n  }\n\n  /**\n   * Installs the local atscm module at the given path.\n   * @param {String} path The path to install the module at.\n   * @return {Promise<undefined, Error>} Rejected if installing failed, resolved otherwise.\n   */\n  installLocal(path, useBetaRelease) {\n    Logger.info('Installing latest version of atscm...');\n\n    if (useBetaRelease) {\n      Logger.debug(Logger.colors.gray('Using beta release'));\n    }\n\n    // FIXME: call with (path, 'atscm') once atscm is published\n    return this.install(path, useBetaRelease ? 'atscm@beta' : 'atscm');\n  }\n\n  /**\n   * Checks the version of this package against the \"engines.atscm-cli\" field of the newly installed\n   * atscm module's package.json.\n   * @param {Liftoff.Environment} env The environment to check.\n   * @return {Liftoff.Environment} The environment to check.\n   * @throws {Error} Throws an error if the atscm-cli version does not match.\n   */\n  checkCliVersion(env) {\n    Logger.debug('Checking atscm-cli version...');\n\n    const required = env.modulePackage.engines['atscm-cli'];\n    if (!validVersion(pkg.version, required)) {\n      Logger.info('Your version of atscm-cli is not compatible with the latest version atscm.');\n      Logger.info('Please run', Logger.format.command('npm install -g atscm-cli'), 'to update.');\n\n      throw new Error(`Invalid atscm-cli version: ${required} required.`);\n    }\n\n    return env;\n  }\n\n  /**\n   * Resolves the needed options from the local atscm module and asks for them. These options are\n   * stored in the `atscm` module inside `out/init/options.js`.\n   * @param {String} modulePath The path to the local module to use.\n   * @return {Promise<Object, Error>} Resolved with the chosen options.\n   */\n  getOptions(modulePath) {\n    Logger.info('Answer these questions to create a new project:');\n\n    // eslint-disable-next-line global-require\n    const options = require(join(modulePath, '../init/options')).default;\n\n    return prompt(options);\n  }\n\n  /**\n   * Runs the local atscm module's init script. This script is stored in the `atscm` module inside\n   * `out/init/init.js`.\n   * @param {String} modulePath The path to the local module to use.\n   * @param {Object} options The options to apply (Received by calling\n   * {@link InitCommand#getOptions}).\n   * @return {Promise<{install: String[]}, Error>} Resolved with information on the further init\n   * steps (e.g. which dependencies are needed), rejected with an error if running the init script\n   * failed.\n   */\n  writeFiles(modulePath, options) {\n    // eslint-disable-next-line global-require\n    return require(join(modulePath, '../init/init')).default(options);\n  }\n\n  /**\n   * Installs any additional dependencies needed after writing files.\n   * @param {String} path The path to install the dependencies at.\n   * @param {String[]} deps Names of the packages to install.\n   * @return {Promise<undefined, Error>} Rejected if installing failed, resolved otherwise.\n   */\n  installDependencies(path, deps) {\n    Logger.info('Installing dependencies...');\n\n    return this.install(path, deps);\n  }\n\n  /**\n   * Creates a new atscm project.\n   * @param {AtSCMCli} cli The current Cli instance.\n   */\n  run(cli) {\n    return cli.getEnvironment(false)\n      .then(env => this.checkDirectory(env.cwd, cli.options.force))\n      .then(() => this.createEmptyPackage(cli.environment.cwd))\n      .then(() => this.installLocal(cli.environment.cwd, cli.options.beta))\n      .then(() => cli.getEnvironment(false))\n      .then(env => this.checkCliVersion(env))\n      .then(env => process.chdir(env.cwd))\n      .then(() => this.getOptions(cli.environment.modulePath))\n      .then(options => this.writeFiles(\n        cli.environment.modulePath,\n        Object.assign({}, cli.environment, options)\n      ))\n      .then(result => this.installDependencies(cli.environment.cwd, result.install))\n      .then(() => {\n        Logger.info('Created new project at', Logger.format.path(cli.environment.cwd));\n      });\n  }\n\n  /**\n   * This command never requires an {@link Liftoff.Environment}.\n   * @return {Boolean} Always `false`.\n   */\n  requiresEnvironment() {\n    return false;\n  }\n\n}\n",
    "static": true,
    "longname": "src/cli/commands/Init.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 39,
    "kind": "variable",
    "name": "IgnoredFiles",
    "memberof": "src/cli/commands/Init.js",
    "static": true,
    "longname": "src/cli/commands/Init.js~IgnoredFiles",
    "access": null,
    "export": false,
    "importPath": "atscm-cli/src/cli/commands/Init.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 40,
    "kind": "class",
    "name": "InitCommand",
    "memberof": "src/cli/commands/Init.js",
    "static": true,
    "longname": "src/cli/commands/Init.js~InitCommand",
    "access": null,
    "export": true,
    "importPath": "atscm-cli/src/cli/commands/Init.js",
    "importStyle": "InitCommand",
    "description": "The command invoked when running \"init\".",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "src/lib/cli/Command.js~Command"
    ]
  },
  {
    "__docId__": 41,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/cli/commands/Init.js~InitCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Init.js~InitCommand#constructor",
    "access": null,
    "description": "Creates a new {@link InitCommand} with the specified name and description.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The command's name."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "The command's description."
      }
    ]
  },
  {
    "__docId__": 42,
    "kind": "method",
    "name": "checkDirectory",
    "memberof": "src/cli/commands/Init.js~InitCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Init.js~InitCommand#checkDirectory",
    "access": null,
    "description": "Checks if the given path contains an empty directory. OS specific temporary files (.DS_Store\nunder macOS, thumbs.db under Windows) are ignored.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path to check."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "overwrite",
        "description": "If existing files should be overwritten."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<String, Error>"
      ],
      "spread": false,
      "description": "Fulfilled with the valid directory's path, rejected if `path`\ncontains no or a non-empty directory."
    }
  },
  {
    "__docId__": 43,
    "kind": "method",
    "name": "createEmptyPackage",
    "memberof": "src/cli/commands/Init.js~InitCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Init.js~InitCommand#createEmptyPackage",
    "access": null,
    "description": "Creates a an empty *package.json* file at the given path.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The location to create the package at."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined, Error>"
      ],
      "spread": false,
      "description": "Rejected if an error occurred while writing the file."
    }
  },
  {
    "__docId__": 44,
    "kind": "method",
    "name": "install",
    "memberof": "src/cli/commands/Init.js~InitCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Init.js~InitCommand#install",
    "access": null,
    "description": "Runs `npm install --save-dev {packages}` at the given path.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path to install packages at."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "packages",
        "description": "Names of the packages to install."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined, Error>"
      ],
      "spread": false,
      "description": "Rejected if installing failed, resolved otherwise."
    }
  },
  {
    "__docId__": 45,
    "kind": "method",
    "name": "installLocal",
    "memberof": "src/cli/commands/Init.js~InitCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Init.js~InitCommand#installLocal",
    "access": null,
    "description": "Installs the local atscm module at the given path.",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path to install the module at."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined, Error>"
      ],
      "spread": false,
      "description": "Rejected if installing failed, resolved otherwise."
    }
  },
  {
    "__docId__": 46,
    "kind": "method",
    "name": "checkCliVersion",
    "memberof": "src/cli/commands/Init.js~InitCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Init.js~InitCommand#checkCliVersion",
    "access": null,
    "description": "Checks the version of this package against the \"engines.atscm-cli\" field of the newly installed\natscm module's package.json.",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "Liftoff.Environment"
        ],
        "spread": false,
        "optional": false,
        "name": "env",
        "description": "The environment to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Liftoff.Environment"
      ],
      "spread": false,
      "description": "The environment to check."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Throws an error if the atscm-cli version does not match."
      }
    ]
  },
  {
    "__docId__": 47,
    "kind": "method",
    "name": "getOptions",
    "memberof": "src/cli/commands/Init.js~InitCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Init.js~InitCommand#getOptions",
    "access": null,
    "description": "Resolves the needed options from the local atscm module and asks for them. These options are\nstored in the `atscm` module inside `out/init/options.js`.",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "modulePath",
        "description": "The path to the local module to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "Resolved with the chosen options."
    }
  },
  {
    "__docId__": 48,
    "kind": "method",
    "name": "writeFiles",
    "memberof": "src/cli/commands/Init.js~InitCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Init.js~InitCommand#writeFiles",
    "access": null,
    "description": "Runs the local atscm module's init script. This script is stored in the `atscm` module inside\n`out/init/init.js`.",
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "modulePath",
        "description": "The path to the local module to use."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to apply (Received by calling\n{@link InitCommand#getOptions})."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{install: String[]}, Error>"
      ],
      "spread": false,
      "description": "Resolved with information on the further init\nsteps (e.g. which dependencies are needed), rejected with an error if running the init script\nfailed."
    }
  },
  {
    "__docId__": 49,
    "kind": "method",
    "name": "installDependencies",
    "memberof": "src/cli/commands/Init.js~InitCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Init.js~InitCommand#installDependencies",
    "access": null,
    "description": "Installs any additional dependencies needed after writing files.",
    "lineNumber": 190,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path to install the dependencies at."
      },
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "deps",
        "description": "Names of the packages to install."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined, Error>"
      ],
      "spread": false,
      "description": "Rejected if installing failed, resolved otherwise."
    }
  },
  {
    "__docId__": 50,
    "kind": "method",
    "name": "run",
    "memberof": "src/cli/commands/Init.js~InitCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Init.js~InitCommand#run",
    "access": null,
    "description": "Creates a new atscm project.",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtSCMCli"
        ],
        "spread": false,
        "optional": false,
        "name": "cli",
        "description": "The current Cli instance."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "requiresEnvironment",
    "memberof": "src/cli/commands/Init.js~InitCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Init.js~InitCommand#requiresEnvironment",
    "access": null,
    "description": "This command never requires an {@link Liftoff.Environment}.",
    "lineNumber": 223,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Always `false`."
    }
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "src/cli/commands/Run.js",
    "content": "import { join } from 'path';\nimport colors from 'chalk';\nimport Command from '../../lib/cli/Command';\nimport CliOptions from '../Options';\n\n/**\n * The command invoked when running \"run\".\n */\nexport default class RunCommand extends Command {\n\n  /**\n   * Creates a new {@link RunCommand} with the specified name and description.\n   * @param {String} name The command's name.\n   * @param {String} description The command's description.\n   */\n  constructor(name, description) {\n    super(name, description, {\n      arguments: '[tasks...]',\n      options: {\n        tasks: CliOptions.tasks,\n        'tasks-simple': CliOptions['tasks-simple'],\n        'tasks-json': CliOptions['tasks-json'],\n        continue: CliOptions.continue,\n      },\n    });\n  }\n\n  /**\n   * Runs gulp with the specified tasks.\n   * @param {AtSCMCli} cli The current Cli instance.\n   */\n  run(cli) {\n    const opts = {\n      _: cli.options.tasks,\n      tasks: cli.options.T,\n      tasksSimple: cli.options.tasksSimple,\n      tasksJson: cli.options.tasksJson,\n      continue: cli.options.continue,\n    };\n\n    process.env.ATSCM_CONFIG_PATH = cli.environment.configPath;\n\n    // eslint-disable-next-line global-require\n    require('gulp-cli/lib/versioned/^4.0.0-alpha.2/')(\n      opts,\n      {\n        configPath: join(cli.environment.modulePath, '../Gulpfile.js'),\n        modulePath: join(cli.environment.cwd, 'node_modules/gulp'),\n      }, {\n        description: colors.bold('Available tasks:'),\n      });\n  }\n\n}\n",
    "static": true,
    "longname": "src/cli/commands/Run.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "class",
    "name": "RunCommand",
    "memberof": "src/cli/commands/Run.js",
    "static": true,
    "longname": "src/cli/commands/Run.js~RunCommand",
    "access": null,
    "export": true,
    "importPath": "atscm-cli/src/cli/commands/Run.js",
    "importStyle": "RunCommand",
    "description": "The command invoked when running \"run\".",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/lib/cli/Command.js~Command"
    ]
  },
  {
    "__docId__": 54,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/cli/commands/Run.js~RunCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Run.js~RunCommand#constructor",
    "access": null,
    "description": "Creates a new {@link RunCommand} with the specified name and description.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The command's name."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "The command's description."
      }
    ]
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "run",
    "memberof": "src/cli/commands/Run.js~RunCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Run.js~RunCommand#run",
    "access": null,
    "description": "Runs gulp with the specified tasks.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtSCMCli"
        ],
        "spread": false,
        "optional": false,
        "name": "cli",
        "description": "The current Cli instance."
      }
    ]
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/cli/commands/Update.js",
    "content": "import { get } from 'axios';\nimport { gt } from 'semver';\nimport Logger from '../../lib/util/Logger';\nimport Command from '../../lib/cli/Command';\nimport ExternalCommand from '../../lib/util/ExternalCommand';\n\n/**\n * The command invoked by running \"update\".\n */\nexport default class UpdateCommand extends Command {\n\n  /**\n   * Checks atscm's dist-tags in the npm registry and resolves with the latest version available.\n   * @return {Promise<string>} Fulfilled with the latest atscm version available.\n   */\n  getLatestVersion() {\n    return get('https://registry.npmjs.org/-/package/atscm/dist-tags')\n      .then(res => res.data.latest);\n  }\n\n  /**\n   * Checks if an update is required with the given latest and current version.\n   * @param {string} latestVersion The latest version available.\n   * @param {string} currentVersion The current version to check against.\n   * @return {boolean|string} Returns `false` if no update is required or the version to install if\n   * an update is required.\n   */\n  updateNeeded(latestVersion, currentVersion) {\n    Logger.debug('Latest version:    ', Logger.format.value(latestVersion));\n    Logger.debug('Current version:   ', Logger.format.value(currentVersion));\n\n    return gt(latestVersion, currentVersion) && latestVersion;\n  }\n\n  /**\n   * Runs `npm install --save-dev atscm@latest` in a separate process.\n   * @param {AtSCMCli} cli The cli instance used.\n   * @return {Promise<string, Error>} Fulfilled with npm's stdout or rejected with a spawn error or\n   * error code.\n   */\n  update(cli) {\n    return ExternalCommand.run('npm', ['install', '--save-dev', 'atscm@latest'], {\n      spawn: {\n        cwd: cli.environment.cwd,\n      },\n    });\n  }\n\n  /**\n   * Updates atscm if a newer version is available.\n   * @param {AtSCMCli} cli The cli instance used.\n   * @return {Promise<*>} Resolved if the command completed suceessfully, rejected with the error\n   * that occurred otherwise.\n   */\n  run(cli) {\n    return Promise.all([\n      this.getLatestVersion(),\n      Promise.resolve(cli.environment.modulePackage.version),\n    ])\n      .then(versions => this.updateNeeded(...versions))\n      .then(needed => {\n        if (needed) {\n          Logger.info('Updating to version', Logger.format.value(needed));\n\n          return this.update(cli)\n            .then(() => Logger.info('Done.'));\n        }\n\n        return Logger.info('Already up-to-date.');\n      });\n  }\n\n  /**\n   * This command always needs to be run inside an existant atscm project.\n   * @return {boolean} Always `true`.\n   */\n  requiresEnvironment() {\n    return true;\n  }\n\n}\n",
    "static": true,
    "longname": "src/cli/commands/Update.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "class",
    "name": "UpdateCommand",
    "memberof": "src/cli/commands/Update.js",
    "static": true,
    "longname": "src/cli/commands/Update.js~UpdateCommand",
    "access": null,
    "export": true,
    "importPath": "atscm-cli/src/cli/commands/Update.js",
    "importStyle": "UpdateCommand",
    "description": "The command invoked by running \"update\".",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/lib/cli/Command.js~Command"
    ]
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "getLatestVersion",
    "memberof": "src/cli/commands/Update.js~UpdateCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Update.js~UpdateCommand#getLatestVersion",
    "access": null,
    "description": "Checks atscm's dist-tags in the npm registry and resolves with the latest version available.",
    "lineNumber": 16,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": "Fulfilled with the latest atscm version available."
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "updateNeeded",
    "memberof": "src/cli/commands/Update.js~UpdateCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Update.js~UpdateCommand#updateNeeded",
    "access": null,
    "description": "Checks if an update is required with the given latest and current version.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "latestVersion",
        "description": "The latest version available."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "currentVersion",
        "description": "The current version to check against."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "string"
      ],
      "spread": false,
      "description": "Returns `false` if no update is required or the version to install if\nan update is required."
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "update",
    "memberof": "src/cli/commands/Update.js~UpdateCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Update.js~UpdateCommand#update",
    "access": null,
    "description": "Runs `npm install --save-dev atscm@latest` in a separate process.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtSCMCli"
        ],
        "spread": false,
        "optional": false,
        "name": "cli",
        "description": "The cli instance used."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, Error>"
      ],
      "spread": false,
      "description": "Fulfilled with npm's stdout or rejected with a spawn error or\nerror code."
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "run",
    "memberof": "src/cli/commands/Update.js~UpdateCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Update.js~UpdateCommand#run",
    "access": null,
    "description": "Updates atscm if a newer version is available.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtSCMCli"
        ],
        "spread": false,
        "optional": false,
        "name": "cli",
        "description": "The cli instance used."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<*>"
      ],
      "spread": false,
      "description": "Resolved if the command completed suceessfully, rejected with the error\nthat occurred otherwise."
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "requiresEnvironment",
    "memberof": "src/cli/commands/Update.js~UpdateCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/commands/Update.js~UpdateCommand#requiresEnvironment",
    "access": null,
    "description": "This command always needs to be run inside an existant atscm project.",
    "lineNumber": 77,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Always `true`."
    }
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "src/lib/cli/Command.js",
    "content": "/**\n * A command that can be run through the CLI.\n * @abstract\n */\nexport default class Command {\n\n  /**\n   * Creates a new Command with the given name and options.\n   * @param {String} name The command's name.\n   * @param {String} description The command's description.\n   * @param {Object} options The options to apply.\n   * @param {Map<String, Option>} options.options The options available for this command.\n   * @param {String} [options.arguments] The command's argument string. See\n   * [yargs' documentation](http://yargs.js.org/docs/#methods-commandmodule-positional-arguments)\n   * for details.\n   * @param {Number} [options.minArguments] The minimum number or (non-option) arguments the command\n   * requires.\n   * @param {Number} [options.maxArguments] The maximum number or (non-option) arguments the command\n   * requires.\n   * @throws {Error} Throws an error if options.maxArguments is less than options.minArguments.\n   */\n  constructor(name, description, options = {}) {\n    /**\n     * The command's name.\n     * @type {String}\n     */\n    this.name = name;\n\n    /**\n     * The command descriptions.\n     * @type {String}\n     */\n    this.description = description;\n\n    if (options.minArguments && options.maxArguments !== undefined\n      && options.maxArguments < options.minArguments) {\n      throw new Error('options.maxArguments must not be less than options.minArguments');\n    }\n\n    /**\n     * The command's raw options.\n     * @type {Object}\n     * @private\n     */\n    this._options = options;\n  }\n\n  /**\n   * Runs the command with the current Cli instance. **Asynchronous commands should return a Promise\n   * here.**\n   * @param {AtSCMCli} cli The current cli instance.\n   */\n  run(cli) { // eslint-disable-line no-unused-vars\n    throw new Error('Must be implemented by all subclasses');\n  }\n\n  /**\n   * Returns `true` if the command requires a {@link Liftoff.Environment} before it can be run.\n   * @param {AtSCMCli} cli The current cli instance.\n   * @return {Boolean} `true` if the command requires a {@link Liftoff.Environment}.\n   */\n  requiresEnvironment(cli) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Returns the usage string for the command. Something like \"{name} {arguments}\".\n   * @type {String}\n   */\n  get usage() {\n    if (this._options.arguments) {\n      return `${this.name} ${this._options.arguments}`;\n    }\n\n    return this.name;\n  }\n\n  /**\n   * The options available for the command.\n   * @type {Map<String, Option>}\n   */\n  get options() {\n    return this._options.options || {};\n  }\n\n  /**\n   * The minimum and maximum number of (non-option) arguments the command handles.\n   * @type {Number[]}\n   */\n  get demandCommand() {\n    const ret = [this._options.minArguments || 0];\n\n    if (this._options.maxArguments !== undefined) {\n      ret.push(this._options.maxArguments);\n    }\n\n    return ret;\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/cli/Command.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "class",
    "name": "Command",
    "memberof": "src/lib/cli/Command.js",
    "static": true,
    "longname": "src/lib/cli/Command.js~Command",
    "access": null,
    "export": true,
    "importPath": "atscm-cli/src/lib/cli/Command.js",
    "importStyle": "Command",
    "description": "A command that can be run through the CLI.",
    "lineNumber": 5,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 65,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/cli/Command.js~Command",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/cli/Command.js~Command#constructor",
    "access": null,
    "description": "Creates a new Command with the given name and options.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The command's name."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "The command's description."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to apply."
      },
      {
        "nullable": null,
        "types": [
          "Map<String, Option>"
        ],
        "spread": false,
        "optional": false,
        "name": "options.options",
        "description": "The options available for this command."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.arguments",
        "description": "The command's argument string. See\n[yargs' documentation](http://yargs.js.org/docs/#methods-commandmodule-positional-arguments)\nfor details."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.minArguments",
        "description": "The minimum number or (non-option) arguments the command\nrequires."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.maxArguments",
        "description": "The maximum number or (non-option) arguments the command\nrequires."
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Throws an error if options.maxArguments is less than options.minArguments."
      }
    ]
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "name",
    "memberof": "src/lib/cli/Command.js~Command",
    "static": false,
    "longname": "src/lib/cli/Command.js~Command#name",
    "access": null,
    "description": "The command's name.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "description",
    "memberof": "src/lib/cli/Command.js~Command",
    "static": false,
    "longname": "src/lib/cli/Command.js~Command#description",
    "access": null,
    "description": "The command descriptions.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "_options",
    "memberof": "src/lib/cli/Command.js~Command",
    "static": false,
    "longname": "src/lib/cli/Command.js~Command#_options",
    "access": "private",
    "description": "The command's raw options.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "run",
    "memberof": "src/lib/cli/Command.js~Command",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/cli/Command.js~Command#run",
    "access": null,
    "description": "Runs the command with the current Cli instance. **Asynchronous commands should return a Promise\nhere.**",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtSCMCli"
        ],
        "spread": false,
        "optional": false,
        "name": "cli",
        "description": "The current cli instance."
      }
    ]
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "requiresEnvironment",
    "memberof": "src/lib/cli/Command.js~Command",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/cli/Command.js~Command#requiresEnvironment",
    "access": null,
    "description": "Returns `true` if the command requires a {@link Liftoff.Environment} before it can be run.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtSCMCli"
        ],
        "spread": false,
        "optional": false,
        "name": "cli",
        "description": "The current cli instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` if the command requires a {@link Liftoff.Environment}."
    }
  },
  {
    "__docId__": 71,
    "kind": "get",
    "name": "usage",
    "memberof": "src/lib/cli/Command.js~Command",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/cli/Command.js~Command#usage",
    "access": null,
    "description": "Returns the usage string for the command. Something like \"{name} {arguments}\".",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "get",
    "name": "options",
    "memberof": "src/lib/cli/Command.js~Command",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/cli/Command.js~Command#options",
    "access": null,
    "description": "The options available for the command.",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, Option>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "get",
    "name": "demandCommand",
    "memberof": "src/lib/cli/Command.js~Command",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/cli/Command.js~Command#demandCommand",
    "access": null,
    "description": "The minimum and maximum number of (non-option) arguments the command handles.",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "Number[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/lib/cli/Option.js",
    "content": "/**\n * A command line option.\n */\nexport default class Option {\n\n  /**\n   * Creates a new {@link Option} based on a description and some options.\n   * @param {String} desc A string describing the option. Used for help texts.\n   * @param {Object} [options={}] The options to create the {@link Option} with. Refer to\n   * [yarg's documentation](http://yargs.js.org/docs/#methods-optionskey-opt) in order to know what\n   * options can be used here.\n   */\n  constructor(desc, options = {}) {\n    /**\n     * A string describing the option. Used for help texts.\n     * @type {String}\n     */\n    this.desc = desc;\n\n    Object.keys(options)\n      .forEach(k => (this[k] = options[k]));\n  }\n\n  /**\n   * Shorthand to create an {@link Option} with type boolean.\n   * @param {String} desc A string describing the option. Used for help texts.\n   * @param {Object} [options={type: 'boolean'}] The options to create the {@link Option} with.\n   * @return {Option} An {@link Option} with type boolean.\n   */\n  static boolean(desc, options = {}) {\n    return new this(desc, Object.assign(options, { type: 'boolean' }));\n  }\n\n  /**\n   * Shorthand to create an {@link Option} with type string.\n   * @param {String} desc A string describing the option. Used for help texts.\n   * @param {Object} [options={type: 'string', requiresArg: true}] The options to create the\n   * {@link Option} with.\n   * @return {Option} An {@link Option} with type string.\n   */\n  static string(desc, options = {}) {\n    return new this(desc, Object.assign(options, { type: 'string', requiresArg: true }));\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/cli/Option.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "class",
    "name": "Option",
    "memberof": "src/lib/cli/Option.js",
    "static": true,
    "longname": "src/lib/cli/Option.js~Option",
    "access": null,
    "export": true,
    "importPath": "atscm-cli/src/lib/cli/Option.js",
    "importStyle": "Option",
    "description": "A command line option.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 76,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/cli/Option.js~Option",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/cli/Option.js~Option#constructor",
    "access": null,
    "description": "Creates a new {@link Option} based on a description and some options.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "desc",
        "description": "A string describing the option. Used for help texts."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "The options to create the {@link Option} with. Refer to\n[yarg's documentation](http://yargs.js.org/docs/#methods-optionskey-opt) in order to know what\noptions can be used here."
      }
    ]
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "desc",
    "memberof": "src/lib/cli/Option.js~Option",
    "static": false,
    "longname": "src/lib/cli/Option.js~Option#desc",
    "access": null,
    "description": "A string describing the option. Used for help texts.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "boolean",
    "memberof": "src/lib/cli/Option.js~Option",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/cli/Option.js~Option.boolean",
    "access": null,
    "description": "Shorthand to create an {@link Option} with type boolean.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "desc",
        "description": "A string describing the option. Used for help texts."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{type: 'boolean'}",
        "defaultRaw": "{type: 'boolean'}",
        "name": "options",
        "description": "The options to create the {@link Option} with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Option"
      ],
      "spread": false,
      "description": "An {@link Option} with type boolean."
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "string",
    "memberof": "src/lib/cli/Option.js~Option",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/cli/Option.js~Option.string",
    "access": null,
    "description": "Shorthand to create an {@link Option} with type string.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "desc",
        "description": "A string describing the option. Used for help texts."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{type: 'string', requiresArg: true}",
        "defaultRaw": "{type: 'string', requiresArg: true}",
        "name": "options",
        "description": "The options to create the\n{@link Option} with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Option"
      ],
      "spread": false,
      "description": "An {@link Option} with type string."
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/lib/error/UsageError.js",
    "content": "/**\n * An error reported when {@link yargs} fails to parse arguments.\n */\nexport default class UsageError extends Error {\n\n  /**\n   * Creates a new {@link UsageError} based on an error message and the failing parser.\n   * @param {String} message The error message.\n   * @param {String} help Help text for the failing command.\n   */\n  constructor(message, help) {\n    super(message);\n\n    /**\n     * Help text for the failing command.\n     * @type {String}\n     */\n    this.help = help;\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/error/UsageError.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "class",
    "name": "UsageError",
    "memberof": "src/lib/error/UsageError.js",
    "static": true,
    "longname": "src/lib/error/UsageError.js~UsageError",
    "access": null,
    "export": true,
    "importPath": "atscm-cli/src/lib/error/UsageError.js",
    "importStyle": "UsageError",
    "description": "An error reported when {@link yargs} fails to parse arguments.",
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/error/UsageError.js~UsageError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/error/UsageError.js~UsageError#constructor",
    "access": null,
    "description": "Creates a new {@link UsageError} based on an error message and the failing parser.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The error message."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "help",
        "description": "Help text for the failing command."
      }
    ]
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "help",
    "memberof": "src/lib/error/UsageError.js~UsageError",
    "static": false,
    "longname": "src/lib/error/UsageError.js~UsageError#help",
    "access": null,
    "description": "Help text for the failing command.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/lib/util/ExternalCommand.js",
    "content": "import { spawn } from 'child_process';\nimport which from 'which';\nimport Logger from './Logger';\n\n/**\n * A static class providing utilities to run external commands.\n */\nexport default class ExternalCommand {\n\n  /**\n   * Resolves the executable path for the given command.\n   * @param {string} name The command to resolve.\n   * @return {Promise<string, Error>} Fulfilled with the executable path or the error that occured\n   * while running `which`.\n   */\n  static resolveBin(name) {\n    return new Promise((resolve, reject) => {\n      which(name, (err, path) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(path);\n        }\n      });\n    });\n  }\n\n  /**\n   * Spawns an executable with the given args and options. See the [node.js docs on the\n   * `child_process` module](https://nodejs.org/api/child_process.html#child_process_child_process)\n   * for all available spawn options.\n   * @param {string} bin Path to the executable to run.\n   * @param {string[]} [args=[]] The arguments to use.\n   * @param {Object} [options] The options to use.\n   * @param {Object} [options.spawn] Options to use for the spawned process.\n   * @param {function(process: node.ChildProcess)} [options.onspawn] Callback to call once the\n   * process was created. Useful for handling stdio events etc.\n   * @return {Promise<string, Error>} Fulfilled with the child process' stdout or rejected with a\n   * spawn error or non-zero exit code.\n   */\n  static spawn(bin, args = [], options = {}) {\n    return new Promise((resolve, reject) => {\n      let stdout = '';\n\n      Logger.debug('Running', Logger.format.command(`${bin} ${args.join(' ')}`));\n      const child = spawn(bin, args, options.spawn || options)\n        .once('error', err => reject(err))\n        .once('close', code => {\n          if (code > 0) {\n            reject(new Error(`${bin} ${args.join(' ')} returned code ${code}`));\n          } else {\n            resolve(stdout.trim());\n          }\n        });\n\n      child.stdout.on('data', d => (stdout += d.toString()));\n\n      if (options.onspawn) {\n        options.onspawn(child);\n      }\n    });\n  }\n\n  /**\n   * Resolves the executable for the given command and runs it with the arguments and options given.\n   * See the [node.js docs on the\n   * `child_process` module](https://nodejs.org/api/child_process.html#child_process_child_process)\n   * for all available spawn options.\n   * @param {string} name The command to run.\n   * @param {string[]} [args] The arguments to use.\n   * @param {Object} [options] The options to use.\n   * @param {Object} [options.spawn] Options to use for the spawned process.\n   * @param {function(process: node.ChildProcess)} [options.onspawn] Callback to call once the\n   * process was created. Useful for handling stdio events etc.\n   * @return {Promise<string, Error>} Fulfilled with the child process' stdout or rejected with a\n   * spawn error, a non-zero exit code or an error that occured while running `which`.\n   */\n  static run(name, args, options) {\n    return this.resolveBin(name)\n      .then(bin => this.spawn(bin, args, options));\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/util/ExternalCommand.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "class",
    "name": "ExternalCommand",
    "memberof": "src/lib/util/ExternalCommand.js",
    "static": true,
    "longname": "src/lib/util/ExternalCommand.js~ExternalCommand",
    "access": null,
    "export": true,
    "importPath": "atscm-cli/src/lib/util/ExternalCommand.js",
    "importStyle": "ExternalCommand",
    "description": "A static class providing utilities to run external commands.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "resolveBin",
    "memberof": "src/lib/util/ExternalCommand.js~ExternalCommand",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/ExternalCommand.js~ExternalCommand.resolveBin",
    "access": null,
    "description": "Resolves the executable path for the given command.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The command to resolve."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, Error>"
      ],
      "spread": false,
      "description": "Fulfilled with the executable path or the error that occured\nwhile running `which`."
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "spawn",
    "memberof": "src/lib/util/ExternalCommand.js~ExternalCommand",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/ExternalCommand.js~ExternalCommand.spawn",
    "access": null,
    "description": "Spawns an executable with the given args and options. See the [node.js docs on the\n`child_process` module](https://nodejs.org/api/child_process.html#child_process_child_process)\nfor all available spawn options.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bin",
        "description": "Path to the executable to run."
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "args",
        "description": "The arguments to use."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options to use."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.spawn",
        "description": "Options to use for the spawned process."
      },
      {
        "nullable": null,
        "types": [
          "function(process: node.ChildProcess)"
        ],
        "spread": false,
        "optional": true,
        "name": "options.onspawn",
        "description": "Callback to call once the\nprocess was created. Useful for handling stdio events etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, Error>"
      ],
      "spread": false,
      "description": "Fulfilled with the child process' stdout or rejected with a\nspawn error or non-zero exit code."
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "run",
    "memberof": "src/lib/util/ExternalCommand.js~ExternalCommand",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/ExternalCommand.js~ExternalCommand.run",
    "access": null,
    "description": "Resolves the executable for the given command and runs it with the arguments and options given.\nSee the [node.js docs on the\n`child_process` module](https://nodejs.org/api/child_process.html#child_process_child_process)\nfor all available spawn options.",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The command to run."
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "name": "args",
        "description": "The arguments to use."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options to use."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.spawn",
        "description": "Options to use for the spawned process."
      },
      {
        "nullable": null,
        "types": [
          "function(process: node.ChildProcess)"
        ],
        "spread": false,
        "optional": true,
        "name": "options.onspawn",
        "description": "Callback to call once the\nprocess was created. Useful for handling stdio events etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, Error>"
      ],
      "spread": false,
      "description": "Fulfilled with the child process' stdout or rejected with a\nspawn error, a non-zero exit code or an error that occured while running `which`."
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/lib/util/Logger.js",
    "content": "import readline from 'readline';\nimport { Console } from 'console';\nimport gulplog from 'gulplog';\nimport chalk from 'chalk';\nimport tildify from 'tildify';\n\nconst logConsole = new Console(process.stdout, process.stderr);\n\n/**\n * Formats strings to be used in the {@link Logger}.\n */\nexport class LogFormat {\n\n  /**\n   * Formats a string to represent a path.\n   * @param {String} path The path to format.\n   * @return {String} The formatted string.\n   */\n  static path(path) {\n    return chalk.magenta(tildify(path));\n  }\n\n  /**\n   * Formats a string to represent a command.\n   * @param {String} command The command to format.\n   * @return {String} The formatted string.\n   */\n  static command(command) {\n    return chalk.bold(command);\n  }\n\n  /**\n   * Formats a string to represent a value. Use this format for files, module names, etc.\n   * @param {String} value The value to format.\n   * @return {String} The formatted string.\n   */\n  static value(value) {\n    return chalk.cyan(value);\n  }\n\n  /**\n   * Formats a string to represent a number. Use this format for times, counts, etc.\n   * @param {String} number The value to format.\n   * @return {String} The formatted string.\n   */\n  static number(number) {\n    return chalk.magenta(number);\n  }\n\n}\n\n/**\n * A logger used in all console outputs.\n * **Should never be instantiated.**\n * Log levels, `--silent`-flags etc. are handled automatically by {@link gulplog}.\n */\nexport default class Logger {\n\n  /**\n   * An instance of {@link chalk}.\n   * @type {chalk}\n   */\n  static get colors() {\n    return chalk;\n  }\n\n  /**\n   * An instance of {@link LogFormat}.\n   * @type {LogFormat}\n   */\n  static get format() {\n    return LogFormat;\n  }\n\n  /**\n   * The prefix added to each log. Should always equal\n   * [fancy-logs prefix](https://github.com/js-cli/fancy-log/blob/master/index.js#L8).\n   * @type {String}\n   */\n  static get prefix() {\n    function pad(val) {\n      return `00${val}`.slice(-2);\n    }\n\n    const now = new Date();\n    const timestamp = [\n      pad(now.getHours()),\n      pad(now.getMinutes()),\n      pad(now.getSeconds()),\n    ].join(':');\n\n    return `[${chalk.gray(timestamp)}]`;\n  }\n\n  /**\n   * Print debug messages.\n   * @param {...String} message The message(s) to print.\n   */\n  static debug(...message) {\n    gulplog.debug(...message);\n  }\n\n  /**\n   * Print regular logs.\n   * @param {...String} message The message(s) to print.\n   */\n  static info(...message) {\n    gulplog.info(...message);\n  }\n\n  /**\n   * Print warnings.\n   * @param {...String} message The message(s) to print.\n   */\n  static warn(...message) {\n    gulplog.warn(...message);\n  }\n\n  /**\n   * Print error messages.\n   * @param {...String} message The message(s) to print.\n   */\n  static error(...message) {\n    gulplog.error(...message);\n  }\n\n  /**\n   * The log types available.\n   * @type {String[]}\n   */\n  static get types() {\n    return ['error', 'warn', 'info', 'debug'];\n  }\n\n  /**\n   * Apply options to the logger.\n   * **Should only be called once.**\n   * @param {Object} options Options passed to {@link gulplog}.\n   */\n  static applyOptions(options) {\n    if (options.tasksSimple || options.silent || options.logLevel === 0) {\n      gulplog.on('error', () => {});\n      return;\n    }\n\n    /**\n     * The log types handled.\n     * @type {Map<String, Boolean>}\n     */\n    this._handled = {};\n\n    this.types\n      .filter((item, i) => {\n        const handle = (i < options.logLevel);\n\n        this._handled[item] = handle;\n\n        return handle;\n      })\n      .forEach(level => gulplog.on(level, (...args) => {\n        logConsole[level === 'error' ? 'error' : 'info'](...[this.prefix].concat(args));\n      }));\n  }\n\n  /**\n   * Pipes a readable stream and logs the last line of each chunk processed.\n   * @param {node.stream.Readable} stream The stream to pipe.\n   */\n  static pipeLastLine(stream) {\n    let loggedBefore = false;\n\n    stream\n      .on('data', d => {\n        const lines = d.toString().split('\\n').filter(l => l.trim() !== '');\n\n        if (loggedBefore && this._handled.info) {\n          readline.moveCursor(process.stdout, 0, -1);\n          readline.clearLine(process.stdout);\n        }\n\n        Logger.info(lines[lines.length - 1]);\n        loggedBefore = true;\n      })\n      .on('end', () => {\n        if (loggedBefore && this._handled.info) {\n          readline.moveCursor(process.stdout, 0, -1);\n          readline.clearLine(process.stdout);\n          readline.cursorTo(process.stdout, 0);\n        }\n      });\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/util/Logger.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "logConsole",
    "memberof": "src/lib/util/Logger.js",
    "static": true,
    "longname": "src/lib/util/Logger.js~logConsole",
    "access": null,
    "export": false,
    "importPath": "atscm-cli/src/lib/util/Logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "console~Console"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "LogFormat",
    "memberof": "src/lib/util/Logger.js",
    "static": true,
    "longname": "src/lib/util/Logger.js~LogFormat",
    "access": null,
    "export": true,
    "importPath": "atscm-cli/src/lib/util/Logger.js",
    "importStyle": "{LogFormat}",
    "description": "Formats strings to be used in the {@link Logger}.",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "path",
    "memberof": "src/lib/util/Logger.js~LogFormat",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/Logger.js~LogFormat.path",
    "access": null,
    "description": "Formats a string to represent a path.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path to format."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The formatted string."
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "command",
    "memberof": "src/lib/util/Logger.js~LogFormat",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/Logger.js~LogFormat.command",
    "access": null,
    "description": "Formats a string to represent a command.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "The command to format."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The formatted string."
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "value",
    "memberof": "src/lib/util/Logger.js~LogFormat",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/Logger.js~LogFormat.value",
    "access": null,
    "description": "Formats a string to represent a value. Use this format for files, module names, etc.",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to format."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The formatted string."
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "number",
    "memberof": "src/lib/util/Logger.js~LogFormat",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/Logger.js~LogFormat.number",
    "access": null,
    "description": "Formats a string to represent a number. Use this format for times, counts, etc.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "The value to format."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The formatted string."
    }
  },
  {
    "__docId__": 96,
    "kind": "class",
    "name": "Logger",
    "memberof": "src/lib/util/Logger.js",
    "static": true,
    "longname": "src/lib/util/Logger.js~Logger",
    "access": null,
    "export": true,
    "importPath": "atscm-cli/src/lib/util/Logger.js",
    "importStyle": "Logger",
    "description": "A logger used in all console outputs.\n**Should never be instantiated.**\nLog levels, `--silent`-flags etc. are handled automatically by {@link gulplog}.",
    "lineNumber": 57,
    "interface": false
  },
  {
    "__docId__": 97,
    "kind": "get",
    "name": "colors",
    "memberof": "src/lib/util/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/Logger.js~Logger.colors",
    "access": null,
    "description": "An instance of {@link chalk}.",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "chalk"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "get",
    "name": "format",
    "memberof": "src/lib/util/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/Logger.js~Logger.format",
    "access": null,
    "description": "An instance of {@link LogFormat}.",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "LogFormat"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "get",
    "name": "prefix",
    "memberof": "src/lib/util/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/Logger.js~Logger.prefix",
    "access": null,
    "description": "The prefix added to each log. Should always equal\n[fancy-logs prefix](https://github.com/js-cli/fancy-log/blob/master/index.js#L8).",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "debug",
    "memberof": "src/lib/util/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/Logger.js~Logger.debug",
    "access": null,
    "description": "Print debug messages.",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "...String"
        ],
        "spread": true,
        "optional": false,
        "name": "message",
        "description": "The message(s) to print."
      }
    ]
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "info",
    "memberof": "src/lib/util/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/Logger.js~Logger.info",
    "access": null,
    "description": "Print regular logs.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "...String"
        ],
        "spread": true,
        "optional": false,
        "name": "message",
        "description": "The message(s) to print."
      }
    ]
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "warn",
    "memberof": "src/lib/util/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/Logger.js~Logger.warn",
    "access": null,
    "description": "Print warnings.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "...String"
        ],
        "spread": true,
        "optional": false,
        "name": "message",
        "description": "The message(s) to print."
      }
    ]
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "error",
    "memberof": "src/lib/util/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/Logger.js~Logger.error",
    "access": null,
    "description": "Print error messages.",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "...String"
        ],
        "spread": true,
        "optional": false,
        "name": "message",
        "description": "The message(s) to print."
      }
    ]
  },
  {
    "__docId__": 104,
    "kind": "get",
    "name": "types",
    "memberof": "src/lib/util/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/Logger.js~Logger.types",
    "access": null,
    "description": "The log types available.",
    "lineNumber": 131,
    "type": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "applyOptions",
    "memberof": "src/lib/util/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/Logger.js~Logger.applyOptions",
    "access": null,
    "description": "Apply options to the logger.\n**Should only be called once.**",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options passed to {@link gulplog}."
      }
    ]
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "_handled",
    "memberof": "src/lib/util/Logger.js~Logger",
    "static": true,
    "longname": "src/lib/util/Logger.js~Logger._handled",
    "access": null,
    "description": "The log types handled.",
    "lineNumber": 150,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, Boolean>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "pipeLastLine",
    "memberof": "src/lib/util/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util/Logger.js~Logger.pipeLastLine",
    "access": null,
    "description": "Pipes a readable stream and logs the last line of each chunk processed.",
    "lineNumber": 169,
    "params": [
      {
        "nullable": null,
        "types": [
          "node.stream.Readable"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "The stream to pipe."
      }
    ]
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/typedef/external.js",
    "content": "/**\n * @external {Liftoff} https://github.com/js-cli/js-liftoff\n */\n\n/**\n * A {@link Liftoff} environment.\n * @typedef {Object} Liftoff.Environment\n * @property {String} cwd The resulting working directory.\n * @property {String} [configPath] Path to the config file found.\n * @property {String} [configBase] The directory the config file is in.\n * @property {String} [modulePath] Path to the local module found.\n * @property {Object} [modulePackage={}] The parsed package.json of the local module found.\n */\n\n/**\n * @external {gulplog} https://github.com/gulpjs/gulplog\n */\n\n/**\n * @external {chalk} https://github.com/chalk/chalk\n */\n\n/**\n * @external {yargs} http://yargs.js.org\n */\n\n/**\n * @external {node.stream.Readable} https://nodejs.org/api/stream.html#stream_class_stream_readable\n */\n\n/**\n * @external {node.ChildProcess}\n * https://nodejs.org/api/child_process.html#child_process_class_childprocess\n */\n",
    "static": true,
    "longname": "src/typedef/external.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "external",
    "name": "Liftoff",
    "externalLink": "https://github.com/js-cli/js-liftoff",
    "memberof": "src/typedef/external.js",
    "static": true,
    "longname": "src/typedef/external.js~Liftoff",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 110,
    "kind": "typedef",
    "name": "Liftoff.Environment",
    "memberof": "src/typedef/external.js",
    "static": true,
    "longname": "src/typedef/external.js~Liftoff.Environment",
    "access": null,
    "description": "A {@link Liftoff} environment.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "cwd",
        "description": "The resulting working directory."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "configPath",
        "description": "Path to the config file found."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "configBase",
        "description": "The directory the config file is in."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "modulePath",
        "description": "Path to the local module found."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "modulePackage",
        "description": "The parsed package.json of the local module found."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Liftoff.Environment"
    }
  },
  {
    "__docId__": 111,
    "kind": "external",
    "name": "gulplog",
    "externalLink": "https://github.com/gulpjs/gulplog",
    "memberof": "src/typedef/external.js",
    "static": true,
    "longname": "src/typedef/external.js~gulplog",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 112,
    "kind": "external",
    "name": "chalk",
    "externalLink": "https://github.com/chalk/chalk",
    "memberof": "src/typedef/external.js",
    "static": true,
    "longname": "src/typedef/external.js~chalk",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 113,
    "kind": "external",
    "name": "yargs",
    "externalLink": "http://yargs.js.org",
    "memberof": "src/typedef/external.js",
    "static": true,
    "longname": "src/typedef/external.js~yargs",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 114,
    "kind": "external",
    "name": "node.stream.Readable",
    "externalLink": "https://nodejs.org/api/stream.html#stream_class_stream_readable",
    "memberof": "src/typedef/external.js",
    "static": true,
    "longname": "src/typedef/external.js~node.stream.Readable",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 115,
    "kind": "external",
    "name": "node.ChildProcess",
    "externalLink": "https://nodejs.org/api/child_process.html#child_process_class_childprocess",
    "memberof": "src/typedef/external.js",
    "static": true,
    "longname": "src/typedef/external.js~node.ChildProcess",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 117,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 118,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 119,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 120,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 121,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 122,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 123,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 124,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 125,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 126,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 127,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 128,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 129,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 130,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 131,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 132,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 133,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 134,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 135,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 136,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 137,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 138,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 139,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 140,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 141,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 142,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 143,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 144,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 145,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 146,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 147,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 148,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 149,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 150,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 151,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 152,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 153,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 154,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 155,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 156,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 157,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 158,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 159,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 160,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 161,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 162,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 163,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 165,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 166,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 167,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 168,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 169,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 170,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 171,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 172,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  },
  {
    "__docId__": 173,
    "kind": "testFile",
    "name": "test/AtSCMCli.spec.js",
    "content": "import { join } from 'path';\nimport expect from 'unexpected';\nimport { spy, stub } from 'sinon';\nimport proxyquire from 'proxyquire';\n\nimport colors from 'chalk';\nimport Liftoff from 'liftoff';\nimport { LogFormat } from '../src/lib/util/Logger';\nimport UsageError from '../src/lib/error/UsageError';\nimport Command from '../src/lib/cli/Command';\nimport pkg from '../package.json';\n\nconst LoggerSpy = {\n  debug: spy(),\n  info: spy(),\n  warn: spy(),\n  error: spy(),\n  applyOptions: spy(),\n  colors,\n  format: LogFormat,\n};\n\nconst AtSCMCli = proxyquire('../src/AtSCMCli', {\n  './lib/util/Logger': {\n    _esModule: true,\n    default: LoggerSpy,\n  },\n}).default;\n\n/** @test {AtSCMCli} */\ndescribe('AtSCMCli', function() {\n  beforeEach(() => {\n    LoggerSpy.debug.reset();\n    LoggerSpy.info.reset();\n    LoggerSpy.warn.reset();\n    LoggerSpy.error.reset();\n    LoggerSpy.applyOptions.reset();\n  });\n\n  /** @test {AtSCMCli#constructor} */\n  describe('#constructor', function() {\n    it('should throw UsageError with invalid options', function() {\n      expect(() => new AtSCMCli(['--cwd']), 'to throw');\n    });\n\n    it('should create an instance of Liftoff', function() {\n      expect(new AtSCMCli(), 'to be a', Liftoff);\n    });\n\n    it('should not add run argument if valid command is given', function() {\n      expect((new AtSCMCli(['docs']))._argv, 'to equal', ['docs']);\n    });\n\n    it('should not add run argument if --help is given', function() {\n      expect((new AtSCMCli(['--help']))._argv, 'to equal', ['--help']);\n    });\n\n    it('should not add run argument if --version is given', function() {\n      expect((new AtSCMCli(['--version']))._argv, 'to equal', ['--version']);\n    });\n\n    it('should add run argument if no command is given', function() {\n      expect((new AtSCMCli())._argv, 'to equal', ['run']);\n    });\n\n    it('should set runViaCli', function() {\n      // runViaCli is always set to false as we don't run this test from the command line directly.\n      expect((new AtSCMCli()).runViaCli, 'to equal', false);\n    });\n  });\n\n  /** @test {AtSCMCli#_exposeOverride} */\n  describe('#_exposeOverride', function() {\n    it('should set single options', function() {\n      AtSCMCli.prototype._exposeOverride({ test: 13 }, 'test', 'TEST_ENVS__');\n\n      expect(process.env.TEST_ENVS__TEST, 'to be defined');\n      expect(process.env.TEST_ENVS__TEST, 'to equal', '13');\n    });\n\n    it('should set object options', function() {\n      AtSCMCli.prototype._exposeOverride({ test: { another: 13 } }, 'test', 'TEST_ENVS__');\n\n      expect(process.env.TEST_ENVS__TEST__ANOTHER, 'to be defined');\n      expect(process.env.TEST_ENVS__TEST__ANOTHER, 'to equal', '13');\n    });\n\n    it('should use default base', function() {\n      AtSCMCli.prototype._exposeOverride({ test: 13 }, 'test');\n\n      expect(process.env.ATSCM_PROJECT__TEST, 'to be defined');\n      expect(process.env.ATSCM_PROJECT__TEST, 'to equal', '13');\n\n      delete process.env.ATSCM_PROJECT__TEST;\n    })\n  });\n\n  /** @test {AtSCMCli#parseArguments} */\n  describe('#parseArguments', function() {\n    const unknownArgCli = new AtSCMCli(['--unknown']);\n\n    it('should fail with UsageError with an unknown argument', function() {\n      return expect(unknownArgCli.parseArguments(), 'when rejected', 'to be a', UsageError);\n    });\n\n    it('should report the invalid argument', function() {\n      return expect(unknownArgCli.parseArguments(), 'when rejected',\n        'to have message', 'Unknown argument: unknown'\n      );\n    });\n\n    it('should return options with valid arguments', function() {\n      return expect((new AtSCMCli(['docs', '--cli'])).parseArguments(), 'when fulfilled',\n        'to have properties', { _: ['docs'], cli: true }\n      );\n    });\n\n    it('should set AtSCMCli#options with valid arguments', function() {\n      const cli = new AtSCMCli(['docs', '--cli']);\n\n      return cli.parseArguments()\n        .then(opts => expect(cli.options, 'to equal', opts));\n    });\n\n    it('should set AtSCMCli#command with valid command', function() {\n      const cli = new AtSCMCli(['docs', '--cli']);\n\n      return cli.parseArguments()\n        .then(() => expect(cli.command.name, 'to equal', 'docs'));\n    });\n\n    it('should expose project options as environment variables', function() {\n      const cli = new AtSCMCli(['--tasks', '--project.test', 'test']);\n\n      return cli.parseArguments()\n        .then(() => expect(process.env.ATSCM_PROJECT__TEST, 'to equal', 'test'));\n    });\n  });\n\n  /** @test {AtSCMCli#getEnvironment} */\n  describe('#getEnvironment', function() {\n    beforeEach(() => spy(Liftoff.prototype, 'launch'));\n    afterEach(() => Liftoff.prototype.launch.restore());\n\n    const cli = new AtSCMCli([\n      '--cwd', 'test/fixtures',\n      '--projectfile', 'test/fixtures/Atviseproject.js',\n    ]);\n\n    it('should call Liftoff#launch with cwd and projectfile option', function() {\n      return cli.getEnvironment()\n        .then(() => {\n          expect(Liftoff.prototype.launch.calledOnce, 'to be', true);\n          expect(Liftoff.prototype.launch.lastCall.args[0], 'to equal', {\n            cwd: 'test/fixtures',\n            configPath: 'test/fixtures/Atviseproject.js',\n          });\n        });\n    });\n\n    it('should set AtSCMCli#environment', function() {\n      return cli.getEnvironment()\n        .then(env => {\n          expect(cli.environment, 'to be defined');\n          expect(cli.environment, 'to equal', env);\n          expect(cli.environment, 'to have keys',\n            ['cwd', 'configPath', 'configBase', 'modulePath', 'modulePackage']\n          );\n        });\n    });\n\n    context('when not looking up parent directories', function() {\n      it('should resolve to initial cwd', function() {\n        return (new AtSCMCli()).getEnvironment(false)\n          .then(env => expect(env.cwd, 'to equal', process.cwd()));\n      });\n\n      const projChildDir = join('test/fixtures/node_modules');\n\n      it('should resolve to initial cwd in project child directories', function() {\n        return (new AtSCMCli([\n          '--cwd', projChildDir,\n        ])).getEnvironment(false)\n          .then(env => expect(env.cwd, 'to end with', projChildDir));\n      });\n\n      it('should ignore --projectfile option', function() {\n        return (new AtSCMCli([\n          '--cwd', projChildDir,\n          '--projectfile', join(projChildDir, '../Atviseproject.js'),\n        ])).getEnvironment(false)\n          .then(env => expect(env.cwd, 'to end with', projChildDir));\n      });\n    });\n  });\n\n  /** @test {AtSCMCli#requireEnvironment} */\n  describe('#requireEnvironment', function() {\n    it('should fail without local module', function() {\n      return expect((new AtSCMCli()).requireEnvironment(),\n        'to be rejected with', /Local .* not found/);\n    });\n\n    it('should return environment if successful', function() {\n      const cli = (new AtSCMCli(['--cwd', 'test/fixtures']));\n\n      return expect(cli.requireEnvironment(),\n        'when fulfilled', 'to have values satisfying', 'not to be falsy');\n    });\n  });\n\n  /** @test {AtSCMCli#getVersion} */\n  describe('#getVersion', function() {\n    it('should return cli version without local module', function() {\n      return expect((new AtSCMCli()).getVersion(), 'when fulfilled',\n        'to equal', { cli: pkg.version, local: null });\n    });\n\n    it('should even return cli version with invalid cwd', function() {\n      return expect((new AtSCMCli(['--cwd', 'invalid/path'])).getVersion(), 'when fulfilled',\n        'to equal', { cli: pkg.version, local: null });\n    });\n\n    it('should return local version with local module', function() {\n      return expect((new AtSCMCli(['--cwd', 'test/fixtures'])).getVersion(), 'to be fulfilled with',\n        { cli: pkg.version, local: 'latest' });\n    });\n  });\n\n  /** @test {AtSCMCli#printVersion} */\n  describe('#printVersion', function() {\n    it('should print cli version only without local module', function() {\n      return expect((new AtSCMCli()).printVersion(), 'to be fulfilled')\n        .then(() => {\n          expect(LoggerSpy.info.calledOnce, 'to be', true);\n          expect(LoggerSpy.info.lastCall.args[0], 'to match', /CLI version/);\n          expect(LoggerSpy.info.lastCall.args[1], 'to match', new RegExp(pkg.version));\n        });\n    });\n\n    it('should print cli and local version with local module', function() {\n      return expect((new AtSCMCli(['--cwd', 'test/fixtures'])).printVersion(), 'to be fulfilled')\n        .then(() => {\n          expect(LoggerSpy.info.calledTwice, 'to be', true);\n          expect(LoggerSpy.info.lastCall.args[0], 'to match', /Local version/);\n          expect(LoggerSpy.info.lastCall.args[1], 'to match', /latest/);\n        });\n    });\n  });\n\n  /** @test {AtSCMCli#runCommand} */\n  describe('#runCommand', function() {\n    it('should print version if --version is used', function() {\n      const cli = new AtSCMCli(['--version']);\n      cli.options.version = true;\n\n      spy(cli, 'printVersion');\n\n      return cli.runCommand()\n        .then(() => {\n          expect(cli.printVersion.calledOnce, 'to be', true);\n        });\n    });\n\n    it('should run command if used', function() {\n      const command = new Command('cmd', 'Just testing');\n      stub(command, 'run');\n      const cli = new AtSCMCli(['--cwd', 'test/fixtures']);\n      cli.command = command;\n\n      return cli.runCommand()\n        .then(() => {\n          expect(command.run.calledOnce, 'to be true');\n        });\n    });\n\n    it('should warn if no command is used', function() {\n      const cli = new AtSCMCli(['--cwd', 'test/fixtures']);\n\n      return cli.runCommand()\n        .then(() => {\n          expect(LoggerSpy.warn.calledOnce, 'to be', true);\n          expect(LoggerSpy.warn.lastCall.args[0], 'to contain', 'No command specified');\n        });\n    });\n  });\n\n  /** @test {AtSCMCli#launch} */\n  describe('#launch', function() {\n    it('should call AtSCMCli#parseArguments', function() {\n      const cli = new AtSCMCli();\n      spy(cli, 'parseArguments');\n      stub(cli, 'runCommand').callsFake(() => Promise.resolve(true));\n\n      return cli.launch()\n        .then(() => {\n          expect(cli.runCommand.calledOnce, 'to be true');\n          expect(cli.parseArguments.calledOnce, 'to be', true);\n        });\n    });\n\n    it('should handle all exceptions if run via cli', function() {\n      const cli = new AtSCMCli();\n      cli.runViaCli = true;\n      stub(cli, 'runCommand').callsFake(() => Promise.reject(new Error('test')));\n\n      return expect(cli.launch(), 'to be fulfilled');\n    });\n\n    it('should report help on usage errors if run via cli', function() {\n      const cli = new AtSCMCli(['--unknown']);\n      cli.runViaCli = true;\n\n      return expect(cli.launch(), 'to be fulfilled');\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/AtSCMCli.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 174,
    "kind": "testDescribe",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/AtSCMCli.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0",
    "access": null,
    "description": "AtSCMCli",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtSCMCli}"
      }
    ],
    "testTargets": [
      "AtSCMCli"
    ]
  },
  {
    "__docId__": 175,
    "kind": "testDescribe",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/AtSCMCli.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe1",
    "access": null,
    "description": "#constructor",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtSCMCli#constructor}"
      }
    ],
    "testTargets": [
      "AtSCMCli#constructor"
    ]
  },
  {
    "__docId__": 176,
    "kind": "testIt",
    "name": "it2",
    "testId": 2,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe1.it2",
    "access": null,
    "description": "should throw UsageError with invalid options",
    "lineNumber": 42
  },
  {
    "__docId__": 177,
    "kind": "testIt",
    "name": "it3",
    "testId": 3,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe1.it3",
    "access": null,
    "description": "should create an instance of Liftoff",
    "lineNumber": 46
  },
  {
    "__docId__": 178,
    "kind": "testIt",
    "name": "it4",
    "testId": 4,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe1.it4",
    "access": null,
    "description": "should not add run argument if valid command is given",
    "lineNumber": 50
  },
  {
    "__docId__": 179,
    "kind": "testIt",
    "name": "it5",
    "testId": 5,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe1.it5",
    "access": null,
    "description": "should not add run argument if --help is given",
    "lineNumber": 54
  },
  {
    "__docId__": 180,
    "kind": "testIt",
    "name": "it6",
    "testId": 6,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe1.it6",
    "access": null,
    "description": "should not add run argument if --version is given",
    "lineNumber": 58
  },
  {
    "__docId__": 181,
    "kind": "testIt",
    "name": "it7",
    "testId": 7,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe1.it7",
    "access": null,
    "description": "should add run argument if no command is given",
    "lineNumber": 62
  },
  {
    "__docId__": 182,
    "kind": "testIt",
    "name": "it8",
    "testId": 8,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe1.it8",
    "access": null,
    "description": "should set runViaCli",
    "lineNumber": 66
  },
  {
    "__docId__": 183,
    "kind": "testDescribe",
    "name": "describe9",
    "testId": 9,
    "memberof": "test/AtSCMCli.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe9",
    "access": null,
    "description": "#_exposeOverride",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtSCMCli#_exposeOverride}"
      }
    ],
    "testTargets": [
      "AtSCMCli#_exposeOverride"
    ]
  },
  {
    "__docId__": 184,
    "kind": "testIt",
    "name": "it10",
    "testId": 10,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe9",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe9.it10",
    "access": null,
    "description": "should set single options",
    "lineNumber": 74
  },
  {
    "__docId__": 185,
    "kind": "testIt",
    "name": "it11",
    "testId": 11,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe9",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe9.it11",
    "access": null,
    "description": "should set object options",
    "lineNumber": 81
  },
  {
    "__docId__": 186,
    "kind": "testIt",
    "name": "it12",
    "testId": 12,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe9",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe9.it12",
    "access": null,
    "description": "should use default base",
    "lineNumber": 88
  },
  {
    "__docId__": 187,
    "kind": "testDescribe",
    "name": "describe13",
    "testId": 13,
    "memberof": "test/AtSCMCli.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe13",
    "access": null,
    "description": "#parseArguments",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtSCMCli#parseArguments}"
      }
    ],
    "testTargets": [
      "AtSCMCli#parseArguments"
    ]
  },
  {
    "__docId__": 188,
    "kind": "testIt",
    "name": "it14",
    "testId": 14,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe13.it14",
    "access": null,
    "description": "should fail with UsageError with an unknown argument",
    "lineNumber": 102
  },
  {
    "__docId__": 189,
    "kind": "testIt",
    "name": "it15",
    "testId": 15,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe13.it15",
    "access": null,
    "description": "should report the invalid argument",
    "lineNumber": 106
  },
  {
    "__docId__": 190,
    "kind": "testIt",
    "name": "it16",
    "testId": 16,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe13.it16",
    "access": null,
    "description": "should return options with valid arguments",
    "lineNumber": 112
  },
  {
    "__docId__": 191,
    "kind": "testIt",
    "name": "it17",
    "testId": 17,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe13.it17",
    "access": null,
    "description": "should set AtSCMCli#options with valid arguments",
    "lineNumber": 118
  },
  {
    "__docId__": 192,
    "kind": "testIt",
    "name": "it18",
    "testId": 18,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe13.it18",
    "access": null,
    "description": "should set AtSCMCli#command with valid command",
    "lineNumber": 125
  },
  {
    "__docId__": 193,
    "kind": "testIt",
    "name": "it19",
    "testId": 19,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe13.it19",
    "access": null,
    "description": "should expose project options as environment variables",
    "lineNumber": 132
  },
  {
    "__docId__": 194,
    "kind": "testDescribe",
    "name": "describe20",
    "testId": 20,
    "memberof": "test/AtSCMCli.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe20",
    "access": null,
    "description": "#getEnvironment",
    "lineNumber": 141,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtSCMCli#getEnvironment}"
      }
    ],
    "testTargets": [
      "AtSCMCli#getEnvironment"
    ]
  },
  {
    "__docId__": 195,
    "kind": "testIt",
    "name": "it21",
    "testId": 21,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe20",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe20.it21",
    "access": null,
    "description": "should call Liftoff#launch with cwd and projectfile option",
    "lineNumber": 150
  },
  {
    "__docId__": 196,
    "kind": "testIt",
    "name": "it22",
    "testId": 22,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe20",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe20.it22",
    "access": null,
    "description": "should set AtSCMCli#environment",
    "lineNumber": 161
  },
  {
    "__docId__": 197,
    "kind": "testDescribe",
    "name": "context23",
    "testId": 23,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe20",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe20.context23",
    "access": null,
    "description": "when not looking up parent directories",
    "lineNumber": 172
  },
  {
    "__docId__": 198,
    "kind": "testIt",
    "name": "it24",
    "testId": 24,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe20.context23",
    "testDepth": 3,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe20.context23.it24",
    "access": null,
    "description": "should resolve to initial cwd",
    "lineNumber": 173
  },
  {
    "__docId__": 199,
    "kind": "testIt",
    "name": "it25",
    "testId": 25,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe20.context23",
    "testDepth": 3,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe20.context23.it25",
    "access": null,
    "description": "should resolve to initial cwd in project child directories",
    "lineNumber": 180
  },
  {
    "__docId__": 200,
    "kind": "testIt",
    "name": "it26",
    "testId": 26,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe20.context23",
    "testDepth": 3,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe20.context23.it26",
    "access": null,
    "description": "should ignore --projectfile option",
    "lineNumber": 187
  },
  {
    "__docId__": 201,
    "kind": "testDescribe",
    "name": "describe27",
    "testId": 27,
    "memberof": "test/AtSCMCli.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe27",
    "access": null,
    "description": "#requireEnvironment",
    "lineNumber": 198,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtSCMCli#requireEnvironment}"
      }
    ],
    "testTargets": [
      "AtSCMCli#requireEnvironment"
    ]
  },
  {
    "__docId__": 202,
    "kind": "testIt",
    "name": "it28",
    "testId": 28,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe27",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe27.it28",
    "access": null,
    "description": "should fail without local module",
    "lineNumber": 199
  },
  {
    "__docId__": 203,
    "kind": "testIt",
    "name": "it29",
    "testId": 29,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe27",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe27.it29",
    "access": null,
    "description": "should return environment if successful",
    "lineNumber": 204
  },
  {
    "__docId__": 204,
    "kind": "testDescribe",
    "name": "describe30",
    "testId": 30,
    "memberof": "test/AtSCMCli.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe30",
    "access": null,
    "description": "#getVersion",
    "lineNumber": 213,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtSCMCli#getVersion}"
      }
    ],
    "testTargets": [
      "AtSCMCli#getVersion"
    ]
  },
  {
    "__docId__": 205,
    "kind": "testIt",
    "name": "it31",
    "testId": 31,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe30.it31",
    "access": null,
    "description": "should return cli version without local module",
    "lineNumber": 214
  },
  {
    "__docId__": 206,
    "kind": "testIt",
    "name": "it32",
    "testId": 32,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe30.it32",
    "access": null,
    "description": "should even return cli version with invalid cwd",
    "lineNumber": 219
  },
  {
    "__docId__": 207,
    "kind": "testIt",
    "name": "it33",
    "testId": 33,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe30.it33",
    "access": null,
    "description": "should return local version with local module",
    "lineNumber": 224
  },
  {
    "__docId__": 208,
    "kind": "testDescribe",
    "name": "describe34",
    "testId": 34,
    "memberof": "test/AtSCMCli.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe34",
    "access": null,
    "description": "#printVersion",
    "lineNumber": 231,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtSCMCli#printVersion}"
      }
    ],
    "testTargets": [
      "AtSCMCli#printVersion"
    ]
  },
  {
    "__docId__": 209,
    "kind": "testIt",
    "name": "it35",
    "testId": 35,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe34.it35",
    "access": null,
    "description": "should print cli version only without local module",
    "lineNumber": 232
  },
  {
    "__docId__": 210,
    "kind": "testIt",
    "name": "it36",
    "testId": 36,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe34.it36",
    "access": null,
    "description": "should print cli and local version with local module",
    "lineNumber": 241
  },
  {
    "__docId__": 211,
    "kind": "testDescribe",
    "name": "describe37",
    "testId": 37,
    "memberof": "test/AtSCMCli.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe37",
    "access": null,
    "description": "#runCommand",
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtSCMCli#runCommand}"
      }
    ],
    "testTargets": [
      "AtSCMCli#runCommand"
    ]
  },
  {
    "__docId__": 212,
    "kind": "testIt",
    "name": "it38",
    "testId": 38,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe37",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe37.it38",
    "access": null,
    "description": "should print version if --version is used",
    "lineNumber": 253
  },
  {
    "__docId__": 213,
    "kind": "testIt",
    "name": "it39",
    "testId": 39,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe37",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe37.it39",
    "access": null,
    "description": "should run command if used",
    "lineNumber": 265
  },
  {
    "__docId__": 214,
    "kind": "testIt",
    "name": "it40",
    "testId": 40,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe37",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe37.it40",
    "access": null,
    "description": "should warn if no command is used",
    "lineNumber": 277
  },
  {
    "__docId__": 215,
    "kind": "testDescribe",
    "name": "describe41",
    "testId": 41,
    "memberof": "test/AtSCMCli.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe41",
    "access": null,
    "description": "#launch",
    "lineNumber": 289,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtSCMCli#launch}"
      }
    ],
    "testTargets": [
      "AtSCMCli#launch"
    ]
  },
  {
    "__docId__": 216,
    "kind": "testIt",
    "name": "it42",
    "testId": 42,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe41.it42",
    "access": null,
    "description": "should call AtSCMCli#parseArguments",
    "lineNumber": 290
  },
  {
    "__docId__": 217,
    "kind": "testIt",
    "name": "it43",
    "testId": 43,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe41.it43",
    "access": null,
    "description": "should handle all exceptions if run via cli",
    "lineNumber": 302
  },
  {
    "__docId__": 218,
    "kind": "testIt",
    "name": "it44",
    "testId": 44,
    "memberof": "test/AtSCMCli.spec.js~describe0.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/AtSCMCli.spec.js~describe0.describe41.it44",
    "access": null,
    "description": "should report help on usage errors if run via cli",
    "lineNumber": 310
  },
  {
    "__docId__": 219,
    "kind": "testFile",
    "name": "test/bin/atscm.spec.js",
    "content": "import expect from 'unexpected';\nimport proxyquire from 'proxyquire';\n\ndescribe('bin', function() {\n  class StubCli {\n\n    constructor(...args) {\n      if (!StubCli.constructorCalled) {\n        StubCli.constructorCalled = 0;\n      }\n\n      StubCli.constructorCalled++;\n      StubCli.constructorCalledWith = args;\n    }\n\n    launch(...args) {\n      if (!StubCli.launchCalled) {\n        StubCli.launchCalled = 0;\n      }\n\n      StubCli.launchCalled++;\n      StubCli.launchCalledWith = args;\n    }\n\n  }\n\n  proxyquire('../../src/bin/atscm', {\n    '../AtSCMCli': {\n      __esModule: true,\n      default: StubCli,\n    },\n  });\n\n  it('should call launch', function() {\n    require('../../src/bin/atscm'); // eslint-disable-line global-require\n\n    expect(StubCli.constructorCalled, 'to equal', 1);\n    expect(StubCli.constructorCalledWith, 'to equal', [process.argv.slice(2)]);\n    expect(StubCli.launchCalled, 'to equal', 1);\n    expect(StubCli.launchCalledWith, 'to equal', []);\n  });\n});\n",
    "static": true,
    "longname": "test/bin/atscm.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 220,
    "kind": "testDescribe",
    "name": "describe45",
    "testId": 45,
    "memberof": "test/bin/atscm.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/bin/atscm.spec.js~describe45",
    "access": null,
    "description": "bin",
    "lineNumber": 4
  },
  {
    "__docId__": 221,
    "kind": "testIt",
    "name": "it46",
    "testId": 46,
    "memberof": "test/bin/atscm.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/bin/atscm.spec.js~describe45.it46",
    "access": null,
    "description": "should call launch",
    "lineNumber": 34
  },
  {
    "__docId__": 222,
    "kind": "testFile",
    "name": "test/cli/commands/Config.spec.js",
    "content": "import { join } from 'path';\nimport expect from 'unexpected';\nimport { stub } from 'sinon';\n\nimport ConfigCommand from '../../../src/cli/commands/Config';\nimport Logger from '../../../src/lib/util/Logger';\n\n/** @test {ConfigCommand} */\ndescribe('ConfigCommand', function() {\n  /** @test {ConfigCommand#run} */\n  describe('#run', function() {\n    beforeEach(function() {\n      stub(Logger, 'info');\n      stub(Logger, 'warn');\n    });\n\n    afterEach(function() {\n      Logger.info.restore();\n      Logger.warn.restore();\n    });\n\n    const command = new ConfigCommand('config', 'Print configuration.');\n\n    context('when overrides are available (atscm >= v0.4)', function() {\n      it('should print local module\\'s ProjectConfig class', function() {\n        command.run({\n          options: {\n            project: {},\n          },\n          environment: {\n            modulePath: join(__dirname, '../../fixtures/node_modules/atscm/fake/v0-4.js'),\n            configPath: join(__dirname, '../../fixtures/Atviseproject.js'),\n          },\n        });\n\n        expect(Logger.info.calledOnce, 'to be', true);\n        expect(Logger.info.lastCall.args[0], 'to match', new RegExp('^Configuration at'));\n      });\n    });\n\n    context('when overrides are not available (atscm < v0.4)', function() {\n      it('should print local module\\'s Atviseproject class', function() {\n        command.run({\n          options: {\n            project: {},\n          },\n          environment: {\n            modulePath: join(__dirname, '../../fixtures/node_modules/atscm/fake/v0-3.js'),\n            configPath: join(__dirname, '../../fixtures/Atviseproject.js'),\n          },\n        });\n\n        expect(Logger.info.callCount, 'to equal', 2);\n        expect(Logger.info.firstCall.args[0], 'to match', new RegExp('^Configuration at'));\n      });\n\n      it('should warn that overrides are not available', function() {\n        command.run({\n          options: {\n            project: {},\n          },\n          environment: {\n            modulePath: join(__dirname, '../../fixtures/node_modules/atscm/fake/v0-3.js'),\n            configPath: join(__dirname, '../../fixtures/Atviseproject.js'),\n          },\n        });\n\n        expect(Logger.warn.calledOnce, 'to be', true);\n        expect(Logger.warn.lastCall.args[0], 'to contain',\n          'Overriding runtime configuration requires atscm version >= 0.4');\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/cli/commands/Config.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 223,
    "kind": "testDescribe",
    "name": "describe47",
    "testId": 47,
    "memberof": "test/cli/commands/Config.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cli/commands/Config.spec.js~describe47",
    "access": null,
    "description": "ConfigCommand",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ConfigCommand}"
      }
    ],
    "testTargets": [
      "ConfigCommand"
    ]
  },
  {
    "__docId__": 224,
    "kind": "testDescribe",
    "name": "describe48",
    "testId": 48,
    "memberof": "test/cli/commands/Config.spec.js~describe47",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Config.spec.js~describe47.describe48",
    "access": null,
    "description": "#run",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ConfigCommand#run}"
      }
    ],
    "testTargets": [
      "ConfigCommand#run"
    ]
  },
  {
    "__docId__": 225,
    "kind": "testDescribe",
    "name": "context49",
    "testId": 49,
    "memberof": "test/cli/commands/Config.spec.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Config.spec.js~describe47.describe48.context49",
    "access": null,
    "description": "when overrides are available (atscm >= v0.4)",
    "lineNumber": 24
  },
  {
    "__docId__": 226,
    "kind": "testIt",
    "name": "it50",
    "testId": 50,
    "memberof": "test/cli/commands/Config.spec.js~describe47.describe48.context49",
    "testDepth": 3,
    "static": true,
    "longname": "test/cli/commands/Config.spec.js~describe47.describe48.context49.it50",
    "access": null,
    "description": "should print local module's ProjectConfig class",
    "lineNumber": 25
  },
  {
    "__docId__": 227,
    "kind": "testDescribe",
    "name": "context51",
    "testId": 51,
    "memberof": "test/cli/commands/Config.spec.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Config.spec.js~describe47.describe48.context51",
    "access": null,
    "description": "when overrides are not available (atscm < v0.4)",
    "lineNumber": 41
  },
  {
    "__docId__": 228,
    "kind": "testIt",
    "name": "it52",
    "testId": 52,
    "memberof": "test/cli/commands/Config.spec.js~describe47.describe48.context51",
    "testDepth": 3,
    "static": true,
    "longname": "test/cli/commands/Config.spec.js~describe47.describe48.context51.it52",
    "access": null,
    "description": "should print local module's Atviseproject class",
    "lineNumber": 42
  },
  {
    "__docId__": 229,
    "kind": "testIt",
    "name": "it53",
    "testId": 53,
    "memberof": "test/cli/commands/Config.spec.js~describe47.describe48.context51",
    "testDepth": 3,
    "static": true,
    "longname": "test/cli/commands/Config.spec.js~describe47.describe48.context51.it53",
    "access": null,
    "description": "should warn that overrides are not available",
    "lineNumber": 57
  },
  {
    "__docId__": 230,
    "kind": "testFile",
    "name": "test/cli/commands/Docs.spec.js",
    "content": "import expect from 'unexpected';\nimport { spy } from 'sinon';\nimport proxyquire from 'proxyquire';\nimport { join } from 'path';\n\nconst openSpy = spy();\nconst DocsCommand = proxyquire('../../../src/cli/commands/Docs', {\n  open: openSpy,\n}).default;\n\n/** @test {DocsCommand} */\ndescribe('DocsCommand', function() {\n  const command = new DocsCommand('docs', 'Open documentation.');\n\n  /** @test {DocsCommand#localDocsPath} */\n  describe('#localDocsPath', function() {\n    it('should be local api docs by default', function() {\n      expect(\n        command.localDocsPath({\n          options: {},\n          environment: {\n            modulePath: '/path/to/package.json',\n          },\n        }),\n        'to equal', join('/path/docs/api/index.html')\n      );\n    });\n\n    it('should be cli api docs with --cli option', function() {\n      expect(\n        command.localDocsPath({\n          options: { cli: true },\n        }),\n        'to equal', join(__dirname, '../../../docs/api/index.html')\n      );\n    });\n  });\n\n  /** @test {DocsCommand#remoteDocsUrl} */\n  describe('#remoteDocsUrl', function() {\n    it('should return path to atscm docs by default', function() {\n      expect(command.remoteDocsUrl({ options: {} }),\n        'to equal', `${DocsCommand.RemoteDocsBase}atscm`);\n    });\n\n    it('should return path to atscm-cli docs with `--cli` option passed', function() {\n      expect(command.remoteDocsUrl({ options: { cli: true } }),\n        'to equal', `${DocsCommand.RemoteDocsBase}atscm-cli`);\n    });\n  });\n\n  /** @test {DocsCommand#addressToOpen} */\n  describe('#addressToOpen', function() {\n    it('should return local path if not remote option was passed', function() {\n      const { address, isPath } = command.addressToOpen({\n        options: {},\n        environment: { modulePath: '/path/to/package.json' }\n      });\n\n      expect(address, 'to equal', join('/path/docs/api/index.html'));\n      expect(isPath, 'to equal', true);\n    });\n\n    it('should return local path if remote option was set to false', function() {\n      const { isPath } = command.addressToOpen({\n        options: { remote: false },\n        environment: { modulePath: '/path/to/package.json' }\n      });\n\n      expect(isPath, 'to equal', true);\n    });\n\n    it('should return remote url if remote was set to true', function() {\n      const { isPath } = command.addressToOpen({\n        options: { remote: true },\n        environment: { modulePath: '/path/to/package.json' }\n      });\n\n      expect(isPath, 'to equal', false);\n    });\n\n    it('should return remote url if cli.env.modulePath is undefined', function() {\n      const { isPath } = command.addressToOpen({\n        options: { remote: true },\n        environment: {}\n      });\n\n      expect(isPath, 'to equal', false);\n    });\n\n    it('should return local path if cli option was set', function() {\n      const { isPath } = command.addressToOpen({\n        options: { cli: true },\n        environment: {}\n      });\n\n      expect(isPath, 'to equal', true);\n    });\n  });\n\n  /** @test {DocsCommand#run} */\n  describe('#run', function() {\n    beforeEach(() => openSpy.reset());\n\n    it('should open local api docs by default', function() {\n      command.run({\n        options: {},\n        environment: {\n          modulePath: '/path/to/package.json',\n        },\n      })\n        .then(() => {\n          expect(openSpy.calledOnce, 'to be', true);\n          expect(openSpy.lastCall.args[0], 'to equal', join('/path/docs/api/index.html'));\n          expect(openSpy.lastCall.args[1], 'to be undefined');\n        });\n    });\n\n    it('should open cli api docs with --cli option', function() {\n      command.run({\n        options: {\n          cli: true,\n        },\n      })\n        .then(() => {\n          expect(openSpy.calledOnce, 'to be', true);\n          expect(openSpy.lastCall.args[0],\n            'to equal', join(__dirname, '../../../docs/api/index.html'));\n          expect(openSpy.lastCall.args[1], 'to be undefined');\n        });\n    });\n\n    it('should open in specific browser with --browser option', function() {\n      command.run({\n        options: {\n          cli: false,\n          browser: 'custombrowser',\n        },\n        environment: {\n          modulePath: '/path/to/package.json',\n        },\n      })\n        .then(() => {\n          expect(openSpy.calledOnce, 'to be', true);\n          expect(openSpy.lastCall.args[0], 'to equal', join('/path/docs/api/index.html'));\n          expect(openSpy.lastCall.args[1], 'to equal', 'custombrowser');\n        });\n    });\n\n    it('should call AtSCMCli#getEnvironment if no environment was passed', function() {\n      const cli = {\n        options: {\n          cli: false,\n        },\n        getEnvironment() {\n          return Promise.resolve((this.environment = {\n            modulePath: '/path/to/package.json',\n          }));\n        }\n      };\n\n      spy(cli, 'getEnvironment');\n\n      command.run(cli)\n        .then(() => {\n          expect(cli.getEnvironment.calledOnce, 'to be', true);\n          expect(openSpy.calledOnce, 'to be', true);\n          expect(openSpy.lastCall.args[0], 'to equal', join('/path/docs/api/index.html'));\n        });\n    });\n\n    it('should open remote docs with --remote option passed', function() {\n      command.run({\n        options: {\n          remote: true,\n        },\n        environment: {\n          modulePath: '/path/to/package.json',\n        },\n      })\n        .then(() => {\n          expect(openSpy.calledOnce, 'to be', true);\n          expect(openSpy.lastCall.args[0], 'to begin with', DocsCommand.RemoteDocsBase);\n        });\n    });\n  });\n\n  /** @test {DocsCommand#requiresEnvironment} */\n  describe('#requiresEnvironment', function() {\n    it('should return false if `--cli` is used', function() {\n      expect(command.requiresEnvironment({ options: { cli: true } }), 'to be', false);\n    });\n\n    it('should return false if `--remote`', function() {\n      expect(command.requiresEnvironment({ options: { remote: true } }), 'to be', false);\n    });\n\n    it('should return false if no `--remote` option is passed', function() {\n      expect(command.requiresEnvironment({ options: { } }), 'to be', false);\n    });\n\n    it('should return false if `--no-remote` and `--cli` option is passed', function() {\n      expect(command.requiresEnvironment({ options: {\n        remote: false,\n        cli: true,\n      } }), 'to be', false);\n    });\n\n    it('should return true if `--no-remote` and no `--cli` option is passed', function() {\n      expect(command.requiresEnvironment({ options: { remote: false } }), 'to be', true);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "testDescribe",
    "name": "describe54",
    "testId": 54,
    "memberof": "test/cli/commands/Docs.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54",
    "access": null,
    "description": "DocsCommand",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocsCommand}"
      }
    ],
    "testTargets": [
      "DocsCommand"
    ]
  },
  {
    "__docId__": 232,
    "kind": "testDescribe",
    "name": "describe55",
    "testId": 55,
    "memberof": "test/cli/commands/Docs.spec.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe55",
    "access": null,
    "description": "#localDocsPath",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocsCommand#localDocsPath}"
      }
    ],
    "testTargets": [
      "DocsCommand#localDocsPath"
    ]
  },
  {
    "__docId__": 233,
    "kind": "testIt",
    "name": "it56",
    "testId": 56,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe55",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe55.it56",
    "access": null,
    "description": "should be local api docs by default",
    "lineNumber": 17
  },
  {
    "__docId__": 234,
    "kind": "testIt",
    "name": "it57",
    "testId": 57,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe55",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe55.it57",
    "access": null,
    "description": "should be cli api docs with --cli option",
    "lineNumber": 29
  },
  {
    "__docId__": 235,
    "kind": "testDescribe",
    "name": "describe58",
    "testId": 58,
    "memberof": "test/cli/commands/Docs.spec.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe58",
    "access": null,
    "description": "#remoteDocsUrl",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocsCommand#remoteDocsUrl}"
      }
    ],
    "testTargets": [
      "DocsCommand#remoteDocsUrl"
    ]
  },
  {
    "__docId__": 236,
    "kind": "testIt",
    "name": "it59",
    "testId": 59,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe58.it59",
    "access": null,
    "description": "should return path to atscm docs by default",
    "lineNumber": 41
  },
  {
    "__docId__": 237,
    "kind": "testIt",
    "name": "it60",
    "testId": 60,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe58.it60",
    "access": null,
    "description": "should return path to atscm-cli docs with `--cli` option passed",
    "lineNumber": 46
  },
  {
    "__docId__": 238,
    "kind": "testDescribe",
    "name": "describe61",
    "testId": 61,
    "memberof": "test/cli/commands/Docs.spec.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe61",
    "access": null,
    "description": "#addressToOpen",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocsCommand#addressToOpen}"
      }
    ],
    "testTargets": [
      "DocsCommand#addressToOpen"
    ]
  },
  {
    "__docId__": 239,
    "kind": "testIt",
    "name": "it62",
    "testId": 62,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe61.it62",
    "access": null,
    "description": "should return local path if not remote option was passed",
    "lineNumber": 54
  },
  {
    "__docId__": 240,
    "kind": "testIt",
    "name": "it63",
    "testId": 63,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe61.it63",
    "access": null,
    "description": "should return local path if remote option was set to false",
    "lineNumber": 64
  },
  {
    "__docId__": 241,
    "kind": "testIt",
    "name": "it64",
    "testId": 64,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe61.it64",
    "access": null,
    "description": "should return remote url if remote was set to true",
    "lineNumber": 73
  },
  {
    "__docId__": 242,
    "kind": "testIt",
    "name": "it65",
    "testId": 65,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe61.it65",
    "access": null,
    "description": "should return remote url if cli.env.modulePath is undefined",
    "lineNumber": 82
  },
  {
    "__docId__": 243,
    "kind": "testIt",
    "name": "it66",
    "testId": 66,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe61.it66",
    "access": null,
    "description": "should return local path if cli option was set",
    "lineNumber": 91
  },
  {
    "__docId__": 244,
    "kind": "testDescribe",
    "name": "describe67",
    "testId": 67,
    "memberof": "test/cli/commands/Docs.spec.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe67",
    "access": null,
    "description": "#run",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocsCommand#run}"
      }
    ],
    "testTargets": [
      "DocsCommand#run"
    ]
  },
  {
    "__docId__": 245,
    "kind": "testIt",
    "name": "it68",
    "testId": 68,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe67",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe67.it68",
    "access": null,
    "description": "should open local api docs by default",
    "lineNumber": 105
  },
  {
    "__docId__": 246,
    "kind": "testIt",
    "name": "it69",
    "testId": 69,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe67",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe67.it69",
    "access": null,
    "description": "should open cli api docs with --cli option",
    "lineNumber": 119
  },
  {
    "__docId__": 247,
    "kind": "testIt",
    "name": "it70",
    "testId": 70,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe67",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe67.it70",
    "access": null,
    "description": "should open in specific browser with --browser option",
    "lineNumber": 133
  },
  {
    "__docId__": 248,
    "kind": "testIt",
    "name": "it71",
    "testId": 71,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe67",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe67.it71",
    "access": null,
    "description": "should call AtSCMCli#getEnvironment if no environment was passed",
    "lineNumber": 150
  },
  {
    "__docId__": 249,
    "kind": "testIt",
    "name": "it72",
    "testId": 72,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe67",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe67.it72",
    "access": null,
    "description": "should open remote docs with --remote option passed",
    "lineNumber": 172
  },
  {
    "__docId__": 250,
    "kind": "testDescribe",
    "name": "describe73",
    "testId": 73,
    "memberof": "test/cli/commands/Docs.spec.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe73",
    "access": null,
    "description": "#requiresEnvironment",
    "lineNumber": 189,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocsCommand#requiresEnvironment}"
      }
    ],
    "testTargets": [
      "DocsCommand#requiresEnvironment"
    ]
  },
  {
    "__docId__": 251,
    "kind": "testIt",
    "name": "it74",
    "testId": 74,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe73.it74",
    "access": null,
    "description": "should return false if `--cli` is used",
    "lineNumber": 190
  },
  {
    "__docId__": 252,
    "kind": "testIt",
    "name": "it75",
    "testId": 75,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe73.it75",
    "access": null,
    "description": "should return false if `--remote`",
    "lineNumber": 194
  },
  {
    "__docId__": 253,
    "kind": "testIt",
    "name": "it76",
    "testId": 76,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe73.it76",
    "access": null,
    "description": "should return false if no `--remote` option is passed",
    "lineNumber": 198
  },
  {
    "__docId__": 254,
    "kind": "testIt",
    "name": "it77",
    "testId": 77,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe73.it77",
    "access": null,
    "description": "should return false if `--no-remote` and `--cli` option is passed",
    "lineNumber": 202
  },
  {
    "__docId__": 255,
    "kind": "testIt",
    "name": "it78",
    "testId": 78,
    "memberof": "test/cli/commands/Docs.spec.js~describe54.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Docs.spec.js~describe54.describe73.it78",
    "access": null,
    "description": "should return true if `--no-remote` and no `--cli` option is passed",
    "lineNumber": 209
  },
  {
    "__docId__": 256,
    "kind": "testFile",
    "name": "test/cli/commands/Init.spec.js",
    "content": "import { readdir, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport Emitter from 'events';\nimport expect from 'unexpected';\nimport { spy, stub } from 'sinon';\nimport proxyquire from 'proxyquire';\nimport inTmpDir from '../../helpers/inTmpDir';\nimport atscmPkg from '../../fixtures/node_modules/atscm/package.json';\n\nclass StubPipe extends Emitter {}\n\nclass StubProcess extends Emitter {\n\n  constructor() {\n    super();\n\n    this.stdout = new StubPipe();\n  }\n\n  close(code) {\n    this.emit('close', code);\n  }\n\n}\n\nconst stubModulePath = join(__dirname, 'stub.js');\n\nfunction createImportStub(func, noCallThru = true) {\n  return {\n    __esModule: true,\n    default: spy(func),\n    '@noCallThru': noCallThru,\n  };\n}\n\nconst stubProcessEmitter = new Emitter();\nconst spawnStub = spy(() => {\n  const process = new StubProcess();\n\n  stubProcessEmitter.emit('new', process);\n\n  return process;\n});\n\nconst fsStub = {\n  readdir: spy(readdir),\n};\nlet whichStub = createImportStub((name, cb) => cb(null, name));\nconst initStub = createImportStub(() => Promise.resolve());\nconst promptSpy = spy(() => Promise.resolve({}));\nconst stubInitOptions = {};\n\nconst InitCommand = proxyquire('../../../src/cli/commands/Init', {\n  fs: fsStub,\n  inquirer: {\n    prompt: promptSpy,\n  },\n  child_process: {\n    __esModule: true,\n    spawn: spawnStub,\n    '@noCallThru': true,\n  },\n  which: whichStub,\n  [join(stubModulePath, '../init/options')]: {\n    __esModule: true,\n    default: stubInitOptions,\n    '@noCallThru': true,\n  },\n  [join(stubModulePath, '../init/init')]: initStub,\n}).default;\n\n/** @test {InitCommand} */\ndescribe('InitCommand', function() {\n  const command = new InitCommand('init', 'Creates a new project.');\n\n  /** @test {InitCommand#checkDirectory} */\n  describe('#checkDirectory', function() {\n    inTmpDir(path => {\n      it('should fail if directory does not exist', function() {\n        return expect(command.checkDirectory('./not/existant'),\n          'to be rejected with', /does not exist$/);\n      });\n\n      it('should fail if path is not a directory', function() {\n        return expect(command.checkDirectory(join(__dirname, './Init.spec.js')),\n          'to be rejected with', /is not a directory$/);\n      });\n\n      it('should fail if directory is not empty', function() {\n        return expect(command.checkDirectory(__dirname),\n          'to be rejected with', /is not empty$/);\n      });\n\n      it('should work with empty dir', function() {\n        return expect(command.checkDirectory(path), 'to be fulfilled');\n      });\n\n      it('should work in non-empty dir with overwrite set', function() {\n        writeFileSync(join(path, 'file.txt'), 'data');\n\n        return expect(command.checkDirectory(path, true), 'to be fulfilled');\n      });\n    });\n\n    context('when non-ENOENT and ENOTDIR occurres', function() {\n      const orgReaddir = fsStub.readdir;\n\n      before(() => (fsStub.readdir = spy((path, cb) => cb(new Error('Any other error')))));\n      after(() => (fsStub.readdir = orgReaddir));\n\n      it('should fail with original error', function() {\n        return expect(command.checkDirectory('path'),\n          'to be rejected with', 'Any other error'\n        );\n      });\n    });\n  });\n\n  /** @test {InitCommand#createEmptyPackage} */\n  describe('#createEmptyPackage', function() {\n    inTmpDir(path => {\n      it('should fail with invalid path', function() {\n        return expect(command.createEmptyPackage('path/that/does/not/exist'),\n          'to be rejected with', /^Unable to create package.json at/);\n      });\n\n      it('should work in empty directory', function() {\n        return expect(command.createEmptyPackage(path), 'to be fulfilled')\n          .then(() => {\n            let pkg;\n            expect(() => (pkg = require(join(path, 'package.json'))), 'not to throw');\n            expect(pkg, 'to equal', {});\n\n          });\n      });\n    });\n  });\n\n  /** @test {InitCommand#install} */\n  describe('#install', function() {\n    beforeEach(() => whichStub.default.reset());\n\n    it('should run which for npm', function() {\n      const deps = ['dep1', 'dep2'];\n\n      stubProcessEmitter.once('new', proc => {\n        setTimeout(() => proc.close(0), 10);\n      });\n\n      return expect(\n        command.install(stubModulePath, deps),\n        'to be fulfilled'\n      )\n        .then(() => {\n          expect(whichStub.default.calledOnce, 'to be', true);\n          expect(whichStub.default.lastCall.args[0], 'to equal', 'npm');\n        });\n    });\n\n    it('should forward errors occuring in npm', function() {\n      const error = new Error('Test');\n\n      stubProcessEmitter.once('new', proc => {\n        setTimeout(() => proc.emit('error', error), 10);\n      });\n\n      return expect(\n        command.install(stubModulePath, ['dep']),\n        'to be rejected with', error\n      );\n    });\n\n    it('should report error if npm fails', function() {\n      const code = Math.round(Math.random() * 100) + 1;\n\n      stubProcessEmitter.once('new', proc => {\n        setTimeout(() => proc.close(code), 10);\n      });\n\n      return expect(\n        command.install(stubModulePath, ['dep']),\n        'to be rejected with', `npm install returned code ${code}`\n      );\n    });\n\n    context('when npm is not installed', function() {\n      const orgWhichStub = whichStub.default;\n\n      before(() => (whichStub.default = spy((name, cb) => cb(new Error('A which error')))));\n      after(() => (whichStub.default = orgWhichStub));\n\n      it('should fail', function() {\n        whichStub = spy((name, cb) => cb(new Error('A which error')));\n\n        return expect(\n          command.install(stubModulePath, ['dep']),\n          'to be rejected with', 'A which error'\n        );\n      });\n    });\n  });\n\n  /** @test {InitCommand#installLocal} */\n  describe('#installLocal', function() {\n    beforeEach(() => stub(command, 'install').callsFake(() => Promise.resolve(true)));\n    afterEach(() => command.install.restore());\n\n    it('should call InitCommand#install', function() {\n      return expect(command.installLocal(stubModulePath), 'to be fulfilled')\n        .then(() => {\n          expect(command.install.calledOnce, 'to be true');\n          expect(command.install.lastCall.args[0], 'to equal', stubModulePath);\n          // FIXME: Uncomment once atscm is published\n          // expect(command.install.lastCall.args[1], 'to equal', 'atscm');\n        });\n    });\n  });\n\n  /** @test {InitCommand#checkCliVersion} */\n  describe('#checkCliVersion', function() {\n    it('should throw error if version does not match', function() {\n      expect(() => command.checkCliVersion({\n        modulePackage: {\n          engines: {\n            'atscm-cli': '<0.1.0',\n          },\n        },\n      }), 'to throw error', 'Invalid atscm-cli version: <0.1.0 required.');\n    });\n  });\n\n  /** @test {InitCommand#getOptions} */\n  describe('#getOptions', function() {\n    it('should run inquirer', function() {\n      return expect(\n        command.getOptions(stubModulePath),\n        'to be fulfilled'\n      )\n        .then(() => {\n          expect(promptSpy.calledOnce, 'to be true');\n          expect(promptSpy.lastCall.args[0], 'to be', stubInitOptions);\n        });\n    });\n  });\n\n  /** @test {InitCommand#writeFiles} */\n  describe('#writeFiles', function() {\n    it('should call local package init script', function() {\n      const options = { test: 123 };\n\n      return expect(command.writeFiles(stubModulePath, options),\n          'to be fulfilled')\n        .then(() => {\n          expect(initStub.default.calledOnce, 'to be', true);\n          expect(initStub.default.lastCall.args[0], 'to be', options);\n        });\n    });\n  });\n\n  /** @test {InitCommand#installDependencies} */\n  describe('#installDependencies', function() {\n    beforeEach(() => stub(command, 'install').callsFake(() => Promise.resolve(true)));\n    afterEach(() => command.install.restore());\n\n    it('should run install with given deps', function() {\n      const deps = ['dep1', 'dep2'];\n\n      return expect(command.installDependencies(stubModulePath, deps), 'to be fulfilled')\n        .then(() => {\n          expect(command.install.calledOnce, 'to be true');\n          expect(command.install.lastCall.args[0], 'to equal', stubModulePath);\n          expect(command.install.lastCall.args[1], 'to equal', deps);\n        });\n    });\n  });\n\n  /** @test {InitCommand#run} */\n  describe('#run', function() {\n    const deps = ['dep1', 'dep2'];\n    const cli = {\n      environment: {\n        cwd: stubModulePath,\n      },\n      options: {\n        force: false,\n      },\n      getEnvironment: spy(() => Promise.resolve({\n        cwd: stubModulePath,\n        modulePackage: atscmPkg,\n      })),\n    };\n\n    beforeEach(() => {\n      stub(command, 'checkDirectory').callsFake(() => Promise.resolve());\n      stub(command, 'createEmptyPackage').callsFake(() => Promise.resolve());\n      stub(command, 'installLocal').callsFake(() => Promise.resolve());\n      stub(process, 'chdir');\n      stub(command, 'getOptions').callsFake(() => Promise.resolve());\n      stub(command, 'writeFiles').callsFake(() => Promise.resolve({ dependencies: deps }));\n      stub(command, 'installDependencies').callsFake(() => Promise.resolve());\n    });\n\n    afterEach(() => {\n      command.checkDirectory.restore();\n      command.createEmptyPackage.restore();\n      command.installLocal.restore();\n      process.chdir.restore();\n      command.getOptions.restore();\n      command.writeFiles.restore();\n      command.installDependencies.restore();\n    });\n\n    function expectCalled(method, count = 1) {\n      return expect(command.run(cli), 'to be fulfilled')\n        .then(() => expect(method.callCount, 'to equal', count));\n    }\n\n    it('should call AtSCMCli#getEnvironment twice', function() {\n      return expectCalled(cli.getEnvironment, 2);\n    });\n\n    it('should not search in parent directories', function() {\n      return expect(command.run(cli), 'to be fulfilled')\n        .then(() => expect(cli.getEnvironment.alwaysCalledWith(false), 'to equal', true));\n    });\n\n    it('should call InitCommand#createEmptyPackage', function() {\n      return expectCalled(command.createEmptyPackage);\n    });\n\n    it('should call InitCommand#installLocal', function() {\n      return expectCalled(command.installLocal);\n    });\n\n    it('should call process.chdir', function() {\n      return expectCalled(process.chdir);\n    });\n\n    it('should call InitCommand#getOptions', function() {\n      return expectCalled(command.getOptions);\n    });\n\n    it('should call InitCommand#writeFiles', function() {\n      return expectCalled(command.writeFiles);\n    });\n\n    it('should call InitCommand#installDependencies', function() {\n      return expectCalled(command.installDependencies);\n    });\n  });\n\n  /** @test {InitCommand#requiresEnvironment} */\n  describe('#requiresEnvironment', function() {\n    it('should return false', function() {\n      expect(command.requiresEnvironment(), 'to equal', false);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/cli/commands/Init.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 257,
    "kind": "testDescribe",
    "name": "describe79",
    "testId": 79,
    "memberof": "test/cli/commands/Init.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79",
    "access": null,
    "description": "InitCommand",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitCommand}"
      }
    ],
    "testTargets": [
      "InitCommand"
    ]
  },
  {
    "__docId__": 258,
    "kind": "testDescribe",
    "name": "describe80",
    "testId": 80,
    "memberof": "test/cli/commands/Init.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe80",
    "access": null,
    "description": "#checkDirectory",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitCommand#checkDirectory}"
      }
    ],
    "testTargets": [
      "InitCommand#checkDirectory"
    ]
  },
  {
    "__docId__": 259,
    "kind": "testIt",
    "name": "it81",
    "testId": 81,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe80.it81",
    "access": null,
    "description": "should fail if directory does not exist",
    "lineNumber": 79
  },
  {
    "__docId__": 260,
    "kind": "testIt",
    "name": "it82",
    "testId": 82,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe80.it82",
    "access": null,
    "description": "should fail if path is not a directory",
    "lineNumber": 84
  },
  {
    "__docId__": 261,
    "kind": "testIt",
    "name": "it83",
    "testId": 83,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe80.it83",
    "access": null,
    "description": "should fail if directory is not empty",
    "lineNumber": 89
  },
  {
    "__docId__": 262,
    "kind": "testIt",
    "name": "it84",
    "testId": 84,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe80.it84",
    "access": null,
    "description": "should work with empty dir",
    "lineNumber": 94
  },
  {
    "__docId__": 263,
    "kind": "testIt",
    "name": "it85",
    "testId": 85,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe80.it85",
    "access": null,
    "description": "should work in non-empty dir with overwrite set",
    "lineNumber": 98
  },
  {
    "__docId__": 264,
    "kind": "testDescribe",
    "name": "context86",
    "testId": 86,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe80.context86",
    "access": null,
    "description": "when non-ENOENT and ENOTDIR occurres",
    "lineNumber": 105
  },
  {
    "__docId__": 265,
    "kind": "testIt",
    "name": "it87",
    "testId": 87,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe80.context86",
    "testDepth": 3,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe80.context86.it87",
    "access": null,
    "description": "should fail with original error",
    "lineNumber": 111
  },
  {
    "__docId__": 266,
    "kind": "testDescribe",
    "name": "describe88",
    "testId": 88,
    "memberof": "test/cli/commands/Init.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe88",
    "access": null,
    "description": "#createEmptyPackage",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitCommand#createEmptyPackage}"
      }
    ],
    "testTargets": [
      "InitCommand#createEmptyPackage"
    ]
  },
  {
    "__docId__": 267,
    "kind": "testIt",
    "name": "it89",
    "testId": 89,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe88.it89",
    "access": null,
    "description": "should fail with invalid path",
    "lineNumber": 122
  },
  {
    "__docId__": 268,
    "kind": "testIt",
    "name": "it90",
    "testId": 90,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe88.it90",
    "access": null,
    "description": "should work in empty directory",
    "lineNumber": 127
  },
  {
    "__docId__": 269,
    "kind": "testDescribe",
    "name": "describe91",
    "testId": 91,
    "memberof": "test/cli/commands/Init.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe91",
    "access": null,
    "description": "#install",
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitCommand#install}"
      }
    ],
    "testTargets": [
      "InitCommand#install"
    ]
  },
  {
    "__docId__": 270,
    "kind": "testIt",
    "name": "it92",
    "testId": 92,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe91",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe91.it92",
    "access": null,
    "description": "should run which for npm",
    "lineNumber": 143
  },
  {
    "__docId__": 271,
    "kind": "testIt",
    "name": "it93",
    "testId": 93,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe91",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe91.it93",
    "access": null,
    "description": "should forward errors occuring in npm",
    "lineNumber": 160
  },
  {
    "__docId__": 272,
    "kind": "testIt",
    "name": "it94",
    "testId": 94,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe91",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe91.it94",
    "access": null,
    "description": "should report error if npm fails",
    "lineNumber": 173
  },
  {
    "__docId__": 273,
    "kind": "testDescribe",
    "name": "context95",
    "testId": 95,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe91",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe91.context95",
    "access": null,
    "description": "when npm is not installed",
    "lineNumber": 186
  },
  {
    "__docId__": 274,
    "kind": "testIt",
    "name": "it96",
    "testId": 96,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe91.context95",
    "testDepth": 3,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe91.context95.it96",
    "access": null,
    "description": "should fail",
    "lineNumber": 192
  },
  {
    "__docId__": 275,
    "kind": "testDescribe",
    "name": "describe97",
    "testId": 97,
    "memberof": "test/cli/commands/Init.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe97",
    "access": null,
    "description": "#installLocal",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitCommand#installLocal}"
      }
    ],
    "testTargets": [
      "InitCommand#installLocal"
    ]
  },
  {
    "__docId__": 276,
    "kind": "testIt",
    "name": "it98",
    "testId": 98,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe97",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe97.it98",
    "access": null,
    "description": "should call InitCommand#install",
    "lineNumber": 208
  },
  {
    "__docId__": 277,
    "kind": "testDescribe",
    "name": "describe99",
    "testId": 99,
    "memberof": "test/cli/commands/Init.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe99",
    "access": null,
    "description": "#checkCliVersion",
    "lineNumber": 220,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitCommand#checkCliVersion}"
      }
    ],
    "testTargets": [
      "InitCommand#checkCliVersion"
    ]
  },
  {
    "__docId__": 278,
    "kind": "testIt",
    "name": "it100",
    "testId": 100,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe99",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe99.it100",
    "access": null,
    "description": "should throw error if version does not match",
    "lineNumber": 221
  },
  {
    "__docId__": 279,
    "kind": "testDescribe",
    "name": "describe101",
    "testId": 101,
    "memberof": "test/cli/commands/Init.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe101",
    "access": null,
    "description": "#getOptions",
    "lineNumber": 233,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitCommand#getOptions}"
      }
    ],
    "testTargets": [
      "InitCommand#getOptions"
    ]
  },
  {
    "__docId__": 280,
    "kind": "testIt",
    "name": "it102",
    "testId": 102,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe101",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe101.it102",
    "access": null,
    "description": "should run inquirer",
    "lineNumber": 234
  },
  {
    "__docId__": 281,
    "kind": "testDescribe",
    "name": "describe103",
    "testId": 103,
    "memberof": "test/cli/commands/Init.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe103",
    "access": null,
    "description": "#writeFiles",
    "lineNumber": 247,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitCommand#writeFiles}"
      }
    ],
    "testTargets": [
      "InitCommand#writeFiles"
    ]
  },
  {
    "__docId__": 282,
    "kind": "testIt",
    "name": "it104",
    "testId": 104,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe103.it104",
    "access": null,
    "description": "should call local package init script",
    "lineNumber": 248
  },
  {
    "__docId__": 283,
    "kind": "testDescribe",
    "name": "describe105",
    "testId": 105,
    "memberof": "test/cli/commands/Init.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe105",
    "access": null,
    "description": "#installDependencies",
    "lineNumber": 261,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitCommand#installDependencies}"
      }
    ],
    "testTargets": [
      "InitCommand#installDependencies"
    ]
  },
  {
    "__docId__": 284,
    "kind": "testIt",
    "name": "it106",
    "testId": 106,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe105",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe105.it106",
    "access": null,
    "description": "should run install with given deps",
    "lineNumber": 265
  },
  {
    "__docId__": 285,
    "kind": "testDescribe",
    "name": "describe107",
    "testId": 107,
    "memberof": "test/cli/commands/Init.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe107",
    "access": null,
    "description": "#run",
    "lineNumber": 278,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitCommand#run}"
      }
    ],
    "testTargets": [
      "InitCommand#run"
    ]
  },
  {
    "__docId__": 286,
    "kind": "testIt",
    "name": "it108",
    "testId": 108,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe107.it108",
    "access": null,
    "description": "should call AtSCMCli#getEnvironment twice",
    "lineNumber": 318
  },
  {
    "__docId__": 287,
    "kind": "testIt",
    "name": "it109",
    "testId": 109,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe107.it109",
    "access": null,
    "description": "should not search in parent directories",
    "lineNumber": 322
  },
  {
    "__docId__": 288,
    "kind": "testIt",
    "name": "it110",
    "testId": 110,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe107.it110",
    "access": null,
    "description": "should call InitCommand#createEmptyPackage",
    "lineNumber": 327
  },
  {
    "__docId__": 289,
    "kind": "testIt",
    "name": "it111",
    "testId": 111,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe107.it111",
    "access": null,
    "description": "should call InitCommand#installLocal",
    "lineNumber": 331
  },
  {
    "__docId__": 290,
    "kind": "testIt",
    "name": "it112",
    "testId": 112,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe107.it112",
    "access": null,
    "description": "should call process.chdir",
    "lineNumber": 335
  },
  {
    "__docId__": 291,
    "kind": "testIt",
    "name": "it113",
    "testId": 113,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe107.it113",
    "access": null,
    "description": "should call InitCommand#getOptions",
    "lineNumber": 339
  },
  {
    "__docId__": 292,
    "kind": "testIt",
    "name": "it114",
    "testId": 114,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe107.it114",
    "access": null,
    "description": "should call InitCommand#writeFiles",
    "lineNumber": 343
  },
  {
    "__docId__": 293,
    "kind": "testIt",
    "name": "it115",
    "testId": 115,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe107.it115",
    "access": null,
    "description": "should call InitCommand#installDependencies",
    "lineNumber": 347
  },
  {
    "__docId__": 294,
    "kind": "testDescribe",
    "name": "describe116",
    "testId": 116,
    "memberof": "test/cli/commands/Init.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe116",
    "access": null,
    "description": "#requiresEnvironment",
    "lineNumber": 353,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitCommand#requiresEnvironment}"
      }
    ],
    "testTargets": [
      "InitCommand#requiresEnvironment"
    ]
  },
  {
    "__docId__": 295,
    "kind": "testIt",
    "name": "it117",
    "testId": 117,
    "memberof": "test/cli/commands/Init.spec.js~describe79.describe116",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Init.spec.js~describe79.describe116.it117",
    "access": null,
    "description": "should return false",
    "lineNumber": 354
  },
  {
    "__docId__": 296,
    "kind": "testFile",
    "name": "test/cli/commands/Run.spec.js",
    "content": "import { join } from 'path';\nimport expect from 'unexpected';\nimport { spy } from 'sinon';\nimport proxyquire from 'proxyquire';\n\nconst gulpCli = spy();\nconst RunCommand = proxyquire('../../../src/cli/commands/Run', {\n  'gulp-cli/lib/versioned/^4.0.0-alpha.2/': gulpCli,\n}).default;\n\n/** @test {RunCommand} */\ndescribe('RunCommand', function() {\n  const command = new RunCommand('run', 'Run tasks.');\n\n  /** @test {RunCommand#run} */\n  describe('#run', function() {\n    const cli = {\n      environment: {\n        cwd: __dirname,\n        modulePath: join(__dirname, 'out/index.js'),\n      },\n      options: {\n        tasks: ['task1', 'task2'],\n        T: 'tasks',\n        tasksJson: 'tasks-json',\n        tasksSimple: 'tasks-simple',\n        continue: 'continue',\n      },\n    };\n\n    afterEach(() => {\n      gulpCli.reset();\n    });\n\n    it('should run gulp-cli', function() {\n      command.run(cli);\n\n      expect(gulpCli.calledOnce, 'to be', true);\n      expect(gulpCli.lastCall.args, 'to contain', {\n        _: ['task1', 'task2'],\n        tasks: 'tasks',\n        tasksSimple: 'tasks-simple',\n        tasksJson: 'tasks-json',\n        continue: 'continue',\n      });\n\n      expect(gulpCli.lastCall.args, 'to contain', {\n        configPath: join(__dirname, 'out/Gulpfile.js'),\n        modulePath: join(__dirname, 'node_modules/gulp'),\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/cli/commands/Run.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 297,
    "kind": "testDescribe",
    "name": "describe118",
    "testId": 118,
    "memberof": "test/cli/commands/Run.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cli/commands/Run.spec.js~describe118",
    "access": null,
    "description": "RunCommand",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{RunCommand}"
      }
    ],
    "testTargets": [
      "RunCommand"
    ]
  },
  {
    "__docId__": 298,
    "kind": "testDescribe",
    "name": "describe119",
    "testId": 119,
    "memberof": "test/cli/commands/Run.spec.js~describe118",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Run.spec.js~describe118.describe119",
    "access": null,
    "description": "#run",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{RunCommand#run}"
      }
    ],
    "testTargets": [
      "RunCommand#run"
    ]
  },
  {
    "__docId__": 299,
    "kind": "testIt",
    "name": "it120",
    "testId": 120,
    "memberof": "test/cli/commands/Run.spec.js~describe118.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Run.spec.js~describe118.describe119.it120",
    "access": null,
    "description": "should run gulp-cli",
    "lineNumber": 35
  },
  {
    "__docId__": 300,
    "kind": "testFile",
    "name": "test/cli/commands/Update.spec.js",
    "content": "import expect from 'unexpected';\nimport { stub } from 'sinon';\nimport proxyquire from 'proxyquire';\n\nconst get = stub().resolves({ data: { latest: '0.3.0' } });\nconst run = stub().resolves(`+ atscm@0.3.0\nupdated 1 package and moved 3 packages in 16.652s`);\n\nconst UpdateCommand = proxyquire('../../../src/cli/commands/Update', {\n  axios: { get },\n  '../../lib/util/ExternalCommand': {\n    default: {\n      run,\n    },\n  },\n}).default;\n\n/** @test {UpdateCommand} */\ndescribe('UpdateCommand', function() {\n  beforeEach(function() {\n    get.resetHistory();\n    run.resetHistory();\n  });\n\n  /** @test {UpdateCommand#getLatestVersion} */\n  describe('#getLatestVersion', function() {\n    it('should call npm api', function() {\n      return expect(UpdateCommand.prototype.getLatestVersion(), 'to be fulfilled with', '0.3.0')\n        .then(() => expect(get.calledOnce, 'to be', true));\n    });\n  });\n\n  /** @test {UpdateCommand#updateNeeded} */\n  describe('#updateNeeded', function() {\n    it('should return false if latest is older than current version', function() {\n      return expect(UpdateCommand.prototype.updateNeeded('0.1.0', '0.2.0'), 'to be', false);\n    });\n\n    it('should return false if latest equals current version', function() {\n      return expect(UpdateCommand.prototype.updateNeeded('0.2.0', '0.2.0'), 'to be', false);\n    });\n\n    it('should return latest version if latest is newer than current version', function() {\n      return expect(UpdateCommand.prototype.updateNeeded('0.3.0', '0.2.0'), 'to be', '0.3.0');\n    });\n  });\n\n  /** @test {UpdateCommand#update} */\n  describe('#update', function() {\n    it('should run npm install', function() {\n      return expect(UpdateCommand.prototype.update({ environment: {\n        cwd: 'test cwd',\n      } }), 'to be fulfilled')\n        .then(() => expect(run.calledOnce, 'to be', true))\n        .then(() => expect(run.lastCall.args, 'to equal',\n          ['npm', ['install', '--save-dev', 'atscm@latest'], {\n            spawn: {\n              cwd: 'test cwd',\n            },\n          }]));\n    });\n  });\n\n  /** @test {UpdateCommand#requiresEnvironment} */\n  describe('#requiresEnvironment', function() {\n    it('should always return true', function() {\n      expect(UpdateCommand.prototype.requiresEnvironment(), 'to be', true);\n    });\n  });\n\n  /** @test {UpdateCommand#run} */\n  describe('#run', function() {\n    const command = new UpdateCommand();\n\n    it('should not call #update if not required', function() {\n      return expect(command.run({\n        environment: {\n          modulePackage: {\n            version: '0.3.0',\n          },\n        },\n      }), 'to be fulfilled')\n        .then(() => expect(run.callCount, 'to equal', 0));\n    });\n\n    it('should call #update if required', function() {\n      return expect(command.run({\n        environment: {\n          modulePackage: {\n            version: '0.2.0',\n          },\n        },\n      }), 'to be fulfilled')\n        .then(() => expect(run.calledOnce, 'to be', true));\n    });\n  });\n});\n\n",
    "static": true,
    "longname": "test/cli/commands/Update.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 301,
    "kind": "testDescribe",
    "name": "describe121",
    "testId": 121,
    "memberof": "test/cli/commands/Update.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cli/commands/Update.spec.js~describe121",
    "access": null,
    "description": "UpdateCommand",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{UpdateCommand}"
      }
    ],
    "testTargets": [
      "UpdateCommand"
    ]
  },
  {
    "__docId__": 302,
    "kind": "testDescribe",
    "name": "describe122",
    "testId": 122,
    "memberof": "test/cli/commands/Update.spec.js~describe121",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Update.spec.js~describe121.describe122",
    "access": null,
    "description": "#getLatestVersion",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{UpdateCommand#getLatestVersion}"
      }
    ],
    "testTargets": [
      "UpdateCommand#getLatestVersion"
    ]
  },
  {
    "__docId__": 303,
    "kind": "testIt",
    "name": "it123",
    "testId": 123,
    "memberof": "test/cli/commands/Update.spec.js~describe121.describe122",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Update.spec.js~describe121.describe122.it123",
    "access": null,
    "description": "should call npm api",
    "lineNumber": 27
  },
  {
    "__docId__": 304,
    "kind": "testDescribe",
    "name": "describe124",
    "testId": 124,
    "memberof": "test/cli/commands/Update.spec.js~describe121",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Update.spec.js~describe121.describe124",
    "access": null,
    "description": "#updateNeeded",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{UpdateCommand#updateNeeded}"
      }
    ],
    "testTargets": [
      "UpdateCommand#updateNeeded"
    ]
  },
  {
    "__docId__": 305,
    "kind": "testIt",
    "name": "it125",
    "testId": 125,
    "memberof": "test/cli/commands/Update.spec.js~describe121.describe124",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Update.spec.js~describe121.describe124.it125",
    "access": null,
    "description": "should return false if latest is older than current version",
    "lineNumber": 35
  },
  {
    "__docId__": 306,
    "kind": "testIt",
    "name": "it126",
    "testId": 126,
    "memberof": "test/cli/commands/Update.spec.js~describe121.describe124",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Update.spec.js~describe121.describe124.it126",
    "access": null,
    "description": "should return false if latest equals current version",
    "lineNumber": 39
  },
  {
    "__docId__": 307,
    "kind": "testIt",
    "name": "it127",
    "testId": 127,
    "memberof": "test/cli/commands/Update.spec.js~describe121.describe124",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Update.spec.js~describe121.describe124.it127",
    "access": null,
    "description": "should return latest version if latest is newer than current version",
    "lineNumber": 43
  },
  {
    "__docId__": 308,
    "kind": "testDescribe",
    "name": "describe128",
    "testId": 128,
    "memberof": "test/cli/commands/Update.spec.js~describe121",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Update.spec.js~describe121.describe128",
    "access": null,
    "description": "#update",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{UpdateCommand#update}"
      }
    ],
    "testTargets": [
      "UpdateCommand#update"
    ]
  },
  {
    "__docId__": 309,
    "kind": "testIt",
    "name": "it129",
    "testId": 129,
    "memberof": "test/cli/commands/Update.spec.js~describe121.describe128",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Update.spec.js~describe121.describe128.it129",
    "access": null,
    "description": "should run npm install",
    "lineNumber": 50
  },
  {
    "__docId__": 310,
    "kind": "testDescribe",
    "name": "describe130",
    "testId": 130,
    "memberof": "test/cli/commands/Update.spec.js~describe121",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Update.spec.js~describe121.describe130",
    "access": null,
    "description": "#requiresEnvironment",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{UpdateCommand#requiresEnvironment}"
      }
    ],
    "testTargets": [
      "UpdateCommand#requiresEnvironment"
    ]
  },
  {
    "__docId__": 311,
    "kind": "testIt",
    "name": "it131",
    "testId": 131,
    "memberof": "test/cli/commands/Update.spec.js~describe121.describe130",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Update.spec.js~describe121.describe130.it131",
    "access": null,
    "description": "should always return true",
    "lineNumber": 66
  },
  {
    "__docId__": 312,
    "kind": "testDescribe",
    "name": "describe132",
    "testId": 132,
    "memberof": "test/cli/commands/Update.spec.js~describe121",
    "testDepth": 1,
    "static": true,
    "longname": "test/cli/commands/Update.spec.js~describe121.describe132",
    "access": null,
    "description": "#run",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{UpdateCommand#run}"
      }
    ],
    "testTargets": [
      "UpdateCommand#run"
    ]
  },
  {
    "__docId__": 313,
    "kind": "testIt",
    "name": "it133",
    "testId": 133,
    "memberof": "test/cli/commands/Update.spec.js~describe121.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Update.spec.js~describe121.describe132.it133",
    "access": null,
    "description": "should not call #update if not required",
    "lineNumber": 75
  },
  {
    "__docId__": 314,
    "kind": "testIt",
    "name": "it134",
    "testId": 134,
    "memberof": "test/cli/commands/Update.spec.js~describe121.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "test/cli/commands/Update.spec.js~describe121.describe132.it134",
    "access": null,
    "description": "should call #update if required",
    "lineNumber": 86
  },
  {
    "__docId__": 315,
    "kind": "testFile",
    "name": "test/lib/cli/Command.spec.js",
    "content": "import expect from 'unexpected';\n\nimport Command from '../../../src/lib/cli/Command';\nimport Option from '../../../src/lib/cli/Option';\n\n/** @test {Command} */\ndescribe('Command', function() {\n  const name = 'command';\n  const desc = 'Command description.';\n  const opts = {};\n  const args = '<required> [optional...]';\n\n  /** @test {Command#constructor} */\n  describe('#constructor', function() {\n    it('should fail if options.maxArguments is less than options.maxArguments', function() {\n      expect(() => new Command(name, desc, Object.assign({\n        minArguments: 1,\n        maxArguments: 0,\n      }, opts)), 'to throw error',\n        'options.maxArguments must not be less than options.minArguments');\n    });\n\n    it('should store name, description and options', function() {\n      const command = new Command(name, desc, opts);\n\n      expect(command.name, 'to equal', name);\n      expect(command.description, 'to equal', desc);\n      expect(command._options, 'to equal', opts);\n    });\n  });\n\n  /** @test {Command#run} */\n  describe('#run', function() {\n    it('must be implmented by all subclasses', function() {\n      expect((new Command(name, desc, opts)).run, 'to throw',\n        new Error('Must be implemented by all subclasses'));\n    });\n  });\n\n  /** @test {Command#usage} */\n  describe('#usage', function() {\n    it('should be only name with no options.arguments set', function() {\n      expect((new Command(name, desc, opts)).usage, 'to equal', name);\n    });\n\n    it('should be name followed by arguments with options.arguments set', function() {\n      expect((new Command(name, desc, Object.assign({ arguments: args }, opts))).usage,\n        'to equal', `${name} ${args}`);\n    });\n  });\n\n  /** @test {Command#options} */\n  describe('#options', function() {\n    it('should be empty object if options.options were not set', function() {\n      expect((new Command(name, desc, opts)).options, 'to equal', {});\n    });\n\n    it('should return all options passed as options.options', function() {\n      const options = { test: new Option('description') };\n\n      expect((new Command(name, desc, Object.assign({ options }, opts))).options,\n        'to equal', options);\n    });\n  });\n\n  /** @test {Command#demandCommand} */\n  describe('#demandCommand', function() {\n    it('should default to [0]', function() {\n      expect((new Command(name, desc, opts)).demandCommand, 'to equal', [0]);\n    });\n\n    it('should be use options.maxArguments if set', function() {\n      expect((new Command(name, desc, Object.assign({ maxArguments: 13 }, opts))).demandCommand,\n        'to equal', [0, 13]);\n    });\n\n    it('should be use options.minArguments if set', function() {\n      expect((new Command(name, desc, Object.assign({ minArguments: 13 }, opts))).demandCommand,\n        'to equal', [13]);\n    });\n\n    it('should be use options.minArguments and options.maxArguments if set', function() {\n      expect((new Command(name, desc, Object.assign({\n        minArguments: 1,\n        maxArguments: 2,\n      }, opts))).demandCommand, 'to equal', [1, 2]);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/lib/cli/Command.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 316,
    "kind": "testDescribe",
    "name": "describe135",
    "testId": 135,
    "memberof": "test/lib/cli/Command.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135",
    "access": null,
    "description": "Command",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Command}"
      }
    ],
    "testTargets": [
      "Command"
    ]
  },
  {
    "__docId__": 317,
    "kind": "testDescribe",
    "name": "describe136",
    "testId": 136,
    "memberof": "test/lib/cli/Command.spec.js~describe135",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135.describe136",
    "access": null,
    "description": "#constructor",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Command#constructor}"
      }
    ],
    "testTargets": [
      "Command#constructor"
    ]
  },
  {
    "__docId__": 318,
    "kind": "testIt",
    "name": "it137",
    "testId": 137,
    "memberof": "test/lib/cli/Command.spec.js~describe135.describe136",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135.describe136.it137",
    "access": null,
    "description": "should fail if options.maxArguments is less than options.maxArguments",
    "lineNumber": 15
  },
  {
    "__docId__": 319,
    "kind": "testIt",
    "name": "it138",
    "testId": 138,
    "memberof": "test/lib/cli/Command.spec.js~describe135.describe136",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135.describe136.it138",
    "access": null,
    "description": "should store name, description and options",
    "lineNumber": 23
  },
  {
    "__docId__": 320,
    "kind": "testDescribe",
    "name": "describe139",
    "testId": 139,
    "memberof": "test/lib/cli/Command.spec.js~describe135",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135.describe139",
    "access": null,
    "description": "#run",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Command#run}"
      }
    ],
    "testTargets": [
      "Command#run"
    ]
  },
  {
    "__docId__": 321,
    "kind": "testIt",
    "name": "it140",
    "testId": 140,
    "memberof": "test/lib/cli/Command.spec.js~describe135.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135.describe139.it140",
    "access": null,
    "description": "must be implmented by all subclasses",
    "lineNumber": 34
  },
  {
    "__docId__": 322,
    "kind": "testDescribe",
    "name": "describe141",
    "testId": 141,
    "memberof": "test/lib/cli/Command.spec.js~describe135",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135.describe141",
    "access": null,
    "description": "#usage",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Command#usage}"
      }
    ],
    "testTargets": [
      "Command#usage"
    ]
  },
  {
    "__docId__": 323,
    "kind": "testIt",
    "name": "it142",
    "testId": 142,
    "memberof": "test/lib/cli/Command.spec.js~describe135.describe141",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135.describe141.it142",
    "access": null,
    "description": "should be only name with no options.arguments set",
    "lineNumber": 42
  },
  {
    "__docId__": 324,
    "kind": "testIt",
    "name": "it143",
    "testId": 143,
    "memberof": "test/lib/cli/Command.spec.js~describe135.describe141",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135.describe141.it143",
    "access": null,
    "description": "should be name followed by arguments with options.arguments set",
    "lineNumber": 46
  },
  {
    "__docId__": 325,
    "kind": "testDescribe",
    "name": "describe144",
    "testId": 144,
    "memberof": "test/lib/cli/Command.spec.js~describe135",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135.describe144",
    "access": null,
    "description": "#options",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Command#options}"
      }
    ],
    "testTargets": [
      "Command#options"
    ]
  },
  {
    "__docId__": 326,
    "kind": "testIt",
    "name": "it145",
    "testId": 145,
    "memberof": "test/lib/cli/Command.spec.js~describe135.describe144",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135.describe144.it145",
    "access": null,
    "description": "should be empty object if options.options were not set",
    "lineNumber": 54
  },
  {
    "__docId__": 327,
    "kind": "testIt",
    "name": "it146",
    "testId": 146,
    "memberof": "test/lib/cli/Command.spec.js~describe135.describe144",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135.describe144.it146",
    "access": null,
    "description": "should return all options passed as options.options",
    "lineNumber": 58
  },
  {
    "__docId__": 328,
    "kind": "testDescribe",
    "name": "describe147",
    "testId": 147,
    "memberof": "test/lib/cli/Command.spec.js~describe135",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135.describe147",
    "access": null,
    "description": "#demandCommand",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Command#demandCommand}"
      }
    ],
    "testTargets": [
      "Command#demandCommand"
    ]
  },
  {
    "__docId__": 329,
    "kind": "testIt",
    "name": "it148",
    "testId": 148,
    "memberof": "test/lib/cli/Command.spec.js~describe135.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135.describe147.it148",
    "access": null,
    "description": "should default to [0]",
    "lineNumber": 68
  },
  {
    "__docId__": 330,
    "kind": "testIt",
    "name": "it149",
    "testId": 149,
    "memberof": "test/lib/cli/Command.spec.js~describe135.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135.describe147.it149",
    "access": null,
    "description": "should be use options.maxArguments if set",
    "lineNumber": 72
  },
  {
    "__docId__": 331,
    "kind": "testIt",
    "name": "it150",
    "testId": 150,
    "memberof": "test/lib/cli/Command.spec.js~describe135.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135.describe147.it150",
    "access": null,
    "description": "should be use options.minArguments if set",
    "lineNumber": 77
  },
  {
    "__docId__": 332,
    "kind": "testIt",
    "name": "it151",
    "testId": 151,
    "memberof": "test/lib/cli/Command.spec.js~describe135.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Command.spec.js~describe135.describe147.it151",
    "access": null,
    "description": "should be use options.minArguments and options.maxArguments if set",
    "lineNumber": 82
  },
  {
    "__docId__": 333,
    "kind": "testFile",
    "name": "test/lib/cli/Option.spec.js",
    "content": "import expect from 'unexpected';\n\nimport Option from '../../../src/lib/cli/Option';\n\n/** @test {Option} */\ndescribe('Option', function() {\n  /** @test {Option#constructor} */\n  describe('#constructor', function() {\n    it('should store description', function() {\n      expect(new Option('description').desc, 'to equal', 'description');\n    });\n\n    it('should store all options passed', function() {\n      const options = { test: 123 };\n\n      expect(new Option('description', options), 'to have properties', options);\n    });\n  });\n\n  /** @test {Option.boolean} */\n  describe('.boolean', function() {\n    it('should return an option', function() {\n      expect(Option.boolean('description'), 'to be a', Option);\n    });\n\n    it('should set type to boolean', function() {\n      expect(Option.boolean('description').type, 'to equal', 'boolean');\n    });\n\n    it('should store all options passed', function() {\n      const options = { test: 123 };\n\n      expect(Option.boolean('description', options), 'to have properties', options);\n    });\n  });\n\n  /** @test {Option.string} */\n  describe('.string', function() {\n    it('should return an option', function() {\n      expect(Option.string('description'), 'to be a', Option);\n    });\n\n    it('should set type to string', function() {\n      expect(Option.string('description').type, 'to equal', 'string');\n    });\n\n    it('should store all options passed', function() {\n      const options = { test: 123 };\n\n      expect(Option.string('description', options), 'to have properties', options);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/lib/cli/Option.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 334,
    "kind": "testDescribe",
    "name": "describe152",
    "testId": 152,
    "memberof": "test/lib/cli/Option.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/lib/cli/Option.spec.js~describe152",
    "access": null,
    "description": "Option",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Option}"
      }
    ],
    "testTargets": [
      "Option"
    ]
  },
  {
    "__docId__": 335,
    "kind": "testDescribe",
    "name": "describe153",
    "testId": 153,
    "memberof": "test/lib/cli/Option.spec.js~describe152",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/cli/Option.spec.js~describe152.describe153",
    "access": null,
    "description": "#constructor",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Option#constructor}"
      }
    ],
    "testTargets": [
      "Option#constructor"
    ]
  },
  {
    "__docId__": 336,
    "kind": "testIt",
    "name": "it154",
    "testId": 154,
    "memberof": "test/lib/cli/Option.spec.js~describe152.describe153",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Option.spec.js~describe152.describe153.it154",
    "access": null,
    "description": "should store description",
    "lineNumber": 9
  },
  {
    "__docId__": 337,
    "kind": "testIt",
    "name": "it155",
    "testId": 155,
    "memberof": "test/lib/cli/Option.spec.js~describe152.describe153",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Option.spec.js~describe152.describe153.it155",
    "access": null,
    "description": "should store all options passed",
    "lineNumber": 13
  },
  {
    "__docId__": 338,
    "kind": "testDescribe",
    "name": "describe156",
    "testId": 156,
    "memberof": "test/lib/cli/Option.spec.js~describe152",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/cli/Option.spec.js~describe152.describe156",
    "access": null,
    "description": ".boolean",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Option.boolean}"
      }
    ],
    "testTargets": [
      "Option.boolean"
    ]
  },
  {
    "__docId__": 339,
    "kind": "testIt",
    "name": "it157",
    "testId": 157,
    "memberof": "test/lib/cli/Option.spec.js~describe152.describe156",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Option.spec.js~describe152.describe156.it157",
    "access": null,
    "description": "should return an option",
    "lineNumber": 22
  },
  {
    "__docId__": 340,
    "kind": "testIt",
    "name": "it158",
    "testId": 158,
    "memberof": "test/lib/cli/Option.spec.js~describe152.describe156",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Option.spec.js~describe152.describe156.it158",
    "access": null,
    "description": "should set type to boolean",
    "lineNumber": 26
  },
  {
    "__docId__": 341,
    "kind": "testIt",
    "name": "it159",
    "testId": 159,
    "memberof": "test/lib/cli/Option.spec.js~describe152.describe156",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Option.spec.js~describe152.describe156.it159",
    "access": null,
    "description": "should store all options passed",
    "lineNumber": 30
  },
  {
    "__docId__": 342,
    "kind": "testDescribe",
    "name": "describe160",
    "testId": 160,
    "memberof": "test/lib/cli/Option.spec.js~describe152",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/cli/Option.spec.js~describe152.describe160",
    "access": null,
    "description": ".string",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Option.string}"
      }
    ],
    "testTargets": [
      "Option.string"
    ]
  },
  {
    "__docId__": 343,
    "kind": "testIt",
    "name": "it161",
    "testId": 161,
    "memberof": "test/lib/cli/Option.spec.js~describe152.describe160",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Option.spec.js~describe152.describe160.it161",
    "access": null,
    "description": "should return an option",
    "lineNumber": 39
  },
  {
    "__docId__": 344,
    "kind": "testIt",
    "name": "it162",
    "testId": 162,
    "memberof": "test/lib/cli/Option.spec.js~describe152.describe160",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Option.spec.js~describe152.describe160.it162",
    "access": null,
    "description": "should set type to string",
    "lineNumber": 43
  },
  {
    "__docId__": 345,
    "kind": "testIt",
    "name": "it163",
    "testId": 163,
    "memberof": "test/lib/cli/Option.spec.js~describe152.describe160",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/cli/Option.spec.js~describe152.describe160.it163",
    "access": null,
    "description": "should store all options passed",
    "lineNumber": 47
  },
  {
    "__docId__": 346,
    "kind": "testFile",
    "name": "test/lib/error/UsageError.spec.js",
    "content": "import expect from 'unexpected';\n\nimport UsageError from '../../../src/lib/error/UsageError';\n\n/** @test {UsageError} */\ndescribe('UsageError', function() {\n  const msg = 'Invalid argument: missing';\n  const help = 'Usage: ...';\n\n    /** @test {UsageError#constructor} */\n  describe('#constructor', function() {\n    it('should create an instance of Error', function() {\n      expect(new UsageError(msg, help), 'to be a', Error);\n    });\n\n    it('should create a stack trace', function() {\n      expect(new UsageError(msg, help).stack, 'to be defined');\n      expect(new UsageError(msg, help).stack, 'to be a', 'string');\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/lib/error/UsageError.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 347,
    "kind": "testDescribe",
    "name": "describe164",
    "testId": 164,
    "memberof": "test/lib/error/UsageError.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/lib/error/UsageError.spec.js~describe164",
    "access": null,
    "description": "UsageError",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{UsageError}"
      }
    ],
    "testTargets": [
      "UsageError"
    ]
  },
  {
    "__docId__": 348,
    "kind": "testDescribe",
    "name": "describe165",
    "testId": 165,
    "memberof": "test/lib/error/UsageError.spec.js~describe164",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/error/UsageError.spec.js~describe164.describe165",
    "access": null,
    "description": "#constructor",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{UsageError#constructor}"
      }
    ],
    "testTargets": [
      "UsageError#constructor"
    ]
  },
  {
    "__docId__": 349,
    "kind": "testIt",
    "name": "it166",
    "testId": 166,
    "memberof": "test/lib/error/UsageError.spec.js~describe164.describe165",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/error/UsageError.spec.js~describe164.describe165.it166",
    "access": null,
    "description": "should create an instance of Error",
    "lineNumber": 12
  },
  {
    "__docId__": 350,
    "kind": "testIt",
    "name": "it167",
    "testId": 167,
    "memberof": "test/lib/error/UsageError.spec.js~describe164.describe165",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/error/UsageError.spec.js~describe164.describe165.it167",
    "access": null,
    "description": "should create a stack trace",
    "lineNumber": 16
  },
  {
    "__docId__": 351,
    "kind": "testFile",
    "name": "test/lib/util/ExternalCommand.spec.js",
    "content": "import Emitter from 'events';\nimport { Buffer } from 'buffer';\nimport { stub, spy } from 'sinon';\nimport proxyquire from 'proxyquire';\nimport expect from 'unexpected';\n\nconst which = stub().callsArgWith(1, null, 'bin');\nconst stubProcess = Object.assign(new Emitter(), {\n  stdout: new Emitter(),\n  stderr: new Emitter(),\n});\nconst spawn = stub().returns(stubProcess);\n\nconst External = proxyquire('../../../src/lib/util/ExternalCommand', {\n  which,\n  child_process: {\n    spawn,\n  },\n}).default;\n\n/** @test {ExternalCommand} */\ndescribe('External', function() {\n  beforeEach(function() {\n    which.reset();\n    which.callsArgWith(1, null, 'bin');\n  });\n\n  /** @test {ExternalCommand#resolveBin} */\n  describe('#resolveBin', function() {\n    it('should be fulfilled with which results', function() {\n      which.callsArgWith(1, null, 'bin');\n\n      return expect(External.resolveBin('asdf'), 'to be fulfilled with', 'bin')\n        .then(() => {\n          expect(which.calledOnce, 'to be', true);\n          expect(which.lastCall.args[0], 'to equal', 'asdf');\n        });\n    });\n\n    it('should reject on which error', function() {\n      which.callsArgWith(1, new Error('which error'));\n\n      return expect(External.resolveBin('asdf'), 'to be rejected with', 'which error')\n        .then(() => {\n          expect(which.calledOnce, 'to be', true);\n          expect(which.lastCall.args[0], 'to equal', 'asdf');\n        });\n    });\n  });\n\n  /** @test {ExternalCommand#spawn} */\n  describe('#spawn', function() {\n    it('should be rejected on spawn error', function() {\n      const p = expect(External.spawn('asdf'), 'to be rejected with', 'spawn error');\n\n      stubProcess.emit('error', new Error('spawn error'));\n\n      return p;\n    });\n\n    it('should be rejected on non-zero exit code', function() {\n      const p = expect(External.spawn('asdf'), 'to be rejected with', /returned code 123$/);\n\n      stubProcess.emit('close', 123);\n\n      return p;\n    });\n\n    it('should be fulfill with trimmed stdout data', function() {\n      const p = expect(External.spawn('asdf'), 'to be fulfilled with', 'data');\n\n      stubProcess.stdout.emit('data', Buffer.from('data\\n'));\n      stubProcess.emit('close', 0);\n\n      return p;\n    });\n\n    it('should pass args to spawn', function() {\n      const args = ['--test'];\n      const p = expect(External.spawn('asdf', args), 'to be fulfilled')\n        .then(() => expect(spawn.calledWith('asdf', args), 'to be true'));\n\n      stubProcess.emit('close', 0);\n\n      return p;\n    });\n\n    it('should pass options.spawn to spawn', function() {\n      const spawnOpts = { opt: 13 };\n      const p = expect(External.spawn('asdf', [], { spawn: spawnOpts }), 'to be fulfilled')\n        .then(() => expect(spawn.calledWith('asdf', [], spawnOpts), 'to be true'));\n\n      stubProcess.emit('close', 0);\n\n      return p;\n    });\n\n    it('should call options.onspawn after spawn', function() {\n      const onspawn = spy();\n      const p = expect(External.spawn('asdf', [], { onspawn }), 'to be fulfilled')\n        .then(() => expect(onspawn.calledOnce, 'to be true'))\n        .then(() => expect(onspawn.lastCall.args[0], 'to be', stubProcess));\n\n      stubProcess.emit('close', 0);\n\n      return p;\n    });\n  });\n\n  /** @test {ExternalCommand#run} */\n  describe('#run', function() {\n    it('should call #resolveBin with name', function() {\n      return expect(External.run('asdf', [], {\n        onspawn() {\n          stubProcess.emit('close', 0);\n        },\n      }), 'to be fulfilled')\n        .then(() => expect(which.calledOnce, 'to be true'))\n        .then(() => expect(which.lastCall.args[0], 'to equal', 'asdf'));\n    });\n\n    it('should call #spawn with which results and other args', function() {\n      return expect(External.run('asdf', [], {\n        onspawn() {\n          stubProcess.emit('close', 0);\n        },\n      }), 'to be fulfilled')\n        .then(() => expect(which.calledOnce, 'to be true'))\n        .then(() => expect(which.lastCall.args[0], 'to equal', 'asdf'));\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/lib/util/ExternalCommand.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 352,
    "kind": "testDescribe",
    "name": "describe168",
    "testId": 168,
    "memberof": "test/lib/util/ExternalCommand.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/lib/util/ExternalCommand.spec.js~describe168",
    "access": null,
    "description": "External",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ExternalCommand}"
      }
    ],
    "testTargets": [
      "ExternalCommand"
    ]
  },
  {
    "__docId__": 353,
    "kind": "testDescribe",
    "name": "describe169",
    "testId": 169,
    "memberof": "test/lib/util/ExternalCommand.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/util/ExternalCommand.spec.js~describe168.describe169",
    "access": null,
    "description": "#resolveBin",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ExternalCommand#resolveBin}"
      }
    ],
    "testTargets": [
      "ExternalCommand#resolveBin"
    ]
  },
  {
    "__docId__": 354,
    "kind": "testIt",
    "name": "it170",
    "testId": 170,
    "memberof": "test/lib/util/ExternalCommand.spec.js~describe168.describe169",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/ExternalCommand.spec.js~describe168.describe169.it170",
    "access": null,
    "description": "should be fulfilled with which results",
    "lineNumber": 30
  },
  {
    "__docId__": 355,
    "kind": "testIt",
    "name": "it171",
    "testId": 171,
    "memberof": "test/lib/util/ExternalCommand.spec.js~describe168.describe169",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/ExternalCommand.spec.js~describe168.describe169.it171",
    "access": null,
    "description": "should reject on which error",
    "lineNumber": 40
  },
  {
    "__docId__": 356,
    "kind": "testDescribe",
    "name": "describe172",
    "testId": 172,
    "memberof": "test/lib/util/ExternalCommand.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/util/ExternalCommand.spec.js~describe168.describe172",
    "access": null,
    "description": "#spawn",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ExternalCommand#spawn}"
      }
    ],
    "testTargets": [
      "ExternalCommand#spawn"
    ]
  },
  {
    "__docId__": 357,
    "kind": "testIt",
    "name": "it173",
    "testId": 173,
    "memberof": "test/lib/util/ExternalCommand.spec.js~describe168.describe172",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/ExternalCommand.spec.js~describe168.describe172.it173",
    "access": null,
    "description": "should be rejected on spawn error",
    "lineNumber": 53
  },
  {
    "__docId__": 358,
    "kind": "testIt",
    "name": "it174",
    "testId": 174,
    "memberof": "test/lib/util/ExternalCommand.spec.js~describe168.describe172",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/ExternalCommand.spec.js~describe168.describe172.it174",
    "access": null,
    "description": "should be rejected on non-zero exit code",
    "lineNumber": 61
  },
  {
    "__docId__": 359,
    "kind": "testIt",
    "name": "it175",
    "testId": 175,
    "memberof": "test/lib/util/ExternalCommand.spec.js~describe168.describe172",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/ExternalCommand.spec.js~describe168.describe172.it175",
    "access": null,
    "description": "should be fulfill with trimmed stdout data",
    "lineNumber": 69
  },
  {
    "__docId__": 360,
    "kind": "testIt",
    "name": "it176",
    "testId": 176,
    "memberof": "test/lib/util/ExternalCommand.spec.js~describe168.describe172",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/ExternalCommand.spec.js~describe168.describe172.it176",
    "access": null,
    "description": "should pass args to spawn",
    "lineNumber": 78
  },
  {
    "__docId__": 361,
    "kind": "testIt",
    "name": "it177",
    "testId": 177,
    "memberof": "test/lib/util/ExternalCommand.spec.js~describe168.describe172",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/ExternalCommand.spec.js~describe168.describe172.it177",
    "access": null,
    "description": "should pass options.spawn to spawn",
    "lineNumber": 88
  },
  {
    "__docId__": 362,
    "kind": "testIt",
    "name": "it178",
    "testId": 178,
    "memberof": "test/lib/util/ExternalCommand.spec.js~describe168.describe172",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/ExternalCommand.spec.js~describe168.describe172.it178",
    "access": null,
    "description": "should call options.onspawn after spawn",
    "lineNumber": 98
  },
  {
    "__docId__": 363,
    "kind": "testDescribe",
    "name": "describe179",
    "testId": 179,
    "memberof": "test/lib/util/ExternalCommand.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/util/ExternalCommand.spec.js~describe168.describe179",
    "access": null,
    "description": "#run",
    "lineNumber": 111,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ExternalCommand#run}"
      }
    ],
    "testTargets": [
      "ExternalCommand#run"
    ]
  },
  {
    "__docId__": 364,
    "kind": "testIt",
    "name": "it180",
    "testId": 180,
    "memberof": "test/lib/util/ExternalCommand.spec.js~describe168.describe179",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/ExternalCommand.spec.js~describe168.describe179.it180",
    "access": null,
    "description": "should call #resolveBin with name",
    "lineNumber": 112
  },
  {
    "__docId__": 365,
    "kind": "testIt",
    "name": "it181",
    "testId": 181,
    "memberof": "test/lib/util/ExternalCommand.spec.js~describe168.describe179",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/ExternalCommand.spec.js~describe168.describe179.it181",
    "access": null,
    "description": "should call #spawn with which results and other args",
    "lineNumber": 122
  },
  {
    "__docId__": 366,
    "kind": "testFile",
    "name": "test/lib/util/Logger.spec.js",
    "content": "/* eslint-disable no-console */\nimport expect from 'unexpected';\nimport { stub, spy } from 'sinon';\n\nimport gulplog from 'gulplog';\nimport { obj as createStream } from 'through2';\n\nimport Logger from '../../../src/lib/util/Logger';\n\n/** @test {LogFormat} */\ndescribe('LogFormat', function() {\n  const text = 'Test string';\n\n  const orgEnabled = Logger.colors.supportsColor;\n  before(() => (Logger.colors.enabled = true));\n  after(() => (Logger.colors.enabled = orgEnabled));\n\n  function expectStyle(styledText, style) {\n    expect(styledText, 'to equal', `${style.open}${text}${style.close}`);\n  }\n\n  /** @test {LogFormat.path} */\n  describe('.path', function() {\n    it('should change color to magenta', function() {\n      expectStyle(Logger.format.path(text), Logger.colors.styles.magenta);\n    });\n\n    it('should prettify user path', function() {\n      expect(Logger.format.path(process.env.HOME), 'to contain', '~');\n    });\n  });\n\n  /** @test {LogFormat.command} */\n  describe('.command', function() {\n    it('should return bold text', function() {\n      expectStyle(Logger.format.command(text), Logger.colors.styles.bold);\n    });\n  });\n\n  /** @test {LogFormat.value} */\n  describe('.value', function() {\n    it('should return cyan colored text', function() {\n      expectStyle(Logger.format.value(text), Logger.colors.styles.cyan);\n    });\n  });\n\n  /** @test {LogFormat.number} */\n  describe('.number', function() {\n    it('should return magenta colored text', function() {\n      expectStyle(Logger.format.number(text), Logger.colors.styles.magenta);\n    });\n  });\n});\n\n/** @test {Logger} */\ndescribe('Logger', function() {\n  function getText() {\n    return `Text ${(new Date())}`;\n  }\n\n  let debugSpy;\n  let infoSpy;\n  let warnSpy;\n  let errorSpy;\n\n  beforeEach(function() {\n    debugSpy = stub(gulplog, 'debug');\n    infoSpy = stub(gulplog, 'info');\n    warnSpy = stub(gulplog, 'warn');\n    errorSpy = stub(gulplog, 'error');\n  });\n\n  afterEach(function() {\n    gulplog.debug.restore();\n    gulplog.info.restore();\n    gulplog.warn.restore();\n    gulplog.error.restore();\n  });\n\n  /** @test {Logger.debug} */\n  describe('.debug', function() {\n    it('should call gulplog.debug', function() {\n      const t = getText();\n      Logger.debug(t);\n\n      expect(debugSpy.calledOnce, 'to be', true);\n      expect(debugSpy.lastCall.args, 'to equal', [t]);\n    });\n  });\n\n  /** @test {Logger.info} */\n  describe('.info', function() {\n    it('should call gulplog.info', function() {\n      const t = getText();\n      Logger.info(t);\n\n      expect(infoSpy.calledOnce, 'to be', true);\n      expect(infoSpy.lastCall.args, 'to equal', [t]);\n    });\n  });\n\n  /** @test {Logger.warn} */\n  describe('.warn', function() {\n    it('should call gulplog.warn', function() {\n      const t = getText();\n      Logger.warn(t);\n\n      expect(warnSpy.calledOnce, 'to be', true);\n      expect(warnSpy.lastCall.args, 'to equal', [t]);\n    });\n  });\n\n  /** @test {Logger.warn} */\n  describe('.error', function() {\n    it('should call gulplog.error', function() {\n      const t = getText();\n      Logger.error(t);\n\n      expect(errorSpy.calledOnce, 'to be', true);\n\n      expect(errorSpy.lastCall.args, 'to equal', [t]);\n    });\n  });\n\n  /** @test {Logger.applyOptions} */\n  describe('.applyOptions', function() {\n    afterEach(() => {\n      Logger.types.forEach(name => gulplog.removeAllListeners(name));\n    });\n\n    function expectListeners(levels) {\n      Logger.types.forEach((name, i) => {\n        expect(gulplog.listenerCount(name), 'to equal', levels[i] ? 1 : 0);\n      });\n    }\n\n    context('when using option \"silent\"', function() {\n      it('should only add a noop listener for \"error\" events', function() {\n        Logger.applyOptions({ silent: true });\n\n        expectListeners([true, false, false, false]);\n      });\n    });\n\n    context('when using \"logLevel\" 0', function() {\n      it('should only add a noop listener for \"error\" events', function() {\n        Logger.applyOptions({ logLevel: 0 });\n\n        expectListeners([true, false, false, false]);\n      });\n    });\n\n    context('when using \"logLevel\" 1', function() {\n      it('should only add a listener for \"error\" events', function() {\n        Logger.applyOptions({ logLevel: 1 });\n\n        expectListeners([true, false, false, false]);\n      });\n    });\n\n    context('when using \"logLevel\" 2', function() {\n      it('should add listeners for \"error\" and \"warn\" events', function() {\n        Logger.applyOptions({ logLevel: 2 });\n\n        expectListeners([true, true, false, false]);\n      });\n    });\n\n    context('when using \"logLevel\" 3', function() {\n      it('should add listeners for \"error\", \"warn\" and \"info\" events', function() {\n        Logger.applyOptions({ logLevel: 3 });\n\n        expectListeners([true, true, true, false]);\n      });\n    });\n\n    context('when using \"logLevel\" 4', function() {\n      it('should add listeners for all events', function() {\n        Logger.applyOptions({ logLevel: 4 });\n\n        expectListeners([true, true, true, true]);\n      });\n    });\n  });\n\n  /** @test {Logger.pipeLastLine} */\n  describe('.pipeLastLine', function() {\n    it('should print last line of each chunk', function(done) {\n      const stream = createStream((c, e, cb) => cb(null, c));\n\n      Logger.pipeLastLine(stream);\n\n      stream.on('end', () => {\n        expect(gulplog.info.callCount, 'to be', 2);\n        expect(gulplog.info.getCall(0).args[0], 'to match', /last 1$/);\n        expect(gulplog.info.lastCall.args[0], 'to match', /last 2$/);\n\n        done();\n      });\n\n      stream.push('first\\nlast 1'); // should log [HH:MM:SS] last 1\n      stream.push('first\\nlast 2'); // should log [HH:MM:SS] last 2\n      stream.end();\n    });\n\n    it('should ignore empty lines', function(done) {\n      const stream = createStream((c, e, cb) => cb(null, c));\n\n      Logger.pipeLastLine(stream);\n\n      stream.on('end', () => {\n        expect(gulplog.info.callCount, 'to be', 2);\n        expect(gulplog.info.getCall(0).args[0], 'to match', /last 1$/);\n        expect(gulplog.info.lastCall.args[0], 'to match', /last 2$/);\n\n        done();\n      });\n\n      stream.push('first\\nlast 1\\n'); // should log [HH:MM:SS] last 1\n      stream.push('first\\nlast 2\\n '); // should log [HH:MM:SS] last 2\n      stream.end();\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/lib/util/Logger.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 367,
    "kind": "testDescribe",
    "name": "describe182",
    "testId": 182,
    "memberof": "test/lib/util/Logger.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe182",
    "access": null,
    "description": "LogFormat",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{LogFormat}"
      }
    ],
    "testTargets": [
      "LogFormat"
    ]
  },
  {
    "__docId__": 368,
    "kind": "testDescribe",
    "name": "describe183",
    "testId": 183,
    "memberof": "test/lib/util/Logger.spec.js~describe182",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe182.describe183",
    "access": null,
    "description": ".path",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{LogFormat.path}"
      }
    ],
    "testTargets": [
      "LogFormat.path"
    ]
  },
  {
    "__docId__": 369,
    "kind": "testIt",
    "name": "it184",
    "testId": 184,
    "memberof": "test/lib/util/Logger.spec.js~describe182.describe183",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe182.describe183.it184",
    "access": null,
    "description": "should change color to magenta",
    "lineNumber": 24
  },
  {
    "__docId__": 370,
    "kind": "testIt",
    "name": "it185",
    "testId": 185,
    "memberof": "test/lib/util/Logger.spec.js~describe182.describe183",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe182.describe183.it185",
    "access": null,
    "description": "should prettify user path",
    "lineNumber": 28
  },
  {
    "__docId__": 371,
    "kind": "testDescribe",
    "name": "describe186",
    "testId": 186,
    "memberof": "test/lib/util/Logger.spec.js~describe182",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe182.describe186",
    "access": null,
    "description": ".command",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{LogFormat.command}"
      }
    ],
    "testTargets": [
      "LogFormat.command"
    ]
  },
  {
    "__docId__": 372,
    "kind": "testIt",
    "name": "it187",
    "testId": 187,
    "memberof": "test/lib/util/Logger.spec.js~describe182.describe186",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe182.describe186.it187",
    "access": null,
    "description": "should return bold text",
    "lineNumber": 35
  },
  {
    "__docId__": 373,
    "kind": "testDescribe",
    "name": "describe188",
    "testId": 188,
    "memberof": "test/lib/util/Logger.spec.js~describe182",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe182.describe188",
    "access": null,
    "description": ".value",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{LogFormat.value}"
      }
    ],
    "testTargets": [
      "LogFormat.value"
    ]
  },
  {
    "__docId__": 374,
    "kind": "testIt",
    "name": "it189",
    "testId": 189,
    "memberof": "test/lib/util/Logger.spec.js~describe182.describe188",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe182.describe188.it189",
    "access": null,
    "description": "should return cyan colored text",
    "lineNumber": 42
  },
  {
    "__docId__": 375,
    "kind": "testDescribe",
    "name": "describe190",
    "testId": 190,
    "memberof": "test/lib/util/Logger.spec.js~describe182",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe182.describe190",
    "access": null,
    "description": ".number",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{LogFormat.number}"
      }
    ],
    "testTargets": [
      "LogFormat.number"
    ]
  },
  {
    "__docId__": 376,
    "kind": "testIt",
    "name": "it191",
    "testId": 191,
    "memberof": "test/lib/util/Logger.spec.js~describe182.describe190",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe182.describe190.it191",
    "access": null,
    "description": "should return magenta colored text",
    "lineNumber": 49
  },
  {
    "__docId__": 377,
    "kind": "testDescribe",
    "name": "describe192",
    "testId": 192,
    "memberof": "test/lib/util/Logger.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192",
    "access": null,
    "description": "Logger",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Logger}"
      }
    ],
    "testTargets": [
      "Logger"
    ]
  },
  {
    "__docId__": 378,
    "kind": "testDescribe",
    "name": "describe193",
    "testId": 193,
    "memberof": "test/lib/util/Logger.spec.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe193",
    "access": null,
    "description": ".debug",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Logger.debug}"
      }
    ],
    "testTargets": [
      "Logger.debug"
    ]
  },
  {
    "__docId__": 379,
    "kind": "testIt",
    "name": "it194",
    "testId": 194,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe193",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe193.it194",
    "access": null,
    "description": "should call gulplog.debug",
    "lineNumber": 82
  },
  {
    "__docId__": 380,
    "kind": "testDescribe",
    "name": "describe195",
    "testId": 195,
    "memberof": "test/lib/util/Logger.spec.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe195",
    "access": null,
    "description": ".info",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Logger.info}"
      }
    ],
    "testTargets": [
      "Logger.info"
    ]
  },
  {
    "__docId__": 381,
    "kind": "testIt",
    "name": "it196",
    "testId": 196,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe195",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe195.it196",
    "access": null,
    "description": "should call gulplog.info",
    "lineNumber": 93
  },
  {
    "__docId__": 382,
    "kind": "testDescribe",
    "name": "describe197",
    "testId": 197,
    "memberof": "test/lib/util/Logger.spec.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe197",
    "access": null,
    "description": ".warn",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Logger.warn}"
      }
    ],
    "testTargets": [
      "Logger.warn"
    ]
  },
  {
    "__docId__": 383,
    "kind": "testIt",
    "name": "it198",
    "testId": 198,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe197",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe197.it198",
    "access": null,
    "description": "should call gulplog.warn",
    "lineNumber": 104
  },
  {
    "__docId__": 384,
    "kind": "testDescribe",
    "name": "describe199",
    "testId": 199,
    "memberof": "test/lib/util/Logger.spec.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe199",
    "access": null,
    "description": ".error",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Logger.warn}"
      }
    ],
    "testTargets": [
      "Logger.warn"
    ]
  },
  {
    "__docId__": 385,
    "kind": "testIt",
    "name": "it200",
    "testId": 200,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe199",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe199.it200",
    "access": null,
    "description": "should call gulplog.error",
    "lineNumber": 115
  },
  {
    "__docId__": 386,
    "kind": "testDescribe",
    "name": "describe201",
    "testId": 201,
    "memberof": "test/lib/util/Logger.spec.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe201",
    "access": null,
    "description": ".applyOptions",
    "lineNumber": 126,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Logger.applyOptions}"
      }
    ],
    "testTargets": [
      "Logger.applyOptions"
    ]
  },
  {
    "__docId__": 387,
    "kind": "testDescribe",
    "name": "context202",
    "testId": 202,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe201",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe201.context202",
    "access": null,
    "description": "when using option \"silent\"",
    "lineNumber": 137
  },
  {
    "__docId__": 388,
    "kind": "testIt",
    "name": "it203",
    "testId": 203,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe201.context202",
    "testDepth": 3,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe201.context202.it203",
    "access": null,
    "description": "should only add a noop listener for \"error\" events",
    "lineNumber": 138
  },
  {
    "__docId__": 389,
    "kind": "testDescribe",
    "name": "context204",
    "testId": 204,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe201",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe201.context204",
    "access": null,
    "description": "when using \"logLevel\" 0",
    "lineNumber": 145
  },
  {
    "__docId__": 390,
    "kind": "testIt",
    "name": "it205",
    "testId": 205,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe201.context204",
    "testDepth": 3,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe201.context204.it205",
    "access": null,
    "description": "should only add a noop listener for \"error\" events",
    "lineNumber": 146
  },
  {
    "__docId__": 391,
    "kind": "testDescribe",
    "name": "context206",
    "testId": 206,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe201",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe201.context206",
    "access": null,
    "description": "when using \"logLevel\" 1",
    "lineNumber": 153
  },
  {
    "__docId__": 392,
    "kind": "testIt",
    "name": "it207",
    "testId": 207,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe201.context206",
    "testDepth": 3,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe201.context206.it207",
    "access": null,
    "description": "should only add a listener for \"error\" events",
    "lineNumber": 154
  },
  {
    "__docId__": 393,
    "kind": "testDescribe",
    "name": "context208",
    "testId": 208,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe201",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe201.context208",
    "access": null,
    "description": "when using \"logLevel\" 2",
    "lineNumber": 161
  },
  {
    "__docId__": 394,
    "kind": "testIt",
    "name": "it209",
    "testId": 209,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe201.context208",
    "testDepth": 3,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe201.context208.it209",
    "access": null,
    "description": "should add listeners for \"error\" and \"warn\" events",
    "lineNumber": 162
  },
  {
    "__docId__": 395,
    "kind": "testDescribe",
    "name": "context210",
    "testId": 210,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe201",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe201.context210",
    "access": null,
    "description": "when using \"logLevel\" 3",
    "lineNumber": 169
  },
  {
    "__docId__": 396,
    "kind": "testIt",
    "name": "it211",
    "testId": 211,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe201.context210",
    "testDepth": 3,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe201.context210.it211",
    "access": null,
    "description": "should add listeners for \"error\", \"warn\" and \"info\" events",
    "lineNumber": 170
  },
  {
    "__docId__": 397,
    "kind": "testDescribe",
    "name": "context212",
    "testId": 212,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe201",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe201.context212",
    "access": null,
    "description": "when using \"logLevel\" 4",
    "lineNumber": 177
  },
  {
    "__docId__": 398,
    "kind": "testIt",
    "name": "it213",
    "testId": 213,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe201.context212",
    "testDepth": 3,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe201.context212.it213",
    "access": null,
    "description": "should add listeners for all events",
    "lineNumber": 178
  },
  {
    "__docId__": 399,
    "kind": "testDescribe",
    "name": "describe214",
    "testId": 214,
    "memberof": "test/lib/util/Logger.spec.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe214",
    "access": null,
    "description": ".pipeLastLine",
    "lineNumber": 187,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Logger.pipeLastLine}"
      }
    ],
    "testTargets": [
      "Logger.pipeLastLine"
    ]
  },
  {
    "__docId__": 400,
    "kind": "testIt",
    "name": "it215",
    "testId": 215,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe214",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe214.it215",
    "access": null,
    "description": "should print last line of each chunk",
    "lineNumber": 188
  },
  {
    "__docId__": 401,
    "kind": "testIt",
    "name": "it216",
    "testId": 216,
    "memberof": "test/lib/util/Logger.spec.js~describe192.describe214",
    "testDepth": 2,
    "static": true,
    "longname": "test/lib/util/Logger.spec.js~describe192.describe214.it216",
    "access": null,
    "description": "should ignore empty lines",
    "lineNumber": 206
  }
]