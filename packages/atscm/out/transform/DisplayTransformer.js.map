{"version":3,"sources":["../../src/transform/DisplayTransformer.ts"],"names":["rootMetaTags","tag","key","DisplayTransformer","ConfigTransformer","extension","scriptSourceExtension","sourceExtensions","shouldBeTransformed","node","hasTypeDefinition","normalizeScriptAttributes","attributes","src","name","undefined","mimeType","type","transformFromDB","context","arrayType","VariantArrayType","Scalar","Error","xml","decodeContents","document","config","scripts","scriptTags","inlineScript","forEach","element","additional","length","Logger","warn","nodeId","script","normalized","push","id","value","startsWith","childNodes","scriptFile","constructor","splitFile","scriptText","dataType","DataType","String","addNode","metaTag","paramTags","parameters","n","sortedAttributeValues","firstScript","hasValues","Object","values","findIndex","v","pop","writeConfigFile","svgFile","encodeContents","scriptTagAttributes","entries","reduce","soFar","outputKey","combineNodes","sources","configFile","JSON","parse","stringValue","e","relative","message","result","svg","dependencies","linkedScriptsSupported","atserverVersion","referencedScripts","map","filter","s","addReferencedScripts","i","reverse"],"mappings":"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","sourcesContent":["import { DataType, VariantArrayType } from 'node-opcua/lib/datamodel/variant';\nimport Logger from 'gulplog';\nimport {\n  findChild,\n  removeChildren,\n  createCDataNode,\n  createElement,\n  appendChild,\n  prependChild,\n  textContent,\n  createTextNode,\n  attributeValues,\n  AttributeValues,\n} from 'modify-xml';\nimport { gte } from 'semver';\nimport ConfigTransformer from '../lib/transform/ConfigTransformer';\nimport type { DisplayConfig } from '../../types/schemas/display-config';\nimport { BrowsedNode } from '../lib/server/NodeBrowser';\nimport { SplittingTransformer } from '..';\n\nconst rootMetaTags = [{ tag: 'title' }, { tag: 'desc', key: 'description' }];\n\n/**\n * Splits read atvise display XML nodes into their SVG and JavaScript sources,\n * alongside with a .json file containing the display's parameters.\n */\nexport default class DisplayTransformer extends ConfigTransformer<DisplayConfig> {\n  /**\n   * The extension to add to display container node names when they are pulled.\n   * @type {string}\n   */\n  static get extension() {\n    return '.display';\n  }\n\n  /**\n   * The source file extension to allow for scripts.\n   */\n  static get scriptSourceExtension() {\n    return '.js';\n  }\n\n  /**\n   * The source file extensions to allow.\n   * @type {string[]}\n   */\n  static get sourceExtensions() {\n    return ['.json', '.svg', this.scriptSourceExtension];\n  }\n\n  /**\n   * Returns `true` for all display nodes.\n   * @param {Node} node The node to check.\n   */\n  shouldBeTransformed(node) {\n    return node.hasTypeDefinition('VariableTypes.ATVISE.Display');\n  }\n\n  private normalizeScriptAttributes(\n    attributes: AttributeValues\n  ): Omit<DisplayConfig['scripts'][0], 'type'> {\n    return {\n      src: attributes['atv:href'] || attributes['xlink:href'] || attributes.src,\n      name: attributes['atv:name'] || undefined,\n      mimeType: attributes.type !== 'text/ecmascript' ? attributes.type : undefined,\n    };\n  }\n\n  /**\n   * Splits any read files containing atvise displays into their SVG and JavaScript sources,\n   * alongside with a json file containing the display's parameters.\n   * @param node The node to split.\n   * @param context The transform context.\n   */\n  async transformFromDB(\n    node: BrowsedNode,\n    context: { remove: () => void; addNode: (add: BrowsedNode) => void }\n  ) {\n    if (!this.shouldBeTransformed(node)) {\n      return undefined;\n    }\n\n    if (node.arrayType !== VariantArrayType.Scalar) {\n      // FIXME: Instead of throwing we could simply pass the original node to the callback\n      throw new Error('Array of displays not supported');\n    }\n\n    const xml = this.decodeContents(node);\n    if (!xml) {\n      throw new Error('Error parsing display');\n    }\n\n    const document = findChild(xml, 'svg');\n    if (!document) {\n      throw new Error('Error parsing display: No `svg` tag');\n    }\n\n    const config: DisplayConfig = { scripts: [] };\n    const scriptTags = removeChildren(document, 'script');\n    let inlineScript;\n\n    rootMetaTags.forEach(({ tag, key }) => {\n      const [element, ...additional] = removeChildren(document, tag);\n      if (!element) return;\n\n      config[key || tag] = textContent(element);\n\n      if (additional.length) {\n        Logger.warn(`Removed additional <${tag} /> element inside ${node.nodeId}`);\n      }\n    });\n\n    // Extract JavaScript\n    if (scriptTags.length) {\n      scriptTags.forEach((script) => {\n        const attributes = attributeValues(script);\n        const normalized = this.normalizeScriptAttributes(attributes);\n\n        if (attributes?.['atv:href']) {\n          // Linked scripts\n          config.scripts.push({\n            type: 'linked',\n            ...(normalized as { src: string }),\n          });\n        } else if (attributes?.src || attributes?.['xlink:href']) {\n          // Referenced scripts\n          config.scripts.push({\n            type: 'referenced',\n            ...(normalized as { src: string }),\n          });\n        } else if (inlineScript) {\n          // Warn on multiple inline scripts\n          Logger[node.id.value.startsWith('SYSTEM.LIBRARY.ATVISE') ? 'debug' : 'warn'](\n            `'${node.id.value}' contains multiple inline scripts.`\n          );\n          document.childNodes.push(inlineScript);\n        } else if (textContent(script)) {\n          // Inline script\n          config.scripts.push({\n            type: 'inline',\n            ...normalized,\n          });\n          inlineScript = script;\n        }\n      });\n    }\n\n    if (inlineScript) {\n      const scriptFile = (this.constructor as typeof SplittingTransformer).splitFile(node, '.js');\n      const scriptText = textContent(inlineScript);\n\n      scriptFile.value = {\n        dataType: DataType.String,\n        arrayType: VariantArrayType.Scalar,\n        value: scriptText,\n      };\n      context.addNode(scriptFile);\n    }\n\n    // Extract metadata\n    const metaTag = findChild(document, 'metadata');\n    if (metaTag && metaTag.childNodes) {\n      // TODO: Warn on multiple metadata tags\n\n      // - Parameters\n      const paramTags = removeChildren(metaTag, 'atv:parameter');\n      if (paramTags.length) {\n        config.parameters = [];\n\n        paramTags.forEach((n) =>\n          config.parameters.push(this.sortedAttributeValues(n) as DisplayConfig['parameters'][0])\n        );\n      }\n    }\n\n    // Remove empty config values\n    // - Remove inline script config if it's the only script\n    //   FIXME: Add option to disable this\n    const [firstScript] = config.scripts;\n    if (config.scripts.length === 1 && firstScript.type === 'inline') {\n      const hasValues = ~Object.values({ ...firstScript, type: undefined }).findIndex((v) => v);\n\n      if (!hasValues) {\n        config.scripts.pop();\n      }\n    }\n\n    // Remove empty scripts array\n    if (!config.scripts.length) delete config.scripts;\n\n    // Write files\n    this.writeConfigFile(config, node, context);\n\n    const svgFile = (this.constructor as typeof SplittingTransformer).splitFile(node, '.svg');\n    svgFile.value = {\n      dataType: DataType.String,\n      arrayType: VariantArrayType.Scalar,\n      value: this.encodeContents(xml),\n    };\n    context.addNode(svgFile);\n\n    // equals: node.renameTo(`${node.name}.display`);\n    return super.transformFromDB(node, context);\n  }\n\n  scriptTagAttributes(config: Partial<DisplayConfig['scripts'][0]> & { src: string }) {\n    return Object.entries(config).reduce(\n      (soFar, [key, value]) => {\n        let outputKey;\n\n        if (key === 'mimeType') outputKey = 'type';\n        if (key === 'src') outputKey = config.type === 'referenced' ? 'xlink:href' : 'atv:href';\n\n        return { ...soFar, [outputKey || `atv:${key}`]: value };\n      },\n      {\n        type: 'text/ecmascript',\n      }\n    );\n  }\n\n  /**\n   * Creates a display from the collected nodes.\n   * @param {BrowsedNode} node The container node.\n   * @param {Map<string, BrowsedNode>} sources The collected files, stored against their\n   * extension.\n   * @param context The current transform context.\n   */\n  combineNodes(node, sources, context) {\n    const configFile = sources['.json'];\n    let config: DisplayConfig = {};\n\n    if (configFile) {\n      try {\n        config = JSON.parse(configFile.stringValue);\n      } catch (e) {\n        throw new Error(`Error parsing JSON in ${configFile.relative}: ${e.message}`);\n      }\n    }\n\n    const svgFile = sources['.svg'];\n    if (!svgFile) {\n      throw new Error(`No display SVG for ${node.nodeId}`);\n    }\n\n    const scriptFile =\n      sources[(this.constructor as typeof DisplayTransformer).scriptSourceExtension];\n    let inlineScript = '';\n    if (scriptFile) {\n      inlineScript = scriptFile.stringValue;\n    }\n\n    const xml = this.decodeContents(svgFile);\n    const result = xml;\n    const svg = findChild(result, 'svg');\n\n    if (!svg) {\n      throw new Error('Error parsing display SVG: No `svg` tag');\n    }\n\n    if (config.dependencies && config.scripts) {\n      throw new Error(`Cannot use both 'dependencies' and 'scripts'`);\n    }\n\n    const linkedScriptsSupported = gte(context.atserverVersion, '3.5.0');\n\n    const referencedScripts = config.dependencies\n      ? config.dependencies.map((src) => ({ src }))\n      : config.scripts?.filter((s) => s.type === 'referenced') ?? [];\n\n    const addReferencedScripts = () =>\n      referencedScripts.forEach((s) => {\n        appendChild(svg, createElement('script', undefined, this.scriptTagAttributes(s)));\n      });\n\n    // Insert linked scripts\n\n    if (config.scripts) {\n      config.scripts.forEach((s) => {\n        if (s.type === 'linked') {\n          if (!linkedScriptsSupported) {\n            // FIXME: Add possibility to ignore this error (and do what? :) )\n            throw new Error(`Linked scripts are only supported on atserver 3.5 and later`);\n          }\n\n          appendChild(svg, createElement('script', undefined, this.scriptTagAttributes(s)));\n        }\n      });\n    }\n\n    // Insert dependencies\n\n    // On atserver < 3.5 insert dependencies before the inline script\n    if (!linkedScriptsSupported) {\n      addReferencedScripts();\n    }\n\n    // Insert inline script\n    // NOTE: Import order is not preserved on atserver < 3.5\n    if (scriptFile) {\n      appendChild(\n        svg,\n        createElement('script', [createCDataNode(inlineScript)], {\n          type: 'text/ecmascript',\n        })\n      );\n    }\n\n    // Insert referenced scripts after inline scripts in atserver 3.5+\n\n    if (linkedScriptsSupported) {\n      addReferencedScripts();\n    }\n\n    // Insert metadata\n    // - Parameters\n    if (config.parameters && config.parameters.length > 0) {\n      let [metaTag] = removeChildren(svg, 'metadata');\n\n      // FIXME: Warn on multiple metadata tags\n\n      if (!metaTag) {\n        metaTag = createElement('metadata');\n      }\n\n      // Parameters should come before other atv attributes, e.g. `atv:gridconfig`\n      for (let i = config.parameters.length - 1; i >= 0; i--) {\n        prependChild(\n          metaTag,\n          createElement('atv:parameter', undefined, config.parameters[i] as AttributeValues)\n        );\n      }\n\n      // Insert <metadata> as first element in the resulting svg, after <defs>, <desc> and\n      // <title> if defined (nothing to do, they are ordered inside #encodeContents)\n      prependChild(svg, metaTag);\n    }\n\n    // - Title and description\n    rootMetaTags.reverse().forEach(({ tag, key }) => {\n      const value = config[key || tag] as string;\n\n      if (value !== undefined) {\n        prependChild(svg, createElement(tag, [createTextNode(value)]));\n      }\n    });\n\n    // eslint-disable-next-line\n    node.value.value = this.encodeContents(result);\n    return node;\n  }\n}\n"],"file":"DisplayTransformer.js"}