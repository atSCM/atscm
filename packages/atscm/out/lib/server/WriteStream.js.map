{"version":3,"sources":["../../../src/lib/server/WriteStream.js"],"names":["WriteStream","WaitingStream","constructor","createStream","addReferencesStream","options","_createCallbacks","on","nodeId","key","toString","_addReferencesStream","processErrorMessage","file","_createNode","handleErrors","err","StatusCodes","Good","done","push","dependenciesFor","processChunk","nodeClass","value","NodeClass","Variable","session","writeSingleNode","variantValue","statusCode","BadUserAccessDenied","BadNotWritable","Logger","warn","BadNodeIdUnknown","debug","e"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;AACA;;;;AANA;;AACA;AAOA;;AAEA;;;;;;AAMe,MAAMA,WAAN,SAA0BC,sBAA1B,CAAwC;AACrD;;;;;;;AAOAC,EAAAA,WAAW,CAACC,YAAD,EAAeC,mBAAf,EAAoCC,OAApC,EAA6C;AACtD,UAAMA,OAAN;AAEA;;;;;AAIA,SAAKC,gBAAL,GAAwB,EAAxB;AAEAH,IAAAA,YAAY,CAACI,EAAb,CAAgB,iBAAhB,EAAmC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAgB;AACjD,YAAMC,GAAG,GAAGD,MAAM,CAACE,QAAP,EAAZ;;AAEA,UAAI,KAAKJ,gBAAL,CAAsBG,GAAtB,CAAJ,EAAgC;AAC9B,aAAKH,gBAAL,CAAsBG,GAAtB,EAA2B,IAA3B;AACD;AACF,KAND;AAQA;;;;;AAIA,SAAKE,oBAAL,GAA4BP,mBAA5B;AACD;AAED;;;;;;;AAKAQ,EAAAA,mBAAmB,CAACC,IAAD,EAAO;AACxB,WAAQ,iBAAgBA,IAAI,CAACL,MAAO,EAApC;AACD;AAED;;;;;;;;AAMAM,EAAAA,WAAW,CAACD,IAAD,EAAOE,YAAP,EAAqB;AAC9B,SAAKT,gBAAL,CAAsBO,IAAI,CAACL,MAAL,CAAYE,QAAZ,EAAtB,IAAiDM,GAAD,IAAS;AACvDD,MAAAA,YAAY,CAACC,GAAD,EAAMC,+BAAYC,IAAlB,EAAyBC,IAAD,IAAUA,IAAI,EAAtC,CAAZ;AACD,KAFD;;AAIA,SAAKC,IAAL,CAAUP,IAAV;AACD;AAED;;;;;;;AAKAQ,EAAAA,eAAe,GAAG;AAChB,WAAO,EAAP;AACD;AAED;;;;;;;;AAMAC,EAAAA,YAAY,CAACT,IAAD,EAAOE,YAAP,EAAqB;AAC/B,QAAIF,IAAI,CAACU,SAAL,CAAeC,KAAf,KAAyBC,qBAAUC,QAAV,CAAmBF,KAAhD,EAAuD;AACrD;AACA,WAAKV,WAAL,CAAiBD,IAAjB,EAAuBE,YAAvB;;AACA;AACD;;AAED,QAAI;AACF,WAAKY,OAAL,CAAaC,eAAb,CACG,UAASf,IAAI,CAACL,MAAO,EADxB,EAEEK,IAAI,CAACgB,YAFP,EAGE,CAACb,GAAD,EAAMc,UAAN,KAAqB;AACnB,YACEA,UAAU,KAAKb,+BAAYc,mBAA3B,IACAD,UAAU,KAAKb,+BAAYe,cAF7B,EAGE;AACAC,2BAAOC,IAAP,CAAa,sBAAqBrB,IAAI,CAACL,MAAO;;wDAA9C;;AAGAO,UAAAA,YAAY,CAACC,GAAD,EAAMC,+BAAYC,IAAlB,EAAyBC,IAAD,IAAUA,IAAI,EAAtC,CAAZ;AACD,SARD,MAQO,IAAIW,UAAU,KAAKb,+BAAYkB,gBAA/B,EAAiD;AACtDF,2BAAOG,KAAP,CAAc,QAAOvB,IAAI,CAACL,MAAO,6CAAjC;;AAEA,eAAKM,WAAL,CAAiBD,IAAjB,EAAuBE,YAAvB;AACD,SAJM,MAIA;AACLA,UAAAA,YAAY,CAACC,GAAD,EAAMc,UAAN,EAAmBX,IAAD,IAAU;AACtC;AACA,iBAAKR,oBAAL,CAA0BS,IAA1B,CAA+BP,IAA/B;;AAEAM,YAAAA,IAAI;AACL,WALW,CAAZ;AAMD;AACF,OAxBH;AA0BD,KA3BD,CA2BE,OAAOkB,CAAP,EAAU;AACVtB,MAAAA,YAAY,CAACsB,CAAD,CAAZ;AACD;AACF;;AA3GoD","sourcesContent":["/* Needed as long as https://github.com/gajus/eslint-plugin-jsdoc/issues/56 is open */\n/* eslint-disable jsdoc/check-param-names */\n\nimport Logger from 'gulplog';\nimport { StatusCodes } from 'node-opcua/lib/datamodel/opcua_status_code';\nimport { NodeClass } from 'node-opcua/lib/datamodel/nodeclass';\nimport WaitingStream from './WaitingStream';\n\n// FIXME: Extend QueueStream directly\n\n/**\n * A stream that writes all read {@link AtviseFile}s to their corresponding nodes on atvise server.\n * The underlying {@link TreeStream} ensures the nodes are processed in an order that respects the\n * parent-child relations between nodes. Nodes are created (if needed) before their children are\n * processed.\n */\nexport default class WriteStream extends WaitingStream {\n  /**\n   * Creates a new write stream with the given {@link CreateNodeStream} and\n   * {@link AddReferencesStream}. Implementer have to ensure this create stream is actually piped.\n   * @param {CreateNodeStream} createStream The stream that handles node creations.\n   * @param {AddReferencesStream} addReferencesStream The stream that adds missing node references.\n   * @param {Object} options The options passed to the underlying {@link TreeStream}.\n   */\n  constructor(createStream, addReferencesStream, options) {\n    super(options);\n\n    /**\n     * If a node has to be created first, it's callback is added to this map.\n     * @type {Map<String, function(err: Error)}\n     */\n    this._createCallbacks = {};\n\n    createStream.on('processed-chunk', ({ nodeId }) => {\n      const key = nodeId.toString();\n\n      if (this._createCallbacks[key]) {\n        this._createCallbacks[key](null);\n      }\n    });\n\n    /**\n     * The stream responsible for adding additional references.\n     * @type {AddReferencesStream}\n     */\n    this._addReferencesStream = addReferencesStream;\n  }\n\n  /**\n   * The error message to use when writing a file fails.\n   * @param {AtviseFile} file The file being processed.\n   * @return {string} The error message to use.\n   */\n  processErrorMessage(file) {\n    return `Error writing ${file.nodeId}`;\n  }\n\n  /**\n   * Pushes a node to the piped create stream and waits for the node to be created.\n   * @param {AtviseFile} file The file create the node for.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  _createNode(file, handleErrors) {\n    this._createCallbacks[file.nodeId.toString()] = (err) => {\n      handleErrors(err, StatusCodes.Good, (done) => done());\n    };\n\n    this.push(file);\n  }\n\n  /**\n   * Returns a files parent node and type definition.\n   * @param {AtviseFile} file The file to check.\n   * @return {NodeId[]} The files dependencies.\n   */\n  dependenciesFor() {\n    return [];\n  }\n\n  /**\n   * Writes an {@link AtviseFile} to it's corresponding node on atvise server.\n   * @param {AtviseFile} file The file to write.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk(file, handleErrors) {\n    if (file.nodeClass.value !== NodeClass.Variable.value) {\n      // Non-variable nodes are just pushed\n      this._createNode(file, handleErrors);\n      return;\n    }\n\n    try {\n      this.session.writeSingleNode(\n        `ns=1;s=${file.nodeId}`,\n        file.variantValue,\n        (err, statusCode) => {\n          if (\n            statusCode === StatusCodes.BadUserAccessDenied ||\n            statusCode === StatusCodes.BadNotWritable\n          ) {\n            Logger.warn(`Error writing node ${file.nodeId}\n  - Make sure it is not opened in atvise builder\n  - Make sure the corresponding datasource is connected`);\n            handleErrors(err, StatusCodes.Good, (done) => done());\n          } else if (statusCode === StatusCodes.BadNodeIdUnknown) {\n            Logger.debug(`Node ${file.nodeId} does not exist: Attempting to create it...`);\n\n            this._createNode(file, handleErrors);\n          } else {\n            handleErrors(err, statusCode, (done) => {\n              // Push to add references stream\n              this._addReferencesStream.push(file);\n\n              done();\n            });\n          }\n        }\n      );\n    } catch (e) {\n      handleErrors(e);\n    }\n  }\n}\n"],"file":"WriteStream.js"}