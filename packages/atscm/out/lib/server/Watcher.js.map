{"version":3,"sources":["../../../src/lib/server/Watcher.js"],"names":["Watcher","Emitter","constructor","nodes","ProjectConfig","nodesToWatch","_nodeBrowser","NodeBrowser","handleNode","_subscribe","bind","browse","getter","_pushed","formatter","count","then","emit","catch","err","subscriptionStarted","_setupSubscription","Session","create","session","Promise","resolve","reject","_session","subscription","ClientSubscription","requestedPublishingInterval","requestedLifetimeCount","requestedMaxKeepAliveCount","maxNotificationsPerPublish","publishingEnabled","priority","on","node","nodeClass","NodeClass","Variable","undefined","nodeId","id","item","monitor","attributeId","AttributeIds","Value","clientHandle","samplingInterval","queueSize","discardOldest","timeout","setTimeout","Logger","debug","value","terminate","e","warn","once","clearTimeout","_handleChange","Error","Object","assign","dataValue","mtime","serverTimestamp","close"],"mappings":"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","sourcesContent":["/* eslint-plugin-jsdoc does not recognize the \"emits\" tag */\n/* eslint-disable jsdoc/check-tag-names */\n\n/* Needed as long as https://github.com/gajus/eslint-plugin-jsdoc/issues/56 is open */\n/* eslint-disable jsdoc/check-param-names */\n\nimport Emitter from 'events';\nimport { ClientSubscription } from 'node-opcua/lib/client/client_subscription';\nimport { AttributeIds } from 'node-opcua/lib/services/read_service';\nimport { NodeClass } from 'node-opcua/lib/datamodel/nodeclass';\nimport Logger from 'gulplog';\nimport ProjectConfig from '../../config/ProjectConfig';\nimport { reportProgress } from '../helpers/log';\nimport Session from './Session';\nimport NodeBrowser from './NodeBrowser';\n\n/**\n * Watches the given nodes for value changes.\n * @emit {ReadStream.ReadResult} Emits `change` events when a watched node changes.\n */\nexport default class Watcher extends Emitter {\n  /**\n   * Creates a new Watcher with the given nodes.\n   * @param {NodeId[]} nodes The nodes to watch (recursively).\n   */\n  constructor(nodes = ProjectConfig.nodesToWatch) {\n    super();\n\n    /**\n     * The browser used to subscribe to server nodes.\n     * @type {NodeBrowser}\n     */\n    this._nodeBrowser = new NodeBrowser({\n      handleNode: this._subscribe.bind(this),\n    });\n\n    reportProgress(this._nodeBrowser.browse(nodes), {\n      getter: () => this._nodeBrowser._pushed,\n      formatter: (count) => `Subscribed to ${count} nodes`,\n    })\n      .then(() => this.emit('ready'))\n      .catch((err) => this.emit('error', err));\n\n    /**\n     * Resolved once the server subscription is set up.\n     * @type {Promise<any>}\n     */\n    this.subscriptionStarted = this._setupSubscription().catch((err) => this.emit('error', err));\n  }\n\n  /**\n   * Initializes a server subscription.\n   * @return {Promise<node-opcua~ClientSubscription>} A setup subscription.\n   */\n  _setupSubscription() {\n    return Session.create().then(\n      (session) =>\n        new Promise((resolve, reject) => {\n          /** The current session, if connected @type {Session} */\n          this._session = session;\n\n          const subscription = new ClientSubscription(session, {\n            requestedPublishingInterval: 100,\n            requestedLifetimeCount: 1000,\n            requestedMaxKeepAliveCount: 12,\n            maxNotificationsPerPublish: 10,\n            publishingEnabled: true,\n            priority: 10,\n          });\n\n          subscription.on('started', () => resolve(subscription));\n          subscription.on('failure', (err) => reject(err));\n        })\n    );\n  }\n\n  /**\n   * Subscribes to value changes of a single node.\n   * @param {BrowsedNode} node A browsed node.\n   */\n  async _subscribe(node) {\n    if (node.nodeClass !== NodeClass.Variable) {\n      return undefined;\n    }\n    const subscription = await this.subscriptionStarted;\n\n    const nodeId = node.id;\n\n    const item = subscription.monitor(\n      {\n        nodeId,\n        attributeId: AttributeIds.Value,\n      },\n      {\n        clientHandle: 13,\n        samplingInterval: 250,\n        queueSize: 123,\n        discardOldest: true,\n      }\n    );\n\n    return new Promise((resolve, reject) => {\n      // Sometimes the changed event is not emitted...\n      // Fixes #202\n      const timeout = setTimeout(() => {\n        Logger.debug(`Error monitoring '${nodeId.value}': Did not receive initial value. Retry...`);\n\n        try {\n          item.terminate();\n        } catch (e) {\n          Logger.warn('Failed to terminate subscription', e);\n        }\n\n        return this._subscribe(node).then(resolve, reject);\n      }, 1000);\n\n      item.once('changed', () => {\n        clearTimeout(timeout);\n        item.on(\n          'changed',\n          this._handleChange.bind(this, {\n            nodeId,\n          })\n        );\n\n        resolve();\n      });\n      item.on('err', (err) => {\n        clearTimeout(timeout);\n        reject(err instanceof Error ? err : new Error(err));\n      });\n    }).catch((err) => {\n      throw Object.assign(err, { node });\n    });\n  }\n\n  /**\n   * Called once a change has been detected and emits a 'change' or 'delete' event.\n   * @param {Object} node The node that changed.\n   * @param {?node-opcua~Variant} dataValue The current value.\n   */\n  _handleChange({ nodeId }, dataValue) {\n    this.emit(dataValue.value ? 'change' : 'delete', {\n      // nodeClass,\n      nodeId,\n      value: dataValue.value,\n      mtime: dataValue.serverTimestamp,\n    });\n  }\n\n  /**\n   * Ends monitoring nodes.\n   */\n  close() {\n    if (this._session) {\n      Session.close(this._session).catch((err) => this.emit('error', err));\n    }\n  }\n}\n"],"file":"Watcher.js"}