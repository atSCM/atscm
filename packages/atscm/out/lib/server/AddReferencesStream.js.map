{"version":3,"sources":["../../../src/lib/server/AddReferencesStream.js"],"names":["serverNodes","Set","Atviseproject","ServerRelatedNodes","map","id","value","ignoredReferences","ReferenceTypeIds","toParent","HasTypeDefinition","HasModellingRule","AddReferencesStream","CallScriptStream","constructor","options","_retry","referencesToAdd","file","additionalReferences","Object","assign","references","dependenciesFor","refs","values","reduce","deps","nodes","concat","filter","has","scriptId","NodeId","NodeIdType","STRING","scriptParameters","result","key","s","referenceKeys","keys","length","paramObjString","dataType","DataType","String","JSON","stringify","nodeId","type","referenceIdValue","parseInt","items","processErrorMessage","handleOutputArguments","outArgs","callback","StatusCodes","Good","Error","failures","retryKey","delete","join","add","once","write"],"mappings":"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","sourcesContent":["import { DataType } from 'node-opcua/lib/datamodel/variant';\nimport { StatusCodes } from 'node-opcua/lib/datamodel/opcua_status_code';\nimport NodeId from '../model/opcua/NodeId';\nimport { ReferenceTypeIds } from '../model/Node';\nimport Atviseproject from '../config/Atviseproject';\nimport CallScriptStream from './scripts/CallScriptStream';\nimport { waitForDependencies } from './WaitingStream';\n\nconst serverNodes = new Set(Atviseproject.ServerRelatedNodes.map((id) => id.value));\n\nconst ignoredReferences = new Set([\n  ReferenceTypeIds.toParent,\n  ReferenceTypeIds.HasTypeDefinition,\n  ReferenceTypeIds.HasModellingRule,\n]);\n\n/**\n * A stream that adds non-standard references to nodes when pushed.\n */\nexport default class AddReferencesStream extends waitForDependencies(CallScriptStream) {\n  /**\n   * Creates a new stream for adding references to pushed nodes.\n   * @param {Object} options The options to pass to the {@link CallScriptStream}.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * A stack of {@link NodeId#value}s to be retried afterwards.\n     * @type {Set<string>}\n     */\n    this._retry = new Set();\n  }\n\n  /**\n   * Returns the references that need to be set for a file.\n   * @param {AtviseFile} file The file to check.\n   * @return {Object} The files's references.\n   */\n  referencesToAdd(file) {\n    const additionalReferences = Object.assign({}, file.references);\n    delete additionalReferences.toParent;\n    delete additionalReferences.HasTypeDefinition;\n    delete additionalReferences.HasModellingRule;\n\n    return additionalReferences;\n  }\n\n  /**\n   * Returns the referenced nodes that should be processed before the given file.\n   * @param {AtviseFile} file The file to check.\n   * @return {NodeId[]} The files dependencies.\n   */\n  dependenciesFor(file) {\n    const refs = this.referencesToAdd(file);\n\n    return Object.values(refs)\n      .reduce((deps, nodes) => deps.concat(nodes), [])\n      .filter(({ value }) => !serverNodes.has(value));\n  }\n\n  /**\n   * Id of the *CreateNode* script added with `atscm import`.\n   * @type {NodeId}\n   */\n  get scriptId() {\n    return new NodeId(\n      NodeId.NodeIdType.STRING,\n      'SYSTEM.LIBRARY.ATVISE.SERVERSCRIPTS.atscm.AddReferences',\n      1\n    );\n  }\n\n  /**\n   * The options required to add references to the node for the given file.\n   * @param {AtviseFile} file The processed file.\n   * @return {Object} The options passed to the *AddReferences* script.\n   */\n  scriptParameters(file) {\n    const references = [...file.references].reduce((result, [key, value]) => {\n      if (ignoredReferences.has(key)) {\n        return result;\n      }\n\n      return Object.assign(result, {\n        [key]: [...value].map((s) => (typeof s === 'string' ? `ns=1;s=${s}` : s)),\n      });\n    }, {});\n\n    const referenceKeys = Object.keys(references);\n\n    if (referenceKeys.length > 0) {\n      return {\n        paramObjString: {\n          dataType: DataType.String,\n          value: JSON.stringify({\n            nodeId: file.nodeId,\n            references: referenceKeys.map((type) => ({\n              referenceIdValue: parseInt(type, 10),\n              items: references[type],\n            })),\n          }),\n        },\n      };\n    }\n\n    // No need to add references\n    return null;\n  }\n\n  /**\n   * Prints an error message telling that adding one or more references failed.\n   * @param {AtviseFile} file The file who's node could not be created.\n   * @return {string} The resulting error message.\n   */\n  processErrorMessage(file) {\n    return `Error adding references to node ${file.nodeId}`;\n  }\n\n  /**\n   * Handles the results of a script call.\n   * @param {AtviseFile} file The file the script was called with.\n   * @param {node-opcua~Variant[]} outArgs The raw method results.\n   * @param {function(err: Error)} callback Called once finished.\n   */\n  handleOutputArguments(file, outArgs, callback) {\n    if (outArgs[0].value !== StatusCodes.Good) {\n      callback(new Error(outArgs[1].value));\n    } else {\n      const [{ value: failures }] = outArgs[3].value;\n\n      if (failures && failures.length) {\n        const retryKey = file.nodeId.value;\n\n        if (this._retry.has(retryKey)) {\n          this._retry.delete(retryKey);\n          callback(new Error(`Failed to create references to ${failures.join(', ')}`));\n        } else {\n          this._retry.add(retryKey);\n          callback(null);\n\n          this.once('drained', () => {\n            this.write(file);\n          });\n        }\n\n        return;\n      }\n\n      callback(null);\n    }\n  }\n}\n"],"file":"AddReferencesStream.js"}