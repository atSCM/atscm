{"version":3,"sources":["../../../../src/lib/model/opcua/NodeId.js"],"names":["Type","OpcNodeId","NodeIdType","TypeForIdentifier","i","NUMERIC","s","STRING","g","GUID","b","BYTESTRING","possibleResourceChildNodes","Set","NodeId","constructor","typeOrValue","value","namespace","get","m","match","Number","isNaN","parseInt","n","t","v","fromFilePath","path","separator","split","sep","reduce","result","current","index","components","next","replace","has","filePath","parts","join","_lastSeparator","identifierType","indexOf","parent","parentValue","substr","lastIndexOf","isChildOf","prefix","postfix","length","browseName","inspect","depth","options","stylize"],"mappings":"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","sourcesContent":["import { sep } from 'path';\nimport { NodeId as OpcNodeId } from 'node-opcua/lib/datamodel/nodeid';\n\n/**\n * OPC-UA node id types.\n * @type {Map<String, node-opcua~NodeIdType>}\n */\nconst Type = OpcNodeId.NodeIdType;\n\n/**\n * OPC-UA node id types mapped against node-id identifiers (e.g. i, s ...).\n * @type {Map<String, node-opcua~NodeIdType>}\n */\nconst TypeForIdentifier = {\n  i: Type.NUMERIC,\n  s: Type.STRING,\n  g: Type.GUID,\n  b: Type.BYTESTRING,\n};\n\n/**\n * Resource nodes are only allowed to have these child nodes.\n * @type {Set<string>}\n */\nconst possibleResourceChildNodes = new Set(['Translate', 'Compress']);\n\n/**\n * A wrapper around {@link node-opcua~NodeId}.\n */\nexport default class NodeId extends OpcNodeId {\n  /**\n   * Creates a new NodeId. Can be called in multiple ways:\n   *  - with a {@link node-opcua~NodeIdType}, a value and a namespace (defaults to 0),\n   *  - with a value only (type will be taken from it, namespace defaults to 1) or\n   *  - with a {@link NodeId}s string representation (for example `ns=1;s=AGENT.DISPLAYS`).\n   * @param {node-opcua~NodeIdType|string|number} typeOrValue The type or value to use.\n   * @param {(number|string)} [value] The value to use.\n   * @param {number} [namespace=1] The namespace to use.\n   */\n  constructor(typeOrValue, value, namespace = 1) {\n    if (!Type.get(typeOrValue)) {\n      let m = null;\n\n      if (typeof typeOrValue === 'string') {\n        m = typeOrValue.match(/^ns=([0-9]+);(i|s|g|b)=(.*)$/);\n      }\n\n      if (m === null) {\n        super(\n          Number.isNaN(Number.parseInt(typeOrValue, 10)) ? Type.STRING : Type.NUMERIC,\n          typeOrValue,\n          1\n        );\n      } else {\n        const n = Number.parseInt(m[1], 10);\n        const t = TypeForIdentifier[m[2]];\n        const v = t === Type.NUMERIC ? Number.parseInt(m[3], 10) : m[3];\n\n        super(t, v, n);\n      }\n    } else {\n      super(typeOrValue, value, namespace);\n    }\n  }\n\n  /**\n   * Creates a new NodeId based on a file path.\n   * @param {string} path The file path to use.\n   * @return {NodeId} The resulting NodeId.\n   */\n  static fromFilePath(path) {\n    let separator = '.';\n\n    const value = path.split(sep).reduce((result, current, index, components) => {\n      const next = `${result ? `${result}${separator}` : ''}${current.replace('%2F', '/')}`;\n\n      if (current === 'RESOURCES') {\n        separator = '/';\n      } else if (separator === '/' && possibleResourceChildNodes.has(components[index + 1])) {\n        separator = '.';\n      }\n\n      return next;\n    }, '');\n\n    return new NodeId(NodeId.NodeIdType.STRING, value, 1);\n  }\n\n  /**\n   * The node id's value, encoded to a file path.\n   * @type {string}\n   */\n  get filePath() {\n    const parts = this.value.split('RESOURCES');\n    parts[0] = parts[0].replace('/', '%2F').split('.').join('/');\n\n    return parts.join('RESOURCES');\n  }\n\n  // eslint-disable-next-line jsdoc/require-description-complete-sentence\n  /**\n   * Returns the last separator in a string node id's path, e.g.:\n   * - `'/'` for `ns=1;SYSTEM.LIBRARY.RESOURCES/index.htm`,\n   * - `'.'` for `ns=1;AGENT.DISPLAYS.Main`.\n   * @type {?string} `null` for non-string node ids, `'/'` for resource paths, `'.'` for regular\n   * string node ids.\n   */\n  get _lastSeparator() {\n    if (this.identifierType !== NodeId.NodeIdType.STRING) {\n      return null;\n    }\n\n    return ~this.value.indexOf('/') ? '/' : '.';\n  }\n\n  /**\n   * The parent node id, or `null`.\n   * @type {?NodeId}\n   * @deprecated Doesn't work properly in some edge cases. Use AtviseFile#parentNodeId instead\n   * whenever possible.\n   */\n  get parent() {\n    if (this.identifierType !== NodeId.NodeIdType.STRING) {\n      return null;\n    }\n\n    /*\n      Known aliases:\n        - AGENT and SYSTEM are children of \"Objects\"\n        - ObjectTypes.PROJECT and VariableTypes.PROJECT are children of their base Types\n    */\n    // FIXME: Should be in mapping transformer\n    if (this.value === 'AGENT' || this.value === 'SYSTEM') {\n      return new NodeId(NodeId.NodeIdType.NUMERIC, 85, 0); // \"Objects\"\n    } else if (this.value === 'ObjectTypes.PROJECT') {\n      return new NodeId(NodeId.NodeIdType.NUMERIC, 58, 0); // \"BaseObjectType\"\n    } else if (this.value === 'VariableTypes.PROJECT') {\n      return new NodeId(NodeId.NodeIdType.NUMERIC, 62, 0); // \"BaseVariableType\"\n    }\n\n    const parentValue = this.value.substr(0, this.value.lastIndexOf(this._lastSeparator));\n\n    if (!parentValue) {\n      // Root node -> 'Objects' is parent\n      return new NodeId(NodeId.NodeIdType.NUMERIC, 85, 0);\n    }\n\n    return new NodeId(NodeId.NodeIdType.STRING, parentValue, this.namespace);\n  }\n\n  /**\n   * Checks if the node is a child of another.\n   * @param {NodeId} parent The possible parent to check.\n   * @return {boolean} `true` if *this* is a child node of *parent*.\n   */\n  isChildOf(parent) {\n    if (\n      this.identifierType !== NodeId.NodeIdType.STRING ||\n      parent.identifierType !== NodeId.NodeIdType.STRING\n    ) {\n      return false;\n    }\n\n    if (this.namespace !== parent.namespace || this.value === parent.value) {\n      return false;\n    }\n\n    const [prefix, postfix] = this.value.split(parent.value);\n\n    return (\n      prefix === '' &&\n      postfix &&\n      (postfix[0] === this._lastSeparator ||\n        (this._lastSeparator === '/' && postfix[0] === '.' && postfix.split('.').length === 2))\n    );\n  }\n\n  /**\n   * The node id's browsename as string.\n   * @type {string}\n   */\n  get browseName() {\n    if (this.identifierType !== NodeId.NodeIdType.STRING) {\n      return null;\n    }\n\n    return this.value.substr(this.value.lastIndexOf(this._lastSeparator) + 1);\n  }\n\n  /**\n   * Returns a string in the format \"namespace value\" that is printed when inspecting the NodeId\n   * using {@link util~inspect}.\n   * @see https://nodejs.org/api/util.html#util_util_inspect_object_options\n   * @param {number} depth The depth to inspect.\n   * @param {Object} options The options to use.\n   * @return {string} A string in the format \"namespace value\".\n   */\n  inspect(depth, options) {\n    return [\n      options.stylize(this.namespace, 'number'),\n      options.stylize(this.value, this.identifierType === Type.NUMERIC ? 'number' : 'string'),\n    ].join(' ');\n  }\n}\n"],"file":"NodeId.js"}