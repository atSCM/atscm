{"version":3,"sources":["../../../src/lib/transform/XMLTransformer.js"],"names":["walk","element","action","filter","isElement","childNodes","child","n","XMLTransformer","SplittingTransformer","constructor","options","build","object","buildOptions","root","find","ProjectConfig","sortXMLAttributes","removeBuilderRefs","e","attributes","a","includes","name","sort","b","openTag","indent","repeat","spaces","_fromDBBuilder","xml","compact","replace","EOL","_fromFilesystemBuilder","sortedAttributeValues","node","Object","fromEntries","entries","builder","direction","TransformDirection","FromDB","decodeContents","rawLines","value","toString","stringValue","error","line","assign","location","start","column","encodeContents"],"mappings":"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","sourcesContent":["import { EOL } from 'os';\nimport { parse, render, isElement, moveToTop, attributeValues } from 'modify-xml';\nimport ProjectConfig from '../../config/ProjectConfig';\nimport { TransformDirection } from './Transformer';\nimport SplittingTransformer from './SplittingTransformer';\n\nfunction walk(element, action, filter = isElement) {\n  action(element);\n\n  if (element.childNodes) {\n    for (const child of element.childNodes.filter((n) => filter(n))) {\n      walk(child, action);\n    }\n  }\n}\n\n/**\n * A transformer used to transform XML documents.\n */\nexport default class XMLTransformer extends SplittingTransformer {\n  /**\n   * Creates a new XMLTransformer based on some options.\n   * @param {Object} [options] The options to use.\n   */\n  constructor(options = {}) {\n    super(options);\n\n    function build(object, buildOptions) {\n      const root = object.childNodes.find((n) => isElement(n));\n\n      if (root) {\n        moveToTop(root, 'metadata');\n        moveToTop(root, 'defs');\n        moveToTop(root, 'desc');\n        moveToTop(root, 'title');\n      }\n\n      if (ProjectConfig.sortXMLAttributes || ProjectConfig.removeBuilderRefs)\n        walk(root, (e) => {\n          /* eslint-disable no-param-reassign */\n          if (ProjectConfig.removeBuilderRefs)\n            e.attributes = e.attributes.filter((a) => !['atv:refpx', 'atv:refpy'].includes(a.name));\n\n          if (ProjectConfig.sortXMLAttributes)\n            e.attributes = e.attributes.sort((a, b) => (b.name > a.name ? -1 : 1));\n\n          delete e.openTag;\n          /* eslint-enable no-param-reassign */\n        });\n\n      return render(object, { indent: ' '.repeat(buildOptions.spaces) });\n    }\n\n    // eslint-disable-next-line jsdoc/require-param\n    /**\n     * The builder to use with direction {@link TransformDirection.FromDB}.\n     * @type {function(object: Object): string}\n     */\n    this._fromDBBuilder = (object) => {\n      const xml = build(object, { compact: false, spaces: 2 });\n      return xml.replace(/\\r?\\n/g, EOL);\n    };\n\n    // eslint-disable-next-line jsdoc/require-param\n    /**\n     * The builder to use with direction {@link TransformDirection.FromFilesystem}.\n     * @type {function(object: Object): string}\n     */\n    this._fromFilesystemBuilder = (object) => {\n      const xml = build(object, { compact: false, spaces: 1 });\n      return xml.replace(/\\r?\\n/g, '\\n');\n    };\n  }\n\n  /**\n   * @protected\n   * @param {import('modify-xml').Element} node The node to handle.\n   */\n  sortedAttributeValues(node) {\n    if (!ProjectConfig.sortXMLAttributes) return attributeValues(node);\n\n    return Object.fromEntries(\n      Object.entries(attributeValues(node)).sort((a, b) => (b > a ? -1 : 1))\n    );\n  }\n\n  /**\n   * Returns the XML builder to use based on the current {@link Transformer#direction}.\n   * @type {function(object: Object): string}\n   */\n  get builder() {\n    return this.direction === TransformDirection.FromDB\n      ? this._fromDBBuilder\n      : this._fromFilesystemBuilder;\n  }\n\n  /**\n   * Parses XML in a node's contents.\n   * @param {Node} node The node to process.\n   */\n  decodeContents(node) {\n    const rawLines =\n      this.direction === TransformDirection.FromDB ? node.value.value.toString() : node.stringValue;\n\n    try {\n      return parse(rawLines);\n    } catch (error) {\n      if (error.line) {\n        Object.assign(error, {\n          rawLines,\n          location: {\n            start: {\n              line: error.line + 1,\n              column: error.column + 1,\n            },\n          },\n        });\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Builds an XML string from an object.\n   * @param {Object} object The object to encode.\n   */\n  encodeContents(object) {\n    return this.builder(object);\n  }\n}\n"],"file":"XMLTransformer.js"}