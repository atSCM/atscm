{"version":3,"sources":["../../../src/lib/transform/ConfigTransformer.ts"],"names":["ConfigTransformer","XMLTransformer","nonEmptyConfig","input","result","key","value","Object","entries","Array","isArray","length","undefined","writeConfigFile","config","node","context","processed","configFile","constructor","splitFile","dataType","DataType","String","arrayType","VariantArrayType","Scalar","JSON","stringify","addNode"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,MAAMA,iBAAN,SAA6DC,uBAA7D,CAA4E;AACzF;;;;;AAKUC,EAAAA,cAAV,CAAyBC,KAAzB,EAAmC;AACjC,QAAIC,MAAgB,GAAG,IAAvB;;AAEA,SAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeL,KAAf,CAA3B,EAAkD;AAChD,UAAIM,KAAK,CAACC,OAAN,CAAcJ,KAAd,IAAuBA,KAAK,CAACK,MAAN,GAAe,CAAtC,GAA0CL,KAAK,KAAKM,SAAxD,EAAmE;AACjER,QAAAA,MAAM,GAAGA,MAAM,IAAK,EAApB;AACAA,QAAAA,MAAM,CAACC,GAAD,CAAN,GAAcC,KAAd;AACD;AACF;;AAED,WAAOF,MAAP;AACD;AAED;;;;;;;;;AAOUS,EAAAA,eAAV,CAA0BC,MAA1B,EAAqCC,IAArC,EAA2CC,OAA3C,EAAoD;AAClD,UAAMC,SAAS,GAAG,KAAKf,cAAL,CAAoBY,MAApB,CAAlB;;AAEA,QAAIG,SAAJ,EAAe;AACb,YAAMC,UAAU,GAAI,KAAKC,WAAN,CAA4CC,SAA5C,CAAsDL,IAAtD,EAA4D,OAA5D,CAAnB;AACAG,MAAAA,UAAU,CAACZ,KAAX,GAAmB;AACjBe,QAAAA,QAAQ,EAAEC,kBAASC,MADF;AAEjBC,QAAAA,SAAS,EAAEC,0BAAiBC,MAFX;AAGjBpB,QAAAA,KAAK,EAAEqB,IAAI,CAACC,SAAL,CAAed,MAAf,EAAuB,IAAvB,EAA6B,IAA7B;AAHU,OAAnB;AAKAE,MAAAA,OAAO,CAACa,OAAR,CAAgBX,UAAhB;AACD;;AAED,WAAO,CAAC,CAACD,SAAT;AACD;;AAxCwF","sourcesContent":["import { DataType, VariantArrayType } from 'node-opcua/lib/datamodel/variant';\nimport XMLTransformer from './XMLTransformer';\n\nexport default class ConfigTransformer<C = Record<string, unknown>> extends XMLTransformer {\n  /**\n   * Returns an object containing all non-empty properties of the input object. Returns null if no\n   * properties are non-empty.\n   * @param input The config to process.\n   */\n  protected nonEmptyConfig(input: C) {\n    let result: C | null = null;\n\n    for (const [key, value] of Object.entries(input)) {\n      if (Array.isArray(value) ? value.length > 0 : value !== undefined) {\n        result = result || ({} as C);\n        result[key] = value;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Writes the config file to disk if needed.\n   * @param config The config to write.\n   * @param node The original source node.\n   * @param context The current transformer context.\n   * @return `true` it the config was actually written.\n   */\n  protected writeConfigFile(config: C, node, context) {\n    const processed = this.nonEmptyConfig(config);\n\n    if (processed) {\n      const configFile = (this.constructor as typeof XMLTransformer).splitFile(node, '.json');\n      configFile.value = {\n        dataType: DataType.String,\n        arrayType: VariantArrayType.Scalar,\n        value: JSON.stringify(config, null, '  '),\n      };\n      context.addNode(configFile);\n    }\n\n    return !!processed;\n  }\n}\n"],"file":"ConfigTransformer.js"}