{"version":3,"sources":["../../../src/lib/gulp/PullStream.js"],"names":["PullStream","constructor","readStream","printProgress","setInterval","Logger","info","processed","opsPerSecond","toFixed","listenerCount","readline","cursorTo","process","stdout","moveCursor","Transformer","applyTransformers","ProjectConfig","useTransformers","TransformDirection","FromDB","pipe","on","clearLine","clearInterval"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA;;;AAGe,MAAMA,UAAN,CAAiB;AAC9B;;;;;AAKAC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACtB,UAAMC,aAAa,GAAGC,WAAW,CAAC,MAAM;AACtCC,uBAAOC,IAAP,CAAa,WAAUJ,UAAU,CAACK,SAAU,KAAIL,UAAU,CAACM,YAAX,CAAwBC,OAAxB,CAAgC,CAAhC,CAAmC,SAAnF;;AAEA,UAAIJ,iBAAOK,aAAP,CAAqB,MAArB,IAA+B,CAAnC,EAAsC;AACpCC,0BAASC,QAAT,CAAkBC,OAAO,CAACC,MAA1B,EAAkC,CAAlC;;AACAH,0BAASI,UAAT,CAAoBF,OAAO,CAACC,MAA5B,EAAoC,CAApC,EAAuC,CAAC,CAAxC;AACD;AACF,KAPgC,EAO9B,IAP8B,CAAjC;AASA,WAAOE,qBAAYC,iBAAZ,CACLf,UADK,EAELgB,uBAAcC,eAFT,EAGLC,gCAAmBC,MAHd,EAKJC,IALI,CAKC,mBAAK,OAAL,CALD,EAKgB;AALhB,KAMJC,EANI,CAMD,QANC,EAMS,MAAM;AAClB,UAAIlB,iBAAOK,aAAP,CAAqB,MAArB,IAA+B,CAAnC,EAAsC;AACpCC,0BAASa,SAAT,CAAmBX,OAAO,CAACC,MAA3B,EAAmC,CAAnC;;AACAH,0BAASC,QAAT,CAAkBC,OAAO,CAACC,MAA1B,EAAkC,CAAlC;AACD;;AAEDW,MAAAA,aAAa,CAACtB,aAAD,CAAb;AACD,KAbI,CAAP;AAcD;;AA9B6B","sourcesContent":["import readline from 'readline';\nimport Logger from 'gulplog';\nimport ProjectConfig from '../../config/ProjectConfig';\nimport Transformer, { TransformDirection } from '../transform/Transformer';\nimport dest from './dest';\n\n/**\n * A stream that transforms read {@link ReadStream.ReadResult}s and stores the on the filesystem.\n */\nexport default class PullStream {\n  /**\n   * Creates a new PullStream based on a stream that writes {@link ReadStream.ReadResult} which may\n   * be an instance of {@link ReadStream}.\n   * @param {ReadStream} readStream The stream to read from.\n   */\n  constructor(readStream) {\n    const printProgress = setInterval(() => {\n      Logger.info(`Pulled: ${readStream.processed} (${readStream.opsPerSecond.toFixed(1)} ops/s)`);\n\n      if (Logger.listenerCount('info') > 0) {\n        readline.cursorTo(process.stdout, 0);\n        readline.moveCursor(process.stdout, 0, -1);\n      }\n    }, 1000);\n\n    return Transformer.applyTransformers(\n      readStream,\n      ProjectConfig.useTransformers,\n      TransformDirection.FromDB\n    )\n      .pipe(dest('./src')) // FIXME: Get from config file\n      .on('finish', () => {\n        if (Logger.listenerCount('info') > 0) {\n          readline.clearLine(process.stdout, 0);\n          readline.cursorTo(process.stdout, 0);\n        }\n\n        clearInterval(printProgress);\n      });\n  }\n}\n"],"file":"PullStream.js"}