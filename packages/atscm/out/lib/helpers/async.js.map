{"version":3,"sources":["../../../src/lib/helpers/async.ts"],"names":["delay","ms","Promise","resolve","setTimeout","promisified","fn","reject","err","data"],"mappings":";;;;;;;AAAA;;;;;AAKO,MAAMA,KAAK,GAAIC,EAAD,IACnB,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAAC,MAAMD,OAAO,EAAd,EAAkBF,EAAlB,CAAnC,CADK;;;;AAKP;;;;AAIO,MAAMI,WAAW,GAAOC,EAAJ,IACzB,IAAIJ,OAAJ,CAAY,CAACC,OAAD,EAAUI,MAAV,KAAqB;AAC/BD,EAAAA,EAAE,CAAC,CAACE,GAAD,EAAMC,IAAN,KAAgBD,GAAG,GAAGD,MAAM,CAACC,GAAD,CAAT,GAAiBL,OAAO,CAACM,IAAD,CAA5C,CAAF;AACD,CAFD,CADK","sourcesContent":["/**\n * Returns a promise that resolves after the given duration.\n * @param ms Milliseconds to delay.\n * @return A promise resolved after the specified delay.\n */\nexport const delay = (ms: number): Promise<void> =>\n  new Promise((resolve) => setTimeout(() => resolve(), ms));\n\ntype AsyncCallback<R> = (error?: Error | null, result?: R) => void;\n\n/**\n * Wraps a function with an async callback in a promise.\n * @param fn The function to promisify.\n */\nexport const promisified = <R>(fn: (cb: AsyncCallback<R>) => R): Promise<R> =>\n  new Promise((resolve, reject) => {\n    fn((err, data) => (err ? reject(err) : resolve(data)));\n  });\n"],"file":"async.js"}