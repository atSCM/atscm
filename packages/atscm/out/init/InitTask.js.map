{"version":3,"sources":["../../src/init/InitTask.js"],"names":["InitTask","filesToHandle","langId","map","p","__dirname","run","options","configLang","install","deps","lang","renameGitignore","through","obj","file","_","callback","basename","stream","dot","pipe","helpers"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;AAGe,MAAMA,QAAN,CAAe;AAC5B;;;;;AAKA,SAAOC,aAAP,CAAqBC,MAArB,EAA6B;AAC3B,WAAO,CACL,gBADK,EAEL,iBAFK,EAGJ,UAASA,MAAO,SAHZ,EAIJ,UAASA,MAAO,QAJZ,EAKLC,GALK,CAKAC,CAAD,IAAO,gBAAKC,SAAL,EAAgB,0BAAhB,EAA4CD,CAA5C,CALN,CAAP;AAMD;AAED;;;;;;;;AAMA,eAAaE,GAAb,CAAiBC,OAAjB,EAA0B;AACxB,UAAML,MAAM,GAAGK,OAAO,CAACC,UAAvB;AAEA,UAAMC,OAAO,GAAGC,sBAAKC,IAAL,CAAUT,MAAV,CAAhB;;AAEA,UAAMU,eAAe,GAAGC,iBAAQC,GAAR,CAAY,CAACC,IAAD,EAAOC,CAAP,EAAUC,QAAV,KAAuB;AACzD,UAAIF,IAAI,CAACG,QAAL,KAAkB,WAAtB,EAAmC;AACjC;AACAH,QAAAA,IAAI,CAACG,QAAL,GAAgB,YAAhB;AACD;;AAEDD,MAAAA,QAAQ,CAAC,IAAD,EAAOF,IAAP,CAAR;AACD,KAPuB,CAAxB;;AASA,UAAMI,MAAM,GAAG,eAAI,KAAKlB,aAAL,CAAmBC,MAAnB,CAAJ,EAAgC;AAAEkB,MAAAA,GAAG,EAAE;AAAP,KAAhC,EACZC,IADY,CACPT,eADO,EAEZS,IAFY,CAGX,oCAAWd,OAAX,EAAoB;AAClBe,MAAAA,OAAO,EAAE;AADS,KAApB,CAHW,EAOZD,IAPY,CAOP,gBAAK,IAAL,CAPO,CAAf;AASA,UAAM,8BAAgBF,MAAhB,CAAN;AAEA,WAAO;AAAEV,MAAAA;AAAF,KAAP;AACD;;AA/C2B","sourcesContent":["import { join } from 'path';\nimport { src, dest } from 'gulp';\nimport handlebars from 'gulp-compile-handlebars';\nimport helpers from 'handlebars-helpers';\nimport streamToPromise from 'stream-to-promise';\nimport through from 'through2';\nimport deps from '../../res/init/templates/dependencies.json';\n\n/**\n * The action run when running \"atscm init\".\n */\nexport default class InitTask {\n  /**\n   * Returns the globs of the processed files for the given config lanugage.\n   * @param {string} langId The configuration language used.\n   * @return {string[]} Globs of the files to handle.\n   */\n  static filesToHandle(langId) {\n    return [\n      './general/**/*',\n      './general/**/.*',\n      `./lang/${langId}/**/*.*`,\n      `./lang/${langId}/**/.*`,\n    ].map((p) => join(__dirname, '../../res/init/templates', p));\n  }\n\n  /**\n   * Runs the task with the given options.\n   * @param {Object} options The options to use.\n   * @return {Promise<{ install: string[] }, Error>} Resolved with information on further actions\n   * to run or rejected if the task failed.\n   */\n  static async run(options) {\n    const langId = options.configLang;\n\n    const install = deps.lang[langId];\n\n    const renameGitignore = through.obj((file, _, callback) => {\n      if (file.basename === 'gitignore') {\n        // eslint-disable-next-line no-param-reassign\n        file.basename = '.gitignore';\n      }\n\n      callback(null, file);\n    });\n\n    const stream = src(this.filesToHandle(langId), { dot: true })\n      .pipe(renameGitignore)\n      .pipe(\n        handlebars(options, {\n          helpers: helpers(),\n        })\n      )\n      .pipe(dest('./'));\n\n    await streamToPromise(stream);\n\n    return { install };\n  }\n}\n"],"file":"InitTask.js"}