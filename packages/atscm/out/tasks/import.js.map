{"version":3,"sources":["../../src/tasks/import.js"],"names":["importTask","srcStream","scripts","versionVariant","dataType","DataType","String","value","version","Session","pool","context","pipe","ImportStream","then","versionNode","catch","err","statusCode","StatusCodes","BadNodeIdUnknown","maxTries","retryDelay","tryNo","tryToCreate","name","outputArguments","length","Logger","debug","Error","finishTask","handleTaskError","description"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;AAIe,eAAeA,UAAf,GAA4B;AACzC,QAAMC,SAAS,GAAG,eAAIC,sBAAJ,CAAlB;AACA,QAAMC,cAAc,GAAG;AAAEC,IAAAA,QAAQ,EAAEC,kBAASC,MAArB;AAA6BC,IAAAA,KAAK,EAAEC;AAApC,GAAvB;;AAEAC,mBAAQC,IAAR;;AAEA,QAAMC,OAAO,GAAG,0BAAhB;AACA,QAAM,4BAAcA,OAAd,CAAN;AAEA,SAAO,8BAAUV,SAAS,CAACW,IAAV,CAAe,IAAIC,qBAAJ,EAAf,CAAV,EACJC,IADI,CACC,MAAM,oBAAUC,oBAAV,EAAuBZ,cAAvB,CADP,EAEJa,KAFI,CAEGC,GAAD,IAAS;AACd,QAAIA,GAAG,CAACC,UAAJ,KAAmBC,+BAAYC,gBAAnC,EAAqD;AACnD,YAAMC,QAAQ,GAAG,EAAjB;AACA,YAAMC,UAAU,GAAG,GAAnB;AAEA,UAAIC,KAAK,GAAG,CAAZ;;AACA,YAAMC,WAAW,GAAG,MAAM;AACxBD,QAAAA,KAAK;AAEL,eAAO,qBAAWR,oBAAX,EAAwB;AAC7BU,UAAAA,IAAI,EAAE,SADuB;AAE7BlB,UAAAA,KAAK,EAAEJ;AAFsB,SAAxB,EAGJW,IAHI,CAGC,OAAO;AAAEY,UAAAA;AAAF,SAAP,KAA+B;AACrC,cAAIA,eAAe,CAAC,CAAD,CAAf,CAAmBnB,KAAnB,CAAyBoB,MAAzB,GAAkC,CAAtC,EAAyC;AACvC,gBAAIJ,KAAK,GAAGF,QAAZ,EAAsB;AACpBO,+BAAOC,KAAP,CAAc,kDAAiDP,UAAW,IAA1E;;AAEA,oBAAM,kBAAMA,UAAN,CAAN;AACA,qBAAOE,WAAW,EAAlB;AACD;;AAED,kBAAM,IAAIM,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED,iBAAO,IAAP;AACD,SAhBM,CAAP;AAiBD,OApBD;;AAsBA,aAAON,WAAW,GAAGV,IAAd,CAAmB,MAAMc,iBAAOC,KAAP,CAAc,8BAA6BN,KAAM,EAAjD,CAAzB,CAAP;AACD;;AAED,UAAMN,GAAN;AACD,GAlCI,EAmCJH,IAnCI,CAmCCiB,iBAnCD,EAmCaC,sBAnCb,CAAP;AAoCD;;AAEDhC,UAAU,CAACiC,WAAX,GAAyB,kDAAzB","sourcesContent":["import { src } from 'gulp';\nimport scripts from '@atscm/server-scripts';\nimport { version } from '@atscm/server-scripts/package.json';\nimport toPromise from 'stream-to-promise';\nimport { DataType } from 'node-opcua/lib/datamodel/variant';\nimport { StatusCodes } from 'node-opcua/lib/datamodel/opcua_status_code';\nimport Logger from 'gulplog';\nimport ImportStream from '../lib/gulp/ImportStream';\nimport { writeNode, createNode } from '../api';\nimport { versionNode } from '../lib/server/scripts/version';\nimport { delay } from '../lib/helpers/async';\nimport { handleTaskError, finishTask } from '../lib/helpers/tasks';\nimport Session from '../lib/server/Session';\nimport { setupContext } from '../hooks/hooks';\nimport checkAtserver from '../hooks/check-atserver';\n\n/**\n * Imports all xml files needed for atscm usage.\n * @return {Promise<void>} The running task.\n */\nexport default async function importTask() {\n  const srcStream = src(scripts);\n  const versionVariant = { dataType: DataType.String, value: version };\n\n  Session.pool();\n\n  const context = setupContext();\n  await checkAtserver(context);\n\n  return toPromise(srcStream.pipe(new ImportStream()))\n    .then(() => writeNode(versionNode, versionVariant))\n    .catch((err) => {\n      if (err.statusCode === StatusCodes.BadNodeIdUnknown) {\n        const maxTries = 20;\n        const retryDelay = 100;\n\n        let tryNo = 0;\n        const tryToCreate = () => {\n          tryNo++;\n\n          return createNode(versionNode, {\n            name: 'version',\n            value: versionVariant,\n          }).then(async ({ outputArguments }) => {\n            if (outputArguments[3].value.length < 2) {\n              if (tryNo < maxTries) {\n                Logger.debug(`Create script is not ready yet. Retrying after ${retryDelay}ms`);\n\n                await delay(retryDelay);\n                return tryToCreate();\n              }\n\n              throw new Error('CreateNode script is not ready yet. Try again later');\n            }\n\n            return true;\n          });\n        };\n\n        return tryToCreate().then(() => Logger.debug(`Import worked on attempt # ${tryNo}`));\n      }\n\n      throw err;\n    })\n    .then(finishTask, handleTaskError);\n}\n\nimportTask.description = 'Imports all xml resources needed for atscm usage';\n"],"file":"import.js"}