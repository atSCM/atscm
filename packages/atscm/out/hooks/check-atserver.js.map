{"version":3,"sources":["../../src/hooks/check-atserver.ts"],"names":["atserverVersionNodeId","NodeId","VariableIds","Server_ServerStatus_BuildInfo_SoftwareVersion","loadProjectRequirement","packageManifest","engines","atserver","loadRemoteVersion","raw","value","version","askForConfirmation","onAsk","options","process","stdin","isTTY","type","name","confirmed","approveToContinue","log","continueOnError","error","warn","message","shouldContinue","Logger","checkAtserver","context","debug","atscmRequirement","projectRequirement","remoteVersion","Promise","all","info","updatePackage","Error","current"],"mappings":"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","sourcesContent":["import { VariableIds } from 'node-opcua/lib/opcua_node_ids';\nimport { readJson } from 'fs-extra';\nimport { coerce, satisfies, gtr, minVersion } from 'semver';\nimport Logger from 'gulplog';\nimport prompts from 'prompts';\nimport { red, yellow } from 'chalk';\nimport { readNode } from '../api';\nimport { engines } from '../../package.json';\nimport { updateJson } from '../lib/helpers/fs';\nimport NodeId from '../lib/model/opcua/NodeId';\nimport { HookContext } from './hooks';\n\nconst atserverVersionNodeId = new NodeId(\n  `ns=0;i=${VariableIds.Server_ServerStatus_BuildInfo_SoftwareVersion}`\n);\n\nexport async function loadProjectRequirement(): Promise<string> {\n  const packageManifest = await readJson('./package.json');\n\n  return packageManifest.engines && packageManifest.engines.atserver;\n}\n\nexport async function loadRemoteVersion(): Promise<string> {\n  const raw = (await readNode(atserverVersionNodeId)).value;\n\n  return coerce(raw).version;\n}\n\nexport async function askForConfirmation({\n  onAsk,\n  ...options\n}: {\n  message: string;\n  onAsk?: () => void;\n}): Promise<boolean> {\n  if (!process.stdin.isTTY) return false;\n\n  if (onAsk) onAsk();\n\n  return (\n    await prompts({\n      type: 'confirm',\n      name: 'confirmed',\n      ...options,\n    })\n  ).confirmed;\n}\n\nexport async function approveToContinue(\n  { log, continueOnError }: HookContext,\n  error: Error\n): Promise<void> {\n  if (continueOnError) {\n    log.warn(red(error.message));\n    log.warn(`Using --continue, skipping...`);\n    return;\n  }\n\n  const shouldContinue = await askForConfirmation({\n    onAsk: () => Logger.error(red(error.message)),\n    message: 'Do you want to continue anyway?',\n  });\n\n  if (!shouldContinue) {\n    throw error;\n  }\n}\n\nexport default async function checkAtserver(context: HookContext): Promise<void> {\n  const { log } = context;\n\n  log.debug('Checking atserver version');\n\n  const atscmRequirement = engines.atserver;\n\n  const [projectRequirement, remoteVersion] = await Promise.all([\n    loadProjectRequirement(),\n    loadRemoteVersion(),\n  ]);\n\n  if (!satisfies(remoteVersion, atscmRequirement)) {\n    log.debug(`Version ${remoteVersion} does not satisfy requirement ${atscmRequirement}`);\n    log.warn(\n      yellow(\n        `Your atvise server version (${remoteVersion}) is not supported, it may or may not work.`\n      )\n    );\n\n    if (gtr(remoteVersion, atscmRequirement)) {\n      log.info(\n        `You're running a newer version of atvise server. Please run 'atscm update' to check for updates.`\n      );\n    } else {\n      log.info(`Please upgrade to atserver ${minVersion(atscmRequirement)} or above.`);\n    }\n  }\n\n  let updatePackage = false;\n  if (!projectRequirement) {\n    log.info(`Your package.json file doesn't specify an atserver version, adding it...`);\n\n    updatePackage = true;\n  } else if (!satisfies(remoteVersion, projectRequirement)) {\n    await approveToContinue(\n      context,\n      new Error(\n        `Your project is setup with atserver ${projectRequirement} but you're using ${remoteVersion}`\n      )\n    );\n\n    updatePackage = await askForConfirmation({\n      message: `Use atvise server ${remoteVersion} as new default?`,\n    });\n  } else {\n    log.debug(`Running against atserver ${remoteVersion}`);\n  }\n\n  if (updatePackage) {\n    await updateJson<{ engines?: { atserver?: string } }>('./package.json', (current) => {\n      /* eslint-disable no-param-reassign */\n      if (!current.engines) current.engines = {};\n      current.engines.atserver = remoteVersion;\n      /* eslint-enable no-param-reassign */\n\n      return current;\n    });\n  }\n}\n"],"file":"check-atserver.js"}