[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/Gulpfile.js",
    "content": "import cleanup from 'node-cleanup';\nimport cleanupHandler from './util/cleanup';\n\n// Register tasks\nexport { default as pull } from './tasks/pull';\nexport { default as push } from './tasks/push';\nexport { default as watch } from './tasks/watch';\n\n// Register cleanup\n/* istanbul ignore if */\nif (process.env.NODE_ENV !== 'test') {\n  cleanup((code, signal) => cleanupHandler(code, signal, cleanup.uninstall), {\n    ctrl_C: '',\n    unhandledRejection: '',\n  });\n}\n",
    "static": true,
    "longname": "src/Gulpfile.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "file",
    "name": "src/config/ProjectConfig.js",
    "content": "/**\n * The path to the project's configuration file.\n */\nexport const path = process.env.ATSCM_CONFIG_PATH;\n\n/**\n * The current project's configuration.\n * @type {Atviseproject}\n */\nconst config = require(path).default;\n\nexport default config;\n",
    "static": true,
    "longname": "src/config/ProjectConfig.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "name": "path",
    "memberof": "src/config/ProjectConfig.js",
    "static": true,
    "longname": "src/config/ProjectConfig.js~path",
    "access": null,
    "export": true,
    "importPath": "atscm/src/config/ProjectConfig.js",
    "importStyle": "{path}",
    "description": "The path to the project's configuration file.",
    "lineNumber": 4,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "name": "config",
    "memberof": "src/config/ProjectConfig.js",
    "static": true,
    "longname": "src/config/ProjectConfig.js~config",
    "access": null,
    "export": true,
    "importPath": "atscm/src/config/ProjectConfig.js",
    "importStyle": "config",
    "description": "The current project's configuration.",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Atviseproject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 4,
    "kind": "file",
    "name": "src/index.js",
    "content": "export { default as Atviseproject } from './lib/config/Atviseproject';\nexport { default as NodeId } from './lib/server/NodeId';\nexport { default as Transformer, TransformDirection } from './lib/transform/Transformer';\nexport { default as PartialTransformer } from './lib/transform/PartialTransformer';\nexport { default as SplittingTransformer } from './lib/transform/SplittingTransformer';\nexport { default as DisplayTransformer } from './transform/DisplayTransformer';\nexport { default as ScriptTransformer } from './transform/ScriptTransformer';\n",
    "static": true,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 5,
    "kind": "file",
    "name": "src/init/InitTask.js",
    "content": "import { join } from 'path';\nimport { src, dest } from 'gulp';\nimport handlebars from 'gulp-compile-handlebars';\nimport helpers from 'handlebars-helpers';\nimport streamToPromise from 'stream-to-promise';\nimport deps from '../../res/init/templates/dependencies.json';\n\n/**\n * The action run when running \"atscm init\".\n */\nexport default class InitTask {\n\n  /**\n   * Returns the globs of the processed files for the given config lanugage.\n   * @param {String} langId The configuration language used.\n   * @return {String[]} Globs of the files to handle.\n   */\n  static filesToHandle(langId) {\n    return [\n      './general/**/*',\n      './general/**/.*',\n      `./lang/${langId}/**/*.*`,\n      `./lang/${langId}/**/.*`,\n    ].map(p => join(__dirname, '../../res/init/templates', p));\n  }\n\n  /**\n   * Runs the task with the given options.\n   * @param {Object} options The options to use.\n   * @return {Promise<{ install: String[] }, Error>} Resolved with information on further actions\n   * to run or rejected if the task failed.\n   */\n  static run(options) {\n    const langId = options.configLang;\n\n    const install = deps.lang[langId];\n\n    const stream = src(this.filesToHandle(langId))\n      .pipe(handlebars(options, {\n        helpers: helpers(),\n      }))\n      .pipe(dest('./'));\n\n    return streamToPromise(stream)\n      .then(() => ({ install }));\n  }\n\n}\n",
    "static": true,
    "longname": "src/init/InitTask.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 6,
    "kind": "class",
    "name": "InitTask",
    "memberof": "src/init/InitTask.js",
    "static": true,
    "longname": "src/init/InitTask.js~InitTask",
    "access": null,
    "export": true,
    "importPath": "atscm/src/init/InitTask.js",
    "importStyle": "InitTask",
    "description": "The action run when running \"atscm init\".",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 7,
    "kind": "method",
    "name": "filesToHandle",
    "memberof": "src/init/InitTask.js~InitTask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/init/InitTask.js~InitTask.filesToHandle",
    "access": null,
    "description": "Returns the globs of the processed files for the given config lanugage.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "langId",
        "description": "The configuration language used."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "Globs of the files to handle."
    }
  },
  {
    "__docId__": 8,
    "kind": "method",
    "name": "run",
    "memberof": "src/init/InitTask.js~InitTask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/init/InitTask.js~InitTask.run",
    "access": null,
    "description": "Runs the task with the given options.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{ install: String[] }, Error>"
      ],
      "spread": false,
      "description": "Resolved with information on further actions\nto run or rejected if the task failed."
    }
  },
  {
    "__docId__": 9,
    "kind": "file",
    "name": "src/init/Options.js",
    "content": "import { basename } from 'path';\nimport InitOption from '../lib/init/Option';\nimport Atviseproject from '../lib/config/Atviseproject';\nimport Validator from './OptionsValidator';\n\n/**\n * A map providing dirnames for config langs\n * @type {Map<String, String>}\n */\nexport const ConfigLangs = {\n  'ES2015 JavaScript': 'es2015',\n  'Regular JavaScript': 'es5',\n  TypeScript: 'ts',\n  'CoffeeScript (alpha)': 'coffee',\n};\n\n/**\n * Options available for the \"atscm init\" command.\n * @type {Object}\n * @property {InitOption<input>} name The new project's name.\n * @property {InitOption<input>} description The new project's description.\n * @property {InitOption<input>} author The new project's author.\n * @property {InitOption<input>} atviseHost The new project's atvise server host.\n * @property {InitOption<input>} atvisePortOpc The new project's atvise server OPC port.\n * @property {InitOption<input>} atvisePortHttp The new project's atvise server HTTP port.\n * @property {InitOption<confirm>} useLogin If the new porject's atvise server requires login.\n * @property {InitOption<input>} atviseUsername The new project's atvise server login name.\n * @property {InitOption<input>} atvisePassword The new project's atvise server login password.\n * @property {InitOption<list>} configLang The language to use for the new project's configuration.\n */\nexport const InitOptions = {\n  name: new InitOption({\n    message: 'Project name',\n    default: basename(process.cwd()),\n    validate: Validator.name,\n  }),\n  description: new InitOption('Project description'),\n  author: new InitOption('Project author'),\n  atviseHost: new InitOption('Atvise server host', Atviseproject.host),\n  atvisePortOpc: new InitOption('Atvise OPC port', Atviseproject.port.opc),\n  atvisePortHttp: new InitOption('Atvise HTTP port', Atviseproject.port.http),\n  useLogin: new InitOption({\n    message: 'Does your atvise server require login',\n    type: 'confirm',\n    default: false,\n  }),\n  atviseUser: new InitOption({\n    message: ' - Username',\n    when: answers => answers.useLogin,\n  }),\n  atvisePassword: new InitOption({\n    message: ' - Password',\n    when: answers => answers.useLogin,\n  }),\n  configLang: new InitOption({\n    type: 'list',\n    message: 'Configuration language to use',\n    choices: Object.keys(ConfigLangs).map(name => ({ name, value: ConfigLangs[name] })),\n  }),\n};\n\n/**\n * {@link InitOptions}, exported as an array. Required to run {@link Inquirer}.\n * @type {InitOption[]}\n */\nconst InitOptionsAsArray = Object.keys(InitOptions)\n  .map(name => Object.assign({ name }, InitOptions[name]));\n\nexport default InitOptionsAsArray;\n",
    "static": true,
    "longname": "src/init/Options.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 10,
    "kind": "variable",
    "name": "ConfigLangs",
    "memberof": "src/init/Options.js",
    "static": true,
    "longname": "src/init/Options.js~ConfigLangs",
    "access": null,
    "export": true,
    "importPath": "atscm/src/init/Options.js",
    "importStyle": "{ConfigLangs}",
    "description": "A map providing dirnames for config langs",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, String>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 11,
    "kind": "variable",
    "name": "InitOptions",
    "memberof": "src/init/Options.js",
    "static": true,
    "longname": "src/init/Options.js~InitOptions",
    "access": null,
    "export": true,
    "importPath": "atscm/src/init/Options.js",
    "importStyle": "{InitOptions}",
    "description": "Options available for the \"atscm init\" command.",
    "lineNumber": 31,
    "properties": [
      {
        "nullable": null,
        "types": [
          "InitOption<input>"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The new project's name."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<input>"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "The new project's description."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<input>"
        ],
        "spread": false,
        "optional": false,
        "name": "author",
        "description": "The new project's author."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<input>"
        ],
        "spread": false,
        "optional": false,
        "name": "atviseHost",
        "description": "The new project's atvise server host."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<input>"
        ],
        "spread": false,
        "optional": false,
        "name": "atvisePortOpc",
        "description": "The new project's atvise server OPC port."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<input>"
        ],
        "spread": false,
        "optional": false,
        "name": "atvisePortHttp",
        "description": "The new project's atvise server HTTP port."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<confirm>"
        ],
        "spread": false,
        "optional": false,
        "name": "useLogin",
        "description": "If the new porject's atvise server requires login."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<input>"
        ],
        "spread": false,
        "optional": false,
        "name": "atviseUsername",
        "description": "The new project's atvise server login name."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<input>"
        ],
        "spread": false,
        "optional": false,
        "name": "atvisePassword",
        "description": "The new project's atvise server login password."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<list>"
        ],
        "spread": false,
        "optional": false,
        "name": "configLang",
        "description": "The language to use for the new project's configuration."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 12,
    "kind": "variable",
    "name": "InitOptionsAsArray",
    "memberof": "src/init/Options.js",
    "static": true,
    "longname": "src/init/Options.js~InitOptionsAsArray",
    "access": null,
    "export": true,
    "importPath": "atscm/src/init/Options.js",
    "importStyle": "InitOptionsAsArray",
    "description": "{@link InitOptions}, exported as an array. Required to run {@link Inquirer}.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "InitOption[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 13,
    "kind": "file",
    "name": "src/init/OptionsValidator.js",
    "content": "import validatePackageName from 'validate-npm-package-name';\n\n/**\n * A static class containing validators for the options used when running \"atscm init\".\n */\nexport default class InitOptionsValidator {\n\n  /**\n   * Validates a project name to be a valid npm package name.\n   * @param {String} value The name to validate.\n   * @return {Boolean|String} Returns true if `value` is a valid npm package name, or an error\n   * message otherwise.\n   */\n  static name(value) {\n    const result = validatePackageName(value);\n\n    if (result.validForNewPackages) { return true; }\n\n    if (result.errors) { return result.errors[0]; }\n\n    return result.warnings[0];\n  }\n\n}\n",
    "static": true,
    "longname": "src/init/OptionsValidator.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 14,
    "kind": "class",
    "name": "InitOptionsValidator",
    "memberof": "src/init/OptionsValidator.js",
    "static": true,
    "longname": "src/init/OptionsValidator.js~InitOptionsValidator",
    "access": null,
    "export": true,
    "importPath": "atscm/src/init/OptionsValidator.js",
    "importStyle": "InitOptionsValidator",
    "description": "A static class containing validators for the options used when running \"atscm init\".",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "name",
    "memberof": "src/init/OptionsValidator.js~InitOptionsValidator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/init/OptionsValidator.js~InitOptionsValidator.name",
    "access": null,
    "description": "Validates a project name to be a valid npm package name.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The name to validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean",
        "String"
      ],
      "spread": false,
      "description": "Returns true if `value` is a valid npm package name, or an error\nmessage otherwise."
    }
  },
  {
    "__docId__": 16,
    "kind": "file",
    "name": "src/init/init.js",
    "content": "import InitTask from './InitTask';\n\nexport default InitTask.run.bind(InitTask);\n",
    "static": true,
    "longname": "src/init/init.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 17,
    "kind": "file",
    "name": "src/lib/config/Atviseproject.js",
    "content": "/* eslint-disable no-useless-escape */\n\nimport NodeId from '../server/NodeId';\nimport DisplayTransformer from '../../transform/DisplayTransformer';\nimport ScriptTransformer from '../../transform/ScriptTransformer';\n\n/**\n * An *atvise-scm* project's configuration.\n * @abstract\n */\nexport default class Atviseproject {\n\n  /**\n   * The atvise-server's host. Defaults to *localhost*.\n   * @type {String}\n   */\n  static get host() {\n    return 'localhost';\n  }\n\n  /**\n   * The atvise-server ports to use.\n   * @type {Object}\n   * @property {Number} [opc=4840] The OPC-UA port the atvise-server runs on.\n   * @property {Number} [http=80] The HTTP port the atvise-server can be reached at.\n   */\n  static get port() {\n    return {\n      opc: 4840,\n      http: 80,\n    };\n  }\n\n  /**\n   * The login to use. Return `false` if no login is required (default).\n   * @type {Boolean|Object}\n   * @property {String} username The username to log in with.\n   * @property {String} password The password to log in with.\n   */\n  static get login() {\n    return false;\n  }\n\n  /**\n   * The transformers to use in this project. Defaults to a single {@link DisplayTransformer}\n   * @type {Transformer[]}\n   */\n  static get useTransformers() {\n    return [\n      new DisplayTransformer(),\n      new ScriptTransformer(),\n    ];\n  }\n\n  /**\n   * The atvise-server nodes that atvise-scm should sync. Defaults to\n   * `['ns=1;s=AGENT', 'ns=1;s=SYSTEM', 'ns=1;s=ObjectTypes.PROJECT']`\n   * @type {String[]|NodeId[]}\n   */\n  static get nodes() {\n    return [\n      new NodeId('AGENT'),\n      new NodeId('SYSTEM'),\n      new NodeId('ObjectTypes.PROJECT'),\n    ];\n  }\n\n  /**\n   * The atvise-server nodes to watch in the corresponding tasks. Defaults to all nodes containing\n   * displays.\n   * @type {String[]|NodeId[]}\n   */\n  static get nodesToWatch() {\n    return [\n      new NodeId('AGENT.DISPLAYS'),\n      new NodeId('SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS'),\n    ];\n  }\n\n  /**\n   * An array of editor related node ids. They should be ignored in a atvise-scm project.\n   * @type {NodeId[]}\n   */\n  static get EditorRelatedNodes() {\n    return [\n      new NodeId('SYSTEM\\.JOURNALS\\.ProjectHistory'),\n    ];\n  }\n\n  /**\n   * An array of server related node ids. They should be ignored in a atvise-scm project\n   * as they are read-only.\n   * @type {NodeId[]}\n   */\n  static get ServerRelatedNodes() {\n    return [\n      // eslint-disable-next-line max-len\n      new NodeId('AGENT\\.HISTORY\\..*\\.(Stepped|PercentData(Good|Bad)|TreatUncertainAsBad|UseSlopedExtrapolation)'),\n      new NodeId('AGENT\\.OPCUA\\.server_url'),\n      new NodeId('AGENT\\.WEBACCESS\\.https?[0-9]+\\.(state|port)'),\n      new NodeId('SYSTEM\\.INFORMATION\\.LOGS\\.'),\n    ];\n  }\n\n  /**\n   * These nodes (and their subnodes, if any) will be ignored by atvise-scm. Defaults to\n   * {@link Atviseproject.EditorRelatedNodes} combined with\n   * {@link Atviseproject.ServerRelatedNodes}.\n   * @type {NodeId[]}\n   */\n  static get ignoreNodes() {\n    return this.EditorRelatedNodes.concat(this.ServerRelatedNodes);\n  }\n\n  /**\n   * Returns an object containing the properties to inspect.\n   * @see https://nodejs.org/api/util.html#util_util_inspect_object_options\n   * @return {Object} The object to inspect.\n   */\n  static inspect() {\n    return {\n      host: this.host,\n      port: this.port,\n      useTransformers: this.useTransformers,\n      nodes: this.nodes,\n      nodesToWatch: this.nodesToWatch,\n      ignoreNodes: this.ignoreNodes,\n    };\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/config/Atviseproject.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 18,
    "kind": "class",
    "name": "Atviseproject",
    "memberof": "src/lib/config/Atviseproject.js",
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/config/Atviseproject.js",
    "importStyle": "Atviseproject",
    "description": "An *atvise-scm* project's configuration.",
    "lineNumber": 11,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 19,
    "kind": "get",
    "name": "host",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.host",
    "access": null,
    "description": "The atvise-server's host. Defaults to *localhost*.",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 20,
    "kind": "get",
    "name": "port",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.port",
    "access": null,
    "description": "The atvise-server ports to use.",
    "lineNumber": 27,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "4840",
        "defaultRaw": 4840,
        "name": "opc",
        "description": "The OPC-UA port the atvise-server runs on."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "80",
        "defaultRaw": 80,
        "name": "http",
        "description": "The HTTP port the atvise-server can be reached at."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 21,
    "kind": "get",
    "name": "login",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.login",
    "access": null,
    "description": "The login to use. Return `false` if no login is required (default).",
    "lineNumber": 40,
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "username",
        "description": "The username to log in with."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "The password to log in with."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Boolean",
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 22,
    "kind": "get",
    "name": "useTransformers",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.useTransformers",
    "access": null,
    "description": "The transformers to use in this project. Defaults to a single {@link DisplayTransformer}",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Transformer[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 23,
    "kind": "get",
    "name": "nodes",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.nodes",
    "access": null,
    "description": "The atvise-server nodes that atvise-scm should sync. Defaults to\n`['ns=1;s=AGENT', 'ns=1;s=SYSTEM', 'ns=1;s=ObjectTypes.PROJECT']`",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "String[]",
        "NodeId[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 24,
    "kind": "get",
    "name": "nodesToWatch",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.nodesToWatch",
    "access": null,
    "description": "The atvise-server nodes to watch in the corresponding tasks. Defaults to all nodes containing\ndisplays.",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "String[]",
        "NodeId[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 25,
    "kind": "get",
    "name": "EditorRelatedNodes",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.EditorRelatedNodes",
    "access": null,
    "description": "An array of editor related node ids. They should be ignored in a atvise-scm project.",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "NodeId[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 26,
    "kind": "get",
    "name": "ServerRelatedNodes",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.ServerRelatedNodes",
    "access": null,
    "description": "An array of server related node ids. They should be ignored in a atvise-scm project\nas they are read-only.",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "NodeId[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 27,
    "kind": "get",
    "name": "ignoreNodes",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.ignoreNodes",
    "access": null,
    "description": "These nodes (and their subnodes, if any) will be ignored by atvise-scm. Defaults to\n{@link Atviseproject.EditorRelatedNodes} combined with\n{@link Atviseproject.ServerRelatedNodes}.",
    "lineNumber": 111,
    "type": {
      "nullable": null,
      "types": [
        "NodeId[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 28,
    "kind": "method",
    "name": "inspect",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.inspect",
    "access": null,
    "description": "Returns an object containing the properties to inspect.",
    "see": [
      "https://nodejs.org/api/util.html#util_util_inspect_object_options"
    ],
    "lineNumber": 120,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The object to inspect."
    }
  },
  {
    "__docId__": 29,
    "kind": "file",
    "name": "src/lib/gulp/PullStream.js",
    "content": "import { dest } from 'gulp';\nimport ProjectConfig from '../../config/ProjectConfig';\nimport Transformer, { TransformDirection } from '../transform/Transformer';\nimport MappingTransformer from '../../transform/Mapping';\n\n/**\n * A stream that transforms read {@link ReadStream.ReadResult}s and stores the on the filesystem.\n */\nexport default class PullStream {\n\n  /**\n   * Creates a new PullStream based on a stream that writes {@link ReadStream.ReadResult} which may\n   * be an instance of {@link ReadStream}.\n   * @param {Stream} readStream The stream to read from.\n   */\n  constructor(readStream) {\n    let pulled = 0;\n\n    readStream\n      .on('data', () => pulled++);\n    const mappingStream = new MappingTransformer({ direction: TransformDirection.FromDB });\n\n    const printProgress = setInterval(() => {\n      process.stdout.write(`\\rPulled: ${pulled}`);\n    }, 1000);\n\n    return Transformer.applyTransformers(\n      readStream\n        .pipe(mappingStream),\n      ProjectConfig.useTransformers,\n      TransformDirection.FromDB\n    )\n      .pipe(dest('./src'))\n      .on('data', () => {}) // Unpipe readable stream\n      .on('end', () => {\n        process.stdout.clearLine();\n        process.stdout.write('\\r');\n        clearInterval(printProgress);\n      });\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/gulp/PullStream.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 30,
    "kind": "class",
    "name": "PullStream",
    "memberof": "src/lib/gulp/PullStream.js",
    "static": true,
    "longname": "src/lib/gulp/PullStream.js~PullStream",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/gulp/PullStream.js",
    "importStyle": "PullStream",
    "description": "A stream that transforms read {@link ReadStream.ReadResult}s and stores the on the filesystem.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 31,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/gulp/PullStream.js~PullStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/gulp/PullStream.js~PullStream#constructor",
    "access": null,
    "description": "Creates a new PullStream based on a stream that writes {@link ReadStream.ReadResult} which may\nbe an instance of {@link ReadStream}.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stream"
        ],
        "spread": false,
        "optional": false,
        "name": "readStream",
        "description": "The stream to read from."
      }
    ]
  },
  {
    "__docId__": 32,
    "kind": "file",
    "name": "src/lib/gulp/PushStream.js",
    "content": "import ProjectConfig from '../../config/ProjectConfig';\nimport Transformer, { TransformDirection } from '../transform/Transformer';\nimport MappingTransformer from '../../transform/Mapping';\nimport WriteStream from '../server/WriteStream';\n\n/**\n * A stream that transforms read {@link vinyl~File}s and pushes them to atvise server.\n */\nexport default class PushStream {\n\n  /**\n   * Creates a new PushSteam based on a source file stream.\n   * @param {Stream} srcStream The file stream to read from.\n   */\n  constructor(srcStream) {\n    let uploaded = 0;\n\n    const mappingStream = new MappingTransformer({ direction: TransformDirection.FromFilesystem });\n    const writeStream = new WriteStream()\n      .on('data', () => uploaded++);\n\n    const printProgress = setInterval(() => {\n      process.stdout.write(`\\rUploaded: ${uploaded}`);\n    }, 1000);\n\n    return Transformer.applyTransformers(\n      srcStream\n        .pipe(mappingStream),\n      ProjectConfig.useTransformers,\n      TransformDirection.FromFilesystem\n    )\n      .pipe(writeStream)\n      .on('end', () => {\n        process.stdout.clearLine();\n        process.stdout.write('\\r');\n        clearInterval(printProgress);\n      });\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/gulp/PushStream.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 33,
    "kind": "class",
    "name": "PushStream",
    "memberof": "src/lib/gulp/PushStream.js",
    "static": true,
    "longname": "src/lib/gulp/PushStream.js~PushStream",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/gulp/PushStream.js",
    "importStyle": "PushStream",
    "description": "A stream that transforms read {@link vinyl~File}s and pushes them to atvise server.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 34,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/gulp/PushStream.js~PushStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/gulp/PushStream.js~PushStream#constructor",
    "access": null,
    "description": "Creates a new PushSteam based on a source file stream.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stream"
        ],
        "spread": false,
        "optional": false,
        "name": "srcStream",
        "description": "The file stream to read from."
      }
    ]
  },
  {
    "__docId__": 35,
    "kind": "file",
    "name": "src/lib/gulp/watchForFileChanges.js",
    "content": "import sane from 'sane';\nimport Logger from 'gulplog';\n\n/**\n * Returns a fully set up gulp task that watches the project's source files for changes.\n * @param {function(path: String, root: String, stat: Object)} listener Called when a file changes.\n * @return {function()} The resulting gulp task.\n */\nexport default function watchForFileChanges(listener) {\n  return cb => sane('./src', {\n    glob: '**/*.*',\n    watchman: ['darwin'].indexOf(process.platform) >= 0,\n  })\n    .on('change', listener)\n    // FIXME: Need to handle `add` and `delete` events\n    .on('ready', () => Logger.info('Waiting for file changes...'))\n    .on('error', err => cb(err));\n}\n",
    "static": true,
    "longname": "src/lib/gulp/watchForFileChanges.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 36,
    "kind": "function",
    "name": "watchForFileChanges",
    "memberof": "src/lib/gulp/watchForFileChanges.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/gulp/watchForFileChanges.js~watchForFileChanges",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/gulp/watchForFileChanges.js",
    "importStyle": "watchForFileChanges",
    "description": "Returns a fully set up gulp task that watches the project's source files for changes.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(path: String, root: String, stat: Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "Called when a file changes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function()"
      ],
      "spread": false,
      "description": "The resulting gulp task."
    }
  },
  {
    "__docId__": 37,
    "kind": "file",
    "name": "src/lib/gulp/watchForServerChanges.js",
    "content": "import Logger from 'gulplog';\nimport Watcher from '../server/Watcher';\n\n/**\n * Returns a fully set up gulp task that watches atvise server nodes for value changes.\n * @param {function(path: String, root: String, stat: Object)} listener Called when a node changes.\n * @return {function()} The resulting gulp task.\n */\nexport default function watchForServerChanges(listener) {\n  return cb => new Watcher()\n    .on('change', data => listener(data))\n    .on('ready', () => Logger.info('Waiting for server changes...'))\n    .on('error', err => cb(err));\n}\n",
    "static": true,
    "longname": "src/lib/gulp/watchForServerChanges.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 38,
    "kind": "function",
    "name": "watchForServerChanges",
    "memberof": "src/lib/gulp/watchForServerChanges.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/gulp/watchForServerChanges.js~watchForServerChanges",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/gulp/watchForServerChanges.js",
    "importStyle": "watchForServerChanges",
    "description": "Returns a fully set up gulp task that watches atvise server nodes for value changes.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(path: String, root: String, stat: Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "Called when a node changes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function()"
      ],
      "spread": false,
      "description": "The resulting gulp task."
    }
  },
  {
    "__docId__": 39,
    "kind": "file",
    "name": "src/lib/init/Option.js",
    "content": "/**\n * An option the \"atscm init\" command handles.\n * TODO: Support function values for name, message, default, choices...\n */\nexport default class InitOption {\n\n  /**\n   * Creates a new option based either on a message and (optionally) a default value or some\n   * options.\n   * @param {String|Object} messageOrOptions The message or options to use.\n   * @param {inquirer~PromptType} [messageOrOptions.type] The option's type.\n   * @param {String} messageOrOptions.message The option's message. Required if `messageOrOptions`\n   * is an object.\n   * @param {String|Number} [messageOrOptions.default] The options's default value.\n   * @param {inquirer~Validator} [messageOrOptions.validate] A function that validates user input.\n   * @param {String[]|Number[]} [messageOrOptions.choices] The options's choices. Applies to to list\n   * types only.\n   * @param {Boolean|function(answers: Object): Boolean} [messageOrOptions.when] Weather or not to\n   * prompt this option.\n   * @param {String|Number} [defaultOrUndefined] The default value to use.\n   */\n  constructor(messageOrOptions, defaultOrUndefined) {\n    if (messageOrOptions === undefined) {\n      throw new Error('message or options required');\n    }\n\n    if (typeof messageOrOptions === 'string') {\n      if (messageOrOptions.length === 0) {\n        throw new Error('message is required');\n      }\n\n      /**\n       * The option's {@link inquirer~PromptType}. Defaults to 'input'.\n       * @type {inquirer~PromptType}\n       */\n      this.type = InitOption.DefaultType;\n\n      /**\n       * The option's message. A '?' sign is added automatically.\n       * @type {String}\n       */\n      this.message = `${messageOrOptions}?`;\n\n      /**\n       * The default value to use.\n       * @type {String|Number|undefined}\n       */\n      this.default = defaultOrUndefined;\n    } else {\n      if (!messageOrOptions.message || messageOrOptions.length === 0) {\n        throw new Error('message is required');\n      }\n\n      this.type = messageOrOptions.type || InitOption.DefaultType;\n      this.message = `${messageOrOptions.message}?`;\n      this.default = messageOrOptions.default;\n\n      /**\n       * The choices available. Applies to list types only.\n       * @type {String[]|Number[]|undefined}\n       */\n      this.choices = messageOrOptions.choices;\n\n      /**\n       * Validates the user input for this option.\n       * @type {inquirer~Validator}\n       */\n      this.validate = messageOrOptions.validate;\n\n      /**\n       * A function or boolean that indicates weather or not to prompt this option.\n       * @type {Boolean|function(answers: Object): Boolean|undefined}\n       */\n      this.when = messageOrOptions.when;\n    }\n  }\n\n  /**\n   * The default {@link inquirer~PromptType} to use. Equals 'input'.\n   * @return {inquirer~PromptType}\n   */\n  static get DefaultType() {\n    return 'input';\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/init/Option.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 40,
    "kind": "class",
    "name": "InitOption",
    "memberof": "src/lib/init/Option.js",
    "static": true,
    "longname": "src/lib/init/Option.js~InitOption",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/init/Option.js",
    "importStyle": "InitOption",
    "description": "An option the \"atscm init\" command handles.\nTODO: Support function values for name, message, default, choices...",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 41,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/init/Option.js~InitOption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#constructor",
    "access": null,
    "description": "Creates a new option based either on a message and (optionally) a default value or some\noptions.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "messageOrOptions",
        "description": "The message or options to use."
      },
      {
        "nullable": null,
        "types": [
          "inquirer~PromptType"
        ],
        "spread": false,
        "optional": true,
        "name": "messageOrOptions.type",
        "description": "The option's type."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "messageOrOptions.message",
        "description": "The option's message. Required if `messageOrOptions`\nis an object."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "messageOrOptions.default",
        "description": "The options's default value."
      },
      {
        "nullable": null,
        "types": [
          "inquirer~Validator"
        ],
        "spread": false,
        "optional": true,
        "name": "messageOrOptions.validate",
        "description": "A function that validates user input."
      },
      {
        "nullable": null,
        "types": [
          "String[]",
          "Number[]"
        ],
        "spread": false,
        "optional": true,
        "name": "messageOrOptions.choices",
        "description": "The options's choices. Applies to to list\ntypes only."
      },
      {
        "nullable": null,
        "types": [
          "Boolean",
          "function(answers: Object): Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "messageOrOptions.when",
        "description": "Weather or not to\nprompt this option."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "defaultOrUndefined",
        "description": "The default value to use."
      }
    ]
  },
  {
    "__docId__": 42,
    "kind": "member",
    "name": "type",
    "memberof": "src/lib/init/Option.js~InitOption",
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#type",
    "access": null,
    "description": "The option's {@link inquirer~PromptType}. Defaults to 'input'.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "inquirer~PromptType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 43,
    "kind": "member",
    "name": "message",
    "memberof": "src/lib/init/Option.js~InitOption",
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#message",
    "access": null,
    "description": "The option's message. A '?' sign is added automatically.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 44,
    "kind": "member",
    "name": "default",
    "memberof": "src/lib/init/Option.js~InitOption",
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#default",
    "access": null,
    "description": "The default value to use.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "String",
        "Number",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 45,
    "kind": "member",
    "name": "type",
    "memberof": "src/lib/init/Option.js~InitOption",
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#type",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "member",
    "name": "message",
    "memberof": "src/lib/init/Option.js~InitOption",
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#message",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "member",
    "name": "default",
    "memberof": "src/lib/init/Option.js~InitOption",
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#default",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 48,
    "kind": "member",
    "name": "choices",
    "memberof": "src/lib/init/Option.js~InitOption",
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#choices",
    "access": null,
    "description": "The choices available. Applies to list types only.",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "String[]",
        "Number[]",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 49,
    "kind": "member",
    "name": "validate",
    "memberof": "src/lib/init/Option.js~InitOption",
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#validate",
    "access": null,
    "description": "Validates the user input for this option.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "inquirer~Validator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "when",
    "memberof": "src/lib/init/Option.js~InitOption",
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#when",
    "access": null,
    "description": "A function or boolean that indicates weather or not to prompt this option.",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "Boolean",
        "function(answers: Object): Boolean",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 51,
    "kind": "get",
    "name": "DefaultType",
    "memberof": "src/lib/init/Option.js~InitOption",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/init/Option.js~InitOption.DefaultType",
    "access": null,
    "description": "The default {@link inquirer~PromptType} to use. Equals 'input'.",
    "lineNumber": 82,
    "return": {
      "nullable": null,
      "types": [
        "inquirer~PromptType"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "src/lib/server/AtviseFile.js",
    "content": "import { readFile } from 'fs';\nimport File from 'vinyl';\nimport { DataType, VariantArrayType, resolveNodeId } from 'node-opcua';\nimport Logger from 'gulplog';\nimport AtviseTypes from './Types';\nimport NodeId from './NodeId';\n\n// Path related cache\nconst AtviseTypesByValue = AtviseTypes\n  .reduce((result, type) => Object.assign(result, {\n    [type.typeDefinition.value]: type,\n  }), {});\n\nconst AtviseTypesByIdentifier = AtviseTypes\n  .reduce((result, type) => Object.assign(result, {\n    [type.identifier]: type,\n  }), {});\n\n/**\n * A map providing shorter extensions for data types\n * @type {Map<node-opcua~DataType, String>}\n */\nexport const ExtensionForDataType = {\n  [DataType.Boolean]: 'bool',\n  [DataType.XmlElement]: 'xml',\n};\n\nfunction reverseObject(obj) {\n  return Object.keys(obj)\n    .reduce((result, key) => Object.assign(result, {\n      [obj[key]]: key,\n    }), {});\n}\n\n/**\n * A map providing data types for shorter extensions (Reverse of {@link DataTypeForExtension}).\n * * @type {Map<String, node-opcua~DataType>}\n */\nexport const DataTypeForExtension = reverseObject(ExtensionForDataType);\n\n// Cache DataType\nconst types = Object.keys(DataType);\nconst typeExtensions = types.map(t => t.toLowerCase());\n\n// Cache TypeDefinitions\nconst VariableTypeDefinition = new NodeId(NodeId.NodeIdType.NUMERIC, 62, 0);\nconst PropertyTypeDefinition = new NodeId(NodeId.NodeIdType.NUMERIC, 68, 0);\n\n// Cache Regular expressions\nconst ExtensionRegExp = /\\.([^/\\\\]*)$/;\n\n// Value encoding related cache\nconst Decoder = {\n  [DataType.Boolean]: stringValue => stringValue === 'true',\n  [DataType.String]: stringValue => stringValue,\n  [DataType.NodeId]: stringValue => resolveNodeId(stringValue),\n  [DataType.DateTime]: stringValue => new Date(Number.parseInt(stringValue, 10)),\n  [DataType.UInt64]: stringValue => JSON.parse(stringValue),\n};\n\nconst Encoder = {\n  [DataType.DateTime]: date => date.getTime().toString(),\n  [DataType.UInt64]: uInt32Array => JSON.stringify(uInt32Array),\n};\n\n/**\n * Returns the extension for a specific {@link node-opcua~DataType}.\n * Algorithm:\n *   - if the type has a shortened extension defined in {@link ExtensionForDataType}, return it.\n *   - else return the DataType's name, in lowercase letters.\n * @param {node-opcua~DataType} dataType The datatype to get the extension for.\n * @return {String} The resulting extension.\n */\nfunction extensionForDataType(dataType) {\n  return ExtensionForDataType[dataType] || dataType.toString().toLowerCase();\n}\n\n/**\n * An extension to {@link vinyl~File} providing some additional, atvise-related properties.\n * @property {node-opcua~DataType} AtviseFile#dataType The {@link node-opcua~DataType} the node is\n * stored against on atvise server.\n * @property {NodeId} typeDefinition The file's type definition on atvise server.\n * FIXME: Additional properties not showing in API docs.\n */\nexport default class AtviseFile extends File {\n\n  /**\n   * Returns a storage path for a {@link ReadStream.ReadResult}.\n   * @param {ReadStream.ReadResult} readResult The read result to get a path for.\n   */\n  static pathForReadResult(readResult) {\n    let path = readResult.nodeId.filePath;\n\n    const dataType = readResult.value.$dataType;\n    const arrayType = readResult.value.$arrayType;\n    const typeDefinition = readResult.referenceDescription.typeDefinition;\n\n    if (typeDefinition.value === VariableTypeDefinition.value) {\n      // Variable nodes are stored with their lowercase datatype as an extension\n      path += `.${extensionForDataType(dataType)}`;\n    } else if (typeDefinition.value === PropertyTypeDefinition.value) {\n      // Property nodes are stored with \".prop\" and their lowercase datatype as an extension\n      path += `.prop.${extensionForDataType(dataType)}`;\n    } else {\n      // Handle custom types\n      let identifier = 'var';\n      let fileExtension = false;\n      let keepExtension = false;\n\n      const atType = AtviseTypesByValue[typeDefinition.value];\n      if (atType) {\n        identifier = atType.identifier;\n        fileExtension = atType.fileExtension;\n        keepExtension = atType.keepExtension;\n      }\n\n      if (!keepExtension) {\n        path += `.${identifier}.${fileExtension || extensionForDataType(dataType)}`;\n      }\n    }\n\n    // Add \"array\" or \"matrix\" extensions for corresponding array types\n    if (arrayType !== VariantArrayType.Scalar) {\n      path += `.${arrayType === VariantArrayType.Array ? 'array' : 'matrix'}`;\n    }\n\n    return path;\n  }\n\n  /**\n   * Encodes a node's value to file contents.\n   * @param {*} value The value to encode.\n   * @param {node-opcua~DataType} dataType The {@link node-opcua~DataType} to encode the value for.\n   * @return {?Buffer} The encoded file contents or null.\n   */\n  static encodeValue(value, dataType) {\n    if (value.value === null) {\n      return Buffer.from('');\n    }\n\n    const encoder = Encoder[dataType];\n    return Buffer.from(encoder ? encoder(value.value) : value.value.toString().trim());\n  }\n\n  /**\n   * Decodes a file's contents to a node's value\n   * @param {Buffer} buffer The file contents to decode.\n   * @param {node-opcua~DataType} dataType The {@link node-opcua~DataType} to decode the contents\n   * for.\n   * @return {?*} The decoded node value or null.\n   */\n  static decodeValue(buffer, dataType) {\n    if (buffer === null || buffer.length === 0) {\n      return null;\n    }\n\n    const decoder = Decoder[dataType];\n\n    if (decoder) {\n      return decoder(buffer.toString());\n    }\n\n    return buffer;\n  }\n\n  /**\n   * As file mtimes do not support millisecond resolution these must be removed before storing\n   * files.\n   * @param {Date} date The original mtime.\n   * @return {Date} The normalized mtime.\n   */\n  static normalizeMtime(date) {\n    const result = date;\n    result.setMilliseconds(0);\n\n    return result;\n  }\n\n  /**\n   * Creates a new {@link AtviseFile} for the given {@link ReadStream.ReadResult}.\n   * @param {ReadStream.ReadResult} readResult The read result to create the file for.\n   * @return {AtviseFile} The resulting file.\n   */\n  static fromReadResult(readResult) {\n    if (!readResult.value) {\n      throw new Error('no value');\n    }\n\n    return new AtviseFile({\n      path: AtviseFile.pathForReadResult(readResult),\n      contents: AtviseFile.encodeValue(readResult.value, readResult.value.$dataType),\n      _dataType: readResult.value.$dataType,\n      _arrayType: readResult.value.$arrayType,\n      _typeDefinition: readResult.referenceDescription.typeDefinition,\n      stat: { mtime: readResult.mtime ? this.normalizeMtime(readResult.mtime) : undefined },\n    });\n  }\n\n  /**\n   * Recalculates {@link AtviseFile#dataType}, {@link AtviseFile#arrayType} and\n   * {@link AtviseFile#typeDefinition}. **Never call this method directly.**\n   */\n  _getMetadata() {\n    // Set default metadata\n    /**\n     * The node's stored {@link node-opcua~VariantArrayType}.\n     * @type {?node-opcua~VariantArrayType}\n     */\n    this._arrayType = VariantArrayType.Scalar;\n\n    let extensions = [];\n    extensions = this.relative.match(ExtensionRegExp)[1].split('.');\n\n    // For split files, add the directory name extension\n    const dirnameExts = this.dirname.split('.');\n    if (dirnameExts.length > 1) {\n      extensions.unshift(dirnameExts[1]);\n    }\n\n    function ifLastExtensionMatches(matches, fn) {\n      if (matches(extensions[extensions.length - 1])) {\n        fn(extensions.pop());\n      }\n    }\n\n    const complete = () => this._dataType !== undefined && this._typeDefinition !== undefined;\n\n    // Handle array types\n    ifLastExtensionMatches(ext => ext === 'array', () => {\n      this._arrayType = VariantArrayType.Array;\n    });\n\n    ifLastExtensionMatches(ext => ext === 'matrix', () => {\n      this._arrayType = VariantArrayType.Matrix;\n    });\n\n    ifLastExtensionMatches(ext => typeExtensions.includes(ext), ext => {\n      /**\n       * The node's stored {@link node-opcua~DataType}.\n       * @type {?node-opcua~DataType}\n       */\n      this._dataType = DataType[types[typeExtensions.indexOf(ext)]];\n    });\n\n    // Handle wrapped data types (e.g. \"bool\" for DataType.Boolean)\n    ifLastExtensionMatches(ext => DataTypeForExtension[ext], ext => {\n      this._dataType = DataType[DataTypeForExtension[ext]];\n    });\n\n    if (extensions.length === 0) { // Got variable\n      /**\n       * The node's stored type definition.\n       * @type {?node-opcua~NodeId}\n       */\n      this._typeDefinition = new NodeId(NodeId.NodeIdType.NUMERIC, 62, 0);\n    }\n\n    ifLastExtensionMatches(ext => ext === 'prop', () => {\n      this._typeDefinition = new NodeId(NodeId.NodeIdType.NUMERIC, 68, 0);\n    });\n\n    if (!complete()) {\n      // Handle atvise types\n      let foundAtType = false;\n\n      Object.keys(AtviseTypesByIdentifier).forEach(identifier => {\n        if (!foundAtType && extensions.includes(identifier)) {\n          foundAtType = true;\n          const type = AtviseTypesByIdentifier[identifier];\n\n          this._typeDefinition = type.typeDefinition;\n          this._dataType = type.dataType;\n        }\n      });\n    }\n\n    if (!complete()) {\n      this._typeDefinition = new NodeId('VariableTypes.ATVISE.Resource.OctetStream');\n      this._dataType = DataType.ByteString;\n    }\n\n    if (!complete()) {\n      Logger.warn('Unable to map', this.relative);\n    }\n  }\n\n  /**\n   * The file's {@link node-opcua~DataType}.\n   * @type {node-opcua~DataType}\n   */\n  get dataType() {\n    if (!this._dataType) {\n      this._getMetadata();\n    }\n\n    return this._dataType;\n  }\n\n  /**\n   * The file's {@link node-opcua~VariantArrayType}.\n   * @type {node-opcua~VariantArrayType}\n   */\n  get arrayType() {\n    if (!this._arrayType) {\n      this._getMetadata();\n    }\n\n    return this._arrayType;\n  }\n\n  /**\n   * The file's type definition.\n   * @type {node-opcua~NodeId}\n   */\n  get typeDefinition() {\n    if (!this._typeDefinition) {\n      this._getMetadata();\n    }\n\n    return this._typeDefinition;\n  }\n\n  /**\n   * `true` for files containing atvise displays.\n   * @type {Boolean}\n   */\n  get isDisplay() {\n    return this.typeDefinition.value === 'VariableTypes.ATVISE.Display';\n  }\n\n  /**\n   * `true` for files containing atvise scripts.\n   * @type {Boolean}\n   */\n  get isScript() {\n    return this.typeDefinition.value === 'VariableTypes.ATVISE.ScriptCode';\n  }\n\n  /**\n   * `true` for files containing atvise quick dynamics.\n   * @type {Boolean}\n   */\n  get isQuickDynamic() {\n    return this.typeDefinition.value === 'VariableTypes.ATVISE.QuickDynamic';\n  }\n\n  /**\n   * Sets the node value for the file.\n   * @param {?*} newValue The value to set.\n   */\n  set value(newValue) {\n    /**\n     * The file's contents.\n     * @type {?Buffer}\n     */\n    this.contents = AtviseFile.encodeValue(newValue, this.dataType);\n  }\n\n  /**\n   * Returns the decoded node value for the file.\n   * @type {?*} The file's decoded value.\n   */\n  get value() {\n    return AtviseFile.decodeValue(this.contents, this.dataType);\n  }\n\n  /**\n   * Returns the node id associated with the file.\n   * @type {NodeId} The file's node id.\n   */\n  get nodeId() {\n    const atType = AtviseTypesByValue[this.typeDefinition.value];\n    let idPath = this.relative;\n\n    if (!atType || !atType.keepExtension) {\n      const exts = idPath.match(ExtensionRegExp)[1];\n      idPath = idPath.split(`.${exts}`)[0];\n    }\n\n    return NodeId.fromFilePath(idPath);\n  }\n\n  /**\n   * Returns a new file with all attributes of the current file.\n   * @param {Object} options See https://github.com/gulpjs/vinyl#filecloneoptions for all options\n   * available.\n   * @return {AtviseFile} The cloned file.\n   */\n  clone(options) {\n    const clonedFile = super.clone(options);\n\n    clonedFile._arrayType = this._arrayType;\n\n    return clonedFile;\n  }\n\n  /**\n   * Creates a new AtviseFile and reads it's contents.\n   * @param {Object} options See {@link vinyl~File} for available options.\n   * @return {Promise} Resolved with the new file of rejected with the error that occured while\n   * trying to read it's path.\n   */\n  static read(options) {\n    return new Promise((resolve, reject) => {\n      if (!options.path) {\n        reject(new Error('options.path is required'));\n      } else {\n        readFile(options.path, (err, contents) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(new AtviseFile(Object.assign(options, { contents })));\n          }\n        });\n      }\n    });\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "AtviseTypesByValue",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseTypesByValue",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "AtviseTypesByIdentifier",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseTypesByIdentifier",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "ExtensionForDataType",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~ExtensionForDataType",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": "{ExtensionForDataType}",
    "description": "A map providing shorter extensions for data types",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Map<node-opcua~DataType, String>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "reverseObject",
    "memberof": "src/lib/server/AtviseFile.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~reverseObject",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "DataTypeForExtension",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~DataTypeForExtension",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": "{DataTypeForExtension}",
    "description": "A map providing data types for shorter extensions (Reverse of {@link DataTypeForExtension}).\n* @type {Map<String, node-opcua~DataType>}",
    "lineNumber": 39,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "types",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~types",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "typeExtensions",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~typeExtensions",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "VariableTypeDefinition",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~VariableTypeDefinition",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "src/lib/server/NodeId.js~NodeId"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "PropertyTypeDefinition",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~PropertyTypeDefinition",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "src/lib/server/NodeId.js~NodeId"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "ExtensionRegExp",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~ExtensionRegExp",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "undefined"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "Decoder",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~Decoder",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"undefined\": *}"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "Encoder",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~Encoder",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"undefined\": *}"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "extensionForDataType",
    "memberof": "src/lib/server/AtviseFile.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~extensionForDataType",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": "Returns the extension for a specific {@link node-opcua~DataType}.\nAlgorithm:\n  - if the type has a shortened extension defined in {@link ExtensionForDataType}, return it.\n  - else return the DataType's name, in lowercase letters.",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "node-opcua~DataType"
        ],
        "spread": false,
        "optional": false,
        "name": "dataType",
        "description": "The datatype to get the extension for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The resulting extension."
    }
  },
  {
    "__docId__": 66,
    "kind": "class",
    "name": "AtviseFile",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": "AtviseFile",
    "description": "An extension to {@link vinyl~File} providing some additional, atvise-related properties.",
    "lineNumber": 85,
    "properties": [
      {
        "nullable": null,
        "types": [
          "node-opcua~DataType"
        ],
        "spread": false,
        "optional": false,
        "name": "AtviseFile#dataType",
        "description": "The {@link node-opcua~DataType} the node is\nstored against on atvise server."
      },
      {
        "nullable": null,
        "types": [
          "NodeId"
        ],
        "spread": false,
        "optional": false,
        "name": "typeDefinition",
        "description": "The file's type definition on atvise server.\nFIXME: Additional properties not showing in API docs."
      }
    ],
    "interface": false,
    "extends": [
      "vinyl~File"
    ]
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "pathForReadResult",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile.pathForReadResult",
    "access": null,
    "description": "Returns a storage path for a {@link ReadStream.ReadResult}.",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "ReadStream.ReadResult"
        ],
        "spread": false,
        "optional": false,
        "name": "readResult",
        "description": "The read result to get a path for."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "encodeValue",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile.encodeValue",
    "access": null,
    "description": "Encodes a node's value to file contents.",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to encode."
      },
      {
        "nullable": null,
        "types": [
          "node-opcua~DataType"
        ],
        "spread": false,
        "optional": false,
        "name": "dataType",
        "description": "The {@link node-opcua~DataType} to encode the value for."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "The encoded file contents or null."
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "decodeValue",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile.decodeValue",
    "access": null,
    "description": "Decodes a file's contents to a node's value",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": "The file contents to decode."
      },
      {
        "nullable": null,
        "types": [
          "node-opcua~DataType"
        ],
        "spread": false,
        "optional": false,
        "name": "dataType",
        "description": "The {@link node-opcua~DataType} to decode the contents\nfor."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The decoded node value or null."
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "normalizeMtime",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile.normalizeMtime",
    "access": null,
    "description": "As file mtimes do not support millisecond resolution these must be removed before storing\nfiles.",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "The original mtime."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": "The normalized mtime."
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "fromReadResult",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile.fromReadResult",
    "access": null,
    "description": "Creates a new {@link AtviseFile} for the given {@link ReadStream.ReadResult}.",
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "ReadStream.ReadResult"
        ],
        "spread": false,
        "optional": false,
        "name": "readResult",
        "description": "The read result to create the file for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AtviseFile"
      ],
      "spread": false,
      "description": "The resulting file."
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "_getMetadata",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#_getMetadata",
    "access": null,
    "description": "Recalculates {@link AtviseFile#dataType}, {@link AtviseFile#arrayType} and\n{@link AtviseFile#typeDefinition}. **Never call this method directly.**",
    "lineNumber": 203,
    "params": []
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "_arrayType",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#_arrayType",
    "access": null,
    "description": "The node's stored {@link node-opcua~VariantArrayType}.",
    "lineNumber": 209,
    "type": {
      "nullable": true,
      "types": [
        "node-opcua~VariantArrayType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "_arrayType",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#_arrayType",
    "access": null,
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "_arrayType",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#_arrayType",
    "access": null,
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "_dataType",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#_dataType",
    "access": null,
    "description": "The node's stored {@link node-opcua~DataType}.",
    "lineNumber": 242,
    "type": {
      "nullable": true,
      "types": [
        "node-opcua~DataType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "_dataType",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#_dataType",
    "access": null,
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "_typeDefinition",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#_typeDefinition",
    "access": null,
    "description": "The node's stored type definition.",
    "lineNumber": 255,
    "type": {
      "nullable": true,
      "types": [
        "node-opcua~NodeId"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "_typeDefinition",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#_typeDefinition",
    "access": null,
    "description": null,
    "lineNumber": 259,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "_typeDefinition",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#_typeDefinition",
    "access": null,
    "description": null,
    "lineNumber": 271,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "_dataType",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#_dataType",
    "access": null,
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "_typeDefinition",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#_typeDefinition",
    "access": null,
    "description": null,
    "lineNumber": 278,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "_dataType",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#_dataType",
    "access": null,
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "get",
    "name": "dataType",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#dataType",
    "access": null,
    "description": "The file's {@link node-opcua~DataType}.",
    "lineNumber": 291,
    "type": {
      "nullable": null,
      "types": [
        "node-opcua~DataType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 85,
    "kind": "get",
    "name": "arrayType",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#arrayType",
    "access": null,
    "description": "The file's {@link node-opcua~VariantArrayType}.",
    "lineNumber": 303,
    "type": {
      "nullable": null,
      "types": [
        "node-opcua~VariantArrayType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "get",
    "name": "typeDefinition",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#typeDefinition",
    "access": null,
    "description": "The file's type definition.",
    "lineNumber": 315,
    "type": {
      "nullable": null,
      "types": [
        "node-opcua~NodeId"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "get",
    "name": "isDisplay",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#isDisplay",
    "access": null,
    "description": "`true` for files containing atvise displays.",
    "lineNumber": 327,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "get",
    "name": "isScript",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#isScript",
    "access": null,
    "description": "`true` for files containing atvise scripts.",
    "lineNumber": 335,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "get",
    "name": "isQuickDynamic",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#isQuickDynamic",
    "access": null,
    "description": "`true` for files containing atvise quick dynamics.",
    "lineNumber": 343,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 90,
    "kind": "set",
    "name": "value",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#value",
    "access": null,
    "description": "Sets the node value for the file.",
    "lineNumber": 351,
    "params": [
      {
        "nullable": true,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newValue",
        "description": "The value to set."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "contents",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#contents",
    "access": null,
    "description": "The file's contents.",
    "lineNumber": 356,
    "type": {
      "nullable": true,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 92,
    "kind": "get",
    "name": "value",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#value",
    "access": null,
    "description": "Returns the decoded node value for the file.",
    "lineNumber": 363,
    "type": {
      "nullable": true,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 93,
    "kind": "get",
    "name": "nodeId",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#nodeId",
    "access": null,
    "description": "Returns the node id associated with the file.",
    "lineNumber": 371,
    "type": {
      "nullable": null,
      "types": [
        "NodeId"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "clone",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#clone",
    "access": null,
    "description": "Returns a new file with all attributes of the current file.",
    "lineNumber": 389,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "See https://github.com/gulpjs/vinyl#filecloneoptions for all options\navailable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AtviseFile"
      ],
      "spread": false,
      "description": "The cloned file."
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "read",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile.read",
    "access": null,
    "description": "Creates a new AtviseFile and reads it's contents.",
    "lineNumber": 403,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "See {@link vinyl~File} for available options."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolved with the new file of rejected with the error that occured while\ntrying to read it's path."
    }
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/lib/server/Client.js",
    "content": "import { OPCUAClient } from 'node-opcua';\nimport ProjectConfig from '../../config/ProjectConfig';\n\n/**\n * A wrapper around {@link node-opcua~OPCUAClient} used to connect to atvise server.\n */\nexport default class Client {\n\n  /**\n   * Creates and connects a new instance of {@link node-opcua~OPCUAClient}.\n   * @return {Promise<node-opcua~OPCUAClient, Error>} Fulfilled with an already connected\n   * {@link node-opcua~OPCUAClient} instance, rejected if an error occured.\n   */\n  static create() {\n    const client = new OPCUAClient({\n      requestedSessionTimeout: 600000,\n      keepSessionAlive: true,\n    });\n\n    return new Promise((resolve, reject) => {\n      const endpoint = `opc.tcp://${ProjectConfig.host}:${ProjectConfig.port.opc}`;\n\n      setTimeout(() => reject(\n        new Error(`Unable to connect to ${endpoint}: Connection timed out`)\n      ), 3000);\n\n      client.connect(endpoint, err => {\n        if (err) {\n          reject(new Error(`Unable to connect to ${endpoint}: ${err.message}`));\n        } else {\n          resolve(client);\n        }\n      });\n    });\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/server/Client.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "class",
    "name": "Client",
    "memberof": "src/lib/server/Client.js",
    "static": true,
    "longname": "src/lib/server/Client.js~Client",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/server/Client.js",
    "importStyle": "Client",
    "description": "A wrapper around {@link node-opcua~OPCUAClient} used to connect to atvise server.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "create",
    "memberof": "src/lib/server/Client.js~Client",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/Client.js~Client.create",
    "access": null,
    "description": "Creates and connects a new instance of {@link node-opcua~OPCUAClient}.",
    "lineNumber": 14,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise<node-opcua~OPCUAClient, Error>"
      ],
      "spread": false,
      "description": "Fulfilled with an already connected\n{@link node-opcua~OPCUAClient} instance, rejected if an error occured."
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/lib/server/NodeId.js",
    "content": "import { sep } from 'path';\nimport { NodeId as OpcNodeId } from 'node-opcua';\n\nconst Type = OpcNodeId.NodeIdType;\n\nconst TypeForIdentifier = {\n  i: Type.NUMERIC,\n  s: Type.STRING,\n  g: Type.GUID,\n  b: Type.BYTESTRING,\n};\n\n/**\n * A wrapper around {@link node-opcua~NodeId}.\n */\nexport default class NodeId extends OpcNodeId {\n\n  /**\n   * Creates a new NodeId. Can be called in multiple ways:\n   *  - with a {@link node-opcua~NodeIdType}, a value and a namespace (defaults to 0),\n   *  - with a value only (type will be taken from it, namespace defaults to 1) or\n   *  - with a {@link NodeId}s string representation (e.g. `ns=1;s=AGENT.DISPLAYS`).\n   * @param {node-opcua~NodeIdType|String|Number} typeOrValue The type or value to use.\n   * @param {(Number|String)} [value] The value to use.\n   * @param {Number} [namespace=1] The namespace to use.\n   */\n  constructor(typeOrValue, value, namespace = 1) {\n    if (!(Type.get(typeOrValue))) {\n      let m = null;\n\n      if (typeof typeOrValue === 'string') {\n        m = typeOrValue.match(/^ns=([0-9]+);(i|s|g|b)=(.*)$/);\n      }\n\n      if (m === null) {\n        super(\n          Number.isNaN(Number.parseInt(typeOrValue, 10)) ? Type.STRING : Type.NUMERIC,\n          typeOrValue,\n          1\n        );\n      } else {\n        const n = Number.parseInt(m[1], 10);\n        const t = TypeForIdentifier[m[2]];\n        const v = t === Type.NUMERIC ? Number.parseInt(m[3], 10) : m[3];\n\n        super(t, v, n);\n      }\n    } else {\n      super(typeOrValue, value, namespace);\n    }\n  }\n\n  /**\n   * Creates a new NodeId based on a file path.\n   * @param {String} path The file path to use.\n   * @return {NodeId} The resulting NodeId.\n   */\n  static fromFilePath(path) {\n    let separator = '.';\n    const value = path.split(sep)\n      .reduce((result, current) => {\n        if (!result) {\n          return current;\n        }\n\n        const next = `${result}${separator}${current}`;\n\n        if (current === 'RESOURCES') {\n          separator = '/';\n        }\n\n        return next;\n      });\n\n    return new NodeId(NodeId.NodeIdType.STRING, value, 1);\n  }\n\n  /**\n   * The node id's value, encoded to a file path.\n   * @type {String}\n   */\n  get filePath() {\n    const parts = this.value.split('RESOURCES');\n    parts[0] = parts[0].split('.').join('/');\n\n    return parts.join('RESOURCES');\n  }\n\n  /**\n   * Returns a string in the format \"namespace value\" that is printed when inspecting the NodeId\n   * using node.js's *util.inspect*.\n   * @see https://nodejs.org/api/util.html#util_util_inspect_object_options\n   * @param {Number} depth The depth to inspect.\n   * @param {Object} options The options to use.\n   * @return {String} A string in the format \"namespace value\".\n   */\n  inspect(depth, options) {\n    return [\n      options.stylize(this.namespace, 'number'),\n      options.stylize(this.value, this.identifierType === Type.NUMERIC ? 'number' : 'string'),\n    ].join(' ');\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/server/NodeId.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "Type",
    "memberof": "src/lib/server/NodeId.js",
    "static": true,
    "longname": "src/lib/server/NodeId.js~Type",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/NodeId.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "TypeForIdentifier",
    "memberof": "src/lib/server/NodeId.js",
    "static": true,
    "longname": "src/lib/server/NodeId.js~TypeForIdentifier",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/NodeId.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"i\": *, \"s\": *, \"g\": *, \"b\": *}"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "class",
    "name": "NodeId",
    "memberof": "src/lib/server/NodeId.js",
    "static": true,
    "longname": "src/lib/server/NodeId.js~NodeId",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/server/NodeId.js",
    "importStyle": "NodeId",
    "description": "A wrapper around {@link node-opcua~NodeId}.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "node-opcua~OpcNodeId"
    ]
  },
  {
    "__docId__": 103,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/server/NodeId.js~NodeId",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/NodeId.js~NodeId#constructor",
    "access": null,
    "description": "Creates a new NodeId. Can be called in multiple ways:\n - with a {@link node-opcua~NodeIdType}, a value and a namespace (defaults to 0),\n - with a value only (type will be taken from it, namespace defaults to 1) or\n - with a {@link NodeId}s string representation (e.g. `ns=1;s=AGENT.DISPLAYS`).",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "node-opcua~NodeIdType",
          "String",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "typeOrValue",
        "description": "The type or value to use."
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "The value to use."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "namespace",
        "description": "The namespace to use."
      }
    ]
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "fromFilePath",
    "memberof": "src/lib/server/NodeId.js~NodeId",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/NodeId.js~NodeId.fromFilePath",
    "access": null,
    "description": "Creates a new NodeId based on a file path.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The file path to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NodeId"
      ],
      "spread": false,
      "description": "The resulting NodeId."
    }
  },
  {
    "__docId__": 105,
    "kind": "get",
    "name": "filePath",
    "memberof": "src/lib/server/NodeId.js~NodeId",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/NodeId.js~NodeId#filePath",
    "access": null,
    "description": "The node id's value, encoded to a file path.",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "inspect",
    "memberof": "src/lib/server/NodeId.js~NodeId",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/NodeId.js~NodeId#inspect",
    "access": null,
    "description": "Returns a string in the format \"namespace value\" that is printed when inspecting the NodeId\nusing node.js's *util.inspect*.",
    "see": [
      "https://nodejs.org/api/util.html#util_util_inspect_object_options"
    ],
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "depth",
        "description": "The depth to inspect."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A string in the format \"namespace value\"."
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/lib/server/NodeStream.js",
    "content": "import { browse_service as BrowseService, NodeClass } from 'node-opcua';\nimport Logger from 'gulplog';\nimport Stream from './Stream';\nimport NodeId from './NodeId';\nimport Project from '../../config/ProjectConfig';\n\n/**\n * An object transform stream that browses atvise server and pushes the resulting\n * {@link node-opcua~ReferenceDescription}s.\n */\nexport default class NodeStream extends Stream {\n\n  /**\n   * Creates a new NodesStream based on the nodes to start browsing at and some options.\n   * @param {NodeId[]} nodesToBrowse The nodes to start browsing at.\n   * @param {Object} [options] The options to use.\n   * @param {NodeId[]} [options.ignoreNodes=ProjectConfig.ignoreNodes] An array of {@link NodeId}s\n   * to ignore.\n   * @param {Boolean} [options.recursive=true] If the discovered nodes should be browsed as well.\n   * @param {Number} [options.maxRetries=3] How often failing browse requests should be retried.\n   * implemented yet*).\n   */\n  constructor(nodesToBrowse, options) {\n    if (!nodesToBrowse || !(nodesToBrowse instanceof Array)) {\n      throw new Error('nodes is required');\n    }\n\n    if (options && options.ignoreNodes !== undefined && !(options.ignoreNodes instanceof Array)) {\n      throw new Error('ignoreNodes must be an array of node ids');\n    }\n\n    super();\n\n    this.once('session-open',\n      () => this.browseNodes(nodesToBrowse)\n        .then(() => this.end())\n        .catch(err => this.emit('error', err))\n      );\n\n    // Handle options\n    /**\n     * If the discovered nodes should be browsed as well.\n     * @type {Boolean}\n     */\n    this.recursive = true;\n\n    /**\n     * How often failing browse requests should be retried.\n     * @type {Number}\n     */\n    this.maxRetries = 3;\n\n    /**\n     * An array of {@link NodeId}s to ignore.\n     * @type {NodeId[]}\n     */\n    this.ignoreNodes = Project.ignoreNodes;\n\n    if (options) {\n      if (options.recursive !== undefined) {\n        this.recursive = options.recursive;\n      }\n\n      if (options.ignoreNodes !== undefined) {\n        this.ignoreNodes = options.ignoreNodes;\n      }\n\n      if (options.maxRetries !== undefined) {\n        this.maxRetries = options.maxRetries;\n      }\n    }\n\n    /**\n     * The result mask to use.\n     * @type {UInt32}\n     */\n    this._resultMask = BrowseService.makeResultMask('ReferenceType | NodeClass | TypeDefinition');\n\n    /**\n     * A regular expression matching all node ids specified in {@link NodeStream#ignoreNodes}\n     * @type {RegExp}\n     */\n    this.ignoredRegExp = new RegExp(`^(${this.ignoreNodes.map(n => n.toString()).join('|')})`);\n  }\n\n  /**\n   * Browses the given node.\n   * @param {NodeId} nodeId The node to browse.\n   * @return {Promise<NodeId[], Error>} Fulfilled with the next nodes to browse or rejected with the\n   * error that occurred while browsing.\n   */\n  browseNode(nodeId, retry) {\n    const promise = new Promise((resolve, reject) => {\n      this.session.browse({\n        nodeId,\n        browseDirection: BrowseService.BrowseDirection.Forward,\n        includeSubtypes: true,\n        resultMask: this._resultMask,\n      }, (err, results) => {\n        if (err) {\n          if (err.message === 'Transaction has timed out') {\n            const tryNo = retry || 1;\n            Logger.warn(`Timeout while browsing. Retrying... (${tryNo})`, nodeId.toString());\n\n            if (retry && retry === this.maxRetries) {\n              reject(\n                new Error(`Browsing ${nodeId.toString()} failed: Timeout (${promise.retry}x)`)\n              );\n            } else {\n              this.browseNode(nodeId, tryNo)\n                .then(resolve, reject);\n            }\n          } else {\n            reject(new Error(`Browsing ${nodeId.toString()} failed: ${err.message}`));\n          }\n        } else if (!results || results.length === 0) {\n          reject(new Error(`Browsing ${nodeId.toString()} failed: No results`));\n        } else if (results[0].statusCode > 0) {\n          reject(new Error(`Browsing ${nodeId.toString()} failed: Code ${results[0].statusCode}`));\n        } else {\n          const browseNext = results[0].references\n            // Remove parent nodes\n            .filter(ref => ref.nodeId.value.toString().split(nodeId.value).length > 1)\n            // TODO: Print ignored nodes (debug level)\n            .filter(ref => !(ref.nodeId.toString().match(this.ignoredRegExp)))\n\n            // Remove variable nodes\n            .map(ref => {\n              // Push all variable ids\n              if (ref.nodeClass.value === NodeClass.Variable.value) {\n                // \"Cast\" ref.nodeId to NodeId\n                Object.setPrototypeOf(ref.nodeId, NodeId.prototype);\n\n                // TODO: Use read option to read variable nodes\n                this.push(ref);\n              }\n\n              return ref.nodeId;\n            });\n\n          resolve(browseNext);\n        }\n      });\n    });\n\n    if (this.recursive && retry === undefined) {\n      return promise.then(childObjectNodes => this.browseNodes(childObjectNodes));\n    }\n\n    return promise;\n  }\n\n  /**\n   * Browses the given nodes.\n   * @param {NodeId[]} nodes The nodes to browse.\n   * @return {Promise<?NodeId[], Error>} Rejected with the error that occurred, otherwise fulfilled\n   * with the next nodes to browse.\n   * If {@link NodeStream#recursive} is set to `true` this method is called recursively.\n   */\n  browseNodes(nodes) {\n    return Promise.all(\n      nodes.map(node => this.browseNode(node))\n    );\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/server/NodeStream.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "class",
    "name": "NodeStream",
    "memberof": "src/lib/server/NodeStream.js",
    "static": true,
    "longname": "src/lib/server/NodeStream.js~NodeStream",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/server/NodeStream.js",
    "importStyle": "NodeStream",
    "description": "An object transform stream that browses atvise server and pushes the resulting\n{@link node-opcua~ReferenceDescription}s.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/lib/server/Stream.js~Stream"
    ]
  },
  {
    "__docId__": 109,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#constructor",
    "access": null,
    "description": "Creates a new NodesStream based on the nodes to start browsing at and some options.",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "NodeId[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodesToBrowse",
        "description": "The nodes to start browsing at."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options to use."
      },
      {
        "nullable": null,
        "types": [
          "NodeId[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "ProjectConfig.ignoreNodes",
        "defaultRaw": "ProjectConfig.ignoreNodes",
        "name": "options.ignoreNodes",
        "description": "An array of {@link NodeId}s\nto ignore."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.recursive",
        "description": "If the discovered nodes should be browsed as well."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "3",
        "defaultRaw": 3,
        "name": "options.maxRetries",
        "description": "How often failing browse requests should be retried.\nimplemented yet*)."
      }
    ]
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "recursive",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#recursive",
    "access": null,
    "description": "If the discovered nodes should be browsed as well.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "maxRetries",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#maxRetries",
    "access": null,
    "description": "How often failing browse requests should be retried.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "ignoreNodes",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#ignoreNodes",
    "access": null,
    "description": "An array of {@link NodeId}s to ignore.",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "NodeId[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "recursive",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#recursive",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "ignoreNodes",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#ignoreNodes",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "maxRetries",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#maxRetries",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "_resultMask",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#_resultMask",
    "access": null,
    "description": "The result mask to use.",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "UInt32"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "ignoredRegExp",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#ignoredRegExp",
    "access": null,
    "description": "A regular expression matching all node ids specified in {@link NodeStream#ignoreNodes}",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "browseNode",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#browseNode",
    "access": null,
    "description": "Browses the given node.",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "NodeId"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": "The node to browse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<NodeId[], Error>"
      ],
      "spread": false,
      "description": "Fulfilled with the next nodes to browse or rejected with the\nerror that occurred while browsing."
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "browseNodes",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#browseNodes",
    "access": null,
    "description": "Browses the given nodes.",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "NodeId[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": "The nodes to browse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<?NodeId[], Error>"
      ],
      "spread": false,
      "description": "Rejected with the error that occurred, otherwise fulfilled\nwith the next nodes to browse.\nIf {@link NodeStream#recursive} is set to `true` this method is called recursively."
    }
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/lib/server/ReadStream.js",
    "content": "import { StatusCodes } from 'node-opcua';\nimport Stream from './Stream';\n\n/**\n * An object transform stream that reads the written {@link NodeId}s.\n */\nexport default class ReadStream extends Stream {\n\n  /**\n   * Reads the given node.\n   * @param {node-opcua~ReferenceDescription} referenceDescription The reference description of the\n   * node to read from.\n   * @param {function(err: ?Error, data: ?ReadStream.ReadResult)} callback Called with the error\n   * that occurred, or the read results the read results otherwise.\n   */\n  readNode(referenceDescription, callback) {\n    const nodeId = referenceDescription.nodeId;\n\n    this.session.read([{ nodeId }], (err, nodesToRead, results) => {\n      if (err) {\n        callback(new Error(`Reading ${nodeId.toString()} failed: ${err.message}`));\n      } else if (!results || results.length === 0) {\n        callback(new Error(`Reading ${nodeId.toString()} failed: No results`));\n      } else if (results[0].statusCode !== StatusCodes.Good) {\n        callback(new Error(`Reading ${nodeId.toString()} failed: Status ${results[0].statusCode}`));\n      } else {\n        callback(null, {\n          nodeId,\n          value: results[0].value,\n          referenceDescription,\n          mtime: results[0].sourceTimestamp,\n        });\n      }\n    });\n  }\n\n  /**\n   * Calls {@link ReadStream#readNode} once the session is open for the passed node.\n   * @param {NodeId} nodeId The node to read.\n   * @param {String} enc The encoding used.\n   * @param {function(err: ?Error, data: ?Object)} callback Called by {@link ReadStream#readNode}\n   * once reading ended.\n   * @listens {Session} Listens to the `session-open`-event if the session is not open yet.\n   */\n  _transform(nodeId, enc, callback) {\n    if (this.session) {\n      this.readNode(nodeId, callback);\n    } else {\n      this.once('session-open', () => this.readNode(nodeId, callback));\n    }\n  }\n\n}\n\n/**\n * @typedef {Object} ReadStream.ReadResult\n * @property {NodeId} nodeId The read node's id.\n * @property {?node-opcua~DataValue} value The read value.\n * @property {Object} referenceDescription Additional info on the read node.\n * @property {Date} mtime The timestamp the node's value last changed.\n */\n",
    "static": true,
    "longname": "src/lib/server/ReadStream.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "class",
    "name": "ReadStream",
    "memberof": "src/lib/server/ReadStream.js",
    "static": true,
    "longname": "src/lib/server/ReadStream.js~ReadStream",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/server/ReadStream.js",
    "importStyle": "ReadStream",
    "description": "An object transform stream that reads the written {@link NodeId}s.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/lib/server/Stream.js~Stream"
    ]
  },
  {
    "__docId__": 122,
    "kind": "typedef",
    "name": "ReadStream.ReadResult",
    "memberof": "src/lib/server/ReadStream.js",
    "static": true,
    "longname": "src/lib/server/ReadStream.js~ReadStream.ReadResult",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "NodeId"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": "The read node's id."
      },
      {
        "nullable": true,
        "types": [
          "node-opcua~DataValue"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The read value."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "referenceDescription",
        "description": "Additional info on the read node."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "mtime",
        "description": "The timestamp the node's value last changed."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ReadStream.ReadResult"
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "readNode",
    "memberof": "src/lib/server/ReadStream.js~ReadStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/ReadStream.js~ReadStream#readNode",
    "access": null,
    "description": "Reads the given node.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "node-opcua~ReferenceDescription"
        ],
        "spread": false,
        "optional": false,
        "name": "referenceDescription",
        "description": "The reference description of the\nnode to read from."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: ?ReadStream.ReadResult)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error\nthat occurred, or the read results the read results otherwise."
      }
    ]
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "_transform",
    "memberof": "src/lib/server/ReadStream.js~ReadStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/ReadStream.js~ReadStream#_transform",
    "access": null,
    "description": "Calls {@link ReadStream#readNode} once the session is open for the passed node.",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "NodeId"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": "The node to read."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: ?Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called by {@link ReadStream#readNode}\nonce reading ended."
      }
    ],
    "listens": [
      {
        "types": [
          "Session"
        ],
        "description": "Listens to the `session-open`-event if the session is not open yet."
      }
    ]
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "src/lib/server/Session.js",
    "content": "import Emitter from 'events';\nimport { StatusCodes, ClientSession } from 'node-opcua';\nimport Logger from 'gulplog';\nimport Client from './Client';\nimport ProjectConfig from '../../config/ProjectConfig';\n\nconst emitter = new Emitter();\nconst openSessions = [];\nlet openingSessions = 0;\n\n/**\n * A wrapper around {@link node-opcua~ClientSession} used to connect to atvise server.\n */\nexport default class Session {\n\n  /**\n   * Creates and opens a new {@link node-opcua~ClientSession}.\n   * @return {Promise<node-opcua~ClientSession, Error>} Fulfilled with an already opened\n   * {@link node-opcua~ClientSession}.\n   */\n  static create() {\n    return Client.create()\n      .then(client => new Promise((resolve, reject) => {\n        openingSessions++;\n\n        client.createSession({\n          userName: ProjectConfig.login.username,\n          password: ProjectConfig.login.password,\n        }, (err, session) => {\n          if (err) {\n            if (\n              [\n                'userName === null || typeof userName === \"string\"',\n                'password === null || typeof password === \"string\"',\n              ].includes(err.message) ||\n              (err.response &&\n              err.response.responseHeader.serviceResult === StatusCodes.BadUserAccessDenied)\n            ) {\n              reject(new Error('Unable to create session: Invalid login'));\n            } else {\n              reject(new Error(`Unable to create session: ${err.message}`));\n            }\n          } else {\n            openSessions.push(session);\n            resolve(session);\n          }\n\n          openingSessions--;\n          if (openingSessions === 0) {\n            emitter.emit('all-open');\n          }\n        });\n      }));\n  }\n\n  /**\n   * Closes the given session.\n   * @param {node-opcua~ClientSession} session The session to close.\n   * @param {Boolean} [deleteSubscriptions=true] If active subscriptions should be closed as well.\n   * @return {Promise<node-opcua~ClientSession, Error>} Fulfilled with the (now closed!) session or\n   * rejected with the error that occured while closing.\n   */\n  static close(session, deleteSubscriptions = true) {\n    if (!session || !(session instanceof ClientSession)) {\n      return Promise.reject(new Error('session is required'));\n    }\n\n    if (session._closed) {\n      return Promise.resolve();\n    }\n\n    if (session._closing) {\n      return new Promise(resolve => {\n        session.on('session_closed', () => {\n          resolve(session);\n        });\n      });\n    }\n\n    Object.assign(session, { _closing: true });\n\n    return new Promise((resolve, reject) => {\n      function removeOpenSession(sess) {\n        openSessions.splice(openSessions.indexOf(sess), 1);\n      }\n\n      session.close(deleteSubscriptions, (err) => {\n        if (err) {\n          if (err.response.responseHeader.serviceResult === StatusCodes.BadSessionIdInvalid) {\n            removeOpenSession(session);\n            Logger.debug('Attempted to close a session that does not exist');\n            resolve(session);\n          } else if (err.message === 'no channel') {\n            removeOpenSession(session);\n            resolve(session);\n          } else {\n            reject(new Error(`Unable to close session: ${err.message}`));\n          }\n        } else {\n          session._client.disconnect(clientErr => {\n            if (clientErr) {\n              reject(new Error(`Unable to disconnect client: ${clientErr.message}`));\n            } else {\n              removeOpenSession(session);\n\n              Object.assign(session, { _closed: true });\n              resolve(session);\n            }\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * The sessions currently open.\n   * @type {Session[]}\n   */\n  static get open() {\n    return openSessions;\n  }\n\n  /**\n   * Closes all open sessions.\n   * @return {Promise<Error, Session[]>} Rejected with the error that occurred while closing the\n   * sessions or fulfilled with the (now closed) sessions affected.\n   */\n  static closeOpen() {\n    function closeSessions(sessions) {\n      return Promise.all(\n        sessions.map(session => Session.close(session))\n      );\n    }\n\n    if (openingSessions === 0) {\n      if (openSessions.length === 0) {\n        return Promise.resolve([]);\n      }\n\n      return closeSessions(openSessions);\n    }\n\n    return new Promise((resolve, reject) => {\n      emitter.on('all-open', () => {\n        closeSessions(openSessions)\n          .then(resolve, reject);\n      });\n    });\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/server/Session.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "emitter",
    "memberof": "src/lib/server/Session.js",
    "static": true,
    "longname": "src/lib/server/Session.js~emitter",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/Session.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "events~Emitter"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "openSessions",
    "memberof": "src/lib/server/Session.js",
    "static": true,
    "longname": "src/lib/server/Session.js~openSessions",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/Session.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "openingSessions",
    "memberof": "src/lib/server/Session.js",
    "static": true,
    "longname": "src/lib/server/Session.js~openingSessions",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/Session.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "class",
    "name": "Session",
    "memberof": "src/lib/server/Session.js",
    "static": true,
    "longname": "src/lib/server/Session.js~Session",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/server/Session.js",
    "importStyle": "Session",
    "description": "A wrapper around {@link node-opcua~ClientSession} used to connect to atvise server.",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "create",
    "memberof": "src/lib/server/Session.js~Session",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/Session.js~Session.create",
    "access": null,
    "description": "Creates and opens a new {@link node-opcua~ClientSession}.",
    "lineNumber": 21,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise<node-opcua~ClientSession, Error>"
      ],
      "spread": false,
      "description": "Fulfilled with an already opened\n{@link node-opcua~ClientSession}."
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "close",
    "memberof": "src/lib/server/Session.js~Session",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/Session.js~Session.close",
    "access": null,
    "description": "Closes the given session.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "node-opcua~ClientSession"
        ],
        "spread": false,
        "optional": false,
        "name": "session",
        "description": "The session to close."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "deleteSubscriptions",
        "description": "If active subscriptions should be closed as well."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<node-opcua~ClientSession, Error>"
      ],
      "spread": false,
      "description": "Fulfilled with the (now closed!) session or\nrejected with the error that occured while closing."
    }
  },
  {
    "__docId__": 132,
    "kind": "get",
    "name": "open",
    "memberof": "src/lib/server/Session.js~Session",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/Session.js~Session.open",
    "access": null,
    "description": "The sessions currently open.",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "Session[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "closeOpen",
    "memberof": "src/lib/server/Session.js~Session",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/Session.js~Session.closeOpen",
    "access": null,
    "description": "Closes all open sessions.",
    "lineNumber": 128,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Error, Session[]>"
      ],
      "spread": false,
      "description": "Rejected with the error that occurred while closing the\nsessions or fulfilled with the (now closed) sessions affected."
    }
  },
  {
    "__docId__": 134,
    "kind": "file",
    "name": "src/lib/server/Stream.js",
    "content": "import { ctor as throughStreamClass } from 'through2';\nimport Session from './Session';\n\n/**\n * An object transform stream connected to atvise server.\n */\nexport default class Stream extends throughStreamClass({ objectMode: true }) {\n\n  /**\n   * Creates a new Stream and starts opening a new session to atvise server.\n   * @emits {Session} Emits an `session-open` event once the session is open, passing the Session\n   * instance.\n   */\n  constructor() {\n    super();\n\n    Session.create()\n      .then(session => (this.session = session))\n      .then(session => this.emit('session-open', session))\n      .catch(err => this.emit('error', err));\n  }\n\n  /**\n   * Called just before the stream is closed: Closes the open session.\n   * @param {function(err: ?Error, data: Object)} callback Called once the session is closed.\n   */\n  _flush(callback) {\n    if (this.session) {\n      Session.close(this.session)\n        .then(() => callback())\n        .catch(err => callback(err));\n    } else {\n      callback();\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/server/Stream.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "class",
    "name": "Stream",
    "memberof": "src/lib/server/Stream.js",
    "static": true,
    "longname": "src/lib/server/Stream.js~Stream",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/server/Stream.js",
    "importStyle": "Stream",
    "description": "An object transform stream connected to atvise server.",
    "lineNumber": 7,
    "interface": false,
    "expressionExtends": "throughStreamClass({ objectMode: true })"
  },
  {
    "__docId__": 136,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/server/Stream.js~Stream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Stream.js~Stream#constructor",
    "access": null,
    "description": "Creates a new Stream and starts opening a new session to atvise server.",
    "lineNumber": 14,
    "params": [],
    "emits": [
      {
        "types": [
          "Session"
        ],
        "description": "Emits an `session-open` event once the session is open, passing the Session\ninstance."
      }
    ]
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "_flush",
    "memberof": "src/lib/server/Stream.js~Stream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Stream.js~Stream#_flush",
    "access": null,
    "description": "Called just before the stream is closed: Closes the open session.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called once the session is closed."
      }
    ]
  },
  {
    "__docId__": 138,
    "kind": "file",
    "name": "src/lib/server/Types.js",
    "content": "import { DataType } from 'node-opcua';\nimport NodeId from '../server/NodeId';\n\nclass AtviseType {\n\n  constructor(nodeIdValue, identifier, dataType, fileExtensionOrKeep) {\n    this.typeDefinition = new NodeId(`VariableTypes.ATVISE.${nodeIdValue}`);\n    this.identifier = identifier;\n    this.dataType = dataType;\n    if (fileExtensionOrKeep !== undefined) {\n      if (typeof fileExtensionOrKeep === 'string') {\n        this.fileExtension = fileExtensionOrKeep;\n      } else {\n        this.keepExtension = fileExtensionOrKeep;\n      }\n    }\n  }\n\n}\n\nclass AtviseResourceType extends AtviseType {\n\n  constructor(name, identifier) {\n    super(`Resource.${name}`, identifier, DataType.ByteString, true);\n  }\n\n}\n\n/**\n * The atvise types to handle. **Ordering matters:** The {@link MappingTransformer} takes the first\n * match, therefore **plain types should always come before resource types!**\n * @type {AtviseType[]}\n */\nconst AtviseTypes = [\n  new AtviseType('HtmlHelp', 'help', DataType.XmlElement, 'html'),\n  new AtviseType('QuickDynamic', 'qd', DataType.XmlElement),\n  new AtviseType('ScriptCode', 'script', DataType.XmlElement),\n  new AtviseType('Display', 'display', DataType.XmlElement),\n  new AtviseType('TranslationTable', 'locs', DataType.XmlElement),\n  new AtviseResourceType('Pdf', 'pdf'),\n  new AtviseResourceType('Html', 'html'),\n  new AtviseResourceType('Javascript', 'js'),\n  new AtviseResourceType('Wave', 'wav'),\n  new AtviseResourceType('Gif', 'gif'),\n  new AtviseResourceType('Png', 'png'),\n  new AtviseResourceType('Aac', 'm4a'),\n  new AtviseResourceType('Ogg', 'ogg'),\n  new AtviseResourceType('Icon', 'ico'),\n  new AtviseResourceType('Css', 'css'),\n  new AtviseResourceType('Svg', 'svg'),\n  new AtviseResourceType('Jpeg', 'jpg'),\n  new AtviseResourceType('OctetStream', '*'),\n];\n\nexport default AtviseTypes;\n",
    "static": true,
    "longname": "src/lib/server/Types.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 139,
    "kind": "class",
    "name": "AtviseType",
    "memberof": "src/lib/server/Types.js",
    "static": true,
    "longname": "src/lib/server/Types.js~AtviseType",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/Types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 140,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/server/Types.js~AtviseType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Types.js~AtviseType#constructor",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "nodeIdValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      },
      {
        "name": "fileExtensionOrKeep",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "typeDefinition",
    "memberof": "src/lib/server/Types.js~AtviseType",
    "static": false,
    "longname": "src/lib/server/Types.js~AtviseType#typeDefinition",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "identifier",
    "memberof": "src/lib/server/Types.js~AtviseType",
    "static": false,
    "longname": "src/lib/server/Types.js~AtviseType#identifier",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "dataType",
    "memberof": "src/lib/server/Types.js~AtviseType",
    "static": false,
    "longname": "src/lib/server/Types.js~AtviseType#dataType",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "fileExtension",
    "memberof": "src/lib/server/Types.js~AtviseType",
    "static": false,
    "longname": "src/lib/server/Types.js~AtviseType#fileExtension",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "keepExtension",
    "memberof": "src/lib/server/Types.js~AtviseType",
    "static": false,
    "longname": "src/lib/server/Types.js~AtviseType#keepExtension",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "class",
    "name": "AtviseResourceType",
    "memberof": "src/lib/server/Types.js",
    "static": true,
    "longname": "src/lib/server/Types.js~AtviseResourceType",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/server/Types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "AtviseType"
    ]
  },
  {
    "__docId__": 147,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/server/Types.js~AtviseResourceType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Types.js~AtviseResourceType#constructor",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "AtviseTypes",
    "memberof": "src/lib/server/Types.js",
    "static": true,
    "longname": "src/lib/server/Types.js~AtviseTypes",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/server/Types.js",
    "importStyle": "AtviseTypes",
    "description": "The atvise types to handle. **Ordering matters:** The {@link MappingTransformer} takes the first\nmatch, therefore **plain types should always come before resource types!**",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "AtviseType[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "src/lib/server/Watcher.js",
    "content": "import Emitter from 'events';\nimport {\n  ClientSubscription,\n  AttributeIds,\n  subscription_service as SubscriptionService,\n} from 'node-opcua';\nimport ProjectConfig from '../../config/ProjectConfig';\nimport NodeStream from './NodeStream';\nimport Stream from './Stream';\nimport Session from './Session';\n\n/**\n * A stream that monitors changes in the read nodes.\n */\nexport class SubscribeStream extends Stream {\n\n  /**\n   * Creates a new SubscribeStream.\n   */\n  constructor() {\n    super({ keepSessionAlive: true });\n\n    /**\n     * Set to true once all nodes are monitored.\n     * @type {Boolean}\n     */\n    this._trackChanges = false;\n\n    this.once('session-open', () => this.createSubscription());\n  }\n\n  /**\n   * Creates the server subscription to monitor nodes with.\n   * @emit {node-opcua~ClientSubscription} Emits a `subscription-started` event once the\n   * subscription started.\n   */\n  createSubscription() {\n    const subscription = new ClientSubscription(this.session, {\n      requestedPublishingInterval: 100,\n      requestedLifetimeCount: 1000,\n      requestedMaxKeepAliveCount: 12,\n      maxNotificationsPerPublish: 10,\n      publishingEnabled: true,\n      priority: 10,\n    });\n\n    subscription.on('started', () => {\n      /**\n       * The {@link node-opcua~ClientSubscription} to use to monitor nodes.\n       * @type {node-opcua~ClientSubscription}\n       */\n      this.subscription = subscription;\n      this.emit('subscription-started', subscription);\n    });\n\n    subscription.on('failure', err => this.emit('error', err));\n  }\n\n  /**\n   * Starts monitoring of the node with the given {@link node-opcua~ReferenceDescription}.\n   * @param {node-opcua~ReferenceDescription} referenceDescription Reference description of the node\n   * to monitor.\n   * @param {function(err: Error?)} callback Called with the error that occured while trying to\n   * monitor the given node.\n   */\n  monitorNode(referenceDescription, callback) {\n    const nodeId = referenceDescription.nodeId;\n\n    const item = this.subscription.monitor({\n      nodeId,\n      attributeId: AttributeIds.Value,\n    }, {\n      clientHandle: 13,\n      samplingInterval: 250,\n      queueSize: 1,\n      discardOldest: true,\n    }, SubscriptionService.TimestampsToReturn.Both);\n\n    item.on('changed', dataValue => {\n      if (!this._trackChanges) {\n        callback(); // Ignore first notification\n      } else {\n        this.emit('change', {\n          nodeId,\n          value: dataValue.value,\n          referenceDescription,\n          mtime: dataValue.serverTimestamp,\n        });\n      }\n    });\n\n    item.on('err', err => {\n      /*\n        This works around a bug in node-opcua:\n        Instead of a error a string is emitted\n        FIXME: Remove once bug is fixed\n       */\n      if (err instanceof Error) {\n        const error = err;\n        error.message = `Error monitoring ${nodeId.toString()}: ${err.message}`;\n\n        callback(error);\n      } else {\n        callback(new Error(`Error monitoring ${nodeId.toString()}: ${err}`));\n      }\n    });\n\n    return item;\n  }\n\n  /**\n   * Buffers all read node descriptions until the subscription started, then calls\n   * {@link SubscribeStream#monitorNode} with them.\n   * @param {node-opcua~ReferenceDescription} desc Reference description of the node to transform.\n   * @param {String} enc The encoding used.\n   * @param {function(err: ?Error)} callback Called with the error that occured while trying to\n   * monitor the given node.\n   */\n  _transform(desc, enc, callback) {\n    if (this.subscription) {\n      this.monitorNode(desc, callback);\n    } else {\n      this.once('subscription-started', () => this.monitorNode(desc, callback));\n    }\n  }\n\n  /**\n   * Overriding this method prevents closing the session.\n   * @param {function()} callback Called immediately.\n   */\n  _flush(callback) {\n    this._trackChanges = true;\n    callback();\n  }\n\n}\n\n/**\n * Watches the given nodes for value changes.\n * @emit {ReadStream.ReadResult} Emits `change` events when a watched node changes.\n */\nexport default class Watcher extends Emitter {\n\n  /**\n   * Creates a new Watcher with the given nodes.\n   * @param {NodeId[]} nodes The nodes to watch (recursively).\n   */\n  constructor(nodes = ProjectConfig.nodesToWatch) {\n    super();\n\n    /**\n     * The node stream that discovers the nodes to watch.\n     * @type {NodeStream}\n     */\n    this._nodeStream = new NodeStream(nodes)\n      .on('error', err => this.emit('error', err));\n\n    /**\n     * The stream that starts monitoring the nodes to watch.\n     * @type {SubscribeStream}\n     */\n    this._subscribeStream = new SubscribeStream()\n      .on('error', err => this.emit('error', err));\n\n    this._nodeStream.pipe(this._subscribeStream);\n\n    this._subscribeStream.on('finish', () => this.emit('ready'));\n    this._subscribeStream.on('change', event => this.emit('change', event));\n  }\n\n  /**\n   * Ends monitoring nodes.\n   */\n  close() {\n    Session.close(this._subscribeStream.session)\n      .catch(err => this.emit('error', err));\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/server/Watcher.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "class",
    "name": "SubscribeStream",
    "memberof": "src/lib/server/Watcher.js",
    "static": true,
    "longname": "src/lib/server/Watcher.js~SubscribeStream",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/server/Watcher.js",
    "importStyle": "{SubscribeStream}",
    "description": "A stream that monitors changes in the read nodes.",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "src/lib/server/Stream.js~Stream"
    ]
  },
  {
    "__docId__": 151,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/server/Watcher.js~SubscribeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Watcher.js~SubscribeStream#constructor",
    "access": null,
    "description": "Creates a new SubscribeStream.",
    "lineNumber": 20,
    "params": []
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "_trackChanges",
    "memberof": "src/lib/server/Watcher.js~SubscribeStream",
    "static": false,
    "longname": "src/lib/server/Watcher.js~SubscribeStream#_trackChanges",
    "access": null,
    "description": "Set to true once all nodes are monitored.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "createSubscription",
    "memberof": "src/lib/server/Watcher.js~SubscribeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Watcher.js~SubscribeStream#createSubscription",
    "access": null,
    "description": "Creates the server subscription to monitor nodes with.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@emit",
        "tagValue": "{node-opcua~ClientSubscription} Emits a `subscription-started` event once the\nsubscription started."
      }
    ],
    "params": []
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "subscription",
    "memberof": "src/lib/server/Watcher.js~SubscribeStream",
    "static": false,
    "longname": "src/lib/server/Watcher.js~SubscribeStream#subscription",
    "access": null,
    "description": "The {@link node-opcua~ClientSubscription} to use to monitor nodes.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "node-opcua~ClientSubscription"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "monitorNode",
    "memberof": "src/lib/server/Watcher.js~SubscribeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Watcher.js~SubscribeStream#monitorNode",
    "access": null,
    "description": "Starts monitoring of the node with the given {@link node-opcua~ReferenceDescription}.",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "node-opcua~ReferenceDescription"
        ],
        "spread": false,
        "optional": false,
        "name": "referenceDescription",
        "description": "Reference description of the node\nto monitor."
      },
      {
        "nullable": null,
        "types": [
          "function(err: Error?)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured while trying to\nmonitor the given node."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "_transform",
    "memberof": "src/lib/server/Watcher.js~SubscribeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Watcher.js~SubscribeStream#_transform",
    "access": null,
    "description": "Buffers all read node descriptions until the subscription started, then calls\n{@link SubscribeStream#monitorNode} with them.",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "node-opcua~ReferenceDescription"
        ],
        "spread": false,
        "optional": false,
        "name": "desc",
        "description": "Reference description of the node to transform."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured while trying to\nmonitor the given node."
      }
    ]
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "_flush",
    "memberof": "src/lib/server/Watcher.js~SubscribeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Watcher.js~SubscribeStream#_flush",
    "access": null,
    "description": "Overriding this method prevents closing the session.",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called immediately."
      }
    ]
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "_trackChanges",
    "memberof": "src/lib/server/Watcher.js~SubscribeStream",
    "static": false,
    "longname": "src/lib/server/Watcher.js~SubscribeStream#_trackChanges",
    "access": null,
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "class",
    "name": "Watcher",
    "memberof": "src/lib/server/Watcher.js",
    "static": true,
    "longname": "src/lib/server/Watcher.js~Watcher",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/server/Watcher.js",
    "importStyle": "Watcher",
    "description": "Watches the given nodes for value changes.",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@emit",
        "tagValue": "{ReadStream.ReadResult} Emits `change` events when a watched node changes."
      }
    ],
    "interface": false,
    "extends": [
      "events~Emitter"
    ]
  },
  {
    "__docId__": 160,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/server/Watcher.js~Watcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Watcher.js~Watcher#constructor",
    "access": null,
    "description": "Creates a new Watcher with the given nodes.",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "NodeId[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": "The nodes to watch (recursively)."
      }
    ]
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "_nodeStream",
    "memberof": "src/lib/server/Watcher.js~Watcher",
    "static": false,
    "longname": "src/lib/server/Watcher.js~Watcher#_nodeStream",
    "access": null,
    "description": "The node stream that discovers the nodes to watch.",
    "lineNumber": 155,
    "type": {
      "nullable": null,
      "types": [
        "NodeStream"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "_subscribeStream",
    "memberof": "src/lib/server/Watcher.js~Watcher",
    "static": false,
    "longname": "src/lib/server/Watcher.js~Watcher#_subscribeStream",
    "access": null,
    "description": "The stream that starts monitoring the nodes to watch.",
    "lineNumber": 162,
    "type": {
      "nullable": null,
      "types": [
        "SubscribeStream"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "close",
    "memberof": "src/lib/server/Watcher.js~Watcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Watcher.js~Watcher#close",
    "access": null,
    "description": "Ends monitoring nodes.",
    "lineNumber": 174,
    "params": []
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "src/lib/server/WriteStream.js",
    "content": "import Stream from './Stream';\n\n/**\n * A stream that writes all read {@link AtviseFile}s to atvise server.\n */\nexport default class WriteStream extends Stream {\n\n  /**\n   * Writes a file to atvise server.\n   * @param {AtviseFile} file The file to write.\n   * @param {function(err: ?Error, file: ?AtviseFile)} callback Called with the error that occurred\n   * or the successfully written file.\n   */\n  writeFile(file, callback) {\n    try {\n      this.session.writeSingleNode(file.nodeId.toString(), {\n        dataType: file.dataType,\n        arrayType: file.arrayType,\n        value: file.value,\n      }, err => {\n        if (err) {\n          callback(new Error(`Error writing node ${file.nodeId.toString()}: ${err.message}`));\n        } else {\n          callback(null, file);\n        }\n      });\n    } catch (e) {\n      callback(new Error(`Error writing node ${file.nodeId.toString()}: ${e.message}`));\n    }\n  }\n\n  /**\n   * Calls {@link WriteStream#writeFile} once the session is open.\n   * @param {AtviseFile} file The file to write.\n   * @param {String} enc The encoding used.\n   * @param {function(err: ?Error, file: ?AtviseFile)} callback Called with the error that occurred\n   * or the successfully written file.\n   * @listens {Session} Listens to the `session-open`-event if the session is not open yet.\n   */\n  _transform(file, enc, callback) {\n    if (this.session) {\n      this.writeFile(file, callback);\n    } else {\n      this.once('session-open', () => this.writeFile(file, callback));\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/server/WriteStream.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "class",
    "name": "WriteStream",
    "memberof": "src/lib/server/WriteStream.js",
    "static": true,
    "longname": "src/lib/server/WriteStream.js~WriteStream",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/server/WriteStream.js",
    "importStyle": "WriteStream",
    "description": "A stream that writes all read {@link AtviseFile}s to atvise server.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/lib/server/Stream.js~Stream"
    ]
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "writeFile",
    "memberof": "src/lib/server/WriteStream.js~WriteStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/WriteStream.js~WriteStream#writeFile",
    "access": null,
    "description": "Writes a file to atvise server.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to write."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, file: ?AtviseFile)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occurred\nor the successfully written file."
      }
    ]
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "_transform",
    "memberof": "src/lib/server/WriteStream.js~WriteStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/WriteStream.js~WriteStream#_transform",
    "access": null,
    "description": "Calls {@link WriteStream#writeFile} once the session is open.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to write."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, file: ?AtviseFile)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occurred\nor the successfully written file."
      }
    ],
    "listens": [
      {
        "types": [
          "Session"
        ],
        "description": "Listens to the `session-open`-event if the session is not open yet."
      }
    ]
  },
  {
    "__docId__": 168,
    "kind": "file",
    "name": "src/lib/transform/PartialTransformer.js",
    "content": "import Transformer from './Transformer';\n\n/**\n * A transformer that transforms only some of the files read.\n * @abstract\n */\nexport default class PartialTransformer extends Transformer {\n\n  /**\n   * `true` if `file` should be transformed.\n   * @param {AtviseFile} file The file to transform or not.\n   * @abstract\n   */\n  shouldBeTransformed(file) { // eslint-disable-line no-unused-vars\n    throw new Error('PartialTransformer#shouldBeTransformed must be implemented by all subclasses');\n  }\n\n  /**\n   * Transforms a file if {@link PartialTransformer#shouldBeTransformed} returns `true`.\n   * @param {AtviseFile} file The file to transform.\n   * @param {String} enc The encoding used.\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Called with the error that occured\n   * while transforming or (optionally) the transformed file.\n   */\n  _transform(file, enc, callback) {\n    if (this.shouldBeTransformed(file)) {\n      super._transform(file, enc, callback);\n    } else {\n      callback(null, file);\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/transform/PartialTransformer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 169,
    "kind": "class",
    "name": "PartialTransformer",
    "memberof": "src/lib/transform/PartialTransformer.js",
    "static": true,
    "longname": "src/lib/transform/PartialTransformer.js~PartialTransformer",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/transform/PartialTransformer.js",
    "importStyle": "PartialTransformer",
    "description": "A transformer that transforms only some of the files read.",
    "lineNumber": 7,
    "abstract": true,
    "interface": false,
    "extends": [
      "src/lib/transform/Transformer.js~Transformer"
    ]
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "shouldBeTransformed",
    "memberof": "src/lib/transform/PartialTransformer.js~PartialTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/PartialTransformer.js~PartialTransformer#shouldBeTransformed",
    "access": null,
    "description": "`true` if `file` should be transformed.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to transform or not."
      }
    ],
    "abstract": true
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "_transform",
    "memberof": "src/lib/transform/PartialTransformer.js~PartialTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/PartialTransformer.js~PartialTransformer#_transform",
    "access": null,
    "description": "Transforms a file if {@link PartialTransformer#shouldBeTransformed} returns `true`.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to transform."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: ?AtviseFile)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured\nwhile transforming or (optionally) the transformed file."
      }
    ]
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/lib/transform/SplittingTransformer.js",
    "content": "import { readdir } from 'fs';\nimport { extname, basename, join } from 'path';\nimport Logger from 'gulplog';\nimport PartialTransformer from './PartialTransformer';\nimport AtviseFile from '../server/AtviseFile';\n\n/**\n * Determines which files are needed to create a combined file and stores these files as long as\n * some of them are missing.\n */\nexport class CombineFilesCache {\n\n  /**\n   * Creates a new DisplayCache.\n   */\n  constructor() {\n    /**\n     * The files caches for the given path.\n     * @type {Map<String, vinyl~File>}\n     */\n    this._files = {};\n\n    /**\n     * The extensions of the files required.\n     * @type {String[]}\n     */\n    this._required = {};\n  }\n\n  /**\n   * Returns the extensions of the missing files for the given `dirname`.\n   * @param {String} dirname The cache key to look for.\n   * @return {String[]} Extensions of the missing files.\n   */\n  missingExtensions(dirname) {\n    const required = this._required[dirname];\n    const files = this._files[dirname];\n\n    return required.filter(ext => files[ext] === undefined);\n  }\n\n  /**\n   * Checks if, when `file` is added, all required files are cached.\n   * @param {vinyl~File} file The file to add before checking.\n   * @param {function(err: ?Error, files: ?Map<String, vinyl~File>)} callback Called with the error\n   * that occured while checking or all files related to `file` if all required files are already\n   * cached.\n   */\n  gotAllFiles(file, callback) {\n    const dirname = file.dirname;\n\n    if (!this._required[dirname]) {\n      readdir(dirname, (err, files) => {\n        if (err) {\n          callback(err);\n        } else {\n          this._files[dirname] = {};\n          this._required[dirname] = files\n            .filter(name => name[0] !== '.')\n            .map(name => extname(name));\n\n          this.gotAllFiles(file, callback);\n        }\n      });\n    } else {\n      this._files[dirname][file.extname] = file;\n\n      if (this.missingExtensions(dirname).length === 0) {\n        const files = this._files[dirname];\n        callback(null, files);\n\n        delete this._files[dirname];\n        delete this._required[dirname];\n      } else {\n        callback(null);\n      }\n    }\n  }\n\n}\n\n/**\n * A transformer that splits files into multiple others.\n * @abstract\n */\nexport default class SplittingTransformer extends PartialTransformer {\n\n  /**\n   * Creates a new SplittingTransformer.\n   * @param {Object} options The options to apply.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * The cache used when collecting files to combine.\n     * @type {CombineFilesCache}\n     */\n    this._combineFilesCache = new CombineFilesCache();\n  }\n\n  /**\n   * Creates a combined file from the cached split files.\n   * @param {Map<String, AtviseFile>} files The cached files stored against their extensions.\n   * @param {AtviseFile} lastFile The last file collected. This is the only file guaranteed to be\n   * set, therefore us if for error messages, etc.\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Should be called with any errors\n   * that occur while combining the files, or optionally the resulting file.\n   * @abstract\n   */\n  createCombinedFile(files, lastFile, callback) { // eslint-disable-line no-unused-vars\n    throw new Error(\n      'SplittingTransformer#createCombinedFile must be implemented by all subclasses'\n    );\n  }\n\n  /**\n   * Calls {@link SplittingTransformer#createCombinedFile} as soon as all dependencies are\n   * required files are cached.\n   * @param {AtviseFile} file The read file.\n   * @param {String} enc The encoding used.\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Called with the error occured while\n   * caching files or creating the combined file or optionally the resulting combined file.\n   */\n  transformFromFilesystem(file, enc, callback) {\n    this._combineFilesCache.gotAllFiles(file, (err, allFiles) => {\n      if (err) {\n        callback(err);\n      } else if (allFiles) {\n        this.createCombinedFile(allFiles, file, callback);\n      } else {\n        callback(null);\n      }\n    });\n  }\n\n  /**\n   * Splits a {@link vinyl~File}: The resulting is a clone of the input file, with a different path.\n   * @param {vinyl~File} file The file to split.\n   * @param {?String} newExtension The extension the resulting file gets.\n   * @return {vinyl~File} The resulting file.\n   * @example\n   * // Assuming that `original` is a File with the path \"path/to/file.type.xml\":\n   * const result = SplittingTransformer.splitFile(original, '.another');\n   * // `result` is a new File, with the contents of `original` and the path\n   * // \"path/to/file.type/file.another\"\n   */\n  static splitFile(file, newExtension) {\n    const newFile = file.clone();\n\n    newFile.basename = `${newFile.stem}/${newFile.stem}`;\n    newFile.extname = newExtension;\n\n    return newFile;\n  }\n\n  /**\n   * Combines split files to a single one.\n   * @param {vinyl~File[]} files The files to combine.\n   * @param {String} newExtension The extension the resulting file gets.\n   * @return {vinyl~File} The resulting file.\n   */\n  static combineFiles(files, newExtension) {\n    const newFile = files[0].clone();\n\n    newFile.path = `${newFile.dirname}${newExtension}`;\n\n    return newFile;\n  }\n\n  /**\n   * If there are any missing files this method loads these files and calls\n   * {SplittingTransformer#createCombinedFile} with them.\n   * @param {function(err: ?Error)} callback Called with the error that occurred while loading\n   * missing files.\n   */\n  _flush(callback) {\n    const missingDirnames = Object.keys(this._combineFilesCache._files);\n\n    if (missingDirnames.length > 0) {\n      Promise.all(\n        missingDirnames.map(dirname => {\n          const files = this._combineFilesCache._files[dirname];\n          const firstFile = files[Object.keys(files)[0]];\n\n          const missing = this._combineFilesCache.missingExtensions(dirname);\n          const stem = basename(dirname, extname(dirname));\n          const paths = missing.map(ext => join(dirname, '/', `${stem}${ext}`));\n\n          delete this._combineFilesCache._files[dirname];\n          delete this._combineFilesCache._required[dirname];\n\n          Logger.debug('Loading', paths.length, 'required file(s)');\n\n          return Promise.all(\n            paths.map((path, i) => AtviseFile.read({\n              cwd: firstFile.cwd,\n              base: firstFile.base,\n              path,\n            })\n              .then(file => {\n                files[missing[i]] = file;\n              })\n            )\n          )\n            .then(() => new Promise((resolve, reject) => {\n              this.createCombinedFile(files, firstFile, (err, file) => {\n                if (err) {\n                  reject(err);\n                } else {\n                  this.push(file);\n\n                  resolve(file);\n                }\n              });\n            }));\n        })\n      )\n        .then(files => Logger.debug('Created', files.length, 'additional file(s)'))\n        .then(() => callback())\n        .catch(err => callback(err));\n    } else {\n      callback();\n    }\n  }\n\n}\n\n",
    "static": true,
    "longname": "src/lib/transform/SplittingTransformer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "class",
    "name": "CombineFilesCache",
    "memberof": "src/lib/transform/SplittingTransformer.js",
    "static": true,
    "longname": "src/lib/transform/SplittingTransformer.js~CombineFilesCache",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/transform/SplittingTransformer.js",
    "importStyle": "{CombineFilesCache}",
    "description": "Determines which files are needed to create a combined file and stores these files as long as\nsome of them are missing.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 174,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/transform/SplittingTransformer.js~CombineFilesCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~CombineFilesCache#constructor",
    "access": null,
    "description": "Creates a new DisplayCache.",
    "lineNumber": 16,
    "params": []
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "_files",
    "memberof": "src/lib/transform/SplittingTransformer.js~CombineFilesCache",
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~CombineFilesCache#_files",
    "access": null,
    "description": "The files caches for the given path.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, vinyl~File>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "_required",
    "memberof": "src/lib/transform/SplittingTransformer.js~CombineFilesCache",
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~CombineFilesCache#_required",
    "access": null,
    "description": "The extensions of the files required.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "missingExtensions",
    "memberof": "src/lib/transform/SplittingTransformer.js~CombineFilesCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~CombineFilesCache#missingExtensions",
    "access": null,
    "description": "Returns the extensions of the missing files for the given `dirname`.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dirname",
        "description": "The cache key to look for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "Extensions of the missing files."
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "gotAllFiles",
    "memberof": "src/lib/transform/SplittingTransformer.js~CombineFilesCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~CombineFilesCache#gotAllFiles",
    "access": null,
    "description": "Checks if, when `file` is added, all required files are cached.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "vinyl~File"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to add before checking."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, files: ?Map<String, vinyl~File>)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error\nthat occured while checking or all files related to `file` if all required files are already\ncached."
      }
    ]
  },
  {
    "__docId__": 179,
    "kind": "class",
    "name": "SplittingTransformer",
    "memberof": "src/lib/transform/SplittingTransformer.js",
    "static": true,
    "longname": "src/lib/transform/SplittingTransformer.js~SplittingTransformer",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/transform/SplittingTransformer.js",
    "importStyle": "SplittingTransformer",
    "description": "A transformer that splits files into multiple others.",
    "lineNumber": 86,
    "abstract": true,
    "interface": false,
    "extends": [
      "src/lib/transform/PartialTransformer.js~PartialTransformer"
    ]
  },
  {
    "__docId__": 180,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/transform/SplittingTransformer.js~SplittingTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~SplittingTransformer#constructor",
    "access": null,
    "description": "Creates a new SplittingTransformer.",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to apply."
      }
    ]
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "_combineFilesCache",
    "memberof": "src/lib/transform/SplittingTransformer.js~SplittingTransformer",
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~SplittingTransformer#_combineFilesCache",
    "access": null,
    "description": "The cache used when collecting files to combine.",
    "lineNumber": 99,
    "type": {
      "nullable": null,
      "types": [
        "CombineFilesCache"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "createCombinedFile",
    "memberof": "src/lib/transform/SplittingTransformer.js~SplittingTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~SplittingTransformer#createCombinedFile",
    "access": null,
    "description": "Creates a combined file from the cached split files.",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map<String, AtviseFile>"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "The cached files stored against their extensions."
      },
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "lastFile",
        "description": "The last file collected. This is the only file guaranteed to be\nset, therefore us if for error messages, etc."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: ?AtviseFile)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Should be called with any errors\nthat occur while combining the files, or optionally the resulting file."
      }
    ],
    "abstract": true
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "transformFromFilesystem",
    "memberof": "src/lib/transform/SplittingTransformer.js~SplittingTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~SplittingTransformer#transformFromFilesystem",
    "access": null,
    "description": "Calls {@link SplittingTransformer#createCombinedFile} as soon as all dependencies are\nrequired files are cached.",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The read file."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: ?AtviseFile)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error occured while\ncaching files or creating the combined file or optionally the resulting combined file."
      }
    ]
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "splitFile",
    "memberof": "src/lib/transform/SplittingTransformer.js~SplittingTransformer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/transform/SplittingTransformer.js~SplittingTransformer.splitFile",
    "access": null,
    "description": "Splits a {@link vinyl~File}: The resulting is a clone of the input file, with a different path.",
    "examples": [
      "// Assuming that `original` is a File with the path \"path/to/file.type.xml\":\nconst result = SplittingTransformer.splitFile(original, '.another');\n// `result` is a new File, with the contents of `original` and the path\n// \"path/to/file.type/file.another\""
    ],
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "vinyl~File"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to split."
      },
      {
        "nullable": true,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "newExtension",
        "description": "The extension the resulting file gets."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "vinyl~File"
      ],
      "spread": false,
      "description": "The resulting file."
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "combineFiles",
    "memberof": "src/lib/transform/SplittingTransformer.js~SplittingTransformer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/transform/SplittingTransformer.js~SplittingTransformer.combineFiles",
    "access": null,
    "description": "Combines split files to a single one.",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "vinyl~File[]"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "The files to combine."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "newExtension",
        "description": "The extension the resulting file gets."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "vinyl~File"
      ],
      "spread": false,
      "description": "The resulting file."
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "_flush",
    "memberof": "src/lib/transform/SplittingTransformer.js~SplittingTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~SplittingTransformer#_flush",
    "access": null,
    "description": "If there are any missing files this method loads these files and calls\n{SplittingTransformer#createCombinedFile} with them.",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(err: ?Error)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occurred while loading\nmissing files."
      }
    ]
  },
  {
    "__docId__": 187,
    "kind": "file",
    "name": "src/lib/transform/Transformer.js",
    "content": "import { inspect } from 'util';\nimport { ctor as throughStreamClass } from 'through2';\n\n/**\n * The directions a transformer can be run in.\n * @type {{FromDB: String, FromFilesystem: String}}\n */\nexport const TransformDirection = {\n  FromDB: 'FromDB',\n  FromFilesystem: 'FromFilesystem',\n};\n\nfunction isValidDirection(direction) {\n  return [\n    TransformDirection.FromDB,\n    TransformDirection.FromFilesystem,\n  ].includes(direction);\n}\n\n/**\n * A special kind of an object transform stream: It does apply different transformations based on\n * it's direction.\n * @abstract\n */\nexport default class Transformer extends throughStreamClass({ objectMode: true }) {\n\n  /**\n   * Creates a new Transformer with the specified options.\n   * @param {Object} [options] The options to use.\n   * @param {TransformDirection} [options.direction] The direction to use.\n   * @throws {Error} Throws an error if the given direction is invalid.\n   */\n  constructor(options = {}) {\n    super();\n\n    /**\n     * The options the transformer was created with. Used for printing description.\n     * @type {Object}\n     */\n    this._options = options;\n\n    if (options.direction) {\n      if (isValidDirection(options.direction)) {\n        /**\n         * The transformer's direction\n         * @type {TransformerDirection}\n         */\n        this.direction = options.direction;\n      } else {\n        throw new Error('Invalid direction');\n      }\n    }\n  }\n\n  /**\n   * Returns the Transformer with the given direction\n   * @param {TransformDirection} direction The direction to use.\n   * @return {Transformer} Itself, to be chainable.\n   * @throws {Error} Throws an error if the given direction is invalid.\n   */\n  withDirection(direction) {\n    if (!isValidDirection(direction)) {\n      throw new Error('Invalid direction');\n    }\n\n    this.direction = direction;\n    return this;\n  }\n\n  /**\n   * Calls {@link Transformer#transformFromDB} or {@link Transformer#transformFromFilesystem}\n   * based on the transformer's direction.\n   * @param {Object} chunk The chunk to transform.\n   * @param {String} enc The encoding used.\n   * @param {function(err: ?Error, obj: ?Object)} callback Called with the error that occured while\n   * transforming or (optionally) the transformed object.\n   * @throws {Error} Throws an error if the transformer has no valid direction.\n   */\n  _transform(chunk, enc, callback) {\n    if (!this.direction) {\n      callback(new Error('Transformer has no direction'));\n    } else if (this.direction === TransformDirection.FromDB) {\n      this.transformFromDB(chunk, enc, callback);\n    } else {\n      this.transformFromFilesystem(chunk, enc, callback);\n    }\n  }\n\n  /**\n   * **Must be overridden by all subclasses:** Transforms the given chunk when using\n   * {@link TransformDirection.FromDB}.\n   * @param {Object} chunk The chunk to transform.\n   * @param {String} enc The encoding used.\n   * @param {function(err: ?Error, obj: ?Object)} callback Called with the error that occured while\n   * transforming or (optionally) the transformed object.\n   */\n  transformFromDB(chunk, enc, callback) {\n    callback(new Error('Transformer#transformFromDB must be overridden by all subclasses'));\n  }\n\n  /**\n   * **Must be overridden by all subclasses:** Transforms the given chunk when using\n   * {@link TransformDirection.FromFilesystem}.\n   * @param {Object} chunk The chunk to transform.\n   * @param {String} enc The encoding used.\n   * @param {function(err: ?Error, obj: ?Object)} callback Called with the error that occured while\n   * transforming or (optionally) the transformed object.\n   */\n  transformFromFilesystem(chunk, enc, callback) {\n    callback(new Error('Transformer#transformFromFilesystem must be overridden by all subclasses'));\n  }\n\n  /**\n   * Creates a stream with all transformers passed, with the given direction. Transformers are\n   * reversed if using {@link TransformDirection.FromFilesystem}.\n   * @param {Stream} stream The stream to apply the transformers to.\n   * @param {Transformer[]} transformers The transformers to apply.\n   * @param {TransformDirection} direction The direction to use.\n   * @return {Transformer} The last transformer passed, piped to the previous.\n   */\n  static applyTransformers(stream, transformers, direction) {\n    if (!isValidDirection(direction)) {\n      throw new Error('Direction is invalid');\n    }\n\n    if (transformers.length === 0) {\n      return stream;\n    }\n\n    return (direction === TransformDirection.FromDB ? transformers : transformers.reverse())\n      .reduce((prev, curr) => prev.pipe(curr.withDirection(direction)), stream);\n  }\n\n  /**\n   * Prints the transformer.\n   * @param {?Number} depth The depth to inspect.\n   * @param {Object} options See https://nodejs.org/api/util.html#util_util_inspect_object_options\n   * for details\n   * @return {String} A string representation of the transformer.\n   */\n  inspect(depth, options) {\n    const newOptions = options;\n    newOptions.depth = options.depth === null ? null : options.depth - 1;\n\n    if (depth > 0) {\n      return options.stylize(`[${this.constructor.name}]`, 'special');\n    }\n\n    return `${options.stylize(this.constructor.name, 'special')}${inspect(this._options, newOptions)\n      .replace(/^{/, '<').replace(/}$/, '>')\n      .replace(/\\n/, `\\n${' '.repeat(this.constructor.name.length)}`)\n    }`;\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/transform/Transformer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "variable",
    "name": "TransformDirection",
    "memberof": "src/lib/transform/Transformer.js",
    "static": true,
    "longname": "src/lib/transform/Transformer.js~TransformDirection",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/transform/Transformer.js",
    "importStyle": "{TransformDirection}",
    "description": "The directions a transformer can be run in.",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "{FromDB: String, FromFilesystem: String}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 189,
    "kind": "function",
    "name": "isValidDirection",
    "memberof": "src/lib/transform/Transformer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/transform/Transformer.js~isValidDirection",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/transform/Transformer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "direction",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "class",
    "name": "Transformer",
    "memberof": "src/lib/transform/Transformer.js",
    "static": true,
    "longname": "src/lib/transform/Transformer.js~Transformer",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/transform/Transformer.js",
    "importStyle": "Transformer",
    "description": "A special kind of an object transform stream: It does apply different transformations based on\nit's direction.",
    "lineNumber": 25,
    "abstract": true,
    "interface": false,
    "expressionExtends": "throughStreamClass({ objectMode: true })"
  },
  {
    "__docId__": 191,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#constructor",
    "access": null,
    "description": "Creates a new Transformer with the specified options.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options to use."
      },
      {
        "nullable": null,
        "types": [
          "TransformDirection"
        ],
        "spread": false,
        "optional": true,
        "name": "options.direction",
        "description": "The direction to use."
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Throws an error if the given direction is invalid."
      }
    ]
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "_options",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#_options",
    "access": null,
    "description": "The options the transformer was created with. Used for printing description.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "direction",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#direction",
    "access": null,
    "description": "The transformer's direction",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "TransformerDirection"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "withDirection",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#withDirection",
    "access": null,
    "description": "Returns the Transformer with the given direction",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransformDirection"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "The direction to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transformer"
      ],
      "spread": false,
      "description": "Itself, to be chainable."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Throws an error if the given direction is invalid."
      }
    ]
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "direction",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#direction",
    "access": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "_transform",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#_transform",
    "access": null,
    "description": "Calls {@link Transformer#transformFromDB} or {@link Transformer#transformFromFilesystem}\nbased on the transformer's direction.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "The chunk to transform."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, obj: ?Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured while\ntransforming or (optionally) the transformed object."
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Throws an error if the transformer has no valid direction."
      }
    ]
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "transformFromDB",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#transformFromDB",
    "access": null,
    "description": "**Must be overridden by all subclasses:** Transforms the given chunk when using\n{@link TransformDirection.FromDB}.",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "The chunk to transform."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, obj: ?Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured while\ntransforming or (optionally) the transformed object."
      }
    ]
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "transformFromFilesystem",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#transformFromFilesystem",
    "access": null,
    "description": "**Must be overridden by all subclasses:** Transforms the given chunk when using\n{@link TransformDirection.FromFilesystem}.",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "The chunk to transform."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, obj: ?Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured while\ntransforming or (optionally) the transformed object."
      }
    ]
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "applyTransformers",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/transform/Transformer.js~Transformer.applyTransformers",
    "access": null,
    "description": "Creates a stream with all transformers passed, with the given direction. Transformers are\nreversed if using {@link TransformDirection.FromFilesystem}.",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "The stream to apply the transformers to."
      },
      {
        "nullable": null,
        "types": [
          "Transformer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "transformers",
        "description": "The transformers to apply."
      },
      {
        "nullable": null,
        "types": [
          "TransformDirection"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "The direction to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transformer"
      ],
      "spread": false,
      "description": "The last transformer passed, piped to the previous."
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "inspect",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#inspect",
    "access": null,
    "description": "Prints the transformer.",
    "lineNumber": 141,
    "params": [
      {
        "nullable": true,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "depth",
        "description": "The depth to inspect."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "See https://nodejs.org/api/util.html#util_util_inspect_object_options\nfor details"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A string representation of the transformer."
    }
  },
  {
    "__docId__": 201,
    "kind": "file",
    "name": "src/lib/transform/XMLTransformer.js",
    "content": "import { parseString as parseXML, Builder as XMLBuilder } from 'xml2js';\nimport { TransformDirection } from './Transformer';\nimport SplittingTransformer from './SplittingTransformer';\n\nconst START_CDATA = 'STARTCDATA';\nconst END_CDATA = 'ENDCDATA';\n\n/**\n * A transformer used to transform XML documents.\n */\nexport default class XMLTransformer extends SplittingTransformer {\n\n  /**\n   * Creates a new XMLTransformer based on some options.\n   * @param {Object} options The options to use.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * The builder to use with direction {@link TransformDirection.FromDB}.\n     * @type {xml2js~Builder}\n     */\n    this._fromDBBuilder = new XMLBuilder({ cdata: false });\n\n    /**\n     * The builder to use with direction {@link TransformDirection.FromFilesystem}.\n     * @type {xml2js~Builder}\n     */\n    this._fromFilesystemBuilder = new XMLBuilder({\n      renderOpts: {\n        pretty: true,\n        indent: ' ',\n        newline: '\\r\\n',\n      },\n      xmldec: {\n        version: '1.0',\n        encoding: 'UTF-8',\n        standalone: false,\n      },\n      cdata: true,\n    });\n  }\n\n  /**\n   * Returns the XML builder instance to use base on the current {@link Transformer#direction}.\n   * @type {xml2js~Builder}\n   */\n  get builder() {\n    return this.direction === TransformDirection.FromDB ?\n      this._fromDBBuilder :\n      this._fromFilesystemBuilder;\n  }\n\n  /**\n   * Parses XML in a file's contents.\n   * @param {AtviseFile} file The file to process.\n   * @param {function(err: ?Error, result: ?Object)} callback Called with the parsed document or the\n   * parse error that occurred.\n   */\n  decodeContents(file, callback) {\n    parseXML(file.contents, callback);\n  }\n\n  /**\n   * Builds an XML string from an object.\n   * @param {Object} object The object to encode.\n   * @param {function(err: ?Error, result: ?String)} callback Called with the resulting string or\n   * the error that occurred while building.\n   */\n  encodeContents(object, callback) {\n    try {\n      callback(null,\n        this.builder.buildObject(object)\n          .replace(new RegExp(`(<!\\\\[CDATA\\\\[)?${START_CDATA}`), '<![CDATA[')\n          .replace(new RegExp(`${END_CDATA}(\\\\]\\\\]>)?`), ']]>')\n      );\n    } catch (e) {\n      callback(e);\n    }\n  }\n\n  /**\n   * Helper function: Returns `true` if the given tag exists and is not empty.\n   * @param {Object} tag A tag in a parsed xml document.\n   * @return {Boolean} `true` if the given tag exists and is not empty.\n   */\n  tagNotEmpty(tag) {\n    return Boolean(tag && tag.length > 0);\n  }\n\n  /**\n   * Forces `string`, when assigned as textContent to a node, to be wrapped in a CDATA-section.\n   * @param {String} string The string to force a CDATA-section for.\n   * @return {String} The string to assign as textContent to a node.\n   */\n  static forceCData(string) {\n    return `${START_CDATA}${string}${END_CDATA}`;\n  }\n\n}\n",
    "static": true,
    "longname": "src/lib/transform/XMLTransformer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 202,
    "kind": "variable",
    "name": "START_CDATA",
    "memberof": "src/lib/transform/XMLTransformer.js",
    "static": true,
    "longname": "src/lib/transform/XMLTransformer.js~START_CDATA",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/transform/XMLTransformer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "variable",
    "name": "END_CDATA",
    "memberof": "src/lib/transform/XMLTransformer.js",
    "static": true,
    "longname": "src/lib/transform/XMLTransformer.js~END_CDATA",
    "access": null,
    "export": false,
    "importPath": "atscm/src/lib/transform/XMLTransformer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "class",
    "name": "XMLTransformer",
    "memberof": "src/lib/transform/XMLTransformer.js",
    "static": true,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "access": null,
    "export": true,
    "importPath": "atscm/src/lib/transform/XMLTransformer.js",
    "importStyle": "XMLTransformer",
    "description": "A transformer used to transform XML documents.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/lib/transform/SplittingTransformer.js~SplittingTransformer"
    ]
  },
  {
    "__docId__": 205,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer#constructor",
    "access": null,
    "description": "Creates a new XMLTransformer based on some options.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to use."
      }
    ]
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "_fromDBBuilder",
    "memberof": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "static": false,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer#_fromDBBuilder",
    "access": null,
    "description": "The builder to use with direction {@link TransformDirection.FromDB}.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "xml2js~Builder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "_fromFilesystemBuilder",
    "memberof": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "static": false,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer#_fromFilesystemBuilder",
    "access": null,
    "description": "The builder to use with direction {@link TransformDirection.FromFilesystem}.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "xml2js~Builder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 208,
    "kind": "get",
    "name": "builder",
    "memberof": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer#builder",
    "access": null,
    "description": "Returns the XML builder instance to use base on the current {@link Transformer#direction}.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "xml2js~Builder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "decodeContents",
    "memberof": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer#decodeContents",
    "access": null,
    "description": "Parses XML in a file's contents.",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to process."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, result: ?Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the parsed document or the\nparse error that occurred."
      }
    ]
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "encodeContents",
    "memberof": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer#encodeContents",
    "access": null,
    "description": "Builds an XML string from an object.",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object to encode."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, result: ?String)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the resulting string or\nthe error that occurred while building."
      }
    ]
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "tagNotEmpty",
    "memberof": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer#tagNotEmpty",
    "access": null,
    "description": "Helper function: Returns `true` if the given tag exists and is not empty.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tag",
        "description": "A tag in a parsed xml document."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` if the given tag exists and is not empty."
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "forceCData",
    "memberof": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer.forceCData",
    "access": null,
    "description": "Forces `string`, when assigned as textContent to a node, to be wrapped in a CDATA-section.",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": "The string to force a CDATA-section for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The string to assign as textContent to a node."
    }
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "src/tasks/pull.js",
    "content": "import ProjectConfig from '../config/ProjectConfig';\nimport NodeStream from '../lib/server/NodeStream';\nimport ReadStream from '../lib/server/ReadStream';\nimport PullStream from '../lib/gulp/PullStream';\n\n/**\n * Pulls all nodes from atvise server.\n */\nexport default function pull() {\n  return new PullStream(\n    (new NodeStream(ProjectConfig.nodes))\n      .pipe(new ReadStream())\n  );\n}\n\npull.description = 'Pull all nodes from atvise server';\n",
    "static": true,
    "longname": "src/tasks/pull.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "pull",
    "memberof": "src/tasks/pull.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tasks/pull.js~pull",
    "access": null,
    "export": true,
    "importPath": "atscm/src/tasks/pull.js",
    "importStyle": "pull",
    "description": "Pulls all nodes from atvise server.",
    "lineNumber": 9,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "file",
    "name": "src/tasks/push.js",
    "content": "import { src } from 'gulp';\nimport PushStream from '../lib/gulp/PushStream';\n\n/**\n * Pushes {@link AtviseFile}s to atvise server.\n */\nexport default function push() {\n  return new PushStream(src('./src/**/*.*'));\n}\n\npush.description = 'Push all stored nodes to atvise server';\n",
    "static": true,
    "longname": "src/tasks/push.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "function",
    "name": "push",
    "memberof": "src/tasks/push.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tasks/push.js~push",
    "access": null,
    "export": true,
    "importPath": "atscm/src/tasks/push.js",
    "importStyle": "push",
    "description": "Pushes {@link AtviseFile}s to atvise server.",
    "lineNumber": 7,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "file",
    "name": "src/tasks/watch.js",
    "content": "import { join } from 'path';\nimport { src } from 'gulp';\nimport browserSync from 'browser-sync';\nimport Logger from 'gulplog';\nimport { obj as createStream } from 'through2';\nimport watchForFileChanges from '../lib/gulp/watchForFileChanges';\nimport watchForServerChanges from '../lib/gulp/watchForServerChanges';\nimport PushStream from '../lib/gulp/PushStream';\nimport PullStream from '../lib/gulp/PullStream';\nimport AtviseFile from '../lib/server/AtviseFile';\nimport ProjectConfig from '../config/ProjectConfig';\n\n/**\n * Watches local files and atvise server nodes to trigger pull/push on change.\n */\nexport default function watch() {\n  let fileWatcher;\n  let serverWatcher;\n  const browserSyncInstance = browserSync.create();\n\n  let pulling = false;\n  let pushing = false;\n  let lastPull = 0;\n  let lastPushed = null;\n\n  function initBrowserSync() {\n    return new Promise((resolve) => {\n      let ready = 0;\n\n      function initIfReady() {\n        ready++;\n\n        if (ready === 2) {\n          browserSyncInstance.init({\n            proxy: {\n              target: `${ProjectConfig.host}:${ProjectConfig.port.http}`,\n              ws: true,\n            },\n          }, () => resolve());\n        }\n      }\n\n      fileWatcher.once('ready', () => initIfReady());\n      serverWatcher.once('ready', () => initIfReady());\n    });\n  }\n\n  function rejectOnError(err, resolve, reject) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve();\n    }\n  }\n\n  function startFileWatcher() {\n    return new Promise((resolve, reject) => {\n      fileWatcher = watchForFileChanges((path, root, stat) => {\n        if (!pulling && AtviseFile.normalizeMtime(stat.mtime) > lastPull) {\n          pushing = true;\n          Logger.info(path, 'changed');\n\n          const source = src(join(root, path), { base: root });\n\n          (new PushStream(source))\n            .on('data', file => (lastPushed = file.nodeId.toString()))\n            .on('end', () => {\n              pushing = false;\n              browserSyncInstance.reload();\n              fileWatcher.emit('push');\n            });\n        }\n      })(err => rejectOnError(err, resolve, reject));\n    });\n  }\n\n  function startServerWatcher() {\n    return new Promise((resolve, reject) => {\n      serverWatcher = watchForServerChanges(readResult => {\n        if (!pushing) {\n          if (readResult.nodeId.toString() !== lastPushed) {\n            pulling = true;\n            Logger.info(readResult.nodeId.toString(), 'changed');\n\n            const readStream = createStream();\n            readStream.write(readResult);\n            readStream.end();\n\n            (new PullStream(readStream))\n              .on('end', () => {\n                pulling = false;\n                lastPull = AtviseFile.normalizeMtime(readResult.mtime);\n                browserSyncInstance.reload();\n                fileWatcher.emit('pull');\n              });\n          } else {\n            lastPushed = null;\n          }\n        }\n      })(err => rejectOnError(err, resolve, reject));\n    });\n  }\n\n  const promise = Promise.all([\n    startFileWatcher(),\n    startServerWatcher(),\n  ]);\n\n  initBrowserSync();\n\n  promise.browserSync = browserSyncInstance;\n  promise.fileWatcher = fileWatcher;\n  promise.serverWatcher = serverWatcher;\n\n  return promise;\n}\n\nwatch.description = 'Watch local files and atvise server nodes to trigger pull/push on change';\n",
    "static": true,
    "longname": "src/tasks/watch.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 218,
    "kind": "function",
    "name": "watch",
    "memberof": "src/tasks/watch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tasks/watch.js~watch",
    "access": null,
    "export": true,
    "importPath": "atscm/src/tasks/watch.js",
    "importStyle": "watch",
    "description": "Watches local files and atvise server nodes to trigger pull/push on change.",
    "lineNumber": 16,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "file",
    "name": "src/transform/DisplayTransformer.js",
    "content": "import { Buffer } from 'buffer';\nimport XMLTransformer from '../lib/transform/XMLTransformer';\n\n/**\n * Splits read atvise display XML nodes into their SVG and JavaScript sources,\n * alongside with a .json file containing the display's parameters.\n */\nexport default class DisplayTransformer extends XMLTransformer {\n\n  /**\n   * Returns true for all files containing atvise displays.\n   * @param {AtviseFile} file The file to check.\n   * @return {Boolean} `true` for all atvise display files.\n   */\n  shouldBeTransformed(file) {\n    return file.isDisplay;\n  }\n\n  /**\n   * Splits any read files containing atvise displays into their SVG and JavaScript sources,\n   * alongside with a .json file containing the display's parameters.\n   * @param {AtviseFile} file The display file to split.\n   * @param {String} enc The encoding used.\n   * @param {function(err: Error, file: AtviseFile)} callback Called with the error that occured\n   * while transforming the display, or the file passed through.\n   */\n  transformFromDB(file, enc, callback) {\n    this.decodeContents(file, (err, results) => {\n      if (err) {\n        callback(err);\n      } else if (!results || results.svg === undefined) {\n        callback(new Error('Error parsing display: No `svg` tag'));\n      } else {\n        const xml = results;\n        const document = results.svg;\n\n        const config = {};\n\n        // Extract JavaScript\n        if (this.tagNotEmpty(document.script)) {\n          document.script.forEach(script => {\n            if (script.$ && (script.$.src || script.$['xlink:href'])) {\n              if (!config.dependencies) {\n                config.dependencies = [];\n              }\n\n              config.dependencies.push(script.$.src || script.$['xlink:href']);\n            } else {\n              // TODO: Warn on multiple inline scripts\n\n              const scriptFile = DisplayTransformer.splitFile(file, '.js');\n              const scriptText = (typeof script === 'string') ?\n                script : script._ || '';\n\n              scriptFile.contents = Buffer.from(scriptText);\n              this.push(scriptFile);\n            }\n          });\n\n          delete xml.svg.script;\n        }\n\n        // Extract metadata\n        if (this.tagNotEmpty(document.metadata)) {\n          // TODO: Warn on multiple metadata tags\n\n          const meta = document.metadata[0];\n\n          // - Parameters\n          if (this.tagNotEmpty(meta['atv:parameter'])) {\n            config.parameters = [];\n            meta['atv:parameter'].forEach(param => config.parameters.push(param.$));\n\n            delete xml.svg.metadata[0]['atv:parameter'];\n          }\n        }\n\n        const configFile = DisplayTransformer.splitFile(file, '.json');\n\n        configFile.contents = Buffer.from(JSON.stringify(config, null, '  '));\n        this.push(configFile);\n\n        const svgFile = DisplayTransformer.splitFile(file, '.svg');\n\n        this.encodeContents(xml, (encodeErr, stringValue) => {\n          if (encodeErr) {\n            callback(encodeErr);\n          } else {\n            svgFile.contents = Buffer.from(stringValue);\n            this.push(svgFile);\n\n            callback(null);\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Creates a display from the collected files.\n   * @param {Map<String, vinyl~File>} files The collected files, stored against their extension.\n   * @param {vinyl~File} lastFile The last file read. *Used for error messages only*.\n   * @param {function(err: ?Error, data: vinyl~File)} callback Called with the error that occured\n   * while creating the display or the resulting file.\n   */\n  createCombinedFile(files, lastFile, callback) {\n    const configFile = files['.json'];\n    let config = {};\n\n    if (configFile) {\n      try {\n        config = JSON.parse(configFile.contents.toString());\n      } catch (e) {\n        callback(new Error(`Error parsing JSON in ${configFile.relative}: ${e.message}`));\n        return;\n      }\n    }\n\n    const svgFile = files['.svg'];\n    if (!svgFile) {\n      callback(new Error(`No display SVG in ${lastFile.dirname}`));\n      return;\n    }\n\n    const scriptFile = files['.js'];\n    let inlineScript = '';\n    if (scriptFile) {\n      inlineScript = scriptFile.contents.toString();\n    }\n\n    this.decodeContents(svgFile, (err, xml) => {\n      if (err) {\n        callback(err);\n      } else if (!xml || xml.svg === undefined) {\n        callback(new Error('Error parsing display SVG: No `svg` tag'));\n      } else {\n        const result = xml;\n\n        // Handle empty svg tag\n        if (typeof result.svg === 'string') {\n          result.svg = {};\n        }\n\n        // Insert dependencies\n        result.svg.script = [];\n        if (config.dependencies) {\n          config.dependencies.forEach(p => result.svg.script.push({\n            $: { src: p },\n          }));\n        }\n\n        // Insert script\n        // FIXME: Import order is not preserved!\n        if (scriptFile) {\n          result.svg.script.push({\n            $: { type: 'text/ecmascript' },\n            _: XMLTransformer.forceCData(inlineScript),\n          });\n        }\n\n        // Insert metadata\n        // - Parameters\n        if (config.parameters && config.parameters.length > 0) {\n          if (!result.svg.metadata || !result.svg.metadata[0]) {\n            result.svg.metadata = [{}];\n          }\n          if (!result.svg.metadata[0]['atv:parameter']) {\n            result.svg.metadata[0]['atv:parameter'] = [];\n          }\n\n          // FIXME: Parameters should come before `atv:gridconfig` and `atv:snapconfig`\n          config.parameters\n            .forEach(param => result.svg.metadata[0]['atv:parameter'].push({ $: param }));\n        }\n\n        const display = DisplayTransformer.combineFiles(\n          Object.keys(files).map(ext => files[ext]),\n          '.xml'\n        );\n\n        this.encodeContents(result, (encodeErr, xmlString) => {\n          if (encodeErr) {\n            callback(encodeErr);\n          } else {\n            display.contents = Buffer.from(xmlString);\n\n            callback(null, display);\n          }\n        });\n      }\n    });\n  }\n\n}\n",
    "static": true,
    "longname": "src/transform/DisplayTransformer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 220,
    "kind": "class",
    "name": "DisplayTransformer",
    "memberof": "src/transform/DisplayTransformer.js",
    "static": true,
    "longname": "src/transform/DisplayTransformer.js~DisplayTransformer",
    "access": null,
    "export": true,
    "importPath": "atscm/src/transform/DisplayTransformer.js",
    "importStyle": "DisplayTransformer",
    "description": "Splits read atvise display XML nodes into their SVG and JavaScript sources,\nalongside with a .json file containing the display's parameters.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/lib/transform/XMLTransformer.js~XMLTransformer"
    ]
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "shouldBeTransformed",
    "memberof": "src/transform/DisplayTransformer.js~DisplayTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transform/DisplayTransformer.js~DisplayTransformer#shouldBeTransformed",
    "access": null,
    "description": "Returns true for all files containing atvise displays.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` for all atvise display files."
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "transformFromDB",
    "memberof": "src/transform/DisplayTransformer.js~DisplayTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transform/DisplayTransformer.js~DisplayTransformer#transformFromDB",
    "access": null,
    "description": "Splits any read files containing atvise displays into their SVG and JavaScript sources,\nalongside with a .json file containing the display's parameters.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The display file to split."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: Error, file: AtviseFile)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured\nwhile transforming the display, or the file passed through."
      }
    ]
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "createCombinedFile",
    "memberof": "src/transform/DisplayTransformer.js~DisplayTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transform/DisplayTransformer.js~DisplayTransformer#createCombinedFile",
    "access": null,
    "description": "Creates a display from the collected files.",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map<String, vinyl~File>"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "The collected files, stored against their extension."
      },
      {
        "nullable": null,
        "types": [
          "vinyl~File"
        ],
        "spread": false,
        "optional": false,
        "name": "lastFile",
        "description": "The last file read. *Used for error messages only*."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: vinyl~File)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured\nwhile creating the display or the resulting file."
      }
    ]
  },
  {
    "__docId__": 224,
    "kind": "file",
    "name": "src/transform/Mapping.js",
    "content": "import { Buffer } from 'buffer';\nimport { readFile } from 'fs';\nimport Logger from 'gulplog';\nimport Transformer from '../lib/transform/Transformer';\nimport AtviseFile from '../lib/server/AtviseFile';\nimport NodeId from '../lib/server/NodeId';\n\n/**\n * A Transformer that maps {@link ReadStream.ReadResult}s to {@link AtviseFile}s.\n */\nexport default class MappingTransformer extends Transformer {\n\n  /**\n   * Writes an {@link AtviseFile} for each {@link ReadStream.ReadResult} read. If a read file has a\n   * non-standard type (definition) an additional `.rc` file is pushed holding this type.\n   * @param {ReadStream.ReadResult} readResult The read result to create the file for.\n   * @param {String} encoding The encoding used.\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Called with the error that occurred\n   * while transforming the read result or the resulting file.\n   */\n  transformFromDB(readResult, encoding, callback) {\n    try {\n      const file = AtviseFile.fromReadResult(readResult);\n\n      if (file.relative.match(/\\.var\\./)) {\n        const rc = file.clone();\n\n        rc.extname = '';\n        rc.basename = `.${rc.stem}.rc`;\n\n        rc.contents = Buffer.from(JSON.stringify({\n          typeDefinition: file.typeDefinition,\n        }, null, '  '));\n\n        this.push(rc);\n      }\n\n      callback(null, file);\n    } catch (e) {\n      Logger.warn(`Unable to map ${readResult.nodeId.toString()}`, e.message);\n      Logger.debug(e);\n\n      callback(null);\n    }\n  }\n\n  /**\n   * Writes an {@link AtviseFile} for each {@link vinyl~File} read.\n   * @param {vinyl~File} file The raw file.\n   * @param {String} encoding The encoding used.\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Called with the error that occurred\n   * while transforming the read result or the resulting file.\n   */\n  transformFromFilesystem(file, encoding, callback) {\n    if (file.isDirectory()) {\n      callback(null);\n    } else {\n      const atFile = new AtviseFile({\n        cwd: file.cwd,\n        base: file.base,\n        path: file.path,\n        contents: file.contents,\n      });\n\n      if (file.relative.match(/\\.var\\./)) {\n        const rcFile = file.clone({ contents: false });\n        rcFile.extname = '';\n        rcFile.basename = `.${rcFile.stem}.rc`;\n\n        readFile(rcFile.path, 'utf8', (err, data) => {\n          try {\n            const rc = JSON.parse(data);\n            atFile._typeDefinition = new NodeId(rc.typeDefinition);\n\n            callback(null, atFile);\n          } catch (e) {\n            Logger.error(`Unable to get runtime configuration for ${file.relative}`);\n            callback(err || e);\n          }\n        });\n      } else {\n        callback(null, atFile);\n      }\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "src/transform/Mapping.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 225,
    "kind": "class",
    "name": "MappingTransformer",
    "memberof": "src/transform/Mapping.js",
    "static": true,
    "longname": "src/transform/Mapping.js~MappingTransformer",
    "access": null,
    "export": true,
    "importPath": "atscm/src/transform/Mapping.js",
    "importStyle": "MappingTransformer",
    "description": "A Transformer that maps {@link ReadStream.ReadResult}s to {@link AtviseFile}s.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/lib/transform/Transformer.js~Transformer"
    ]
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "transformFromDB",
    "memberof": "src/transform/Mapping.js~MappingTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transform/Mapping.js~MappingTransformer#transformFromDB",
    "access": null,
    "description": "Writes an {@link AtviseFile} for each {@link ReadStream.ReadResult} read. If a read file has a\nnon-standard type (definition) an additional `.rc` file is pushed holding this type.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "ReadStream.ReadResult"
        ],
        "spread": false,
        "optional": false,
        "name": "readResult",
        "description": "The read result to create the file for."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "encoding",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: ?AtviseFile)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occurred\nwhile transforming the read result or the resulting file."
      }
    ]
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "transformFromFilesystem",
    "memberof": "src/transform/Mapping.js~MappingTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transform/Mapping.js~MappingTransformer#transformFromFilesystem",
    "access": null,
    "description": "Writes an {@link AtviseFile} for each {@link vinyl~File} read.",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "vinyl~File"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The raw file."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "encoding",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: ?AtviseFile)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occurred\nwhile transforming the read result or the resulting file."
      }
    ]
  },
  {
    "__docId__": 228,
    "kind": "file",
    "name": "src/transform/ScriptTransformer.js",
    "content": "import Logger from 'gulplog';\nimport XMLTransformer from '../lib/transform/XMLTransformer';\n\n/**\n * A transformer that splits atvise scripts and quick dynamics into a code file and a .json file\n * containing parameters and metadata.\n */\nexport default class ScriptTransformer extends XMLTransformer {\n\n  /**\n   * Returns `true` for all files containing script code or quick dynamics.\n   * @param {AtviseFile} file The file to check.\n   * @return {Boolean} `true` for all files containing script code or quick dynamics.\n   */\n  shouldBeTransformed(file) {\n    return file.isScript || file.isQuickDynamic;\n  }\n\n  /**\n   * Splits any read files containing scripts or quick dynamics into their JavaScript sources,\n   * alongside with a .json file containing parameters and metadata.\n   * @param {AtviseFile} file The script file to split.\n   * @param {String} enc The encoding used.\n   * @param {function(err: Error, file: AtviseFile)} callback Called with the error that occured\n   * while transforming the script, or the file passed through.\n   */\n  transformFromDB(file, enc, callback) {\n    this.decodeContents(file, (err, results) => {\n      if (err) {\n        callback(err);\n      } else {\n        if (!results || results.script === undefined) {\n          Logger.warn(`Empty document at ${file.relative}`);\n        }\n\n        const document = results && results.script ? results.script : {};\n\n        const config = {};\n        let code = '';\n\n        // Extract metadata\n        if (this.tagNotEmpty(document.metadata)) {\n          // TODO: Warn on multiple metadata tags\n\n          const meta = document.metadata[0];\n\n          // - Icon\n          if (this.tagNotEmpty(meta.icon)) {\n            const icon = meta.icon[0];\n            config.icon = icon.$ || {};\n            config.icon.content = icon._ || '';\n          }\n\n          // - Visible\n          if (this.tagNotEmpty(meta.visible)) {\n            config.visible = Boolean(meta.visible[0]);\n          }\n\n          // - Title\n          if (this.tagNotEmpty(meta.title)) {\n            config.title = meta.title[0];\n          }\n\n          // - Description\n          if (this.tagNotEmpty(meta.description)) {\n            config.description = meta.description[0];\n          }\n        }\n\n        // Extract Parameters\n        if (this.tagNotEmpty(document.parameter)) {\n          config.parameters = [];\n          document.parameter.forEach(param => config.parameters.push(param.$));\n        }\n\n        // Extract JavaScript\n        if (this.tagNotEmpty(document.code)) {\n          code = document.code[0];\n        }\n\n        // Write config file\n        const configFile = ScriptTransformer.splitFile(file, '.json');\n        configFile.contents = Buffer.from(JSON.stringify(config, null, '  '));\n        this.push(configFile);\n\n        // Write script file\n        const scriptFile = ScriptTransformer.splitFile(file, '.js');\n        scriptFile.contents = Buffer.from(code);\n        this.push(scriptFile);\n\n        callback(null);\n      }\n    });\n  }\n\n  /**\n   * Creates a script from the collected files.\n   * @param {Map<String, AtviseFile>} files The collected files, stored against their extension.\n   * @param {AtviseFile} lastFile The last file read. *Used for error messages only*.\n   * @param {function(err: ?Error, data: vinyl~File)} callback Called with the error that occured\n   * while creating the script or the resulting file.\n   */\n  createCombinedFile(files, lastFile, callback) {\n    const configFile = files['.json'];\n    let config = {};\n\n    if (configFile) {\n      try {\n        config = JSON.parse(configFile.contents.toString());\n      } catch (e) {\n        callback(new Error(`Error parsing JSON in ${configFile.relative}: ${e.message}`));\n        return;\n      }\n    }\n\n    const scriptFile = files['.js'];\n    let code = '';\n\n    if (scriptFile) {\n      code = scriptFile.contents.toString();\n    }\n\n    const result = {\n      script: { },\n    };\n\n    // Insert metadata\n    if (lastFile.isQuickDynamic) {\n      const meta = {};\n\n      // - Icon\n      if (config.icon) {\n        const icon = config.icon.content;\n        delete config.icon.content;\n\n        meta.icon = {\n          $: config.icon,\n          _: icon,\n        };\n      }\n\n      // - Other fields\n      if (config.visible !== undefined) {\n        meta.visible = config.visible ? 1 : 0;\n      }\n\n      if (config.title !== undefined) {\n        meta.title = config.title;\n      }\n\n      if (config.description !== undefined) {\n        meta.description = config.description;\n      }\n\n      result.script.metadata = meta;\n    }\n\n    // Insert parameters\n    result.script.parameter = config.parameters ?\n      config.parameters.map(param => ({ $: param })) :\n      [];\n\n    result.script.code = ScriptTransformer.forceCData(code);\n\n    const script = ScriptTransformer.combineFiles(\n      Object.keys(files).map(ext => files[ext]),\n      '.xml'\n    );\n\n    this.encodeContents(result, (encodeErr, xmlString) => {\n      if (encodeErr) {\n        callback(encodeErr);\n      } else {\n        script.contents = Buffer.from(xmlString);\n\n        callback(null, script);\n      }\n    });\n  }\n\n}\n",
    "static": true,
    "longname": "src/transform/ScriptTransformer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 229,
    "kind": "class",
    "name": "ScriptTransformer",
    "memberof": "src/transform/ScriptTransformer.js",
    "static": true,
    "longname": "src/transform/ScriptTransformer.js~ScriptTransformer",
    "access": null,
    "export": true,
    "importPath": "atscm/src/transform/ScriptTransformer.js",
    "importStyle": "ScriptTransformer",
    "description": "A transformer that splits atvise scripts and quick dynamics into a code file and a .json file\ncontaining parameters and metadata.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/lib/transform/XMLTransformer.js~XMLTransformer"
    ]
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "shouldBeTransformed",
    "memberof": "src/transform/ScriptTransformer.js~ScriptTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transform/ScriptTransformer.js~ScriptTransformer#shouldBeTransformed",
    "access": null,
    "description": "Returns `true` for all files containing script code or quick dynamics.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` for all files containing script code or quick dynamics."
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "transformFromDB",
    "memberof": "src/transform/ScriptTransformer.js~ScriptTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transform/ScriptTransformer.js~ScriptTransformer#transformFromDB",
    "access": null,
    "description": "Splits any read files containing scripts or quick dynamics into their JavaScript sources,\nalongside with a .json file containing parameters and metadata.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The script file to split."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: Error, file: AtviseFile)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured\nwhile transforming the script, or the file passed through."
      }
    ]
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "createCombinedFile",
    "memberof": "src/transform/ScriptTransformer.js~ScriptTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transform/ScriptTransformer.js~ScriptTransformer#createCombinedFile",
    "access": null,
    "description": "Creates a script from the collected files.",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map<String, AtviseFile>"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "The collected files, stored against their extension."
      },
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "lastFile",
        "description": "The last file read. *Used for error messages only*."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: vinyl~File)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured\nwhile creating the script or the resulting file."
      }
    ]
  },
  {
    "__docId__": 233,
    "kind": "file",
    "name": "src/typedef/external/inquirer.js",
    "content": "/**\n * @external {Inquirer} https://github.com/sboudrias/Inquirer.js\n */\n\n/**\n * Must be one of: 'list', 'rawlist', 'expand', 'checkbox', 'confirm', 'input', 'password',\n * 'editor'.\n * @typedef {String} inquirer~PromptType\n * @see https://github.com/sboudrias/Inquirer.js#prompt-types\n */\n\n/**\n * A function that, when called with a value, validates this value and either retunrs `true` if\n * validation succeeded or an error message.\n * @typedef {function(value: String): Boolean|String} inquirer~Validator\n */\n",
    "static": true,
    "longname": "src/typedef/external/inquirer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 234,
    "kind": "external",
    "name": "Inquirer",
    "externalLink": "https://github.com/sboudrias/Inquirer.js",
    "memberof": "src/typedef/external/inquirer.js",
    "static": true,
    "longname": "src/typedef/external/inquirer.js~Inquirer",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 235,
    "kind": "typedef",
    "name": "inquirer~PromptType",
    "memberof": "src/typedef/external/inquirer.js",
    "static": true,
    "longname": "src/typedef/external/inquirer.js~inquirer~PromptType",
    "access": null,
    "description": "Must be one of: 'list', 'rawlist', 'expand', 'checkbox', 'confirm', 'input', 'password',\n'editor'.",
    "see": [
      "https://github.com/sboudrias/Inquirer.js#prompt-types"
    ],
    "type": {
      "types": [
        "String"
      ],
      "optional": false,
      "name": "inquirer~PromptType"
    }
  },
  {
    "__docId__": 236,
    "kind": "typedef",
    "name": "inquirer~Validator",
    "memberof": "src/typedef/external/inquirer.js",
    "static": true,
    "longname": "src/typedef/external/inquirer.js~inquirer~Validator",
    "access": null,
    "description": "A function that, when called with a value, validates this value and either retunrs `true` if\nvalidation succeeded or an error message.",
    "type": {
      "types": [
        "function(value: String): Boolean",
        "String"
      ],
      "optional": false,
      "name": "inquirer~Validator"
    }
  },
  {
    "__docId__": 237,
    "kind": "file",
    "name": "src/typedef/external/node-opcua.js",
    "content": "/**\n * @external {node-opcua} http://node-opcua.github.io/api_doc/\n */\n\n/**\n * @external {node-opcua~NodeId} http://node-opcua.github.io/api_doc/classes/NodeId.html\n */\n\n/**\n * @external {node-opcua~NodeIdType} http://node-opcua.github.io/api_doc/classes/NodeIdType.html\n */\n\n/**\n * @external {node-opcua~OPCUAClient} http://node-opcua.github.io/api_doc/classes/OPCUAClient.html\n */\n\n/**\n * @external {node-opcua~ClientSession} http://node-opcua.github.io/api_doc/classes/ClientSession.html\n */\n\n/**\n * @external {node-opcua~ClientSubscription} http://node-opcua.github.io/api_doc/classes/ClientSubscription.html\n */\n\n/**\n * @external {node-opcua~DataValue} http://node-opcua.github.io/api_doc/classes/DataValue.html\n */\n\n/**\n * @external {node-opcua~ReferenceDescription} http://node-opcua.github.io/api_doc/classes/ReferenceDescription.html\n */\n\n/**\n * @external {node-opcua~DataType} https://github.com/node-opcua/node-opcua/blob/master/schemas/DataType_enum.js\n */\n\n/**\n * @external {node-opcua~VariantArrayType} https://github.com/node-opcua/node-opcua/blob/master/schemas/VariantArrayType_enum.js\n */\n",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "external",
    "name": "node-opcua",
    "externalLink": "http://node-opcua.github.io/api_doc/",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 239,
    "kind": "external",
    "name": "node-opcua~NodeId",
    "externalLink": "http://node-opcua.github.io/api_doc/classes/NodeId.html",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~NodeId",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 240,
    "kind": "external",
    "name": "node-opcua~NodeIdType",
    "externalLink": "http://node-opcua.github.io/api_doc/classes/NodeIdType.html",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~NodeIdType",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 241,
    "kind": "external",
    "name": "node-opcua~OPCUAClient",
    "externalLink": "http://node-opcua.github.io/api_doc/classes/OPCUAClient.html",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~OPCUAClient",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 242,
    "kind": "external",
    "name": "node-opcua~ClientSession",
    "externalLink": "http://node-opcua.github.io/api_doc/classes/ClientSession.html",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~ClientSession",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 243,
    "kind": "external",
    "name": "node-opcua~ClientSubscription",
    "externalLink": "http://node-opcua.github.io/api_doc/classes/ClientSubscription.html",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~ClientSubscription",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 244,
    "kind": "external",
    "name": "node-opcua~DataValue",
    "externalLink": "http://node-opcua.github.io/api_doc/classes/DataValue.html",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~DataValue",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 245,
    "kind": "external",
    "name": "node-opcua~ReferenceDescription",
    "externalLink": "http://node-opcua.github.io/api_doc/classes/ReferenceDescription.html",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~ReferenceDescription",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 246,
    "kind": "external",
    "name": "node-opcua~DataType",
    "externalLink": "https://github.com/node-opcua/node-opcua/blob/master/schemas/DataType_enum.js",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~DataType",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 247,
    "kind": "external",
    "name": "node-opcua~VariantArrayType",
    "externalLink": "https://github.com/node-opcua/node-opcua/blob/master/schemas/VariantArrayType_enum.js",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~VariantArrayType",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 248,
    "kind": "file",
    "name": "src/typedef/external/vinyl.js",
    "content": "/**\n * @external {vinyl~File} https://github.com/gulpjs/vinyl#new-vinyloptions\n */\n",
    "static": true,
    "longname": "src/typedef/external/vinyl.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 249,
    "kind": "external",
    "name": "vinyl~File",
    "externalLink": "https://github.com/gulpjs/vinyl#new-vinyloptions",
    "memberof": "src/typedef/external/vinyl.js",
    "static": true,
    "longname": "src/typedef/external/vinyl.js~vinyl~File",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 250,
    "kind": "file",
    "name": "src/typedef/external/xml2js.js",
    "content": "/**\n * @external {xml2js~Builder} https://github.com/Leonidas-from-XIV/node-xml2js#options-for-the-builder-class\n */\n",
    "static": true,
    "longname": "src/typedef/external/xml2js.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 251,
    "kind": "external",
    "name": "xml2js~Builder",
    "externalLink": "https://github.com/Leonidas-from-XIV/node-xml2js#options-for-the-builder-class",
    "memberof": "src/typedef/external/xml2js.js",
    "static": true,
    "longname": "src/typedef/external/xml2js.js~xml2js~Builder",
    "access": null,
    "description": ""
  },
  {
    "__docId__": 252,
    "kind": "file",
    "name": "src/util/cleanup.js",
    "content": "import Logger from 'gulplog';\nimport Session from '../lib/server/Session';\n\n/**\n * Cleans up after the app ended with the specified code or signal.\n * @param {?Number} exitCode The exit code received.\n * @param {?string} signal The signal that triggered the exit.\n * @param {function()} uninstall\n * @return {boolean} `true` if the process should continue exiting.\n */\nexport default function cleanup(exitCode, signal, uninstall) {\n  uninstall();\n\n  if (signal === 'SIGINT') {\n    process.stdout.clearLine();\n    process.stdout.cursorTo(0);\n    Logger.warn('Ctrl-C');\n  }\n\n  Logger.debug('Running cleanup...');\n\n  if (Session.open.length > 0) {\n    Logger.debug('  Closing', Session.open.length, 'open sessions...');\n\n    // Ignore further gulp error messages\n    Logger.removeAllListeners('error');\n    Logger.on('error', () => {});\n\n    Session.closeOpen()\n      .then(() => process.kill(process.pid, signal))\n      .catch(e => {\n        Logger.error('Error in cleanup', e.message);\n        process.kill(process.pid, signal);\n      });\n\n    return false;\n  }\n\n  return true;\n}\n",
    "static": true,
    "longname": "src/util/cleanup.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "function",
    "name": "cleanup",
    "memberof": "src/util/cleanup.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/cleanup.js~cleanup",
    "access": null,
    "export": true,
    "importPath": "atscm/src/util/cleanup.js",
    "importStyle": "cleanup",
    "description": "Cleans up after the app ended with the specified code or signal.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": true,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "exitCode",
        "description": "The exit code received."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signal",
        "description": "The signal that triggered the exit."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "uninstall",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "`true` if the process should continue exiting."
    }
  },
  {
    "__docId__": 255,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 256,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 257,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 258,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 259,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 260,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 261,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 262,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 263,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 264,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 265,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 266,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 267,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 268,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 269,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 270,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 271,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 272,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 273,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 274,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 275,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 276,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 277,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 278,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 279,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 280,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 281,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 282,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 283,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 284,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 285,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 286,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 287,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 288,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 289,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 290,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 291,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 292,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 293,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 294,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 295,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 296,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 297,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 298,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 299,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 300,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 301,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 303,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 304,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 305,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 306,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 307,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 308,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 309,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 310,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  },
  {
    "__docId__": 311,
    "kind": "testFile",
    "name": "test/src/Gulpfile.spec.js",
    "content": "import expect from 'unexpected';\nimport { spy } from 'sinon';\nimport proxyquire from 'proxyquire';\n\nimport * as tasks from '../../src/Gulpfile';\n\ndescribe('Gulpfile', function() {\n  it('should export description for all tasks', function() {\n    Object.keys(tasks).forEach(name => {\n      const desc = tasks[name].description;\n\n      expect(desc, 'to be defined');\n      expect(desc, 'not to be empty');\n    });\n  });\n\n  it('should register cleanupHandler', function() {\n    const nodeCleanup = spy();\n\n    process.env.NODE_ENV = 'production';\n    proxyquire('../../src/Gulpfile', {\n      'node-cleanup': nodeCleanup,\n    });\n    process.env.NODE_ENV = 'test';\n\n    expect(nodeCleanup.calledOnce, 'to be', true);\n  });\n});\n",
    "static": true,
    "longname": "test/src/Gulpfile.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 312,
    "kind": "testDescribe",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/src/Gulpfile.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/Gulpfile.spec.js~describe0",
    "access": null,
    "description": "Gulpfile",
    "lineNumber": 7
  },
  {
    "__docId__": 313,
    "kind": "testIt",
    "name": "it1",
    "testId": 1,
    "memberof": "test/src/Gulpfile.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/Gulpfile.spec.js~describe0.it1",
    "access": null,
    "description": "should export description for all tasks",
    "lineNumber": 8
  },
  {
    "__docId__": 314,
    "kind": "testIt",
    "name": "it2",
    "testId": 2,
    "memberof": "test/src/Gulpfile.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/Gulpfile.spec.js~describe0.it2",
    "access": null,
    "description": "should register cleanupHandler",
    "lineNumber": 17
  },
  {
    "__docId__": 315,
    "kind": "testFile",
    "name": "test/src/index.spec.js",
    "content": "import expect from 'unexpected';\n\nimport * as globalExports from '../../src/index';\nimport Atviseproject from '../../src/lib/config/Atviseproject';\nimport NodeId from '../../src/lib/server/NodeId';\nimport Transformer, { TransformDirection } from '../../src/lib/transform/Transformer';\nimport PartialTransformer from '../../src/lib/transform/PartialTransformer';\nimport SplittingTransformer from '../../src/lib/transform/SplittingTransformer';\nimport DisplayTransformer from '../../src/transform/DisplayTransformer';\nimport ScriptTransformer from '../../src/transform/ScriptTransformer';\n\ndescribe('atscm module', function() {\n  /** @test {Atviseproject} */\n  it('should export Atviseproject class', function() {\n    expect(globalExports.Atviseproject, 'to be', Atviseproject);\n  });\n\n  /** @test {NodeId} */\n  it('should export NodeId class', function() {\n    expect(globalExports.NodeId, 'to be', NodeId);\n  });\n\n  /** @test {Transformer} */\n  it('should export Transformer class', function() {\n    expect(globalExports.Transformer, 'to be', Transformer);\n  });\n\n  /** @test {TransformDirection} */\n  it('should export TransformDirection enum', function() {\n    expect(globalExports.TransformDirection, 'to be', TransformDirection);\n  });\n\n  /** @test {PartialTransformer} */\n  it('should export PartialTransformer class', function() {\n    expect(globalExports.PartialTransformer, 'to be', PartialTransformer);\n  });\n\n  /** @test {Splitting} */\n  it('should export SplittingTransformer class', function() {\n    expect(globalExports.SplittingTransformer, 'to be', SplittingTransformer);\n  });\n\n  /** @test {DisplayTransformer} */\n  it('should export DisplayTransformer class', function() {\n    expect(globalExports.DisplayTransformer, 'to be', DisplayTransformer);\n  });\n\n  /** @test {ScriptTransformer} */\n  it('should export ScriptTransformer class', function() {\n    expect(globalExports.ScriptTransformer, 'to be', ScriptTransformer);\n  });\n});\n",
    "static": true,
    "longname": "test/src/index.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 316,
    "kind": "testDescribe",
    "name": "describe3",
    "testId": 3,
    "memberof": "test/src/index.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/index.spec.js~describe3",
    "access": null,
    "description": "atscm module",
    "lineNumber": 12
  },
  {
    "__docId__": 317,
    "kind": "testIt",
    "name": "it4",
    "testId": 4,
    "memberof": "test/src/index.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/index.spec.js~describe3.it4",
    "access": null,
    "description": "should export Atviseproject class",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Atviseproject}"
      }
    ],
    "testTargets": [
      "Atviseproject"
    ]
  },
  {
    "__docId__": 318,
    "kind": "testIt",
    "name": "it5",
    "testId": 5,
    "memberof": "test/src/index.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/index.spec.js~describe3.it5",
    "access": null,
    "description": "should export NodeId class",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{NodeId}"
      }
    ],
    "testTargets": [
      "NodeId"
    ]
  },
  {
    "__docId__": 319,
    "kind": "testIt",
    "name": "it6",
    "testId": 6,
    "memberof": "test/src/index.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/index.spec.js~describe3.it6",
    "access": null,
    "description": "should export Transformer class",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Transformer}"
      }
    ],
    "testTargets": [
      "Transformer"
    ]
  },
  {
    "__docId__": 320,
    "kind": "testIt",
    "name": "it7",
    "testId": 7,
    "memberof": "test/src/index.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/index.spec.js~describe3.it7",
    "access": null,
    "description": "should export TransformDirection enum",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{TransformDirection}"
      }
    ],
    "testTargets": [
      "TransformDirection"
    ]
  },
  {
    "__docId__": 321,
    "kind": "testIt",
    "name": "it8",
    "testId": 8,
    "memberof": "test/src/index.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/index.spec.js~describe3.it8",
    "access": null,
    "description": "should export PartialTransformer class",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{PartialTransformer}"
      }
    ],
    "testTargets": [
      "PartialTransformer"
    ]
  },
  {
    "__docId__": 322,
    "kind": "testIt",
    "name": "it9",
    "testId": 9,
    "memberof": "test/src/index.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/index.spec.js~describe3.it9",
    "access": null,
    "description": "should export SplittingTransformer class",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Splitting}"
      }
    ],
    "testTargets": [
      "Splitting"
    ]
  },
  {
    "__docId__": 323,
    "kind": "testIt",
    "name": "it10",
    "testId": 10,
    "memberof": "test/src/index.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/index.spec.js~describe3.it10",
    "access": null,
    "description": "should export DisplayTransformer class",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DisplayTransformer}"
      }
    ],
    "testTargets": [
      "DisplayTransformer"
    ]
  },
  {
    "__docId__": 324,
    "kind": "testIt",
    "name": "it11",
    "testId": 11,
    "memberof": "test/src/index.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/index.spec.js~describe3.it11",
    "access": null,
    "description": "should export ScriptTransformer class",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ScriptTransformer}"
      }
    ],
    "testTargets": [
      "ScriptTransformer"
    ]
  },
  {
    "__docId__": 325,
    "kind": "testFile",
    "name": "test/src/init/InitTask.spec.js",
    "content": "import { readdirSync } from 'fs';\nimport { join, isAbsolute } from 'path';\nimport expect from 'unexpected';\nimport { spy } from 'sinon';\nimport proxyquire from 'proxyquire';\n\nimport { obj as createStream } from 'through2';\nimport { src } from 'gulp';\nimport handlebars from 'gulp-compile-handlebars';\nimport { transform as babelTransform } from 'babel-core';\nimport { transpileModule as tsTransform } from 'typescript';\n// import { compile as coffeeTransform } from 'coffee-script';\nimport evaluate from 'eval';\n\nimport pkg from '../../../package.json';\nimport { ConfigLangs } from '../../../src/init/Options';\nimport Atviseproject from '../../../src/lib/config/Atviseproject';\n\nconst destSpy = spy((c, e, cb) => cb(null));\nconst srcSpy = spy((c, e, cb) => cb(null, c));\n\nconst gulpStub = {\n  src: (...args) => src(...args)\n    .pipe(createStream(srcSpy)),\n  dest: () => createStream(destSpy),\n};\n\nconst handlebarsSpy = spy(handlebars);\n\nconst InitTask = proxyquire('../../../src/init/InitTask', {\n  gulp: gulpStub,\n  handlebars: {\n    default: handlebarsSpy,\n  },\n}).default;\n\n/** @test {InitTask} */\ndescribe('InitTask', function() {\n  const baseConfig = {\n    name: 'unit-testing',\n    atviseHost: 'localhost',\n    atvisePortOpc: 4840,\n    atvisePortHttp: 80,\n    modulePackage: pkg,\n  };\n\n  function optionsForLang(lang) {\n    return Object.assign({ configLang: lang }, baseConfig);\n  }\n\n  beforeEach(() => {\n    srcSpy.reset();\n    destSpy.reset();\n    handlebarsSpy.reset();\n  });\n\n  /** @test {InitTask.filesToHandle} */\n  describe('.filesToHandle', function() {\n    it('should return array of absolute paths', function() {\n      expect(InitTask.filesToHandle('es2015'), 'to have items satisfying', 'to be a', 'string');\n      expect(InitTask.filesToHandle('es2015'), 'to have items satisfying', path => {\n        expect(isAbsolute(path), 'to be', true);\n      });\n    });\n  });\n\n  /** @test {InitTask.run} */\n  describe('.run', function() {\n    it('should handle all general files', function() {\n      const files = readdirSync(\n        join(__dirname, '../../../res/init/templates/general')\n      );\n\n      return InitTask.run({ configLang: 'es2015' })\n        .then(() => {\n          expect(srcSpy.callCount, 'to be greater than', 0);\n\n          const handled = srcSpy.args.map(args => args[0]);\n          const resulting = destSpy.args.map(args => args[0]);\n          expect(handled, 'to have values satisfying',\n            'to have properties', { _isVinyl: true });\n\n          expect(handled.map(f => f.relative), 'to contain', ...files);\n          expect(resulting.map(f => f.relative), 'to contain', ...files);\n        });\n    });\n\n    function expectHandlingLangFiles(configLang) {\n      const files = readdirSync(\n        join(__dirname, '../../../res/init/templates/lang', configLang)\n      );\n\n      it(`should handle ${configLang} files`, function() {\n        return InitTask.run({ configLang })\n          .then(() => {\n            const handled = srcSpy.args.map(args => args[0].relative);\n            const resulting = destSpy.args.map(args => args[0].relative);\n\n            expect(handled, 'to contain', ...files);\n            expect(resulting, 'to contain', ...files);\n          });\n      });\n    }\n\n    // Check if all lang files are handled for all config langs\n    Object.keys(ConfigLangs).forEach(l => expectHandlingLangFiles(ConfigLangs[l]));\n\n    function expectValidConfig(lang, transform) {\n      it(`should create valid ${lang} config`, function() {\n        return InitTask.run(optionsForLang(lang))\n          .then(() => {\n            const createdFiles = destSpy.args.map(args => args[0]);\n\n            // Expect config file is created\n            const configs = createdFiles.filter(file => file.relative.match(/Atviseproject/));\n            expect(configs, 'to have length', 1);\n\n            // Expect code can be transpiled\n            const configCode = configs[0].contents.toString();\n            let resultingCode;\n            expect(() => (resultingCode = transform(configCode, createdFiles)\n              .replace(/require\\(['|\"]atscm['|\"]\\)/, 'require(\\'../../../\\')')), 'not to throw');\n\n            // Expect transpiled code to be runnable\n            let config;\n            expect(() => (config = evaluate(resultingCode, true).default), 'not to throw');\n\n            // Expect config to extend Atviseproject\n            expect(config, 'to have properties', Object.getOwnPropertyNames(Atviseproject));\n            expect(config.name, 'to equal', 'UnitTesting');\n            expect(config.host, 'to equal', baseConfig.atviseHost);\n            expect(config.port.opc, 'to equal', baseConfig.atvisePortOpc);\n            expect(config.port.http, 'to equal', baseConfig.atvisePortHttp);\n          });\n      });\n    }\n\n    expectValidConfig('es2015', (code, createdFiles) => {\n      const rcs = createdFiles.filter(file => file.relative.match(/.babelrc/));\n\n      expect(rcs, 'to have length', 1);\n\n      const rc = JSON.parse(rcs[0].contents.toString());\n\n      return babelTransform(code, rc).code;\n    });\n\n    expectValidConfig('es5', code => code);\n\n    expectValidConfig('ts', (code, createdFiles) => {\n      const rcs = createdFiles.filter(file => file.relative.match(/tsconfig.json/));\n\n      expect(rcs, 'to have length', 1);\n\n      const rc = JSON.parse(rcs[0].contents.toString());\n\n      return tsTransform(code, rc).outputText;\n    });\n\n    // FIXME: CoffeeScript does not yet work.\n    /*\n    expectValidConfig('coffee', (code, createdFiles) => {\n\n      return coffeeTransform(code);\n    });\n    */\n  });\n});\n",
    "static": true,
    "longname": "test/src/init/InitTask.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 326,
    "kind": "testDescribe",
    "name": "describe12",
    "testId": 12,
    "memberof": "test/src/init/InitTask.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/init/InitTask.spec.js~describe12",
    "access": null,
    "description": "InitTask",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitTask}"
      }
    ],
    "testTargets": [
      "InitTask"
    ]
  },
  {
    "__docId__": 327,
    "kind": "testDescribe",
    "name": "describe13",
    "testId": 13,
    "memberof": "test/src/init/InitTask.spec.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/init/InitTask.spec.js~describe12.describe13",
    "access": null,
    "description": ".filesToHandle",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitTask.filesToHandle}"
      }
    ],
    "testTargets": [
      "InitTask.filesToHandle"
    ]
  },
  {
    "__docId__": 328,
    "kind": "testIt",
    "name": "it14",
    "testId": 14,
    "memberof": "test/src/init/InitTask.spec.js~describe12.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/InitTask.spec.js~describe12.describe13.it14",
    "access": null,
    "description": "should return array of absolute paths",
    "lineNumber": 59
  },
  {
    "__docId__": 329,
    "kind": "testDescribe",
    "name": "describe15",
    "testId": 15,
    "memberof": "test/src/init/InitTask.spec.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/init/InitTask.spec.js~describe12.describe15",
    "access": null,
    "description": ".run",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitTask.run}"
      }
    ],
    "testTargets": [
      "InitTask.run"
    ]
  },
  {
    "__docId__": 330,
    "kind": "testIt",
    "name": "it16",
    "testId": 16,
    "memberof": "test/src/init/InitTask.spec.js~describe12.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/InitTask.spec.js~describe12.describe15.it16",
    "access": null,
    "description": "should handle all general files",
    "lineNumber": 69
  },
  {
    "__docId__": 331,
    "kind": "testIt",
    "name": "it17",
    "testId": 17,
    "memberof": "test/src/init/InitTask.spec.js~describe12.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/InitTask.spec.js~describe12.describe15.it17",
    "access": null,
    "lineNumber": 93
  },
  {
    "__docId__": 332,
    "kind": "testIt",
    "name": "it18",
    "testId": 18,
    "memberof": "test/src/init/InitTask.spec.js~describe12.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/InitTask.spec.js~describe12.describe15.it18",
    "access": null,
    "lineNumber": 109
  },
  {
    "__docId__": 333,
    "kind": "testFile",
    "name": "test/src/init/Options.spec.js",
    "content": "import expect from 'unexpected';\n\nimport InitOptionsAsArray, { InitOptions } from '../../../src/init/Options';\nimport InitOption from '../../../src/lib/init/Option';\n\n/** @test {InitOptions} */\ndescribe('InitOptions', function() {\n  it('should contain InitOptions stored against names', function() {\n    Object.keys(InitOptions).forEach(key => {\n      expect(key, 'to be a', 'string');\n      expect(InitOptions[key], 'to be a', InitOption);\n    });\n  });\n\n  /** @test {InitOptions.atviseUser} */\n  describe('.atviseUser', function() {\n    it('should only be asked if using login', function() {\n      expect(InitOptions.atviseUser.when({ useLogin: false }), 'to equal', false);\n      expect(InitOptions.atviseUser.when({ useLogin: true }), 'to equal', true);\n    });\n  });\n\n  /** @test {InitOptions.atvisePassword} */\n  describe('.atvisePassword', function() {\n    it('should only be asked if using login', function() {\n      expect(InitOptions.atvisePassword.when({ useLogin: false }), 'to equal', false);\n      expect(InitOptions.atvisePassword.when({ useLogin: true }), 'to equal', true);\n    });\n  });\n});\n\n/** @test {InitOptionsAsArray} */\ndescribe('InitOptionsAsArray', function() {\n  it('should contain all InitOptions', function() {\n    InitOptionsAsArray.forEach(opt => {\n      expect(InitOptions[opt.name], 'to be defined');\n      expect(opt, 'to have properties', InitOptions[opt.name]);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/init/Options.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 334,
    "kind": "testDescribe",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/src/init/Options.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/init/Options.spec.js~describe19",
    "access": null,
    "description": "InitOptions",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitOptions}"
      }
    ],
    "testTargets": [
      "InitOptions"
    ]
  },
  {
    "__docId__": 335,
    "kind": "testIt",
    "name": "it20",
    "testId": 20,
    "memberof": "test/src/init/Options.spec.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/init/Options.spec.js~describe19.it20",
    "access": null,
    "description": "should contain InitOptions stored against names",
    "lineNumber": 8
  },
  {
    "__docId__": 336,
    "kind": "testDescribe",
    "name": "describe21",
    "testId": 21,
    "memberof": "test/src/init/Options.spec.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/init/Options.spec.js~describe19.describe21",
    "access": null,
    "description": ".atviseUser",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitOptions.atviseUser}"
      }
    ],
    "testTargets": [
      "InitOptions.atviseUser"
    ]
  },
  {
    "__docId__": 337,
    "kind": "testIt",
    "name": "it22",
    "testId": 22,
    "memberof": "test/src/init/Options.spec.js~describe19.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/Options.spec.js~describe19.describe21.it22",
    "access": null,
    "description": "should only be asked if using login",
    "lineNumber": 17
  },
  {
    "__docId__": 338,
    "kind": "testDescribe",
    "name": "describe23",
    "testId": 23,
    "memberof": "test/src/init/Options.spec.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/init/Options.spec.js~describe19.describe23",
    "access": null,
    "description": ".atvisePassword",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitOptions.atvisePassword}"
      }
    ],
    "testTargets": [
      "InitOptions.atvisePassword"
    ]
  },
  {
    "__docId__": 339,
    "kind": "testIt",
    "name": "it24",
    "testId": 24,
    "memberof": "test/src/init/Options.spec.js~describe19.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/Options.spec.js~describe19.describe23.it24",
    "access": null,
    "description": "should only be asked if using login",
    "lineNumber": 25
  },
  {
    "__docId__": 340,
    "kind": "testDescribe",
    "name": "describe25",
    "testId": 25,
    "memberof": "test/src/init/Options.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/init/Options.spec.js~describe25",
    "access": null,
    "description": "InitOptionsAsArray",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitOptionsAsArray}"
      }
    ],
    "testTargets": [
      "InitOptionsAsArray"
    ]
  },
  {
    "__docId__": 341,
    "kind": "testIt",
    "name": "it26",
    "testId": 26,
    "memberof": "test/src/init/Options.spec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/init/Options.spec.js~describe25.it26",
    "access": null,
    "description": "should contain all InitOptions",
    "lineNumber": 34
  },
  {
    "__docId__": 342,
    "kind": "testFile",
    "name": "test/src/init/OptionsValidator.spec.js",
    "content": "import expect from 'unexpected';\n\nimport Validator from '../../../src/init/OptionsValidator';\n\n/** @test {InitOptionsValidator} */\ndescribe('InitOptionsValidator', function() {\n  /** @test {InitOptionsValidator.name} */\n  describe('.name', function() {\n    it('should fail for empty names', function() {\n      expect(Validator.name(''), 'to match', /must be greater than zero/);\n    });\n\n    it('should fail with capital letters', function() {\n      expect(Validator.name('atSCM'), 'to match', /can no longer contain capital letters/);\n    });\n\n    it('should fail with non-url-safe characters', function() {\n      expect(Validator.name('#asdf'), 'to match', /URL-friendly characters/);\n    });\n\n    it('should fail with names starting with . or _', function() {\n      expect(Validator.name('_atscm'), 'to match', /cannot start with an underscore/);\n      expect(Validator.name('.atscm'), 'to match', /cannot start with a period/);\n    });\n\n    it('should fail with leading or trailing spaces', function() {\n      expect(Validator.name(' atscm'), 'to match', /cannot contain leading or trailing spaces/);\n      expect(Validator.name('atscm '), 'to match', /cannot contain leading or trailing spaces/);\n    });\n\n    it('should fail with core nodejs module name', function() {\n      expect(Validator.name('http'), 'to match', /is a core module name/);\n    });\n\n    it('should fail with blacklisted name', function() {\n      expect(Validator.name('node_modules'), 'to match', /is a blacklisted name/);\n    });\n\n    it('should fail with names longer than 214 characters', function() {\n      expect(Validator.name('a'.repeat(215)), 'to match', /can no longer contain more than 214/);\n    });\n\n    it('should work for valid package names', function() {\n      expect(Validator.name('atscm'), 'to be', true);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 343,
    "kind": "testDescribe",
    "name": "describe27",
    "testId": 27,
    "memberof": "test/src/init/OptionsValidator.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe27",
    "access": null,
    "description": "InitOptionsValidator",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitOptionsValidator}"
      }
    ],
    "testTargets": [
      "InitOptionsValidator"
    ]
  },
  {
    "__docId__": 344,
    "kind": "testDescribe",
    "name": "describe28",
    "testId": 28,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe27.describe28",
    "access": null,
    "description": ".name",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitOptionsValidator.name}"
      }
    ],
    "testTargets": [
      "InitOptionsValidator.name"
    ]
  },
  {
    "__docId__": 345,
    "kind": "testIt",
    "name": "it29",
    "testId": 29,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe27.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe27.describe28.it29",
    "access": null,
    "description": "should fail for empty names",
    "lineNumber": 9
  },
  {
    "__docId__": 346,
    "kind": "testIt",
    "name": "it30",
    "testId": 30,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe27.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe27.describe28.it30",
    "access": null,
    "description": "should fail with capital letters",
    "lineNumber": 13
  },
  {
    "__docId__": 347,
    "kind": "testIt",
    "name": "it31",
    "testId": 31,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe27.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe27.describe28.it31",
    "access": null,
    "description": "should fail with non-url-safe characters",
    "lineNumber": 17
  },
  {
    "__docId__": 348,
    "kind": "testIt",
    "name": "it32",
    "testId": 32,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe27.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe27.describe28.it32",
    "access": null,
    "description": "should fail with names starting with . or _",
    "lineNumber": 21
  },
  {
    "__docId__": 349,
    "kind": "testIt",
    "name": "it33",
    "testId": 33,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe27.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe27.describe28.it33",
    "access": null,
    "description": "should fail with leading or trailing spaces",
    "lineNumber": 26
  },
  {
    "__docId__": 350,
    "kind": "testIt",
    "name": "it34",
    "testId": 34,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe27.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe27.describe28.it34",
    "access": null,
    "description": "should fail with core nodejs module name",
    "lineNumber": 31
  },
  {
    "__docId__": 351,
    "kind": "testIt",
    "name": "it35",
    "testId": 35,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe27.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe27.describe28.it35",
    "access": null,
    "description": "should fail with blacklisted name",
    "lineNumber": 35
  },
  {
    "__docId__": 352,
    "kind": "testIt",
    "name": "it36",
    "testId": 36,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe27.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe27.describe28.it36",
    "access": null,
    "description": "should fail with names longer than 214 characters",
    "lineNumber": 39
  },
  {
    "__docId__": 353,
    "kind": "testIt",
    "name": "it37",
    "testId": 37,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe27.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe27.describe28.it37",
    "access": null,
    "description": "should work for valid package names",
    "lineNumber": 43
  },
  {
    "__docId__": 354,
    "kind": "testFile",
    "name": "test/src/lib/config/Atviseproject.spec.js",
    "content": "import expect from 'unexpected';\n\nimport Atviseproject from '../../../../src/lib/config/Atviseproject';\nimport NodeId from '../../../../src/lib/server/NodeId';\n\n/** @test {Atviseproject} */\ndescribe('Atviseproject', function() {\n  function expectNodeIds(arr) {\n    it('should contain NodeIds', function() {\n      arr.forEach(id => expect(id, 'to be a', NodeId));\n    });\n  }\n\n  /** @test {Atviseproject.login} */\n  describe('.login', function() {\n    it('should default to false', function() {\n      expect(Atviseproject.login, 'to equal', false);\n    });\n  });\n\n  /** @test {Atviseproject.nodes} */\n  describe('.nodes', function() {\n    expectNodeIds(Atviseproject.nodes);\n  });\n\n  /** @test {Atviseproject.nodesToWatch} */\n  describe('.nodesToWatch', function() {\n    expectNodeIds(Atviseproject.nodesToWatch);\n  });\n\n  /** @test {Atviseproject.EditorRelatedNodes} */\n  describe('.EditorRelatedNodes', function() {\n    expectNodeIds(Atviseproject.EditorRelatedNodes);\n  });\n\n  /** @test {Atviseproject.ServerRelatedNodes} */\n  describe('.ServerRelatedNodes', function() {\n    expectNodeIds(Atviseproject.ServerRelatedNodes);\n  });\n\n  /** @test {Atviseproject.EditorRelatedNodes} */\n  describe('.ignoreNodes', function() {\n    expectNodeIds(Atviseproject.ignoreNodes);\n\n    it('should contain Atviseproject.EditorRelatedNodes', function() {\n      expect(Atviseproject.ignoreNodes, 'to contain', ...Atviseproject.EditorRelatedNodes);\n    });\n\n    it('should contain Atviseproject.ServerRelatedNodes', function() {\n      expect(Atviseproject.ignoreNodes, 'to contain', ...Atviseproject.ServerRelatedNodes);\n    });\n  });\n\n  /** @test {Atviseproject.inspect} */\n  describe('.inspect', function() {\n    it('should return the properties to print', function() {\n      expect(Atviseproject.inspect(), 'to have properties', [\n        'host',\n        'port',\n        'useTransformers',\n        'nodes',\n        'nodesToWatch',\n        'ignoreNodes',\n      ]);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 355,
    "kind": "testDescribe",
    "name": "describe38",
    "testId": 38,
    "memberof": "test/src/lib/config/Atviseproject.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe38",
    "access": null,
    "description": "Atviseproject",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Atviseproject}"
      }
    ],
    "testTargets": [
      "Atviseproject"
    ]
  },
  {
    "__docId__": 356,
    "kind": "testIt",
    "name": "it39",
    "testId": 39,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe38.it39",
    "access": null,
    "description": "should contain NodeIds",
    "lineNumber": 9
  },
  {
    "__docId__": 357,
    "kind": "testDescribe",
    "name": "describe40",
    "testId": 40,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe38.describe40",
    "access": null,
    "description": ".login",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Atviseproject.login}"
      }
    ],
    "testTargets": [
      "Atviseproject.login"
    ]
  },
  {
    "__docId__": 358,
    "kind": "testIt",
    "name": "it41",
    "testId": 41,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe38.describe40",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe38.describe40.it41",
    "access": null,
    "description": "should default to false",
    "lineNumber": 16
  },
  {
    "__docId__": 359,
    "kind": "testDescribe",
    "name": "describe42",
    "testId": 42,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe38.describe42",
    "access": null,
    "description": ".nodes",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Atviseproject.nodes}"
      }
    ],
    "testTargets": [
      "Atviseproject.nodes"
    ]
  },
  {
    "__docId__": 360,
    "kind": "testDescribe",
    "name": "describe43",
    "testId": 43,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe38.describe43",
    "access": null,
    "description": ".nodesToWatch",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Atviseproject.nodesToWatch}"
      }
    ],
    "testTargets": [
      "Atviseproject.nodesToWatch"
    ]
  },
  {
    "__docId__": 361,
    "kind": "testDescribe",
    "name": "describe44",
    "testId": 44,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe38.describe44",
    "access": null,
    "description": ".EditorRelatedNodes",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Atviseproject.EditorRelatedNodes}"
      }
    ],
    "testTargets": [
      "Atviseproject.EditorRelatedNodes"
    ]
  },
  {
    "__docId__": 362,
    "kind": "testDescribe",
    "name": "describe45",
    "testId": 45,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe38.describe45",
    "access": null,
    "description": ".ServerRelatedNodes",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Atviseproject.ServerRelatedNodes}"
      }
    ],
    "testTargets": [
      "Atviseproject.ServerRelatedNodes"
    ]
  },
  {
    "__docId__": 363,
    "kind": "testDescribe",
    "name": "describe46",
    "testId": 46,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe38.describe46",
    "access": null,
    "description": ".ignoreNodes",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Atviseproject.EditorRelatedNodes}"
      }
    ],
    "testTargets": [
      "Atviseproject.EditorRelatedNodes"
    ]
  },
  {
    "__docId__": 364,
    "kind": "testIt",
    "name": "it47",
    "testId": 47,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe38.describe46",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe38.describe46.it47",
    "access": null,
    "description": "should contain Atviseproject.EditorRelatedNodes",
    "lineNumber": 45
  },
  {
    "__docId__": 365,
    "kind": "testIt",
    "name": "it48",
    "testId": 48,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe38.describe46",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe38.describe46.it48",
    "access": null,
    "description": "should contain Atviseproject.ServerRelatedNodes",
    "lineNumber": 49
  },
  {
    "__docId__": 366,
    "kind": "testDescribe",
    "name": "describe49",
    "testId": 49,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe38.describe49",
    "access": null,
    "description": ".inspect",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Atviseproject.inspect}"
      }
    ],
    "testTargets": [
      "Atviseproject.inspect"
    ]
  },
  {
    "__docId__": 367,
    "kind": "testIt",
    "name": "it50",
    "testId": 50,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe38.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe38.describe49.it50",
    "access": null,
    "description": "should return the properties to print",
    "lineNumber": 56
  },
  {
    "__docId__": 368,
    "kind": "testFile",
    "name": "test/src/lib/gulp/PullStream.spec.js",
    "content": "import { Stream } from 'stream';\nimport expect from 'unexpected';\nimport { spy } from 'sinon';\nimport proxyquire from 'proxyquire';\nimport { resolveNodeId, DataType } from 'node-opcua';\nimport { obj as createTransformSteam } from 'through2';\nimport { TransformDirection } from '../../../../src/lib/transform/Transformer';\n\nconst StubTransformer = {\n  applyTransformers: spy(stream => stream),\n};\n\nconst PullStream = proxyquire('../../../../src/lib/gulp/PullStream', {\n  gulp: {\n    dest: () => createTransformSteam((file, enc, callback) => {\n      setTimeout(() => callback(null, file), 1100);\n    }),\n  },\n  '../transform/Transformer': {\n    _esModule: true,\n    default: StubTransformer,\n  },\n}).default;\n\n/** @test {PullStream} */\ndescribe('PullStream', function() {\n  /** @test {PullStream#constructor} */\n  describe('#constructor', function() {\n    beforeEach(() => StubTransformer.applyTransformers.reset());\n\n    it('should return a stream', function() {\n      expect(new PullStream(createTransformSteam()), 'to be a', Stream);\n    });\n\n    it('should apply transformers from db', function(done) {\n      const readStream = createTransformSteam();\n      const stream = new PullStream(readStream);\n      const nodeId = resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main');\n\n      readStream.write({\n        nodeId,\n        referenceDescription: {\n          typeDefinition: resolveNodeId('ns=0;i=62'),\n          dataType: DataType.Boolean,\n          nodeId,\n        },\n      });\n      readStream.end();\n\n      stream.on('end', () => {\n        expect(StubTransformer.applyTransformers.calledOnce, 'to be', true);\n        expect(StubTransformer.applyTransformers.lastCall.args[2],\n          'to be', TransformDirection.FromDB);\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/gulp/PullStream.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 369,
    "kind": "testDescribe",
    "name": "describe51",
    "testId": 51,
    "memberof": "test/src/lib/gulp/PullStream.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/gulp/PullStream.spec.js~describe51",
    "access": null,
    "description": "PullStream",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{PullStream}"
      }
    ],
    "testTargets": [
      "PullStream"
    ]
  },
  {
    "__docId__": 370,
    "kind": "testDescribe",
    "name": "describe52",
    "testId": 52,
    "memberof": "test/src/lib/gulp/PullStream.spec.js~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/gulp/PullStream.spec.js~describe51.describe52",
    "access": null,
    "description": "#constructor",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{PullStream#constructor}"
      }
    ],
    "testTargets": [
      "PullStream#constructor"
    ]
  },
  {
    "__docId__": 371,
    "kind": "testIt",
    "name": "it53",
    "testId": 53,
    "memberof": "test/src/lib/gulp/PullStream.spec.js~describe51.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/gulp/PullStream.spec.js~describe51.describe52.it53",
    "access": null,
    "description": "should return a stream",
    "lineNumber": 31
  },
  {
    "__docId__": 372,
    "kind": "testIt",
    "name": "it54",
    "testId": 54,
    "memberof": "test/src/lib/gulp/PullStream.spec.js~describe51.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/gulp/PullStream.spec.js~describe51.describe52.it54",
    "access": null,
    "description": "should apply transformers from db",
    "lineNumber": 35
  },
  {
    "__docId__": 373,
    "kind": "testFile",
    "name": "test/src/lib/gulp/PushStream.spec.js",
    "content": "import { Stream } from 'stream';\nimport expect from 'unexpected';\nimport { spy } from 'sinon';\nimport proxyquire from 'proxyquire';\nimport { src } from 'gulp';\nimport { obj as createTransformStream } from 'through2';\nimport { TransformDirection } from '../../../../src/lib/transform/Transformer';\n\nconst StubTransformer = {\n  applyTransformers: spy(stream => stream\n    .pipe(createTransformStream((file, enc, cb) => {\n      setTimeout(() => cb(null, file), 1100);\n    }))\n  ),\n};\n\nconst PushStream = proxyquire('../../../../src/lib/gulp/PushStream', {\n  '../server/WriteStream': {\n    _esModule: true,\n    default: class WriteStream {\n      constructor() {\n        return createTransformStream();\n      }\n    },\n  },\n  '../transform/Transformer': {\n    _esModule: true,\n    default: StubTransformer,\n  },\n}).default;\n\n/** @test {PushStream} */\ndescribe('PushStream', function() {\n  /** @test {PushStream#constructor} */\n  describe('#constructor', function() {\n    beforeEach(() => StubTransformer.applyTransformers.reset());\n\n    it('should return a stream', function() {\n      expect(new PushStream(createTransformStream()), 'to be a', Stream);\n    });\n\n    it('should apply transforms from filesystem', function(done) {\n      const srcStream = src('./src/index.js');\n      const stream = new PushStream(srcStream);\n\n      stream.on('end', () => {\n        expect(StubTransformer.applyTransformers.calledOnce, 'to be', true);\n        expect(StubTransformer.applyTransformers.lastCall.args[2],\n          'to be', TransformDirection.FromFilesystem);\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/gulp/PushStream.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 374,
    "kind": "testDescribe",
    "name": "describe55",
    "testId": 55,
    "memberof": "test/src/lib/gulp/PushStream.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/gulp/PushStream.spec.js~describe55",
    "access": null,
    "description": "PushStream",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{PushStream}"
      }
    ],
    "testTargets": [
      "PushStream"
    ]
  },
  {
    "__docId__": 375,
    "kind": "testDescribe",
    "name": "describe56",
    "testId": 56,
    "memberof": "test/src/lib/gulp/PushStream.spec.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/gulp/PushStream.spec.js~describe55.describe56",
    "access": null,
    "description": "#constructor",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{PushStream#constructor}"
      }
    ],
    "testTargets": [
      "PushStream#constructor"
    ]
  },
  {
    "__docId__": 376,
    "kind": "testIt",
    "name": "it57",
    "testId": 57,
    "memberof": "test/src/lib/gulp/PushStream.spec.js~describe55.describe56",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/gulp/PushStream.spec.js~describe55.describe56.it57",
    "access": null,
    "description": "should return a stream",
    "lineNumber": 38
  },
  {
    "__docId__": 377,
    "kind": "testIt",
    "name": "it58",
    "testId": 58,
    "memberof": "test/src/lib/gulp/PushStream.spec.js~describe55.describe56",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/gulp/PushStream.spec.js~describe55.describe56.it58",
    "access": null,
    "description": "should apply transforms from filesystem",
    "lineNumber": 42
  },
  {
    "__docId__": 378,
    "kind": "testFile",
    "name": "test/src/lib/gulp/watchForFileChanges.spec.js",
    "content": "import expect from 'unexpected';\nimport watchForFileChanges from '../../../../src/lib/gulp/watchForFileChanges';\n\n/** @test {watchForFileChanges} */\ndescribe('watchForFileChanges', function() {\n  it('should return a function', function() {\n    expect(watchForFileChanges(() => true), 'to be a', 'function');\n  });\n\n  it('should call listener on change', function(done) {\n    const stubChange = ['filepath', 'root', 'stat'];\n\n    const watcher = watchForFileChanges((...args) => {\n      expect(args, 'to equal', stubChange);\n      done();\n    })();\n\n    watcher.on('ready', () => {\n      watcher.emit('change', ...stubChange);\n      watcher.close();\n    });\n  });\n\n  it('should call callback on error', function(done) {\n    const watcher = watchForFileChanges(() => {})(err => {\n      expect(err, 'to have message', 'Test');\n      done();\n    })\n      .on('ready', () => {\n        watcher.emit('error', new Error('Test'));\n        watcher.close();\n      });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/gulp/watchForFileChanges.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 379,
    "kind": "testDescribe",
    "name": "describe59",
    "testId": 59,
    "memberof": "test/src/lib/gulp/watchForFileChanges.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/gulp/watchForFileChanges.spec.js~describe59",
    "access": null,
    "description": "watchForFileChanges",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{watchForFileChanges}"
      }
    ],
    "testTargets": [
      "watchForFileChanges"
    ]
  },
  {
    "__docId__": 380,
    "kind": "testIt",
    "name": "it60",
    "testId": 60,
    "memberof": "test/src/lib/gulp/watchForFileChanges.spec.js~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/gulp/watchForFileChanges.spec.js~describe59.it60",
    "access": null,
    "description": "should return a function",
    "lineNumber": 6
  },
  {
    "__docId__": 381,
    "kind": "testIt",
    "name": "it61",
    "testId": 61,
    "memberof": "test/src/lib/gulp/watchForFileChanges.spec.js~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/gulp/watchForFileChanges.spec.js~describe59.it61",
    "access": null,
    "description": "should call listener on change",
    "lineNumber": 10
  },
  {
    "__docId__": 382,
    "kind": "testIt",
    "name": "it62",
    "testId": 62,
    "memberof": "test/src/lib/gulp/watchForFileChanges.spec.js~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/gulp/watchForFileChanges.spec.js~describe59.it62",
    "access": null,
    "description": "should call callback on error",
    "lineNumber": 24
  },
  {
    "__docId__": 383,
    "kind": "testFile",
    "name": "test/src/lib/gulp/watchForServerChanges.spec.js",
    "content": "import expect from 'unexpected';\nimport { spy } from 'sinon';\nimport Logger from 'gulplog';\nimport watchForServerChanges from '../../../../src/lib/gulp/watchForServerChanges';\nimport Watcher from '../../../../src/lib/server/Watcher';\n\n/** @test {watchForServerChanges} */\ndescribe('watchForServerChanges', function() {\n  it('should return a Watcher', function() {\n    expect(watchForServerChanges(() => {})(() => {}), 'to be a', Watcher);\n  });\n\n  it('should forward change events to listener', function() {\n    const listener = spy();\n    const watcher = watchForServerChanges(listener)(() => {});\n    const event = {};\n\n    watcher.emit('change', event);\n    expect(listener.calledOnce, 'to be true');\n    expect(listener.lastCall.args[0], 'to equal', event);\n  });\n\n  it('should call callback on error', function(done) {\n    const watcher = watchForServerChanges(() => {})(err => {\n      expect(err, 'to have message', 'Test');\n      done();\n    });\n\n    watcher.emit('error', new Error('Test'));\n  });\n\n  it('should log once ready', function() {\n    const watcher = watchForServerChanges(() => {})(() => {});\n    const log = spy();\n\n    Logger.on('info', log);\n    watcher.emit('ready');\n\n    expect(log.calledOnce, 'to be', true);\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/gulp/watchForServerChanges.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 384,
    "kind": "testDescribe",
    "name": "describe63",
    "testId": 63,
    "memberof": "test/src/lib/gulp/watchForServerChanges.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/gulp/watchForServerChanges.spec.js~describe63",
    "access": null,
    "description": "watchForServerChanges",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{watchForServerChanges}"
      }
    ],
    "testTargets": [
      "watchForServerChanges"
    ]
  },
  {
    "__docId__": 385,
    "kind": "testIt",
    "name": "it64",
    "testId": 64,
    "memberof": "test/src/lib/gulp/watchForServerChanges.spec.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/gulp/watchForServerChanges.spec.js~describe63.it64",
    "access": null,
    "description": "should return a Watcher",
    "lineNumber": 9
  },
  {
    "__docId__": 386,
    "kind": "testIt",
    "name": "it65",
    "testId": 65,
    "memberof": "test/src/lib/gulp/watchForServerChanges.spec.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/gulp/watchForServerChanges.spec.js~describe63.it65",
    "access": null,
    "description": "should forward change events to listener",
    "lineNumber": 13
  },
  {
    "__docId__": 387,
    "kind": "testIt",
    "name": "it66",
    "testId": 66,
    "memberof": "test/src/lib/gulp/watchForServerChanges.spec.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/gulp/watchForServerChanges.spec.js~describe63.it66",
    "access": null,
    "description": "should call callback on error",
    "lineNumber": 23
  },
  {
    "__docId__": 388,
    "kind": "testIt",
    "name": "it67",
    "testId": 67,
    "memberof": "test/src/lib/gulp/watchForServerChanges.spec.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/gulp/watchForServerChanges.spec.js~describe63.it67",
    "access": null,
    "description": "should log once ready",
    "lineNumber": 32
  },
  {
    "__docId__": 389,
    "kind": "testFile",
    "name": "test/src/lib/init/Options.spec.js",
    "content": "import expect from 'unexpected';\n\nimport InitOption from '../../../../src/lib/init/Option';\n\n/** @test {InitOption} */\ndescribe('InitOption', function() {\n  it('should throw when run without arguments', function() {\n    expect(() => new InitOption(), 'to throw', 'message or options required');\n  });\n\n  /** @test {InitOption#constructor} */\n  describe('#constructor', function() {\n    context('when run with string, string', function() {\n      it('should throw error for empty message', function() {\n        expect(() => new InitOption(''), 'to throw error', 'message is required');\n      });\n\n      it('should work with message only', function() {\n        let opt;\n\n        expect(() => (opt = new InitOption('message')), 'not to throw');\n        expect(opt.message, 'to match', /message/);\n        expect(opt.default, 'to be', undefined);\n      });\n\n      it('should set default type', function() {\n        expect((new InitOption('message')).type, 'to equal', InitOption.DefaultType);\n      });\n\n      it('should add `?` to message', function() {\n        expect((new InitOption('message')).message, 'to equal', 'message?');\n      });\n\n      it('should store default if given', function() {\n        expect((new InitOption('message', 'default')).default, 'to equal', 'default');\n      });\n    });\n\n    context('when run with object', function() {\n      it('should throw error for missing message', function() {\n        expect(() => new InitOption({}), 'to throw error', 'message is required');\n      });\n\n      it('should throw error for empty message', function() {\n        expect(() => new InitOption({ message: '' }), 'to throw error', 'message is required');\n      });\n\n      it('should add `?` to message', function() {\n        expect((new InitOption({ message: 'message' })).message, 'to equal', 'message?');\n      });\n\n      it('should set default type', function() {\n        expect((new InitOption({ message: 'message' })).type, 'to equal', InitOption.DefaultType);\n      });\n\n      it('should store type, message, default and validate', function() {\n        const opts = {\n          type: 'test',\n          message: 'message',\n          default: 'default',\n          validate: () => true,\n        };\n\n        const result = Object.assign({}, opts, { message: `${opts.message}?` });\n\n        expect((new InitOption(opts)), 'to have properties', result);\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 390,
    "kind": "testDescribe",
    "name": "describe68",
    "testId": 68,
    "memberof": "test/src/lib/init/Options.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe68",
    "access": null,
    "description": "InitOption",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitOption}"
      }
    ],
    "testTargets": [
      "InitOption"
    ]
  },
  {
    "__docId__": 391,
    "kind": "testIt",
    "name": "it69",
    "testId": 69,
    "memberof": "test/src/lib/init/Options.spec.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe68.it69",
    "access": null,
    "description": "should throw when run without arguments",
    "lineNumber": 7
  },
  {
    "__docId__": 392,
    "kind": "testDescribe",
    "name": "describe70",
    "testId": 70,
    "memberof": "test/src/lib/init/Options.spec.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe68.describe70",
    "access": null,
    "description": "#constructor",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{InitOption#constructor}"
      }
    ],
    "testTargets": [
      "InitOption#constructor"
    ]
  },
  {
    "__docId__": 393,
    "kind": "testDescribe",
    "name": "context71",
    "testId": 71,
    "memberof": "test/src/lib/init/Options.spec.js~describe68.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe68.describe70.context71",
    "access": null,
    "description": "when run with string, string",
    "lineNumber": 13
  },
  {
    "__docId__": 394,
    "kind": "testIt",
    "name": "it72",
    "testId": 72,
    "memberof": "test/src/lib/init/Options.spec.js~describe68.describe70.context71",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe68.describe70.context71.it72",
    "access": null,
    "description": "should throw error for empty message",
    "lineNumber": 14
  },
  {
    "__docId__": 395,
    "kind": "testIt",
    "name": "it73",
    "testId": 73,
    "memberof": "test/src/lib/init/Options.spec.js~describe68.describe70.context71",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe68.describe70.context71.it73",
    "access": null,
    "description": "should work with message only",
    "lineNumber": 18
  },
  {
    "__docId__": 396,
    "kind": "testIt",
    "name": "it74",
    "testId": 74,
    "memberof": "test/src/lib/init/Options.spec.js~describe68.describe70.context71",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe68.describe70.context71.it74",
    "access": null,
    "description": "should set default type",
    "lineNumber": 26
  },
  {
    "__docId__": 397,
    "kind": "testIt",
    "name": "it75",
    "testId": 75,
    "memberof": "test/src/lib/init/Options.spec.js~describe68.describe70.context71",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe68.describe70.context71.it75",
    "access": null,
    "description": "should add `?` to message",
    "lineNumber": 30
  },
  {
    "__docId__": 398,
    "kind": "testIt",
    "name": "it76",
    "testId": 76,
    "memberof": "test/src/lib/init/Options.spec.js~describe68.describe70.context71",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe68.describe70.context71.it76",
    "access": null,
    "description": "should store default if given",
    "lineNumber": 34
  },
  {
    "__docId__": 399,
    "kind": "testDescribe",
    "name": "context77",
    "testId": 77,
    "memberof": "test/src/lib/init/Options.spec.js~describe68.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe68.describe70.context77",
    "access": null,
    "description": "when run with object",
    "lineNumber": 39
  },
  {
    "__docId__": 400,
    "kind": "testIt",
    "name": "it78",
    "testId": 78,
    "memberof": "test/src/lib/init/Options.spec.js~describe68.describe70.context77",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe68.describe70.context77.it78",
    "access": null,
    "description": "should throw error for missing message",
    "lineNumber": 40
  },
  {
    "__docId__": 401,
    "kind": "testIt",
    "name": "it79",
    "testId": 79,
    "memberof": "test/src/lib/init/Options.spec.js~describe68.describe70.context77",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe68.describe70.context77.it79",
    "access": null,
    "description": "should throw error for empty message",
    "lineNumber": 44
  },
  {
    "__docId__": 402,
    "kind": "testIt",
    "name": "it80",
    "testId": 80,
    "memberof": "test/src/lib/init/Options.spec.js~describe68.describe70.context77",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe68.describe70.context77.it80",
    "access": null,
    "description": "should add `?` to message",
    "lineNumber": 48
  },
  {
    "__docId__": 403,
    "kind": "testIt",
    "name": "it81",
    "testId": 81,
    "memberof": "test/src/lib/init/Options.spec.js~describe68.describe70.context77",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe68.describe70.context77.it81",
    "access": null,
    "description": "should set default type",
    "lineNumber": 52
  },
  {
    "__docId__": 404,
    "kind": "testIt",
    "name": "it82",
    "testId": 82,
    "memberof": "test/src/lib/init/Options.spec.js~describe68.describe70.context77",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe68.describe70.context77.it82",
    "access": null,
    "description": "should store type, message, default and validate",
    "lineNumber": 56
  },
  {
    "__docId__": 405,
    "kind": "testFile",
    "name": "test/src/lib/server/AtviseFile.spec.js",
    "content": "import expect from 'unexpected';\nimport { stub } from 'sinon';\n\nimport { Buffer } from 'buffer';\nimport File from 'vinyl';\nimport { DataType, VariantArrayType } from 'node-opcua';\nimport AtviseFile from '../../../../src/lib/server/AtviseFile';\nimport AtviseTypes from '../../../../src/lib/server/Types';\nimport NodeId from '../../../../src/lib/server/NodeId';\n\n/** @test {AtviseFile} */\ndescribe('AtviseFile', function() {\n  /** @test {AtviseFile#constructor} */\n  describe('#constructor', function() {\n    it('should create a vinyl instance', function() {\n      const file = new AtviseFile();\n\n      expect(file, 'to be a', File);\n    });\n  });\n\n  const tests = [\n    {\n      name: 'should store variables with their data type as an extension',\n      nodeId: new NodeId('ns=1;s=AGENT.OBJECTS.Test'),\n      dataType: DataType.UInt16,\n      typeDefinition: new NodeId(NodeId.NodeIdType.NUMERIC, 62, 0),\n      arrayType: VariantArrayType.Scalar,\n      filePath: 'AGENT/OBJECTS/Test.uint16',\n    },\n    {\n      name: 'should store variable arrays with their data type as an extension',\n      nodeId: new NodeId('ns=1;s=AGENT.OBJECTS.Test'),\n      dataType: DataType.UInt16,\n      typeDefinition: new NodeId(NodeId.NodeIdType.NUMERIC, 62, 0),\n      arrayType: VariantArrayType.Array,\n      filePath: 'AGENT/OBJECTS/Test.uint16.array',\n    },\n    {\n      name: 'should store variable matrices with their data type as an extension',\n      nodeId: new NodeId('ns=1;s=AGENT.OBJECTS.Test'),\n      dataType: DataType.UInt16,\n      typeDefinition: new NodeId(NodeId.NodeIdType.NUMERIC, 62, 0),\n      arrayType: VariantArrayType.Matrix,\n      filePath: 'AGENT/OBJECTS/Test.uint16.matrix',\n    },\n    {\n      name: 'should store property variables with their data type as an extension',\n      nodeId: new NodeId('ns=1;s=AGENT.OBJECTS.Test.property'),\n      dataType: DataType.UInt16,\n      typeDefinition: new NodeId(NodeId.NodeIdType.NUMERIC, 68, 0),\n      arrayType: VariantArrayType.Scalar,\n      filePath: 'AGENT/OBJECTS/Test/property.prop.uint16',\n    },\n    {\n      name: 'should store html help documents with a \".help.html\" extension',\n      nodeId: new NodeId('ns=1;s=AGENT.DISPLAYS.Test.en'),\n      dataType: DataType.XmlElement,\n      typeDefinition: new NodeId('VariableTypes.ATVISE.HtmlHelp'),\n      arrayType: VariantArrayType.Scalar,\n      filePath: 'AGENT/DISPLAYS/Test/en.help.html',\n    },\n    {\n      name: 'should store quickdynamics with a \".qd.xml\" extension',\n      nodeId: new NodeId('ns=1;s=SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Test'),\n      dataType: DataType.XmlElement,\n      typeDefinition: new NodeId('VariableTypes.ATVISE.QuickDynamic'),\n      arrayType: VariantArrayType.Scalar,\n      filePath: 'SYSTEM/LIBRARY/PROJECT/QUICKDYNAMICS/Test.qd.xml',\n    },\n    {\n      name: 'should store scripts with a \".script.xml\" extension',\n      nodeId: new NodeId('ns=1;s=SYSTEM.LIBRARY.PROJECT.SERVERSCRIPTS.Test'),\n      dataType: DataType.XmlElement,\n      typeDefinition: new NodeId('VariableTypes.ATVISE.ScriptCode'),\n      arrayType: VariantArrayType.Scalar,\n      filePath: 'SYSTEM/LIBRARY/PROJECT/SERVERSCRIPTS/Test.script.xml',\n    },\n    {\n      name: 'should store displays with a \".display.xml\" extension',\n      nodeId: new NodeId('ns=1;s=AGENT.DISPLAYS.Test'),\n      dataType: DataType.XmlElement,\n      typeDefinition: new NodeId('VariableTypes.ATVISE.Display'),\n      arrayType: VariantArrayType.Scalar,\n      filePath: 'AGENT/DISPLAYS/Test.display.xml',\n    },\n    {\n      name: 'should store scripts with a \".locs.xml\" extension',\n      nodeId: new NodeId('ns=1;s=SYSTEM.LIBRARY.PROJECT.de'),\n      dataType: DataType.XmlElement,\n      typeDefinition: new NodeId('VariableTypes.ATVISE.TranslationTable'),\n      arrayType: VariantArrayType.Scalar,\n      filePath: 'SYSTEM/LIBRARY/PROJECT/de.locs.xml',\n    },\n    {\n      name: 'should store custom resources with their original extension',\n      nodeId: new NodeId('ns=1;s=SYSTEM.LIBRARY.PROJECT.RESOURCES/Test.md'),\n      dataType: DataType.ByteString,\n      typeDefinition: new NodeId('VariableTypes.ATVISE.Resource.OctetStream'),\n      arrayType: VariantArrayType.Scalar,\n      filePath: 'SYSTEM/LIBRARY/PROJECT/RESOURCES/Test.md',\n    },\n  ].concat(\n    AtviseTypes.filter(t => t.constructor.name === 'AtviseResourceType')\n      .map(t => ({\n        name: `should store ${t.typeDefinition.value} resources with their original extension`,\n        nodeId: new NodeId(`ns=1;s=SYSTEM.LIBRARY.PROJECT.RESOURCES/Test.${t.identifier}`),\n        dataType: DataType.ByteString,\n        typeDefinition: new NodeId(t.typeDefinition.value),\n        arrayType: VariantArrayType.Scalar,\n        filePath: `SYSTEM/LIBRARY/PROJECT/RESOURCES/Test.${t.identifier}`,\n      }))\n  );\n\n  /** @test {AtviseFile.pathForReadResult} */\n  describe('.pathForReadResult', function() {\n    tests.forEach(test => {\n      it(test.name, function() {\n        expect(AtviseFile.pathForReadResult({\n          nodeId: test.nodeId,\n          value: {\n            $dataType: test.dataType,\n            $arrayType: test.arrayType,\n          },\n          referenceDescription: {\n            typeDefinition: test.typeDefinition,\n          },\n        }), 'to equal', test.filePath);\n      });\n    })\n  });\n\n  /** @test {AtviseFile.encodeValue} */\n  describe('.encodeValue', function() {\n    it('should return empty buffer for null', function() {\n      expect(AtviseFile.encodeValue({ value: null }), 'to equal', Buffer.from(''));\n    });\n\n    it('should store timestamp as string for DateTime values', function() {\n      const now = new Date();\n\n      expect(AtviseFile.encodeValue({ value: now }, DataType.DateTime),\n        'to equal', Buffer.from(now.getTime().toString()));\n    });\n  });\n\n  /** @test {AtviseFile.decodeValue} */\n  describe('.decodeValue', function() {\n    it('should forward null', function() {\n      expect(AtviseFile.decodeValue(null), 'to equal', null);\n    });\n\n    function testDecoderForDataType(dataType, rawValue, expectedValue) {\n      it(`decoder for ${dataType} should work`, function() {\n        expect(AtviseFile.decodeValue(Buffer.from(rawValue), dataType),\n          'to satisfy', expectedValue);\n      });\n    }\n\n    const now = (new Date());\n\n    [\n      [DataType.Boolean, 'false', false],\n      [DataType.Boolean, 'true', true],\n      [DataType.String, 'test', 'test'],\n      [DataType.NodeId, 'ns=1;s=AGENT.DISPLAYS.Main', new NodeId('AGENT.DISPLAYS.Main')],\n      [DataType.DateTime, now.getTime().toString(), now],\n    ].forEach(t => testDecoderForDataType(...t));\n\n    it('should forward buffer without spection encoding', function() {\n      const buffer = new Buffer('test');\n      expect(AtviseFile.decodeValue(buffer, DataType.ByteString), 'to equal', buffer);\n    });\n  });\n  \n  /** @test {AtviseFile.normalizeMtime} */\n  describe('.normalizeMtime', function() {\n    it('should return original without milliseconds', function() {\n      const org = new Date();\n      org.setMilliseconds(0);\n\n      expect(AtviseFile.normalizeMtime(org), 'to equal', org);\n    });\n\n    it('should remove milliseconds if provided', function() {\n      const org = new Date();\n      org.setMilliseconds(500);\n\n      expect(AtviseFile.normalizeMtime(org).getMilliseconds(), 'to equal', 0);\n    });\n  });\n\n  /** @test {AtviseFile.fromReadResult} */\n  describe('.fromReadResult', function() {\n    it('should fail without value', function() {\n      expect(() => AtviseFile.fromReadResult({}), 'to throw', 'no value');\n    });\n  });\n\n  /** @test {AtviseFile#_getMetadata} */\n  describe('#_getMetadata', function() {\n    tests.forEach(test => {\n      it(test.name, function() {\n        const file = new AtviseFile({ path: test.filePath });\n\n        expect(() => file._getMetadata(), 'not to throw');\n        expect(file._dataType, 'to equal', test.dataType);\n        expect(file._arrayType, 'to equal', test.arrayType);\n        expect(file._typeDefinition, 'to equal', test.typeDefinition);\n      });\n    });\n  });\n\n  function testMetaGetter(name) {\n    beforeEach(() => stub(AtviseFile.prototype, '_getMetadata', () => {}));\n    afterEach(() => AtviseFile.prototype._getMetadata.restore());\n\n    it('should call _getMetadata if not present', function() {\n      const file = new AtviseFile({ path: 'path' });\n      const val = file[name];\n\n      expect(val, 'to be', undefined);\n      expect(AtviseFile.prototype._getMetadata.calledOnce, 'to be', true);\n    });\n  }\n\n  /** @test {AtviseFile#dataType} */\n  describe('#dataType', function() {\n    testMetaGetter('dataType');\n  });\n\n  /** @test {AtviseFile#arrayType} */\n  describe('#arrayType', function() {\n    testMetaGetter('arrayType');\n  });\n\n  /** @test {AtviseFile#typeDefinition} */\n  describe('#typeDefinition', function() {\n    testMetaGetter('typeDefinition');\n  });\n\n  /** @test {AtviseFile#isDisplay} */\n  describe('#isDisplay', function() {\n    it('should return true for AtviseFiles with correct TypeDefinition', function() {\n      expect((new AtviseFile({\n        path: 'test.display',\n        _typeDefinition: new NodeId('VariableTypes.ATVISE.Display'),\n      })).isDisplay, 'to be true');\n    });\n  });\n\n  /** @test {AtivseFile#value} */\n  describe('#value', function() {\n    const val = new Buffer('test');\n\n    before(() => {\n      stub(AtviseFile, 'decodeValue', () => true);\n      stub(AtviseFile, 'encodeValue', () => val);\n    });\n\n    after(() => {\n      AtviseFile.decodeValue.restore();\n      AtviseFile.encodeValue.restore();\n    });\n\n    context('when used as getter', function() {\n      it('should return decodedValue', function() {\n        const file = new AtviseFile({ path: 'path.ext' });\n\n        expect(file.value, 'to equal', true);\n        expect(AtviseFile.decodeValue.calledOnce, 'to be true');\n      });\n    });\n\n    context('when used as setter', function() {\n      it('should set encoded value as contents', function() {\n        const file = new AtviseFile({ path: 'path.ext' });\n        file.value = 13;\n\n        expect(AtviseFile.encodeValue.calledOnce, 'to be true');\n        expect(file.contents, 'to equal', val);\n      });\n    });\n  });\n\n  /** @test {AtviseFile#nodeId} */\n  describe('#nodeId', function() {\n    it('should keep extensions for resources', function() {\n      expect((new AtviseFile({ path: 'SYSTEM/LIBRARY/PROJECT/RESOURCES/example.js' }).nodeId.value),\n        'to equal', 'SYSTEM.LIBRARY.PROJECT.RESOURCES/example.js');\n    });\n  });\n\n  /** @test {AtviseFile#clone} */\n  describe('#clone', function() {\n    it('should return a file again', function() {\n      expect(new AtviseFile({\n        path: 'path/to/name.display.xml',\n        _arrayType: VariantArrayType.Matrix,\n      }).clone(), 'to be a', AtviseFile);\n    });\n\n    it('should return file with the same array type', function() {\n      expect(new AtviseFile({\n        path: 'path/to/name.display.xml',\n        _arrayType: VariantArrayType.Matrix,\n      }).clone()._arrayType, 'to equal', VariantArrayType.Matrix);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 406,
    "kind": "testDescribe",
    "name": "describe83",
    "testId": 83,
    "memberof": "test/src/lib/server/AtviseFile.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83",
    "access": null,
    "description": "AtviseFile",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtviseFile}"
      }
    ],
    "testTargets": [
      "AtviseFile"
    ]
  },
  {
    "__docId__": 407,
    "kind": "testDescribe",
    "name": "describe84",
    "testId": 84,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe84",
    "access": null,
    "description": "#constructor",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtviseFile#constructor}"
      }
    ],
    "testTargets": [
      "AtviseFile#constructor"
    ]
  },
  {
    "__docId__": 408,
    "kind": "testIt",
    "name": "it85",
    "testId": 85,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe84",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe84.it85",
    "access": null,
    "description": "should create a vinyl instance",
    "lineNumber": 15
  },
  {
    "__docId__": 409,
    "kind": "testDescribe",
    "name": "describe86",
    "testId": 86,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe86",
    "access": null,
    "description": ".pathForReadResult",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtviseFile.pathForReadResult}"
      }
    ],
    "testTargets": [
      "AtviseFile.pathForReadResult"
    ]
  },
  {
    "__docId__": 410,
    "kind": "testIt",
    "name": "it87",
    "testId": 87,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe86",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe86.it87",
    "access": null,
    "lineNumber": 118
  },
  {
    "__docId__": 411,
    "kind": "testDescribe",
    "name": "describe88",
    "testId": 88,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe88",
    "access": null,
    "description": ".encodeValue",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtviseFile.encodeValue}"
      }
    ],
    "testTargets": [
      "AtviseFile.encodeValue"
    ]
  },
  {
    "__docId__": 412,
    "kind": "testIt",
    "name": "it89",
    "testId": 89,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe88.it89",
    "access": null,
    "description": "should return empty buffer for null",
    "lineNumber": 135
  },
  {
    "__docId__": 413,
    "kind": "testIt",
    "name": "it90",
    "testId": 90,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe88.it90",
    "access": null,
    "description": "should store timestamp as string for DateTime values",
    "lineNumber": 139
  },
  {
    "__docId__": 414,
    "kind": "testDescribe",
    "name": "describe91",
    "testId": 91,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe91",
    "access": null,
    "description": ".decodeValue",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtviseFile.decodeValue}"
      }
    ],
    "testTargets": [
      "AtviseFile.decodeValue"
    ]
  },
  {
    "__docId__": 415,
    "kind": "testIt",
    "name": "it92",
    "testId": 92,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe91",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe91.it92",
    "access": null,
    "description": "should forward null",
    "lineNumber": 149
  },
  {
    "__docId__": 416,
    "kind": "testIt",
    "name": "it93",
    "testId": 93,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe91",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe91.it93",
    "access": null,
    "lineNumber": 154
  },
  {
    "__docId__": 417,
    "kind": "testIt",
    "name": "it94",
    "testId": 94,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe91",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe91.it94",
    "access": null,
    "description": "should forward buffer without spection encoding",
    "lineNumber": 170
  },
  {
    "__docId__": 418,
    "kind": "testDescribe",
    "name": "describe95",
    "testId": 95,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe95",
    "access": null,
    "description": ".normalizeMtime",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtviseFile.normalizeMtime}"
      }
    ],
    "testTargets": [
      "AtviseFile.normalizeMtime"
    ]
  },
  {
    "__docId__": 419,
    "kind": "testIt",
    "name": "it96",
    "testId": 96,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe95",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe95.it96",
    "access": null,
    "description": "should return original without milliseconds",
    "lineNumber": 178
  },
  {
    "__docId__": 420,
    "kind": "testIt",
    "name": "it97",
    "testId": 97,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe95",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe95.it97",
    "access": null,
    "description": "should remove milliseconds if provided",
    "lineNumber": 185
  },
  {
    "__docId__": 421,
    "kind": "testDescribe",
    "name": "describe98",
    "testId": 98,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe98",
    "access": null,
    "description": ".fromReadResult",
    "lineNumber": 194,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtviseFile.fromReadResult}"
      }
    ],
    "testTargets": [
      "AtviseFile.fromReadResult"
    ]
  },
  {
    "__docId__": 422,
    "kind": "testIt",
    "name": "it99",
    "testId": 99,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe98",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe98.it99",
    "access": null,
    "description": "should fail without value",
    "lineNumber": 195
  },
  {
    "__docId__": 423,
    "kind": "testDescribe",
    "name": "describe100",
    "testId": 100,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe100",
    "access": null,
    "description": "#_getMetadata",
    "lineNumber": 201,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtviseFile#_getMetadata}"
      }
    ],
    "testTargets": [
      "AtviseFile#_getMetadata"
    ]
  },
  {
    "__docId__": 424,
    "kind": "testIt",
    "name": "it101",
    "testId": 101,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe100.it101",
    "access": null,
    "lineNumber": 203
  },
  {
    "__docId__": 425,
    "kind": "testIt",
    "name": "it102",
    "testId": 102,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.it102",
    "access": null,
    "description": "should call _getMetadata if not present",
    "lineNumber": 218
  },
  {
    "__docId__": 426,
    "kind": "testDescribe",
    "name": "describe103",
    "testId": 103,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe103",
    "access": null,
    "description": "#dataType",
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtviseFile#dataType}"
      }
    ],
    "testTargets": [
      "AtviseFile#dataType"
    ]
  },
  {
    "__docId__": 427,
    "kind": "testDescribe",
    "name": "describe104",
    "testId": 104,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe104",
    "access": null,
    "description": "#arrayType",
    "lineNumber": 233,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtviseFile#arrayType}"
      }
    ],
    "testTargets": [
      "AtviseFile#arrayType"
    ]
  },
  {
    "__docId__": 428,
    "kind": "testDescribe",
    "name": "describe105",
    "testId": 105,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe105",
    "access": null,
    "description": "#typeDefinition",
    "lineNumber": 238,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtviseFile#typeDefinition}"
      }
    ],
    "testTargets": [
      "AtviseFile#typeDefinition"
    ]
  },
  {
    "__docId__": 429,
    "kind": "testDescribe",
    "name": "describe106",
    "testId": 106,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe106",
    "access": null,
    "description": "#isDisplay",
    "lineNumber": 243,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtviseFile#isDisplay}"
      }
    ],
    "testTargets": [
      "AtviseFile#isDisplay"
    ]
  },
  {
    "__docId__": 430,
    "kind": "testIt",
    "name": "it107",
    "testId": 107,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe106",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe106.it107",
    "access": null,
    "description": "should return true for AtviseFiles with correct TypeDefinition",
    "lineNumber": 244
  },
  {
    "__docId__": 431,
    "kind": "testDescribe",
    "name": "describe108",
    "testId": 108,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe108",
    "access": null,
    "description": "#value",
    "lineNumber": 253,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtivseFile#value}"
      }
    ],
    "testTargets": [
      "AtivseFile#value"
    ]
  },
  {
    "__docId__": 432,
    "kind": "testDescribe",
    "name": "context109",
    "testId": 109,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe108.context109",
    "access": null,
    "description": "when used as getter",
    "lineNumber": 266
  },
  {
    "__docId__": 433,
    "kind": "testIt",
    "name": "it110",
    "testId": 110,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe108.context109",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe108.context109.it110",
    "access": null,
    "description": "should return decodedValue",
    "lineNumber": 267
  },
  {
    "__docId__": 434,
    "kind": "testDescribe",
    "name": "context111",
    "testId": 111,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe108.context111",
    "access": null,
    "description": "when used as setter",
    "lineNumber": 275
  },
  {
    "__docId__": 435,
    "kind": "testIt",
    "name": "it112",
    "testId": 112,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe108.context111",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe108.context111.it112",
    "access": null,
    "description": "should set encoded value as contents",
    "lineNumber": 276
  },
  {
    "__docId__": 436,
    "kind": "testDescribe",
    "name": "describe113",
    "testId": 113,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe113",
    "access": null,
    "description": "#nodeId",
    "lineNumber": 287,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtviseFile#nodeId}"
      }
    ],
    "testTargets": [
      "AtviseFile#nodeId"
    ]
  },
  {
    "__docId__": 437,
    "kind": "testIt",
    "name": "it114",
    "testId": 114,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe113",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe113.it114",
    "access": null,
    "description": "should keep extensions for resources",
    "lineNumber": 288
  },
  {
    "__docId__": 438,
    "kind": "testDescribe",
    "name": "describe115",
    "testId": 115,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe115",
    "access": null,
    "description": "#clone",
    "lineNumber": 295,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AtviseFile#clone}"
      }
    ],
    "testTargets": [
      "AtviseFile#clone"
    ]
  },
  {
    "__docId__": 439,
    "kind": "testIt",
    "name": "it116",
    "testId": 116,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe115",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe115.it116",
    "access": null,
    "description": "should return a file again",
    "lineNumber": 296
  },
  {
    "__docId__": 440,
    "kind": "testIt",
    "name": "it117",
    "testId": 117,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe83.describe115",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe83.describe115.it117",
    "access": null,
    "description": "should return file with the same array type",
    "lineNumber": 303
  },
  {
    "__docId__": 441,
    "kind": "testFile",
    "name": "test/src/lib/server/Client.spec.js",
    "content": "import expect from 'unexpected';\nimport proxyquire from 'proxyquire';\n\nimport { OPCUAClient } from 'node-opcua';\nimport Client from '../../../../src/lib/server/Client';\n\nconst InvalidHostClient = proxyquire('../../../../src/lib/server/Client', {\n  '../../config/ProjectConfig': {\n    default: {\n      host: 'in valid url',\n      port: { opc: 4840 },\n    },\n  },\n}).default;\n\nconst NotExisingHostClient = proxyquire('../../../../src/lib/server/Client', {\n  '../../config/ProjectConfig': {\n    default: {\n      host: '123.456.789.0',\n      port: { opc: 4840 },\n    },\n  },\n}).default;\n\nconst FailingClient = proxyquire('../../../../src/lib/server/Client', {\n  'node-opcua': {\n    OPCUAClient: class FailingCli extends OPCUAClient {\n\n      connect(endpoint, callback) {\n        callback(new Error('Error message'))\n      }\n\n    }\n  },\n}).default;\n\n/** @test {Client} */\ndescribe('Client', function() {\n  /** @test {Client.create} */\n  describe('.create', function() {\n    it('should return a OPCUAClient', function() {\n      return expect(Client.create(), 'when fulfilled', 'to be a', OPCUAClient);\n    });\n\n    it('should fail with invalid host', function() {\n      return expect(InvalidHostClient.create(), 'to be rejected with', /Invalid endpoint url/);\n    });\n\n    it('should fail on connection timeout', function() {\n      return expect(NotExisingHostClient.create(), 'to be rejected with', /Connection timed out/);\n    });\n\n    it('should fail when node-opcua encounters an error', function() {\n      return expect(FailingClient.create(), 'to be rejected with', Error);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/server/Client.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 442,
    "kind": "testDescribe",
    "name": "describe118",
    "testId": 118,
    "memberof": "test/src/lib/server/Client.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/Client.spec.js~describe118",
    "access": null,
    "description": "Client",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Client}"
      }
    ],
    "testTargets": [
      "Client"
    ]
  },
  {
    "__docId__": 443,
    "kind": "testDescribe",
    "name": "describe119",
    "testId": 119,
    "memberof": "test/src/lib/server/Client.spec.js~describe118",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Client.spec.js~describe118.describe119",
    "access": null,
    "description": ".create",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Client.create}"
      }
    ],
    "testTargets": [
      "Client.create"
    ]
  },
  {
    "__docId__": 444,
    "kind": "testIt",
    "name": "it120",
    "testId": 120,
    "memberof": "test/src/lib/server/Client.spec.js~describe118.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Client.spec.js~describe118.describe119.it120",
    "access": null,
    "description": "should return a OPCUAClient",
    "lineNumber": 41
  },
  {
    "__docId__": 445,
    "kind": "testIt",
    "name": "it121",
    "testId": 121,
    "memberof": "test/src/lib/server/Client.spec.js~describe118.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Client.spec.js~describe118.describe119.it121",
    "access": null,
    "description": "should fail with invalid host",
    "lineNumber": 45
  },
  {
    "__docId__": 446,
    "kind": "testIt",
    "name": "it122",
    "testId": 122,
    "memberof": "test/src/lib/server/Client.spec.js~describe118.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Client.spec.js~describe118.describe119.it122",
    "access": null,
    "description": "should fail on connection timeout",
    "lineNumber": 49
  },
  {
    "__docId__": 447,
    "kind": "testIt",
    "name": "it123",
    "testId": 123,
    "memberof": "test/src/lib/server/Client.spec.js~describe118.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Client.spec.js~describe118.describe119.it123",
    "access": null,
    "description": "should fail when node-opcua encounters an error",
    "lineNumber": 53
  },
  {
    "__docId__": 448,
    "kind": "testFile",
    "name": "test/src/lib/server/NodeId.spec.js",
    "content": "import expect from 'unexpected';\nimport { spy } from 'sinon';\n\nimport { NodeId as OpcNodeId } from 'node-opcua';\nimport NodeId from '../../../../src/lib/server/NodeId';\n\n/** @test {NodeId} */\ndescribe('NodeId', function() {\n  const path = 'AGENT/DISPLAYS/Main';\n  const id = 'AGENT.DISPLAYS.Main';\n\n  /** @test {NodeId#constructor} */\n  describe('#constructor', function() {\n    function expectType(type, ...args) {\n      expect((new NodeId(...args)).identifierType, 'to equal', type);\n    }\n\n    context('when called with value only', function() {\n      it('should work', function() {\n        expect(() => new NodeId('AGENT.DISPLAYS'), 'not to throw');\n      });\n\n      it('should set namespace to 1', function() {\n        expect((new NodeId('AGENT.DISPLAYS')).namespace, 'to equal', 1);\n      });\n\n      it('should set indentifierType to string if string is passed', function() {\n        expectType(NodeId.NodeIdType.STRING, 'AGENT.DISPLAYS');\n      });\n\n      it('should set indentifierType to number if number is passed', function() {\n        expectType(NodeId.NodeIdType.NUMERIC, 123);\n      });\n    });\n\n    context('when called with a nodeid string', function() {\n      it('should work', function() {\n        expect(() => new NodeId('ns=1;s=AGENT.DISPLAYS'), 'not to throw');\n      });\n\n      it('should get namespace from string', function() {\n        expect((new NodeId('ns=13;s=AGENT.DISPLAYS')).namespace, 'to equal', 13);\n      });\n\n      it('should get identifierType from string', function() {\n        expectType(NodeId.NodeIdType.STRING, 'ns=1;s=AGENT.DISPLAYS');\n        expectType(NodeId.NodeIdType.NUMERIC, 'ns=1;i=13');\n        // FIXME: Missing tests for type GUID\n        expectType(NodeId.NodeIdType.BYTESTRING, 'ns=1;b=13Ac');\n      });\n    });\n\n    context('when called with type, value, namespace', function() {\n      it('should work', function() {\n        expect(() => new NodeId(NodeId.NodeIdType.STRING, 'AGENT.DISPLAYS', 1), 'not to throw');\n      });\n\n      it('should set namespace to 1 if omitted', function() {\n        expect(() => new NodeId(NodeId.NodeIdType.STRING, 'AGENT.DISPLAYS'), 'not to throw');\n        expect((new NodeId(NodeId.NodeIdType.STRING, 'AGENT.DISPLAYS')).namespace, 'to equal', 1);\n      });\n    });\n\n    it('should extend node-opcua\\'s NodeId', function() {\n      expect((new NodeId(NodeId.NodeIdType.NUMERIC, 123, 1)), 'to be a', OpcNodeId);\n    });\n  });\n\n  /** @test {NodeId#fromFilePath} */\n  describe('#fromFilePath', function() {\n    it('should return a NodeId', function() {\n      expect(NodeId.fromFilePath(path), 'to be a', NodeId);\n    });\n\n    it('should return file path again', function() {\n      const nodeId = NodeId.fromFilePath(path);\n      expect(nodeId.filePath, 'to be a', 'string');\n      expect(nodeId.filePath, 'to equal', path);\n    });\n\n    it('should work with resource paths', function() {\n      expect(NodeId.fromFilePath(\n        'SYSTEM/LIBRARY/ATVISE/RESOURCES/timer/imgs_glossy/top-separator.gif'\n      ).value,\n        'to equal', 'SYSTEM.LIBRARY.ATVISE.RESOURCES/timer/imgs_glossy/top-separator.gif');\n    });\n  });\n\n  /** @test {NodeId#filePath} */\n  describe('#filePath', function() {\n    it('should return a valid file path', function() {\n      const nodeId = new NodeId(NodeId.NodeIdType.STRING, id, 1);\n\n      expect(nodeId.filePath, 'to be a', 'string');\n      expect(nodeId.filePath, 'to equal', path);\n    });\n\n    it('should handle resource paths', function() {\n      const nodeId = new NodeId(NodeId.NodeIdType.STRING, 'SYSTEM.LIBRARY.RESOURCES/dir/test.ext', 1);\n\n      expect(nodeId.filePath, 'to be a', 'string');\n      expect(nodeId.filePath, 'to equal', 'SYSTEM/LIBRARY/RESOURCES/dir/test.ext');\n    });\n  });\n\n  /** @test {NodeId#inspect} */\n  describe('#inspect', function() {\n    const opts = {\n      stylize: spy(t => t),\n    };\n\n    beforeEach(() => opts.stylize.reset());\n\n    it('should return \"namespace value\"', function() {\n      const nodeId = new NodeId(NodeId.NodeIdType.STRING, 'AGENT.DISPLAYS', 1);\n\n      expect(nodeId.inspect(0, opts), 'to match', /1 AGENT\\.DISPLAYS/);\n    });\n\n    it('should style string id as string', function() {\n      (new NodeId(NodeId.NodeIdType.STRING, 'AGENT.DISPLAYS', 1)).inspect(0, opts);\n\n      expect(opts.stylize.calledTwice, 'to be true');\n      expect(opts.stylize.lastCall.args, 'to equal', ['AGENT.DISPLAYS', 'string']);\n    });\n\n    it('should style numeric id as number', function() {\n      (new NodeId(NodeId.NodeIdType.NUMERIC, 123, 1)).inspect(0, opts);\n\n      expect(opts.stylize.calledTwice, 'to be true');\n      expect(opts.stylize.lastCall.args, 'to equal', [123, 'number']);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 449,
    "kind": "testDescribe",
    "name": "describe124",
    "testId": 124,
    "memberof": "test/src/lib/server/NodeId.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124",
    "access": null,
    "description": "NodeId",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{NodeId}"
      }
    ],
    "testTargets": [
      "NodeId"
    ]
  },
  {
    "__docId__": 450,
    "kind": "testDescribe",
    "name": "describe125",
    "testId": 125,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe125",
    "access": null,
    "description": "#constructor",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{NodeId#constructor}"
      }
    ],
    "testTargets": [
      "NodeId#constructor"
    ]
  },
  {
    "__docId__": 451,
    "kind": "testDescribe",
    "name": "context126",
    "testId": 126,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context126",
    "access": null,
    "description": "when called with value only",
    "lineNumber": 18
  },
  {
    "__docId__": 452,
    "kind": "testIt",
    "name": "it127",
    "testId": 127,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context126",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context126.it127",
    "access": null,
    "description": "should work",
    "lineNumber": 19
  },
  {
    "__docId__": 453,
    "kind": "testIt",
    "name": "it128",
    "testId": 128,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context126",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context126.it128",
    "access": null,
    "description": "should set namespace to 1",
    "lineNumber": 23
  },
  {
    "__docId__": 454,
    "kind": "testIt",
    "name": "it129",
    "testId": 129,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context126",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context126.it129",
    "access": null,
    "description": "should set indentifierType to string if string is passed",
    "lineNumber": 27
  },
  {
    "__docId__": 455,
    "kind": "testIt",
    "name": "it130",
    "testId": 130,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context126",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context126.it130",
    "access": null,
    "description": "should set indentifierType to number if number is passed",
    "lineNumber": 31
  },
  {
    "__docId__": 456,
    "kind": "testDescribe",
    "name": "context131",
    "testId": 131,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context131",
    "access": null,
    "description": "when called with a nodeid string",
    "lineNumber": 36
  },
  {
    "__docId__": 457,
    "kind": "testIt",
    "name": "it132",
    "testId": 132,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context131",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context131.it132",
    "access": null,
    "description": "should work",
    "lineNumber": 37
  },
  {
    "__docId__": 458,
    "kind": "testIt",
    "name": "it133",
    "testId": 133,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context131",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context131.it133",
    "access": null,
    "description": "should get namespace from string",
    "lineNumber": 41
  },
  {
    "__docId__": 459,
    "kind": "testIt",
    "name": "it134",
    "testId": 134,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context131",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context131.it134",
    "access": null,
    "description": "should get identifierType from string",
    "lineNumber": 45
  },
  {
    "__docId__": 460,
    "kind": "testDescribe",
    "name": "context135",
    "testId": 135,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context135",
    "access": null,
    "description": "when called with type, value, namespace",
    "lineNumber": 53
  },
  {
    "__docId__": 461,
    "kind": "testIt",
    "name": "it136",
    "testId": 136,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context135",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context135.it136",
    "access": null,
    "description": "should work",
    "lineNumber": 54
  },
  {
    "__docId__": 462,
    "kind": "testIt",
    "name": "it137",
    "testId": 137,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context135",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe125.context135.it137",
    "access": null,
    "description": "should set namespace to 1 if omitted",
    "lineNumber": 58
  },
  {
    "__docId__": 463,
    "kind": "testIt",
    "name": "it138",
    "testId": 138,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe125.it138",
    "access": null,
    "description": "should extend node-opcua's NodeId",
    "lineNumber": 64
  },
  {
    "__docId__": 464,
    "kind": "testDescribe",
    "name": "describe139",
    "testId": 139,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe139",
    "access": null,
    "description": "#fromFilePath",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{NodeId#fromFilePath}"
      }
    ],
    "testTargets": [
      "NodeId#fromFilePath"
    ]
  },
  {
    "__docId__": 465,
    "kind": "testIt",
    "name": "it140",
    "testId": 140,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe139.it140",
    "access": null,
    "description": "should return a NodeId",
    "lineNumber": 71
  },
  {
    "__docId__": 466,
    "kind": "testIt",
    "name": "it141",
    "testId": 141,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe139.it141",
    "access": null,
    "description": "should return file path again",
    "lineNumber": 75
  },
  {
    "__docId__": 467,
    "kind": "testIt",
    "name": "it142",
    "testId": 142,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe139.it142",
    "access": null,
    "description": "should work with resource paths",
    "lineNumber": 81
  },
  {
    "__docId__": 468,
    "kind": "testDescribe",
    "name": "describe143",
    "testId": 143,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe143",
    "access": null,
    "description": "#filePath",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{NodeId#filePath}"
      }
    ],
    "testTargets": [
      "NodeId#filePath"
    ]
  },
  {
    "__docId__": 469,
    "kind": "testIt",
    "name": "it144",
    "testId": 144,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe143",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe143.it144",
    "access": null,
    "description": "should return a valid file path",
    "lineNumber": 91
  },
  {
    "__docId__": 470,
    "kind": "testIt",
    "name": "it145",
    "testId": 145,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe143",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe143.it145",
    "access": null,
    "description": "should handle resource paths",
    "lineNumber": 98
  },
  {
    "__docId__": 471,
    "kind": "testDescribe",
    "name": "describe146",
    "testId": 146,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe146",
    "access": null,
    "description": "#inspect",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{NodeId#inspect}"
      }
    ],
    "testTargets": [
      "NodeId#inspect"
    ]
  },
  {
    "__docId__": 472,
    "kind": "testIt",
    "name": "it147",
    "testId": 147,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe146",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe146.it147",
    "access": null,
    "description": "should return \"namespace value\"",
    "lineNumber": 114
  },
  {
    "__docId__": 473,
    "kind": "testIt",
    "name": "it148",
    "testId": 148,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe146",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe146.it148",
    "access": null,
    "description": "should style string id as string",
    "lineNumber": 120
  },
  {
    "__docId__": 474,
    "kind": "testIt",
    "name": "it149",
    "testId": 149,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe124.describe146",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe124.describe146.it149",
    "access": null,
    "description": "should style numeric id as number",
    "lineNumber": 127
  },
  {
    "__docId__": 475,
    "kind": "testFile",
    "name": "test/src/lib/server/NodeStream.spec.js",
    "content": "import { ClientSession, resolveNodeId } from 'node-opcua';\nimport { stub, spy } from 'sinon';\nimport expect from '../../../expect';\nimport NodeStream from '../../../../src/lib/server/NodeStream';\nimport Stream from '../../../../src/lib/server/Stream';\nimport Session from '../../../../src/lib/server/Session';\nimport NodeId from '../../../../src/lib/server/NodeId';\n\n/** @test {NodeStream} */\ndescribe('NodeStream', function() {\n  const testNodes = [new NodeId('ns=1;s=AGENT.DISPLAYS')];\n\n  /** @test {NodeStream#constructor} */\n  describe('#constructor', function() {\n    let stream;\n\n    it('should fail without nodes', function() {\n      expect(() => (stream = new NodeStream()), 'to throw', 'nodes is required');\n    });\n\n    it('should return a server Stream', function() {\n      expect((stream = new NodeStream(testNodes)), 'to be a', Stream);\n    });\n\n    it('should store \"maxRetries\" option', function() {\n      expect((stream = new NodeStream(testNodes, { maxRetries: 13 })).maxRetries, 'to equal', 13);\n    });\n\n    it('should set \"recursive\" to true by default', function() {\n      expect((stream = new NodeStream(testNodes)).recursive, 'to be true');\n    });\n\n    it('should handle \"recursive\" option', function() {\n      expect((stream = new NodeStream(testNodes, { recursive: false })).recursive, 'to be false');\n    });\n\n    it('should throw if options.ignoreNodes is not an array', function() {\n      expect(() => (stream = new NodeStream(testNodes, { ignoreNodes: 'asdf' })), 'to throw',\n        'ignoreNodes must be an array of node ids');\n    });\n\n    it('should handle \"ignoreNodes\" option', function() {\n      expect((stream = new NodeStream(testNodes, { ignoreNodes: [new NodeId('TESTNODE')] }))\n        .ignoredRegExp, 'to equal', new RegExp('^(ns=1;s=TESTNODE)'));\n    });\n  });\n\n  /** @test {NodeStream#browseNodes} */\n  describe('#browseNodes', function() {\n    it('should be called for the specified nodes', function(done) {\n      const stream = new NodeStream(testNodes);\n      stub(stream, 'browseNodes', () => Promise.resolve(true));\n\n      stream.on('data', () => {}) // unpause readable stream\n        .on('end', () => {\n          expect(stream.browseNodes.calledOnce, 'to be', true);\n          expect(stream.browseNodes.lastCall.args, 'to equal', [testNodes]);\n\n          done();\n        });\n    });\n\n    context('when browsing fails', function() {\n      before(() => {\n        stub(ClientSession.prototype, 'browse', (node, cb) => {\n          cb(new Error('Browse error'));\n        });\n      });\n\n      after(() => ClientSession.prototype.browse.restore());\n\n      it('should forward errors', function(done) {\n        const stream = new NodeStream(testNodes);\n        stream.once('session-open', () => {\n          Session.close(stream.session);\n        });\n\n        stream.on('data', () => {}) // unpause readable stream\n          .on('error', err => {\n            expect(err, 'to have message', /Browse error/);\n\n            done();\n          });\n      });\n    });\n\n    context('when browsing returns empty results', function() {\n      before(() => {\n        stub(ClientSession.prototype, 'browse', (node, cb) => {\n          cb(null, []);\n        });\n      });\n\n      after(() => ClientSession.prototype.browse.restore());\n\n      it('should emit error', function(done) {\n        const stream = new NodeStream(testNodes);\n        stream.once('session-open', () => {\n          Session.close(stream.session);\n        });\n\n        stream.on('data', () => {}) // unpause readable stream\n          .on('error', err => {\n            expect(err, 'to have message', /No results/);\n\n            done();\n          });\n      });\n    });\n\n    context('when browsing returns status codes > 0', function() {\n      before(() => {\n        stub(ClientSession.prototype, 'browse', (node, cb) => {\n          cb(null, [{ statusCode: 13 }]);\n        });\n      });\n\n      after(() => ClientSession.prototype.browse.restore());\n\n      it('should emit error', function(done) {\n        const stream = new NodeStream(testNodes);\n\n        stream.on('data', () => {}) // unpause readable stream\n          .on('error', err => {\n            expect(err, 'to have message', /failed: Code 13/);\n\n            done();\n          });\n      });\n    });\n\n    context('when browsing works', function() {\n      const nodeId = resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main');\n      let firstCall = true;\n\n      before(() => {\n        stub(ClientSession.prototype, 'browse', (node, cb) => {\n          if (firstCall) {\n            cb(null, [{\n              references: [{ nodeClass: { value: 2 }, nodeId }],\n            }]);\n            firstCall = false;\n          } else {\n            cb(null, [{ references: [] }]);\n          }\n        });\n      });\n\n      after(() => ClientSession.prototype.browse.restore());\n\n      beforeEach(() => (firstCall = true));\n\n      it('should push browsed variable nodes', function(done) {\n        const stream = new NodeStream(testNodes);\n\n        stream.on('data', desc => {\n          expect(desc.nodeId, 'to equal', nodeId);\n        })\n          .on('end', () => done());\n      });\n\n      it('should be called only once when recursive is set to false', function(done) {\n        const stream = new NodeStream(testNodes, { recursive: false });\n        spy(stream, 'browseNode');\n\n        stream\n          .on('data', () => {}) // unpause readable stream\n          .on('end', () => {\n            expect(stream.browseNode, 'was called times', 1);\n            expect(stream.browseNode, 'was called with', testNodes[0]);\n\n            done();\n          });\n      });\n\n      it('should be called for all browsed nodes if recursive is set', function(done) {\n        const stream = new NodeStream(testNodes, { recursive: true });\n        spy(stream, 'browseNode');\n        const nodes = [];\n\n        stream\n          .on('data', desc => nodes.push(desc.nodeId)) // unpause readable stream\n          .on('end', () => {\n            expect(stream.browseNode.callCount, 'to be greater than', 1);\n            expect(stream.browseNode, 'to have calls satisfying',\n              testNodes.concat(nodes).map(n => ({ args: [n] }))\n            );\n\n            done();\n          });\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 476,
    "kind": "testDescribe",
    "name": "describe150",
    "testId": 150,
    "memberof": "test/src/lib/server/NodeStream.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150",
    "access": null,
    "description": "NodeStream",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{NodeStream}"
      }
    ],
    "testTargets": [
      "NodeStream"
    ]
  },
  {
    "__docId__": 477,
    "kind": "testDescribe",
    "name": "describe151",
    "testId": 151,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe151",
    "access": null,
    "description": "#constructor",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{NodeStream#constructor}"
      }
    ],
    "testTargets": [
      "NodeStream#constructor"
    ]
  },
  {
    "__docId__": 478,
    "kind": "testIt",
    "name": "it152",
    "testId": 152,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe151",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe151.it152",
    "access": null,
    "description": "should fail without nodes",
    "lineNumber": 17
  },
  {
    "__docId__": 479,
    "kind": "testIt",
    "name": "it153",
    "testId": 153,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe151",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe151.it153",
    "access": null,
    "description": "should return a server Stream",
    "lineNumber": 21
  },
  {
    "__docId__": 480,
    "kind": "testIt",
    "name": "it154",
    "testId": 154,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe151",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe151.it154",
    "access": null,
    "description": "should store \"maxRetries\" option",
    "lineNumber": 25
  },
  {
    "__docId__": 481,
    "kind": "testIt",
    "name": "it155",
    "testId": 155,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe151",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe151.it155",
    "access": null,
    "description": "should set \"recursive\" to true by default",
    "lineNumber": 29
  },
  {
    "__docId__": 482,
    "kind": "testIt",
    "name": "it156",
    "testId": 156,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe151",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe151.it156",
    "access": null,
    "description": "should handle \"recursive\" option",
    "lineNumber": 33
  },
  {
    "__docId__": 483,
    "kind": "testIt",
    "name": "it157",
    "testId": 157,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe151",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe151.it157",
    "access": null,
    "description": "should throw if options.ignoreNodes is not an array",
    "lineNumber": 37
  },
  {
    "__docId__": 484,
    "kind": "testIt",
    "name": "it158",
    "testId": 158,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe151",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe151.it158",
    "access": null,
    "description": "should handle \"ignoreNodes\" option",
    "lineNumber": 42
  },
  {
    "__docId__": 485,
    "kind": "testDescribe",
    "name": "describe159",
    "testId": 159,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe159",
    "access": null,
    "description": "#browseNodes",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{NodeStream#browseNodes}"
      }
    ],
    "testTargets": [
      "NodeStream#browseNodes"
    ]
  },
  {
    "__docId__": 486,
    "kind": "testIt",
    "name": "it160",
    "testId": 160,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe159",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.it160",
    "access": null,
    "description": "should be called for the specified nodes",
    "lineNumber": 50
  },
  {
    "__docId__": 487,
    "kind": "testDescribe",
    "name": "context161",
    "testId": 161,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe159",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.context161",
    "access": null,
    "description": "when browsing fails",
    "lineNumber": 63
  },
  {
    "__docId__": 488,
    "kind": "testIt",
    "name": "it162",
    "testId": 162,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.context161",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.context161.it162",
    "access": null,
    "description": "should forward errors",
    "lineNumber": 72
  },
  {
    "__docId__": 489,
    "kind": "testDescribe",
    "name": "context163",
    "testId": 163,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe159",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.context163",
    "access": null,
    "description": "when browsing returns empty results",
    "lineNumber": 87
  },
  {
    "__docId__": 490,
    "kind": "testIt",
    "name": "it164",
    "testId": 164,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.context163",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.context163.it164",
    "access": null,
    "description": "should emit error",
    "lineNumber": 96
  },
  {
    "__docId__": 491,
    "kind": "testDescribe",
    "name": "context165",
    "testId": 165,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe159",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.context165",
    "access": null,
    "description": "when browsing returns status codes > 0",
    "lineNumber": 111
  },
  {
    "__docId__": 492,
    "kind": "testIt",
    "name": "it166",
    "testId": 166,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.context165",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.context165.it166",
    "access": null,
    "description": "should emit error",
    "lineNumber": 120
  },
  {
    "__docId__": 493,
    "kind": "testDescribe",
    "name": "context167",
    "testId": 167,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe159",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.context167",
    "access": null,
    "description": "when browsing works",
    "lineNumber": 132
  },
  {
    "__docId__": 494,
    "kind": "testIt",
    "name": "it168",
    "testId": 168,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.context167",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.context167.it168",
    "access": null,
    "description": "should push browsed variable nodes",
    "lineNumber": 153
  },
  {
    "__docId__": 495,
    "kind": "testIt",
    "name": "it169",
    "testId": 169,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.context167",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.context167.it169",
    "access": null,
    "description": "should be called only once when recursive is set to false",
    "lineNumber": 162
  },
  {
    "__docId__": 496,
    "kind": "testIt",
    "name": "it170",
    "testId": 170,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.context167",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe150.describe159.context167.it170",
    "access": null,
    "description": "should be called for all browsed nodes if recursive is set",
    "lineNumber": 176
  },
  {
    "__docId__": 497,
    "kind": "testFile",
    "name": "test/src/lib/server/ReadStream.spec.js",
    "content": "import { spy, stub } from 'sinon';\nimport expect from '../../../expect';\n\nimport NodeId from '../../../../src/lib/server/NodeId';\nimport ReadStream from '../../../../src/lib/server/ReadStream';\n\n/** @test {ReadStream} */\ndescribe('ReadStream', function() {\n  const validNodeId = new NodeId('ns=0;i=2262'); // ProductUri\n\n  /** @test {ReadStream#readNode} */\n  describe('#readNode', function() {\n    it('should fail if an error occurs', function() {\n      const stream = new ReadStream();\n\n      stream.once('session-open', () => {\n        stream.session.read = (node, cb) => cb(new Error('Failed'));\n      });\n\n      return expect([{ nodeId: validNodeId }], 'when piped through', stream,\n        'to error with', `Reading ${validNodeId.toString()} failed: Failed`);\n    });\n\n    it('should with no or empty results', function() {\n      const stream = new ReadStream();\n\n      stream.once('session-open', () => {\n        stream.session.read = (node, cb) => cb(null, []);\n      });\n\n      return expect([{ nodeId: validNodeId }], 'when piped through', stream,\n        'to error with', `Reading ${validNodeId.toString()} failed: No results`);\n    });\n\n    it('should fail with non-good status code', function() {\n      const stream = new ReadStream();\n      const nodeId = new NodeId('ns=123;i=2262'); // This node does not exist\n\n      return expect([{ nodeId }], 'when piped through', stream,\n        'to error with', /Reading ns=123;i=2262 failed: Status BadNodeIdUnknown/);\n    });\n\n    it('should read variables', function() {\n      const stream = new ReadStream();\n\n      return expect([{ nodeId: validNodeId }], 'when piped through', stream,\n        'to yield objects satisfying', [{\n          nodeId: validNodeId,\n          value: { value: 'http://www.atvise.com' },\n        }]);\n    });\n  });\n\n  /** @test {ReadStream#_transform} */\n  describe('#_transform', function() {\n    it('should wait for session to open', function(done) {\n      const stream = new ReadStream();\n      stub(stream, 'readNode', (node, cb) => cb(null));\n      spy(stream, '_transform');\n\n      stream.on('data', () => {}); // Unpause readable stream\n      stream.write(new NodeId('ns=1;s=AGENT.DISPLAYS'));\n\n      expect(stream._transform.calledOnce, 'to be', true);\n      expect(stream.readNode.callCount, 'to equal', 0);\n\n      stream.once('end', () => {\n        expect(stream._transform.calledOnce, 'to be', true);\n        expect(stream.readNode.calledOnce, 'to be', true);\n        done();\n      });\n      stream.end();\n    });\n\n    it('should read immediate if session is open', function(done) {\n      const stream = new ReadStream();\n      stub(stream, 'readNode', (node, cb) => cb(null));\n\n      stream.on('data', () => {}); // Unpause readable stream\n\n      stream.once('session-open', () => {\n        stream.write(new NodeId('ns=1;s=AGENT.DISPLAYS'));\n        expect(stream.readNode.calledOnce, 'to be true');\n        stream.end();\n      });\n\n      stream.on('end', done);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 498,
    "kind": "testDescribe",
    "name": "describe171",
    "testId": 171,
    "memberof": "test/src/lib/server/ReadStream.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe171",
    "access": null,
    "description": "ReadStream",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ReadStream}"
      }
    ],
    "testTargets": [
      "ReadStream"
    ]
  },
  {
    "__docId__": 499,
    "kind": "testDescribe",
    "name": "describe172",
    "testId": 172,
    "memberof": "test/src/lib/server/ReadStream.spec.js~describe171",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe171.describe172",
    "access": null,
    "description": "#readNode",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ReadStream#readNode}"
      }
    ],
    "testTargets": [
      "ReadStream#readNode"
    ]
  },
  {
    "__docId__": 500,
    "kind": "testIt",
    "name": "it173",
    "testId": 173,
    "memberof": "test/src/lib/server/ReadStream.spec.js~describe171.describe172",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe171.describe172.it173",
    "access": null,
    "description": "should fail if an error occurs",
    "lineNumber": 13
  },
  {
    "__docId__": 501,
    "kind": "testIt",
    "name": "it174",
    "testId": 174,
    "memberof": "test/src/lib/server/ReadStream.spec.js~describe171.describe172",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe171.describe172.it174",
    "access": null,
    "description": "should with no or empty results",
    "lineNumber": 24
  },
  {
    "__docId__": 502,
    "kind": "testIt",
    "name": "it175",
    "testId": 175,
    "memberof": "test/src/lib/server/ReadStream.spec.js~describe171.describe172",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe171.describe172.it175",
    "access": null,
    "description": "should fail with non-good status code",
    "lineNumber": 35
  },
  {
    "__docId__": 503,
    "kind": "testIt",
    "name": "it176",
    "testId": 176,
    "memberof": "test/src/lib/server/ReadStream.spec.js~describe171.describe172",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe171.describe172.it176",
    "access": null,
    "description": "should read variables",
    "lineNumber": 43
  },
  {
    "__docId__": 504,
    "kind": "testDescribe",
    "name": "describe177",
    "testId": 177,
    "memberof": "test/src/lib/server/ReadStream.spec.js~describe171",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe171.describe177",
    "access": null,
    "description": "#_transform",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ReadStream#_transform}"
      }
    ],
    "testTargets": [
      "ReadStream#_transform"
    ]
  },
  {
    "__docId__": 505,
    "kind": "testIt",
    "name": "it178",
    "testId": 178,
    "memberof": "test/src/lib/server/ReadStream.spec.js~describe171.describe177",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe171.describe177.it178",
    "access": null,
    "description": "should wait for session to open",
    "lineNumber": 56
  },
  {
    "__docId__": 506,
    "kind": "testIt",
    "name": "it179",
    "testId": 179,
    "memberof": "test/src/lib/server/ReadStream.spec.js~describe171.describe177",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe171.describe177.it179",
    "access": null,
    "description": "should read immediate if session is open",
    "lineNumber": 75
  },
  {
    "__docId__": 507,
    "kind": "testFile",
    "name": "test/src/lib/server/Session.spec.js",
    "content": "import expect from 'unexpected';\nimport { spy } from 'sinon';\nimport proxyquire from 'proxyquire';\n\nimport { ClientSession } from 'node-opcua';\nimport Session from '../../../../src/lib/server/Session';\nimport Client from '../../../../src/lib/server/Client';\n\nfunction sessionWithLogin(login) {\n  return proxyquire('../../../../src/lib/server/Session', {\n    '../../config/ProjectConfig': {\n      default: { login },\n    },\n  }).default;\n}\n\nconst FailingClientSession = proxyquire('../../../../src/lib/server/Session', {\n  './Client': {\n    __esModule: true,\n    default: class StubClient {\n      static create() {\n        return Promise.reject(new Error('Client.create error'));\n      }\n    },\n  },\n}).default;\n\nconst FailingSession = proxyquire('../../../../src/lib/server/Session', {\n  './Client': {\n    __esModule: true,\n    default: class StubClient extends Client {\n      static create() {\n        return super.create()\n          .then(client => {\n            client.createSession = (login, callback) => {\n              callback(new Error('Client.createSession error'));\n            };\n\n            return client;\n          });\n      }\n    },\n  },\n}).default;\n\n/** @test {Session} */\ndescribe('Session', function() {\n  /** @test {Session.create} */\n  describe('.create', function() {\n    it('should create a new ClientSession', function() {\n      return expect(Session.create(), 'to be fulfilled')\n        .then(session => {\n          expect(session, 'to be a', ClientSession);\n          return session;\n        })\n        .then(session => Session.close(session));\n    });\n\n    it('should store newly created session', function() {\n      return expect(Session.create(), 'to be fulfilled')\n        .then(session => {\n          expect(Session.open, 'to contain', session);\n          return session;\n        })\n        .then(session => Session.close(session));\n    });\n\n    it('should fail with invalid credentials', function() {\n      return Promise.all([\n        // Missing username\n        expect(sessionWithLogin({\n          username: false,\n          password: 'invalid password',\n        }).create(), 'to be rejected with', /Invalid login/),\n\n        // Missing password\n        expect(sessionWithLogin({\n          username: 'invalid username',\n          password: false,\n        }).create(), 'to be rejected with', /Invalid login/),\n\n        // Invalid credentials\n        expect(sessionWithLogin({\n          username: 'invalid username',\n          password: 'invalid password',\n        }).create(), 'to be rejected with', /Invalid login/),\n      ]);\n    });\n\n    it('should forward Client.create errors', function() {\n      return expect(FailingClientSession.create(), 'to be rejected with', 'Client.create error');\n    });\n\n    it('should forward non-login errors', function() {\n      return expect(FailingSession.create(), 'to be rejected with', /Client\\.createSession error/);\n    });\n  });\n\n  /** @test {Session.close} */\n  describe('.close', function() {\n    it('should fail without session', function() {\n      return expect(() => Session.close(), 'to be rejected with', 'session is required');\n    });\n\n    it('should return if session is already closed', function() {\n      return expect(Session.create(), 'to be fulfilled')\n        .then(session => expect(Session.close(session), 'to be fulfilled'))\n        .then(session => expect(Session.close(session), 'to be fulfilled'));\n    });\n\n    it('should wait for session to close if already closing', function() {\n      return expect(Session.create(), 'to be fulfilled')\n        .then(session => {\n          spy(session, 'close');\n\n          return session;\n        })\n        .then(session => Promise.all([\n          Session.close(session),\n          Session.close(session),\n        ]))\n        .then(sessions => {\n          expect(sessions, 'to have length', 2);\n          expect(sessions[0], 'to be', sessions[1]);\n          expect(sessions[0].close.calledOnce, 'to be true');\n        });\n    });\n\n    it('should work if session is already closed', function() {\n      return expect(Session.create(), 'to be fulfilled')\n        .then(session => new Promise((resolve) => {\n          session._client.closeSession(session, true, err => {\n            expect(err, 'to be falsy');\n          });\n\n          resolve(session);\n        }))\n        .then(session => expect(Session.close(session), 'to be fulfilled'));\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 508,
    "kind": "testDescribe",
    "name": "describe180",
    "testId": 180,
    "memberof": "test/src/lib/server/Session.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe180",
    "access": null,
    "description": "Session",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Session}"
      }
    ],
    "testTargets": [
      "Session"
    ]
  },
  {
    "__docId__": 509,
    "kind": "testDescribe",
    "name": "describe181",
    "testId": 181,
    "memberof": "test/src/lib/server/Session.spec.js~describe180",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe180.describe181",
    "access": null,
    "description": ".create",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Session.create}"
      }
    ],
    "testTargets": [
      "Session.create"
    ]
  },
  {
    "__docId__": 510,
    "kind": "testIt",
    "name": "it182",
    "testId": 182,
    "memberof": "test/src/lib/server/Session.spec.js~describe180.describe181",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe180.describe181.it182",
    "access": null,
    "description": "should create a new ClientSession",
    "lineNumber": 50
  },
  {
    "__docId__": 511,
    "kind": "testIt",
    "name": "it183",
    "testId": 183,
    "memberof": "test/src/lib/server/Session.spec.js~describe180.describe181",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe180.describe181.it183",
    "access": null,
    "description": "should store newly created session",
    "lineNumber": 59
  },
  {
    "__docId__": 512,
    "kind": "testIt",
    "name": "it184",
    "testId": 184,
    "memberof": "test/src/lib/server/Session.spec.js~describe180.describe181",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe180.describe181.it184",
    "access": null,
    "description": "should fail with invalid credentials",
    "lineNumber": 68
  },
  {
    "__docId__": 513,
    "kind": "testIt",
    "name": "it185",
    "testId": 185,
    "memberof": "test/src/lib/server/Session.spec.js~describe180.describe181",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe180.describe181.it185",
    "access": null,
    "description": "should forward Client.create errors",
    "lineNumber": 90
  },
  {
    "__docId__": 514,
    "kind": "testIt",
    "name": "it186",
    "testId": 186,
    "memberof": "test/src/lib/server/Session.spec.js~describe180.describe181",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe180.describe181.it186",
    "access": null,
    "description": "should forward non-login errors",
    "lineNumber": 94
  },
  {
    "__docId__": 515,
    "kind": "testDescribe",
    "name": "describe187",
    "testId": 187,
    "memberof": "test/src/lib/server/Session.spec.js~describe180",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe180.describe187",
    "access": null,
    "description": ".close",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Session.close}"
      }
    ],
    "testTargets": [
      "Session.close"
    ]
  },
  {
    "__docId__": 516,
    "kind": "testIt",
    "name": "it188",
    "testId": 188,
    "memberof": "test/src/lib/server/Session.spec.js~describe180.describe187",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe180.describe187.it188",
    "access": null,
    "description": "should fail without session",
    "lineNumber": 101
  },
  {
    "__docId__": 517,
    "kind": "testIt",
    "name": "it189",
    "testId": 189,
    "memberof": "test/src/lib/server/Session.spec.js~describe180.describe187",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe180.describe187.it189",
    "access": null,
    "description": "should return if session is already closed",
    "lineNumber": 105
  },
  {
    "__docId__": 518,
    "kind": "testIt",
    "name": "it190",
    "testId": 190,
    "memberof": "test/src/lib/server/Session.spec.js~describe180.describe187",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe180.describe187.it190",
    "access": null,
    "description": "should wait for session to close if already closing",
    "lineNumber": 111
  },
  {
    "__docId__": 519,
    "kind": "testIt",
    "name": "it191",
    "testId": 191,
    "memberof": "test/src/lib/server/Session.spec.js~describe180.describe187",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe180.describe187.it191",
    "access": null,
    "description": "should work if session is already closed",
    "lineNumber": 129
  },
  {
    "__docId__": 520,
    "kind": "testFile",
    "name": "test/src/lib/server/Stream.spec.js",
    "content": "import expect from 'unexpected';\nimport proxyquire from 'proxyquire';\nimport { spy } from 'sinon';\n\nimport { Stream as CoreStream } from 'stream';\nimport { ClientSession } from 'node-opcua';\nimport Stream from '../../../../src/lib/server/Stream';\nimport Session from '../../../../src/lib/server/Session';\n\n/** @test {Stream} */\ndescribe('Stream', function() {\n  /** @test {Stream#constructor} */\n  describe('#constructor', function() {\n    it('should return a stream', function() {\n      expect(new Stream(), 'to be a', CoreStream);\n    });\n\n    it('should emit \"session-open\" once session is open', function(done) {\n      const stream = new Stream();\n\n      stream.on('session-open', session => {\n        expect(stream.session, 'to be defined');\n        expect(stream.session, 'to be a', ClientSession);\n        expect(session, 'to be', stream.session);\n\n        done();\n      });\n    });\n\n    it('should forward session connect errors', function(done) {\n      const FailingStream = proxyquire('../../../../src/lib/server/Stream', {\n        './Session': {\n          _esModule: true,\n          default: class FailingSession {\n            static create() {\n              return Promise.reject(new Error('Failed'));\n            }\n          },\n        },\n      }).default;\n\n      (new FailingStream())\n        .on('error', err => {\n          expect(err, 'to have message', 'Failed');\n          done();\n        });\n    });\n\n    it('should close session and disconnect client on end', function(done) {\n      const stream = new Stream();\n\n      stream\n        .once('session-open', () => {\n          spy(stream.session, 'close');\n          spy(stream.session._client, 'disconnect');\n\n          stream.end();\n        })\n        .on('end', () => {\n          expect(stream.session.close.calledOnce, 'to be', true);\n          expect(stream.session._client.disconnect.calledOnce, 'to be', true);\n          done();\n        })\n        .on('data', () => {}); // unpause readable stream\n    });\n\n    it('should be endable even if session was not opened yet', function(done) {\n      const stream = new Stream();\n      const listener = spy();\n\n      stream.on('error', listener)\n        .on('end', () => {\n          expect(listener.callCount, 'to equal', 0);\n          done();\n        })\n        .on('data', () => {}); // unpause readable stream\n\n      stream.end();\n    });\n\n    it('should forward errors occurring while closing session', function(done) {\n      const FailingStream = proxyquire('../../../../src/lib/server/Stream', {\n        './Session': {\n          _esModule: true,\n          default: class FailingStream extends Session {\n\n            static close() {\n              return Promise.reject(new Error('Failed'));\n            }\n\n          },\n        },\n      }).default;\n\n      const stream = (new FailingStream())\n        .on('error', err => {\n          expect(err, 'to have message', 'Failed');\n          done();\n        })\n        .on('data', () => {}) // unpause readable stream\n        .once('session-open', () => stream.end());\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 521,
    "kind": "testDescribe",
    "name": "describe192",
    "testId": 192,
    "memberof": "test/src/lib/server/Stream.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js~describe192",
    "access": null,
    "description": "Stream",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Stream}"
      }
    ],
    "testTargets": [
      "Stream"
    ]
  },
  {
    "__docId__": 522,
    "kind": "testDescribe",
    "name": "describe193",
    "testId": 193,
    "memberof": "test/src/lib/server/Stream.spec.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js~describe192.describe193",
    "access": null,
    "description": "#constructor",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Stream#constructor}"
      }
    ],
    "testTargets": [
      "Stream#constructor"
    ]
  },
  {
    "__docId__": 523,
    "kind": "testIt",
    "name": "it194",
    "testId": 194,
    "memberof": "test/src/lib/server/Stream.spec.js~describe192.describe193",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js~describe192.describe193.it194",
    "access": null,
    "description": "should return a stream",
    "lineNumber": 14
  },
  {
    "__docId__": 524,
    "kind": "testIt",
    "name": "it195",
    "testId": 195,
    "memberof": "test/src/lib/server/Stream.spec.js~describe192.describe193",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js~describe192.describe193.it195",
    "access": null,
    "description": "should emit \"session-open\" once session is open",
    "lineNumber": 18
  },
  {
    "__docId__": 525,
    "kind": "testIt",
    "name": "it196",
    "testId": 196,
    "memberof": "test/src/lib/server/Stream.spec.js~describe192.describe193",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js~describe192.describe193.it196",
    "access": null,
    "description": "should forward session connect errors",
    "lineNumber": 30
  },
  {
    "__docId__": 526,
    "kind": "testIt",
    "name": "it197",
    "testId": 197,
    "memberof": "test/src/lib/server/Stream.spec.js~describe192.describe193",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js~describe192.describe193.it197",
    "access": null,
    "description": "should close session and disconnect client on end",
    "lineNumber": 49
  },
  {
    "__docId__": 527,
    "kind": "testIt",
    "name": "it198",
    "testId": 198,
    "memberof": "test/src/lib/server/Stream.spec.js~describe192.describe193",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js~describe192.describe193.it198",
    "access": null,
    "description": "should be endable even if session was not opened yet",
    "lineNumber": 67
  },
  {
    "__docId__": 528,
    "kind": "testIt",
    "name": "it199",
    "testId": 199,
    "memberof": "test/src/lib/server/Stream.spec.js~describe192.describe193",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js~describe192.describe193.it199",
    "access": null,
    "description": "should forward errors occurring while closing session",
    "lineNumber": 81
  },
  {
    "__docId__": 529,
    "kind": "testFile",
    "name": "test/src/lib/server/Watcher.spec.js",
    "content": "import Emitter from 'events';\nimport { Stream } from 'stream';\nimport { spy } from 'sinon';\nimport proxyquire from 'proxyquire';\nimport expect from 'unexpected';\nimport { resolveNodeId } from 'node-opcua';\nimport { ctor as throughStreamClass } from 'through2';\nimport Watcher from '../../../../src/lib/server/Watcher';\n\nclass StubMonitoredItem extends Emitter {\n\n  constructor(error = false) {\n    super();\n\n    // Simulate first notification or error\n    setTimeout(() => this.emit(error ? 'err' : 'changed', error || {}), 10);\n  }\n\n}\n\nconst stubSession = {};\nconst SubscribeStream = proxyquire('../../../../src/lib/server/Watcher', {\n  'node-opcua': {\n    ClientSubscription: class StubClientSubscription extends Emitter {\n      constructor() {\n        super();\n\n        this.monitor = spy(() => new StubMonitoredItem());\n\n        setTimeout(() => this.emit('started', {}), 10);\n      }\n    },\n  },\n  './Stream': {\n    _esModule: true,\n    default: class ServerStream extends throughStreamClass({ objectMode: true }) {\n      constructor() {\n        super();\n\n        setTimeout(() => this.emit('session-open', stubSession), 10);\n      }\n    },\n  },\n}).SubscribeStream;\n\n/** @test {SubscribeStream} */\ndescribe('SubscribeStream', function() {\n  /** @test {SubscribeStream#constructor} */\n  describe('#constructor', function() {\n    it('should return a stream', function() {\n      expect(new SubscribeStream(), 'to be a', Stream);\n    });\n  });\n\n  /** @test {SubscribeStream#createSubscription} */\n  describe('#createSubscription', function() {\n    it('should be called once session is open', function() {\n      const stream = new SubscribeStream();\n      stream.createSubscription = spy();\n      stream.once('session-open', () => {\n        expect(stream.createSubscription.calledOnce, 'to be true');\n      });\n    });\n\n    it('should emit `subscription-started` event', function(done) {\n      const stream = new SubscribeStream();\n      stream.once('subscription-started', subscription => {\n        expect(subscription.constructor.name, 'to equal', 'StubClientSubscription');\n        done();\n      });\n    });\n\n    it('should emit error if subscription failed', function(done) {\n      const stream = new SubscribeStream();\n      stream.once('error', err => {\n        expect(err, 'to have message', 'Test');\n        done();\n      });\n      stream.once('subscription-started', subscription => {\n        subscription.emit('failure', new Error('Test'));\n      });\n    });\n  });\n\n  /** @test {SubscribeStream#monitorNode} */\n  describe('#monitorNode', function() {\n    it('should call node-opcua~ClientSubscription#monitor', function(done) {\n      const stream = new SubscribeStream();\n      stream.once('subscription-started', () => {\n        stream.monitorNode({\n          nodeId: resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main'),\n        }, err => {\n          expect(err, 'to be falsy');\n          expect(stream.subscription.monitor.calledOnce, 'to be true');\n          done();\n        });\n      });\n    });\n\n    it('should ignore first change event', function(done) {\n      const stream = new SubscribeStream();\n      stream.once('subscription-started', () => {\n        const changeListener = spy();\n        stream.on('changed', changeListener);\n\n        stream.monitorNode({\n          nodeId: resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main'),\n        }, err => {\n          expect(err, 'to be falsy');\n          expect(changeListener.callCount, 'to equal', 0);\n          done();\n        });\n      });\n    });\n\n    it('should forward change events when tracking changes', function(done) {\n      const stream = new SubscribeStream();\n      const nodeId = resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main');\n\n      stream.once('subscription-started', () => {\n        const item = stream.monitorNode({ nodeId }, function(err) {\n          expect(err, 'to be falsy');\n\n          setTimeout(() => item.emit('changed', {\n            value: { value: 13 },\n            serverTimestamp: new Date() }\n            ),\n            10);\n          stream.end();\n        });\n      })\n        .on('change', e => {\n          expect(e.nodeId, 'to equal', nodeId);\n          expect(e.referenceDescription.nodeId, 'to equal', nodeId);\n          expect(e.value.value, 'to equal', 13);\n\n          done();\n        });\n    });\n\n    it('should forward errors', function(done) {\n      const stream = new SubscribeStream();\n      stream.once('subscription-started', () => {\n        stream.subscription.monitor = spy(() => new StubMonitoredItem(new Error('Test')));\n\n        stream.monitorNode({\n          nodeId: resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main'),\n        }, err => {\n          expect(err, 'to have message', 'Error monitoring ns=1;s=AGENT.DISPLAYS.Main: Test');\n\n          done();\n        });\n      });\n    });\n\n    it('should emit errors even if node-opcua fails with string error', function(done) {\n      const stream = new SubscribeStream();\n      stream.once('subscription-started', () => {\n        stream.subscription.monitor = spy(() => new StubMonitoredItem('Test'));\n\n        stream.monitorNode({\n          nodeId: resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main'),\n        }, err => {\n          expect(err, 'to have message', 'Error monitoring ns=1;s=AGENT.DISPLAYS.Main: Test');\n\n          done();\n        });\n      });\n    });\n  });\n\n  /** @test {SubscribeStream#_transform} */\n  describe('#_transform', function() {\n    const desc = { nodeId: resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main') };\n\n    it('should should wait for subscription to start', function(done) {\n      const stream = new SubscribeStream();\n      spy(stream, 'monitorNode');\n\n      stream.write(desc);\n      expect(stream.monitorNode.callCount, 'to equal', 0);\n\n      stream.once('subscription-started', () => {\n        expect(stream.monitorNode.calledOnce, 'to be', true);\n        done();\n      });\n    });\n\n    it('should call #monitorNode immediately if subscription started', function(done) {\n      const stream = new SubscribeStream();\n      spy(stream, 'monitorNode');\n\n      stream.once('subscription-started', () => {\n        stream.write(desc);\n        expect(stream.monitorNode.calledOnce, 'to be', true);\n\n        done();\n      });\n    });\n  });\n});\n\n/** @test {Watcher} */\ndescribe('Watcher', function() {\n  /** @test {Watcher#constructor} */\n  describe('#constructor', function() {\n    it('should work without arguments', function() {\n      let watcher;\n      expect(() => (watcher = new Watcher([resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main')])),\n        'not to throw');\n\n      watcher.on('ready', () => watcher.close());\n    });\n\n    it('should emit ready event once subscribe stream finished', function(done) {\n      const watcher = new Watcher([resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main')]);\n\n      watcher.on('ready', () => {\n        watcher.close();\n        done();\n      });\n    });\n\n    it('should forward change events', function(done) {\n      const watcher = new Watcher([resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main')]);\n\n      watcher.on('ready', () => {\n        const event = {};\n\n        watcher.on('change', e => {\n          expect(e, 'to be', event);\n          watcher.close();\n          done();\n        });\n\n        watcher._subscribeStream.emit('change', event);\n      });\n    });\n\n    it('should forward NodeStream errors', function(done) {\n      const watcher = new Watcher([resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main')]);\n\n      watcher.on('error', err => {\n        expect(err, 'to have message', 'Test');\n        done();\n      });\n\n      watcher.on('ready', () => watcher._nodeStream.emit('error', new Error('Test')));\n    });\n\n    it('should forward SubscribeStream errors', function(done) {\n      const watcher = new Watcher([resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main')]);\n\n      watcher.on('error', err => {\n        expect(err, 'to have message', 'Test');\n        done();\n      });\n\n      watcher.on('ready', () => watcher._subscribeStream.emit('error', new Error('Test')));\n    });\n  });\n\n  /** @test {Watcher#close} */\n  describe('#close', function() {\n    it('should forward errors', function(done) {\n      const watcher = new Watcher([resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main')]);\n\n      watcher.on('error', err => {\n        expect(err, 'to have message', 'session is required');\n        done();\n      });\n\n      watcher.on('ready', () => {\n        watcher._subscribeStream.session = undefined;\n\n        watcher.close();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 530,
    "kind": "testDescribe",
    "name": "describe200",
    "testId": 200,
    "memberof": "test/src/lib/server/Watcher.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe200",
    "access": null,
    "description": "SubscribeStream",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SubscribeStream}"
      }
    ],
    "testTargets": [
      "SubscribeStream"
    ]
  },
  {
    "__docId__": 531,
    "kind": "testDescribe",
    "name": "describe201",
    "testId": 201,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe200.describe201",
    "access": null,
    "description": "#constructor",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SubscribeStream#constructor}"
      }
    ],
    "testTargets": [
      "SubscribeStream#constructor"
    ]
  },
  {
    "__docId__": 532,
    "kind": "testIt",
    "name": "it202",
    "testId": 202,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe200.describe201",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe200.describe201.it202",
    "access": null,
    "description": "should return a stream",
    "lineNumber": 50
  },
  {
    "__docId__": 533,
    "kind": "testDescribe",
    "name": "describe203",
    "testId": 203,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe200.describe203",
    "access": null,
    "description": "#createSubscription",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SubscribeStream#createSubscription}"
      }
    ],
    "testTargets": [
      "SubscribeStream#createSubscription"
    ]
  },
  {
    "__docId__": 534,
    "kind": "testIt",
    "name": "it204",
    "testId": 204,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe200.describe203",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe200.describe203.it204",
    "access": null,
    "description": "should be called once session is open",
    "lineNumber": 57
  },
  {
    "__docId__": 535,
    "kind": "testIt",
    "name": "it205",
    "testId": 205,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe200.describe203",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe200.describe203.it205",
    "access": null,
    "description": "should emit `subscription-started` event",
    "lineNumber": 65
  },
  {
    "__docId__": 536,
    "kind": "testIt",
    "name": "it206",
    "testId": 206,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe200.describe203",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe200.describe203.it206",
    "access": null,
    "description": "should emit error if subscription failed",
    "lineNumber": 73
  },
  {
    "__docId__": 537,
    "kind": "testDescribe",
    "name": "describe207",
    "testId": 207,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe200.describe207",
    "access": null,
    "description": "#monitorNode",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SubscribeStream#monitorNode}"
      }
    ],
    "testTargets": [
      "SubscribeStream#monitorNode"
    ]
  },
  {
    "__docId__": 538,
    "kind": "testIt",
    "name": "it208",
    "testId": 208,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe200.describe207",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe200.describe207.it208",
    "access": null,
    "description": "should call node-opcua~ClientSubscription#monitor",
    "lineNumber": 87
  },
  {
    "__docId__": 539,
    "kind": "testIt",
    "name": "it209",
    "testId": 209,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe200.describe207",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe200.describe207.it209",
    "access": null,
    "description": "should ignore first change event",
    "lineNumber": 100
  },
  {
    "__docId__": 540,
    "kind": "testIt",
    "name": "it210",
    "testId": 210,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe200.describe207",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe200.describe207.it210",
    "access": null,
    "description": "should forward change events when tracking changes",
    "lineNumber": 116
  },
  {
    "__docId__": 541,
    "kind": "testIt",
    "name": "it211",
    "testId": 211,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe200.describe207",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe200.describe207.it211",
    "access": null,
    "description": "should forward errors",
    "lineNumber": 141
  },
  {
    "__docId__": 542,
    "kind": "testIt",
    "name": "it212",
    "testId": 212,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe200.describe207",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe200.describe207.it212",
    "access": null,
    "description": "should emit errors even if node-opcua fails with string error",
    "lineNumber": 156
  },
  {
    "__docId__": 543,
    "kind": "testDescribe",
    "name": "describe213",
    "testId": 213,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe200.describe213",
    "access": null,
    "description": "#_transform",
    "lineNumber": 173,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SubscribeStream#_transform}"
      }
    ],
    "testTargets": [
      "SubscribeStream#_transform"
    ]
  },
  {
    "__docId__": 544,
    "kind": "testIt",
    "name": "it214",
    "testId": 214,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe200.describe213",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe200.describe213.it214",
    "access": null,
    "description": "should should wait for subscription to start",
    "lineNumber": 176
  },
  {
    "__docId__": 545,
    "kind": "testIt",
    "name": "it215",
    "testId": 215,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe200.describe213",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe200.describe213.it215",
    "access": null,
    "description": "should call #monitorNode immediately if subscription started",
    "lineNumber": 189
  },
  {
    "__docId__": 546,
    "kind": "testDescribe",
    "name": "describe216",
    "testId": 216,
    "memberof": "test/src/lib/server/Watcher.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe216",
    "access": null,
    "description": "Watcher",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Watcher}"
      }
    ],
    "testTargets": [
      "Watcher"
    ]
  },
  {
    "__docId__": 547,
    "kind": "testDescribe",
    "name": "describe217",
    "testId": 217,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe216",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe216.describe217",
    "access": null,
    "description": "#constructor",
    "lineNumber": 206,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Watcher#constructor}"
      }
    ],
    "testTargets": [
      "Watcher#constructor"
    ]
  },
  {
    "__docId__": 548,
    "kind": "testIt",
    "name": "it218",
    "testId": 218,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe216.describe217",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe216.describe217.it218",
    "access": null,
    "description": "should work without arguments",
    "lineNumber": 207
  },
  {
    "__docId__": 549,
    "kind": "testIt",
    "name": "it219",
    "testId": 219,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe216.describe217",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe216.describe217.it219",
    "access": null,
    "description": "should emit ready event once subscribe stream finished",
    "lineNumber": 215
  },
  {
    "__docId__": 550,
    "kind": "testIt",
    "name": "it220",
    "testId": 220,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe216.describe217",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe216.describe217.it220",
    "access": null,
    "description": "should forward change events",
    "lineNumber": 224
  },
  {
    "__docId__": 551,
    "kind": "testIt",
    "name": "it221",
    "testId": 221,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe216.describe217",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe216.describe217.it221",
    "access": null,
    "description": "should forward NodeStream errors",
    "lineNumber": 240
  },
  {
    "__docId__": 552,
    "kind": "testIt",
    "name": "it222",
    "testId": 222,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe216.describe217",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe216.describe217.it222",
    "access": null,
    "description": "should forward SubscribeStream errors",
    "lineNumber": 251
  },
  {
    "__docId__": 553,
    "kind": "testDescribe",
    "name": "describe223",
    "testId": 223,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe216",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe216.describe223",
    "access": null,
    "description": "#close",
    "lineNumber": 264,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Watcher#close}"
      }
    ],
    "testTargets": [
      "Watcher#close"
    ]
  },
  {
    "__docId__": 554,
    "kind": "testIt",
    "name": "it224",
    "testId": 224,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe216.describe223",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe216.describe223.it224",
    "access": null,
    "description": "should forward errors",
    "lineNumber": 265
  },
  {
    "__docId__": 555,
    "kind": "testFile",
    "name": "test/src/lib/server/WriteStream.spec.js",
    "content": "import { stub, spy } from 'sinon';\nimport { DataType, VariantArrayType } from 'node-opcua';\nimport expect from '../../../expect';\nimport WriteStream from '../../../../src/lib/server/WriteStream';\nimport AtviseFile from '../../../../src/lib/server/AtviseFile';\n\n/** @test {WriteStream} */\ndescribe('WriteStream', function() {\n  /** @test {WriteStream#writeFile} */\n  describe('#writeFile', function() {\n    it('should forward write errors', function() {\n      const stream = new WriteStream();\n      stream.once('session-open', () => {\n        stub(stream.session, 'writeSingleNode', (node, value, cb) => cb(new Error('Test')));\n      });\n\n      stream.on('data', () => stream.end()); // Unpause readable stream\n      stream.write(new AtviseFile({ path: 'AGENT/DISPLAYS/Main.display' }));\n\n      return expect(stream, 'to error with', /Test/);\n    });\n\n    it('should forward synchronous errors', function() {\n      const stream = new WriteStream();\n      stream.once('session-open', () => {\n        stub(stream.session, 'writeSingleNode', () => {\n          throw new Error('Sync Test');\n        });\n      });\n\n      stream.on('data', () => stream.end()); // Unpause readable stream\n      stream.write(new AtviseFile({ path: 'AGENT/DISPLAYS/Main.display' }));\n\n      return expect(stream, 'to error with', /Sync Test/);\n    });\n\n    it('should call node-opcua~ClientSession#writeSingleNode', function(done) {\n      const stream = new WriteStream();\n      stream.once('session-open', () => {\n        stub(stream.session, 'writeSingleNode', (node, value, cb) => cb(null, node));\n      });\n\n      stream.on('data', () => {}); // Unpause readable stream\n      stream.write(new AtviseFile({ path: 'AGENT/DISPLAYS/Main.display' }));\n\n      stream.once('end', () => {\n        const writeStub = stream.session.writeSingleNode;\n        expect(writeStub.calledOnce, 'to be', true);\n\n        const args = writeStub.lastCall.args;\n        expect(args[0], 'to equal', 'ns=1;s=AGENT.DISPLAYS.Main');\n        expect(args[1].dataType, 'to equal', DataType.XmlElement);\n        expect(args[1].arrayType, 'to equal', VariantArrayType.Scalar);\n\n        done();\n      });\n\n      stream.end();\n    });\n  });\n\n  /** @test {WriteStream#_transform} */\n  describe('#_transform', function() {\n    it('should wait for session to open', function(done) {\n      const stream = new WriteStream();\n      stub(stream, 'writeFile', (file, cb) => cb(null));\n      spy(stream, '_transform');\n\n      stream.on('data', () => {}); // Unpause readable stream\n      stream.write(new AtviseFile({ path: 'AGENT/DISPLAYS/Main.display' }));\n\n      expect(stream._transform.calledOnce, 'to be', true);\n      expect(stream.writeFile.callCount, 'to equal', 0);\n\n      stream.once('end', () => {\n        expect(stream._transform.calledOnce, 'to be', true);\n        expect(stream.writeFile.calledOnce, 'to be', true);\n        done();\n      });\n\n      stream.end();\n    });\n\n    it('should write immediately if session is open', function(done) {\n      const stream = new WriteStream();\n      stub(stream, 'writeFile', (file, cb) => cb(null));\n\n      stream.on('data', () => {}); // Unpause readable stream\n\n      stream.once('session-open', () => {\n        stream.write(new AtviseFile({ path: 'AGENT/DISPLAYS/Main.display' }));\n        expect(stream.writeFile.calledOnce, 'to be true');\n        stream.end();\n      });\n\n      stream.on('end', done);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 556,
    "kind": "testDescribe",
    "name": "describe225",
    "testId": 225,
    "memberof": "test/src/lib/server/WriteStream.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js~describe225",
    "access": null,
    "description": "WriteStream",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{WriteStream}"
      }
    ],
    "testTargets": [
      "WriteStream"
    ]
  },
  {
    "__docId__": 557,
    "kind": "testDescribe",
    "name": "describe226",
    "testId": 226,
    "memberof": "test/src/lib/server/WriteStream.spec.js~describe225",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js~describe225.describe226",
    "access": null,
    "description": "#writeFile",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{WriteStream#writeFile}"
      }
    ],
    "testTargets": [
      "WriteStream#writeFile"
    ]
  },
  {
    "__docId__": 558,
    "kind": "testIt",
    "name": "it227",
    "testId": 227,
    "memberof": "test/src/lib/server/WriteStream.spec.js~describe225.describe226",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js~describe225.describe226.it227",
    "access": null,
    "description": "should forward write errors",
    "lineNumber": 11
  },
  {
    "__docId__": 559,
    "kind": "testIt",
    "name": "it228",
    "testId": 228,
    "memberof": "test/src/lib/server/WriteStream.spec.js~describe225.describe226",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js~describe225.describe226.it228",
    "access": null,
    "description": "should forward synchronous errors",
    "lineNumber": 23
  },
  {
    "__docId__": 560,
    "kind": "testIt",
    "name": "it229",
    "testId": 229,
    "memberof": "test/src/lib/server/WriteStream.spec.js~describe225.describe226",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js~describe225.describe226.it229",
    "access": null,
    "description": "should call node-opcua~ClientSession#writeSingleNode",
    "lineNumber": 37
  },
  {
    "__docId__": 561,
    "kind": "testDescribe",
    "name": "describe230",
    "testId": 230,
    "memberof": "test/src/lib/server/WriteStream.spec.js~describe225",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js~describe225.describe230",
    "access": null,
    "description": "#_transform",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{WriteStream#_transform}"
      }
    ],
    "testTargets": [
      "WriteStream#_transform"
    ]
  },
  {
    "__docId__": 562,
    "kind": "testIt",
    "name": "it231",
    "testId": 231,
    "memberof": "test/src/lib/server/WriteStream.spec.js~describe225.describe230",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js~describe225.describe230.it231",
    "access": null,
    "description": "should wait for session to open",
    "lineNumber": 64
  },
  {
    "__docId__": 563,
    "kind": "testIt",
    "name": "it232",
    "testId": 232,
    "memberof": "test/src/lib/server/WriteStream.spec.js~describe225.describe230",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js~describe225.describe230.it232",
    "access": null,
    "description": "should write immediately if session is open",
    "lineNumber": 84
  },
  {
    "__docId__": 564,
    "kind": "testFile",
    "name": "test/src/lib/transform/PartialTransformer.spec.js",
    "content": "import expect from 'unexpected';\n\nimport { TransformDirection } from '../../../../src/lib/transform/Transformer';\nimport PartialTransformer from '../../../../src/lib/transform/PartialTransformer';\n\n/** @test {PartialTransformer} */\ndescribe('PartialTransformer', function() {\n  /** @test {PartialTransformer#shouldBeTransformed} */\n  describe('#shouldBeTransformed', function() {\n    it('should throw if not overridden', function() {\n      expect(() => PartialTransformer.prototype.shouldBeTransformed({}),\n        'to throw', /must be implemented/);\n    });\n  });\n\n  /** @test {PartialTransformer#_transform} */\n  describe('#_transform', function() {\n    it('should pass original file if shouldBeTransformed returns false', function() {\n      const transformer = new PartialTransformer();\n      transformer.shouldBeTransformed = () => false;\n      const file = {};\n\n      expect(cb => transformer._transform(file, 'utf8', cb), 'to call the callback')\n        .then(args => {\n          expect(args[0], 'to be falsy');\n          expect(args[1], 'to be', file);\n        });\n    });\n\n    it('should call super if shouldbeTransformed returns true', function() {\n      const transformer = new PartialTransformer({ direction: TransformDirection.FromDB });\n      const original = {};\n      const result = {};\n\n      transformer.shouldBeTransformed = () => true;\n      transformer.transformFromDB = (file, enc, cb) => cb(null, result);\n\n      expect(cb => transformer._transform(original, 'utf8', cb), 'to call the callback')\n        .then(args => {\n          expect(args[0], 'to be falsy');\n          expect(args[1], 'to be', result);\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 565,
    "kind": "testDescribe",
    "name": "describe233",
    "testId": 233,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe233",
    "access": null,
    "description": "PartialTransformer",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{PartialTransformer}"
      }
    ],
    "testTargets": [
      "PartialTransformer"
    ]
  },
  {
    "__docId__": 566,
    "kind": "testDescribe",
    "name": "describe234",
    "testId": 234,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe233",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe233.describe234",
    "access": null,
    "description": "#shouldBeTransformed",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{PartialTransformer#shouldBeTransformed}"
      }
    ],
    "testTargets": [
      "PartialTransformer#shouldBeTransformed"
    ]
  },
  {
    "__docId__": 567,
    "kind": "testIt",
    "name": "it235",
    "testId": 235,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe233.describe234",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe233.describe234.it235",
    "access": null,
    "description": "should throw if not overridden",
    "lineNumber": 10
  },
  {
    "__docId__": 568,
    "kind": "testDescribe",
    "name": "describe236",
    "testId": 236,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe233",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe233.describe236",
    "access": null,
    "description": "#_transform",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{PartialTransformer#_transform}"
      }
    ],
    "testTargets": [
      "PartialTransformer#_transform"
    ]
  },
  {
    "__docId__": 569,
    "kind": "testIt",
    "name": "it237",
    "testId": 237,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe233.describe236",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe233.describe236.it237",
    "access": null,
    "description": "should pass original file if shouldBeTransformed returns false",
    "lineNumber": 18
  },
  {
    "__docId__": 570,
    "kind": "testIt",
    "name": "it238",
    "testId": 238,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe233.describe236",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe233.describe236.it238",
    "access": null,
    "description": "should call super if shouldbeTransformed returns true",
    "lineNumber": 30
  },
  {
    "__docId__": 571,
    "kind": "testFile",
    "name": "test/src/lib/transform/SplittingTransformer.spec.js",
    "content": "import expect from 'unexpected';\nimport { spy } from 'sinon';\nimport proxyquire from 'proxyquire';\n\nimport File from 'vinyl';\nimport { TransformDirection } from '../../../../src/lib/transform/Transformer';\nimport AtviseFile from '../../../../src/lib/server/AtviseFile';\nimport SplittingTransformer, {\n  CombineFilesCache,\n} from '../../../../src/lib/transform/SplittingTransformer';\n\nclass StubSplittingTransformer extends proxyquire('../../../../src/lib/transform/SplittingTransformer', {\n  '../server/AtviseFile': {\n    _esModule: true,\n    default: class StubAtviseFile extends AtviseFile {\n      static read(options) {\n        return Promise.resolve(options);\n      }\n    },\n  },\n}).default {\n  constructor(combineError) {\n    super();\n\n    this.combineError = combineError;\n  }\n\n  createCombinedFile(files, last, callback) {\n    if (this.combineError) {\n      callback(this.combineError);\n    } else {\n      callback(null, last);\n    }\n  }\n}\n\nconst StubCombineFilesCache = proxyquire('../../../../src/lib/transform/SplittingTransformer', {\n  fs: {\n    readdir: (dir, cb) => cb(null, ['file.ext1', 'file.ext2']),\n  },\n}).CombineFilesCache;\n\n/** @test {CombineFilesCache} */\ndescribe('CombineFilesCache', function() {\n  /** @test {CombineFilesCache#missingExtensions} */\n  describe('#missingExtensions', function() {\n    it('should return extensions if required files are missing', function() {\n      const cache = new CombineFilesCache();\n      cache._files.fakeDir = { '.ext': {} };\n      cache._required.fakeDir = ['.ext', '.ext2'];\n\n      expect(cache.missingExtensions('fakeDir'), 'to equal', ['.ext2']);\n    });\n\n    it('should return empty array if all required files are cached', function() {\n      const cache = new CombineFilesCache();\n      cache._files.fakeDir = { '.ext': {} };\n      cache._required.fakeDir = ['.ext'];\n\n      expect(cache.missingExtensions('fakeDir'), 'to equal', []);\n    });\n  });\n\n  /** @test {CombineFilesCache#gotAllFiles} */\n  describe('#gotAllFiles', function() {\n    it('should forward readdir errors', function() {\n      const cache = new CombineFilesCache();\n\n      return expect(cb => cache.gotAllFiles(new File({ path: 'that/does/not.exist' }), cb),\n        'to call the callback with error', /ENOENT/);\n    });\n\n    it('should store required files if missing', function() {\n      const cache = new StubCombineFilesCache();\n\n      return expect(cb => cache.gotAllFiles({ dirname: 'dirname' }, cb),\n        'to call the callback')\n        .then(args => {\n          expect(args[0], 'to be falsy');\n          expect(args[1], 'to be undefined');\n          expect(cache._required.dirname, 'to equal', ['.ext1', '.ext2']);\n        });\n    });\n\n    const fillCache = new StubCombineFilesCache();\n    const file1 = { dirname: 'dirname', extname: '.ext1' };\n    const file2 = { dirname: 'dirname', extname: '.ext2' };\n\n    it('should cache passed file', function() {\n      return expect(cb => fillCache.gotAllFiles(file1, cb),\n        'to call the callback')\n        .then(args => {\n          expect(args[0], 'to be falsy');\n          expect(args[1], 'to be undefined');\n          expect(fillCache._required.dirname, 'to equal', ['.ext1', '.ext2']);\n          expect(fillCache._files.dirname['.ext1'], 'to equal', file1);\n        });\n    });\n\n    it('should pass all cached files if all required are present', function() {\n      return expect(cb => fillCache.gotAllFiles(file2, cb),\n        'to call the callback')\n        .then(args => {\n          expect(args[0], 'to be falsy');\n          expect(args[1], 'to equal', {\n            '.ext1': file1,\n            '.ext2': file2,\n          });\n\n          // Expect cache is cleaned\n          expect(fillCache._files.dirname, 'to be undefined');\n        });\n    });\n  });\n});\n\n/** @test {SplittingTransformer} */\ndescribe('SplittingTransformer', function() {\n  /** @test {SplittingTransformer#createCombinedFile} */\n  describe('#createCombinedFile', function() {\n    it('should throw if not overridden', function() {\n      expect(() => SplittingTransformer.prototype.createCombinedFile(),\n        'to throw', /must be implemented/);\n    });\n  });\n\n  /** @test {SplittingTransformer#transformFromFilesystem} */\n  describe('#transformFromFilesystem', function() {\n    it('should forward cache errors', function() {\n      const transformer = new SplittingTransformer({\n        direction: TransformDirection.FromFilesystem,\n      });\n      transformer._combineFilesCache.gotAllFiles = (file, cb) => cb(new Error('Cache error'));\n\n      expect(cb => transformer.transformFromFilesystem(\n        new File({ path: 'path/name.display/name.js' }), 'utf8', cb),\n        'to call the callback with error', 'Cache error');\n    });\n\n    it('should cache display files', function() {\n      const transformer = new SplittingTransformer({\n        direction: TransformDirection.FromFilesystem,\n      });\n      transformer._combineFilesCache.gotAllFiles = (files, cb) => cb(null, false);\n\n      return expect(cb =>\n          transformer.transformFromFilesystem(\n            new File({ path: 'path/name.display/name.js' }), 'utf8', cb),\n        'to call the callback'\n      )\n        .then(args => {\n          expect(args[0], 'to be falsy');\n        });\n    });\n\n    it('should call #createCombinedFile if all required files are cached', function() {\n      const transformer = new SplittingTransformer({\n        direction: TransformDirection.FromFilesystem,\n      });\n      const stubDisplay = {};\n      transformer._combineFilesCache.gotAllFiles = (files, cb) => cb(null, [{}]);\n      transformer.createCombinedFile = (files, last, cb) => cb(null, stubDisplay);\n\n      return expect(cb =>\n          transformer.transformFromFilesystem(\n            new File({ path: 'path/name.display/name.js' }), 'utf8', cb),\n        'to call the callback'\n      )\n        .then(args => {\n          expect(args[0], 'to be falsy');\n          expect(args[1], 'to be', stubDisplay);\n        });\n    });\n  });\n\n  /** @test {SplittingTransformer.splitFile} */\n  describe('.splitFile', function() {\n    const original = new File({\n      path: 'path/name.type.ext',\n    });\n\n    it('should return a file', function() {\n      expect(SplittingTransformer.splitFile(original, '.another'), 'to be a', File);\n    });\n\n    it('should apply the new extension', function() {\n      expect(SplittingTransformer.splitFile(original, '.another').extname, 'to equal', '.another');\n    });\n  });\n\n  /** @test {SplittingTransformer.combineFiles} */\n  describe('.combineFiles', function() {\n    const originals = [\n      new File({ path: 'path/name.type/name.ext1' }),\n      new File({ path: 'path/name.type/name.ext2' }),\n    ];\n\n    it('should return a file', function() {\n      expect(SplittingTransformer.combineFiles(originals, '.another'), 'to be a', File);\n    });\n\n    it('should apply the new extension', function() {\n      expect(SplittingTransformer.combineFiles(originals, '.other').extname, 'to equal', '.other');\n    });\n  });\n\n  /** @test {SplittingTransformer#_flush} */\n  describe('#_flush', function() {\n    it('should just callback if no files are missing', function() {\n      const transformer = new SplittingTransformer();\n      const callback = spy();\n\n      transformer._flush(callback);\n\n      expect(callback.calledOnce, 'to be', true);\n    });\n\n    it('should push additional files if some are missing', function(done) {\n      const transformer = new StubSplittingTransformer();\n      const file = {\n        cwd: '/fake/cwd',\n        base: '/base',\n      };\n\n      transformer._combineFilesCache._files['base/not/existent/dir'] = {\n        '.ext': file,\n      };\n      transformer._combineFilesCache._required['base/not/existent/dir'] = ['.ext', '.ext1'];\n      spy(transformer, 'push');\n\n      transformer._flush(err => {\n        expect(err, 'to be falsy');\n        expect(transformer.push.calledOnce, 'to be true');\n        expect(transformer.push.lastCall.args[0], 'to be', file);\n\n        done();\n      });\n    });\n\n    it('should forward read errors', function(done) {\n      const transformer = new StubSplittingTransformer(new Error('Test error'));\n      const file = {\n        cwd: '/fake/cwd',\n        base: '/base',\n      };\n\n      transformer._combineFilesCache._files['base/not/existent/dir'] = {\n        '.ext': file,\n      };\n      transformer._combineFilesCache._required['base/not/existent/dir'] = ['.ext', '.ext1'];\n      spy(transformer, 'push');\n\n      transformer._flush(err => {\n        expect(err, 'to have message', 'Test error');\n\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 572,
    "kind": "testDescribe",
    "name": "describe239",
    "testId": 239,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe239",
    "access": null,
    "description": "CombineFilesCache",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CombineFilesCache}"
      }
    ],
    "testTargets": [
      "CombineFilesCache"
    ]
  },
  {
    "__docId__": 573,
    "kind": "testDescribe",
    "name": "describe240",
    "testId": 240,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe239",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe239.describe240",
    "access": null,
    "description": "#missingExtensions",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CombineFilesCache#missingExtensions}"
      }
    ],
    "testTargets": [
      "CombineFilesCache#missingExtensions"
    ]
  },
  {
    "__docId__": 574,
    "kind": "testIt",
    "name": "it241",
    "testId": 241,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe239.describe240",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe239.describe240.it241",
    "access": null,
    "description": "should return extensions if required files are missing",
    "lineNumber": 47
  },
  {
    "__docId__": 575,
    "kind": "testIt",
    "name": "it242",
    "testId": 242,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe239.describe240",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe239.describe240.it242",
    "access": null,
    "description": "should return empty array if all required files are cached",
    "lineNumber": 55
  },
  {
    "__docId__": 576,
    "kind": "testDescribe",
    "name": "describe243",
    "testId": 243,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe239",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe239.describe243",
    "access": null,
    "description": "#gotAllFiles",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CombineFilesCache#gotAllFiles}"
      }
    ],
    "testTargets": [
      "CombineFilesCache#gotAllFiles"
    ]
  },
  {
    "__docId__": 577,
    "kind": "testIt",
    "name": "it244",
    "testId": 244,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe239.describe243",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe239.describe243.it244",
    "access": null,
    "description": "should forward readdir errors",
    "lineNumber": 66
  },
  {
    "__docId__": 578,
    "kind": "testIt",
    "name": "it245",
    "testId": 245,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe239.describe243",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe239.describe243.it245",
    "access": null,
    "description": "should store required files if missing",
    "lineNumber": 73
  },
  {
    "__docId__": 579,
    "kind": "testIt",
    "name": "it246",
    "testId": 246,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe239.describe243",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe239.describe243.it246",
    "access": null,
    "description": "should cache passed file",
    "lineNumber": 89
  },
  {
    "__docId__": 580,
    "kind": "testIt",
    "name": "it247",
    "testId": 247,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe239.describe243",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe239.describe243.it247",
    "access": null,
    "description": "should pass all cached files if all required are present",
    "lineNumber": 100
  },
  {
    "__docId__": 581,
    "kind": "testDescribe",
    "name": "describe248",
    "testId": 248,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248",
    "access": null,
    "description": "SplittingTransformer",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SplittingTransformer}"
      }
    ],
    "testTargets": [
      "SplittingTransformer"
    ]
  },
  {
    "__docId__": 582,
    "kind": "testDescribe",
    "name": "describe249",
    "testId": 249,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe248",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe249",
    "access": null,
    "description": "#createCombinedFile",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SplittingTransformer#createCombinedFile}"
      }
    ],
    "testTargets": [
      "SplittingTransformer#createCombinedFile"
    ]
  },
  {
    "__docId__": 583,
    "kind": "testIt",
    "name": "it250",
    "testId": 250,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe249",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe249.it250",
    "access": null,
    "description": "should throw if not overridden",
    "lineNumber": 121
  },
  {
    "__docId__": 584,
    "kind": "testDescribe",
    "name": "describe251",
    "testId": 251,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe248",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe251",
    "access": null,
    "description": "#transformFromFilesystem",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SplittingTransformer#transformFromFilesystem}"
      }
    ],
    "testTargets": [
      "SplittingTransformer#transformFromFilesystem"
    ]
  },
  {
    "__docId__": 585,
    "kind": "testIt",
    "name": "it252",
    "testId": 252,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe251",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe251.it252",
    "access": null,
    "description": "should forward cache errors",
    "lineNumber": 129
  },
  {
    "__docId__": 586,
    "kind": "testIt",
    "name": "it253",
    "testId": 253,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe251",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe251.it253",
    "access": null,
    "description": "should cache display files",
    "lineNumber": 140
  },
  {
    "__docId__": 587,
    "kind": "testIt",
    "name": "it254",
    "testId": 254,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe251",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe251.it254",
    "access": null,
    "description": "should call #createCombinedFile if all required files are cached",
    "lineNumber": 156
  },
  {
    "__docId__": 588,
    "kind": "testDescribe",
    "name": "describe255",
    "testId": 255,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe248",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe255",
    "access": null,
    "description": ".splitFile",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SplittingTransformer.splitFile}"
      }
    ],
    "testTargets": [
      "SplittingTransformer.splitFile"
    ]
  },
  {
    "__docId__": 589,
    "kind": "testIt",
    "name": "it256",
    "testId": 256,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe255",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe255.it256",
    "access": null,
    "description": "should return a file",
    "lineNumber": 182
  },
  {
    "__docId__": 590,
    "kind": "testIt",
    "name": "it257",
    "testId": 257,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe255",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe255.it257",
    "access": null,
    "description": "should apply the new extension",
    "lineNumber": 186
  },
  {
    "__docId__": 591,
    "kind": "testDescribe",
    "name": "describe258",
    "testId": 258,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe248",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe258",
    "access": null,
    "description": ".combineFiles",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SplittingTransformer.combineFiles}"
      }
    ],
    "testTargets": [
      "SplittingTransformer.combineFiles"
    ]
  },
  {
    "__docId__": 592,
    "kind": "testIt",
    "name": "it259",
    "testId": 259,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe258",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe258.it259",
    "access": null,
    "description": "should return a file",
    "lineNumber": 198
  },
  {
    "__docId__": 593,
    "kind": "testIt",
    "name": "it260",
    "testId": 260,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe258",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe258.it260",
    "access": null,
    "description": "should apply the new extension",
    "lineNumber": 202
  },
  {
    "__docId__": 594,
    "kind": "testDescribe",
    "name": "describe261",
    "testId": 261,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe248",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe261",
    "access": null,
    "description": "#_flush",
    "lineNumber": 208,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SplittingTransformer#_flush}"
      }
    ],
    "testTargets": [
      "SplittingTransformer#_flush"
    ]
  },
  {
    "__docId__": 595,
    "kind": "testIt",
    "name": "it262",
    "testId": 262,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe261",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe261.it262",
    "access": null,
    "description": "should just callback if no files are missing",
    "lineNumber": 209
  },
  {
    "__docId__": 596,
    "kind": "testIt",
    "name": "it263",
    "testId": 263,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe261",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe261.it263",
    "access": null,
    "description": "should push additional files if some are missing",
    "lineNumber": 218
  },
  {
    "__docId__": 597,
    "kind": "testIt",
    "name": "it264",
    "testId": 264,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe261",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe248.describe261.it264",
    "access": null,
    "description": "should forward read errors",
    "lineNumber": 240
  },
  {
    "__docId__": 598,
    "kind": "testFile",
    "name": "test/src/lib/transform/Transformer.spec.js",
    "content": "import { Stream } from 'stream';\nimport { stub } from 'sinon';\nimport { obj as createStream } from 'through2';\nimport expect from '../../../expect';\n\nimport Transformer, { TransformDirection } from '../../../../src/lib/transform/Transformer';\n\n/** @test {Transformer} */\ndescribe('Transformer', function() {\n  /** @test {Transformer#constructor} */\n  describe('#constructor', function() {\n    it('should throw with invalid direction', function() {\n      expect(() => (new Transformer({ direction: 'asdf' })),\n        'to throw', 'Invalid direction');\n    });\n\n    it('should store direction', function() {\n      expect((new Transformer({ direction: TransformDirection.FromDB })).direction,\n        'to equal', TransformDirection.FromDB);\n    });\n  });\n\n  /** @test {Transformer#withDirection} */\n  describe('#withDirection', function() {\n    let transformer;\n\n    beforeEach(() => (transformer = new Transformer()));\n\n    it('should throw without direction', function() {\n      expect(() => transformer.withDirection(), 'to throw', 'Invalid direction');\n    });\n\n    it('should throw with invalid direction', function() {\n      expect(() => transformer.withDirection('asdf'), 'to throw', 'Invalid direction');\n    });\n\n    it('should return self with direction set', function() {\n      const directed = transformer.withDirection(TransformDirection.FromDB);\n\n      expect(directed, 'to be a', Transformer);\n      expect(directed.direction, 'to equal', TransformDirection.FromDB);\n    });\n  });\n\n  /** @test {Transformer#_transform} */\n  describe('#_transform', function() {\n    let transformer;\n\n    beforeEach(() => {\n      transformer = new Transformer();\n      stub(transformer, 'transformFromDB', (c, e, cb) => cb(null));\n      stub(transformer, 'transformFromFilesystem', (c, e, cb) => cb(null));\n    });\n\n    it('should fail without direction', function() {\n      return expect(cb => transformer._transform({}, 'utf8', cb),\n        'to call the callback with error', 'Transformer has no direction');\n    });\n\n    it('should call transformFromDB with direction FromDB', function() {\n      transformer.withDirection(TransformDirection.FromDB)._transform({}, 'utf8', () => {});\n\n      return expect(transformer.transformFromDB, 'was called');\n    });\n\n    it('should call transformFromFilesystem with direction FromFilesystem', function() {\n      transformer.withDirection(TransformDirection.FromFilesystem)._transform({}, 'utf8', () => {});\n\n      return expect(transformer.transformFromFilesystem, 'was called');\n    });\n  });\n\n  /** @test {Transformer#transformFromDB} */\n  describe('#transformFromDB', function() {\n    const transformer = new Transformer();\n\n    it('should fail if not overridden', function() {\n      return expect(cb => transformer.transformFromDB({}, 'utf8', cb),\n        'to call the callback with error', /must be overridden/);\n    });\n  });\n\n  /** @test {Transformer#transformFromFilesystem} */\n  describe('#transformFromFilesytem', function() {\n    const transformer = new Transformer();\n\n    it('should fail if not overridden', function() {\n      return expect(cb => transformer.transformFromFilesystem({}, 'utf8', cb),\n        'to call the callback with error', /must be overridden/);\n    });\n  });\n\n  /** @test {Transformer.applyTransformers} */\n  describe('.applyTransformers', function() {\n    it('should throw on invalid direction', function() {\n      expect(() => Transformer.applyTransformers(createStream(), [], 'asdf'), 'to throw error',\n        'Direction is invalid');\n    });\n\n    it('should return directed transformer if only one is passed', function() {\n      const firstTransformer = new Transformer();\n      const result = Transformer.applyTransformers(createStream(), [firstTransformer],\n        TransformDirection.FromDB);\n\n      expect(result, 'to be', firstTransformer);\n      expect(firstTransformer.direction, 'to equal', TransformDirection.FromDB);\n    });\n\n    it('should return last transformer piped to previous', function() {\n      const firstTransformer = new Transformer();\n      const lastTransformer = new Transformer();\n      const result = Transformer.applyTransformers(createStream(), [\n        firstTransformer,\n        lastTransformer,\n      ], TransformDirection.FromDB);\n\n      expect(result, 'to be', lastTransformer);\n      expect(firstTransformer.direction, 'to equal', TransformDirection.FromDB);\n      expect(lastTransformer.direction, 'to equal', TransformDirection.FromDB);\n    });\n\n    it('should reverse transformers if called with \"FromFilesystem\"', function() {\n      const firstTransformer = new Transformer();\n      const lastTransformer = new Transformer();\n      const result = Transformer.applyTransformers(createStream(), [\n        firstTransformer,\n        lastTransformer,\n      ], TransformDirection.FromFilesystem);\n\n      expect(result, 'to be', firstTransformer);\n      expect(firstTransformer.direction, 'to equal', TransformDirection.FromFilesystem);\n      expect(lastTransformer.direction, 'to equal', TransformDirection.FromFilesystem);\n    });\n\n    it('should work with empty array as argument', function() {\n      expect(Transformer.applyTransformers(createStream(), [], TransformDirection.FromDB),\n        'to be a', Stream);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 599,
    "kind": "testDescribe",
    "name": "describe265",
    "testId": 265,
    "memberof": "test/src/lib/transform/Transformer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265",
    "access": null,
    "description": "Transformer",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Transformer}"
      }
    ],
    "testTargets": [
      "Transformer"
    ]
  },
  {
    "__docId__": 600,
    "kind": "testDescribe",
    "name": "describe266",
    "testId": 266,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe266",
    "access": null,
    "description": "#constructor",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Transformer#constructor}"
      }
    ],
    "testTargets": [
      "Transformer#constructor"
    ]
  },
  {
    "__docId__": 601,
    "kind": "testIt",
    "name": "it267",
    "testId": 267,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265.describe266",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe266.it267",
    "access": null,
    "description": "should throw with invalid direction",
    "lineNumber": 12
  },
  {
    "__docId__": 602,
    "kind": "testIt",
    "name": "it268",
    "testId": 268,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265.describe266",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe266.it268",
    "access": null,
    "description": "should store direction",
    "lineNumber": 17
  },
  {
    "__docId__": 603,
    "kind": "testDescribe",
    "name": "describe269",
    "testId": 269,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe269",
    "access": null,
    "description": "#withDirection",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Transformer#withDirection}"
      }
    ],
    "testTargets": [
      "Transformer#withDirection"
    ]
  },
  {
    "__docId__": 604,
    "kind": "testIt",
    "name": "it270",
    "testId": 270,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265.describe269",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe269.it270",
    "access": null,
    "description": "should throw without direction",
    "lineNumber": 29
  },
  {
    "__docId__": 605,
    "kind": "testIt",
    "name": "it271",
    "testId": 271,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265.describe269",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe269.it271",
    "access": null,
    "description": "should throw with invalid direction",
    "lineNumber": 33
  },
  {
    "__docId__": 606,
    "kind": "testIt",
    "name": "it272",
    "testId": 272,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265.describe269",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe269.it272",
    "access": null,
    "description": "should return self with direction set",
    "lineNumber": 37
  },
  {
    "__docId__": 607,
    "kind": "testDescribe",
    "name": "describe273",
    "testId": 273,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe273",
    "access": null,
    "description": "#_transform",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Transformer#_transform}"
      }
    ],
    "testTargets": [
      "Transformer#_transform"
    ]
  },
  {
    "__docId__": 608,
    "kind": "testIt",
    "name": "it274",
    "testId": 274,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265.describe273",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe273.it274",
    "access": null,
    "description": "should fail without direction",
    "lineNumber": 55
  },
  {
    "__docId__": 609,
    "kind": "testIt",
    "name": "it275",
    "testId": 275,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265.describe273",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe273.it275",
    "access": null,
    "description": "should call transformFromDB with direction FromDB",
    "lineNumber": 60
  },
  {
    "__docId__": 610,
    "kind": "testIt",
    "name": "it276",
    "testId": 276,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265.describe273",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe273.it276",
    "access": null,
    "description": "should call transformFromFilesystem with direction FromFilesystem",
    "lineNumber": 66
  },
  {
    "__docId__": 611,
    "kind": "testDescribe",
    "name": "describe277",
    "testId": 277,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe277",
    "access": null,
    "description": "#transformFromDB",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Transformer#transformFromDB}"
      }
    ],
    "testTargets": [
      "Transformer#transformFromDB"
    ]
  },
  {
    "__docId__": 612,
    "kind": "testIt",
    "name": "it278",
    "testId": 278,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265.describe277",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe277.it278",
    "access": null,
    "description": "should fail if not overridden",
    "lineNumber": 77
  },
  {
    "__docId__": 613,
    "kind": "testDescribe",
    "name": "describe279",
    "testId": 279,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe279",
    "access": null,
    "description": "#transformFromFilesytem",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Transformer#transformFromFilesystem}"
      }
    ],
    "testTargets": [
      "Transformer#transformFromFilesystem"
    ]
  },
  {
    "__docId__": 614,
    "kind": "testIt",
    "name": "it280",
    "testId": 280,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265.describe279",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe279.it280",
    "access": null,
    "description": "should fail if not overridden",
    "lineNumber": 87
  },
  {
    "__docId__": 615,
    "kind": "testDescribe",
    "name": "describe281",
    "testId": 281,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe281",
    "access": null,
    "description": ".applyTransformers",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Transformer.applyTransformers}"
      }
    ],
    "testTargets": [
      "Transformer.applyTransformers"
    ]
  },
  {
    "__docId__": 616,
    "kind": "testIt",
    "name": "it282",
    "testId": 282,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265.describe281",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe281.it282",
    "access": null,
    "description": "should throw on invalid direction",
    "lineNumber": 95
  },
  {
    "__docId__": 617,
    "kind": "testIt",
    "name": "it283",
    "testId": 283,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265.describe281",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe281.it283",
    "access": null,
    "description": "should return directed transformer if only one is passed",
    "lineNumber": 100
  },
  {
    "__docId__": 618,
    "kind": "testIt",
    "name": "it284",
    "testId": 284,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265.describe281",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe281.it284",
    "access": null,
    "description": "should return last transformer piped to previous",
    "lineNumber": 109
  },
  {
    "__docId__": 619,
    "kind": "testIt",
    "name": "it285",
    "testId": 285,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265.describe281",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe281.it285",
    "access": null,
    "description": "should reverse transformers if called with \"FromFilesystem\"",
    "lineNumber": 122
  },
  {
    "__docId__": 620,
    "kind": "testIt",
    "name": "it286",
    "testId": 286,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe265.describe281",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe265.describe281.it286",
    "access": null,
    "description": "should work with empty array as argument",
    "lineNumber": 135
  },
  {
    "__docId__": 621,
    "kind": "testFile",
    "name": "test/src/lib/transform/XMLTransformer.spec.js",
    "content": "import expect from 'unexpected';\n\nimport { EOL } from 'os';\nimport { Builder } from 'xml2js';\nimport Transformer, { TransformDirection } from '../../../../src/lib/transform/Transformer';\nimport XMLTransformer from '../../../../src/lib/transform/XMLTransformer';\n\n/** @test {XMLTransformer} */\ndescribe('XMLTransformer', function() {\n  /** @test {XMLTransformer#constructor} */\n  describe('#constructor', function() {\n    it('should return a SplittingTransformer', function() {\n      expect(new XMLTransformer(), 'to be a', Transformer);\n    });\n\n    it('should create a _fromDBBuilder', function() {\n      const transformer = new XMLTransformer();\n\n      expect(transformer._fromDBBuilder, 'to be defined');\n      expect(transformer._fromDBBuilder, 'to be a', Builder);\n    });\n\n    it('should create a _fromFilesystemBuilder', function() {\n      const transformer = new XMLTransformer();\n\n      expect(transformer._fromDBBuilder, 'to be defined');\n      expect(transformer._fromDBBuilder, 'to be a', Builder);\n    });\n  });\n\n  /** @test {XMLTransformer#builder} */\n  describe('#builder', function() {\n    it('should return the #_fromDBBuilder if direction is FromDB', function() {\n      const transformer = new XMLTransformer({ direction: TransformDirection.FromDB });\n\n      expect(transformer.builder, 'to be defined');\n      expect(transformer.builder, 'to be', transformer._fromDBBuilder);\n    });\n\n    it('should return the #_fromDBBuilder if direction is FromFilesystem', function() {\n      const transformer = new XMLTransformer({ direction: TransformDirection.FromFilesystem });\n\n      expect(transformer.builder, 'to be defined');\n      expect(transformer.builder, 'to be', transformer._fromFilesystemBuilder);\n    });\n  });\n\n  /** @test {XMLTransformer#decodeContents} */\n  describe('#decodeContents', function() {\n    it('should forward errors', function(done) {\n      expect(cb => (new XMLTransformer()).decodeContents({ contents: 'no valid xml' }, cb),\n        'to call the callback with error', /Non-whitespace before first tag./)\n        .then(() => done());\n    });\n\n    it('should return object for valid xml', function(done) {\n      expect(cb => (new XMLTransformer()).decodeContents({ contents: '<tag>value</tag>' }, cb),\n        'to call the callback')\n        .then(args => {\n          expect(args[0], 'to be falsy');\n          expect(args[1], 'to equal', { tag: 'value' });\n          done();\n        });\n    });\n  });\n\n  function testBuilder(direction, object, expectedResult, callback) {\n    const transformer = new XMLTransformer({ direction });\n\n    expect(cb => transformer.encodeContents(object, cb), 'to call the callback')\n      .then(args => {\n        expect(args[0], 'to be falsy');\n        expect(args[1], 'to contain', expectedResult);\n        callback();\n      });\n  }\n\n  /** @test {XMLTransformer#encodeContents} */\n  describe('#encodeContents', function() {\n    it('should forward errors', function() {\n      expect(cb => (new XMLTransformer()).encodeContents(null, cb),\n        'to call the callback with error', 'Cannot convert undefined or null to object');\n    });\n\n    context('when direction is FromDB', function() {\n      it('should indent with double space', function(done) {\n        testBuilder(TransformDirection.FromDB, { root: { sub: 'test' } },\n          `<root>${EOL}  <sub>test</sub>${EOL}</root>`, done);\n      });\n    });\n\n    context('when direction is FromFilesytem', function() {\n      it('should indent with single space', function(done) {\n        testBuilder(TransformDirection.FromFilesystem, { root: { sub: 'test' } },\n          '<root>\\r\\n <sub>test</sub>\\r\\n</root>', done);\n      });\n    });\n\n    it('should support forced CDATA', function() {\n      return expect(cb => (new XMLTransformer({ direction: TransformDirection.FromDB })).encodeContents({\n        svg: {\n          script: [\n            { _: XMLTransformer.forceCData('test()') },\n          ]\n        },\n      }, cb), 'to call the callback')\n        .then(args => expect(args[1], 'to end with', `<svg>\n  <script><![CDATA[test()]]></script>\n</svg>`));\n    });\n\n    it('should not double escape forced CDATA', function() {\n      return expect(cb => (new XMLTransformer({ direction: TransformDirection.FromFilesystem })).encodeContents({\n        svg: {\n          script: [\n            { _: XMLTransformer.forceCData('console.log(\"<asdf>\")') },\n          ],\n        },\n      }, cb), 'to call the callback')\n        .then(args => expect(args[1], 'to contain',\n          '<script><![CDATA[console.log(\"<asdf>\")]]></script>'));\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 622,
    "kind": "testDescribe",
    "name": "describe287",
    "testId": 287,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287",
    "access": null,
    "description": "XMLTransformer",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{XMLTransformer}"
      }
    ],
    "testTargets": [
      "XMLTransformer"
    ]
  },
  {
    "__docId__": 623,
    "kind": "testDescribe",
    "name": "describe288",
    "testId": 288,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe288",
    "access": null,
    "description": "#constructor",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{XMLTransformer#constructor}"
      }
    ],
    "testTargets": [
      "XMLTransformer#constructor"
    ]
  },
  {
    "__docId__": 624,
    "kind": "testIt",
    "name": "it289",
    "testId": 289,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe288",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe288.it289",
    "access": null,
    "description": "should return a SplittingTransformer",
    "lineNumber": 12
  },
  {
    "__docId__": 625,
    "kind": "testIt",
    "name": "it290",
    "testId": 290,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe288",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe288.it290",
    "access": null,
    "description": "should create a _fromDBBuilder",
    "lineNumber": 16
  },
  {
    "__docId__": 626,
    "kind": "testIt",
    "name": "it291",
    "testId": 291,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe288",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe288.it291",
    "access": null,
    "description": "should create a _fromFilesystemBuilder",
    "lineNumber": 23
  },
  {
    "__docId__": 627,
    "kind": "testDescribe",
    "name": "describe292",
    "testId": 292,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe292",
    "access": null,
    "description": "#builder",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{XMLTransformer#builder}"
      }
    ],
    "testTargets": [
      "XMLTransformer#builder"
    ]
  },
  {
    "__docId__": 628,
    "kind": "testIt",
    "name": "it293",
    "testId": 293,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe292",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe292.it293",
    "access": null,
    "description": "should return the #_fromDBBuilder if direction is FromDB",
    "lineNumber": 33
  },
  {
    "__docId__": 629,
    "kind": "testIt",
    "name": "it294",
    "testId": 294,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe292",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe292.it294",
    "access": null,
    "description": "should return the #_fromDBBuilder if direction is FromFilesystem",
    "lineNumber": 40
  },
  {
    "__docId__": 630,
    "kind": "testDescribe",
    "name": "describe295",
    "testId": 295,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe295",
    "access": null,
    "description": "#decodeContents",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{XMLTransformer#decodeContents}"
      }
    ],
    "testTargets": [
      "XMLTransformer#decodeContents"
    ]
  },
  {
    "__docId__": 631,
    "kind": "testIt",
    "name": "it296",
    "testId": 296,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe295",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe295.it296",
    "access": null,
    "description": "should forward errors",
    "lineNumber": 50
  },
  {
    "__docId__": 632,
    "kind": "testIt",
    "name": "it297",
    "testId": 297,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe295",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe295.it297",
    "access": null,
    "description": "should return object for valid xml",
    "lineNumber": 56
  },
  {
    "__docId__": 633,
    "kind": "testDescribe",
    "name": "describe298",
    "testId": 298,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe298",
    "access": null,
    "description": "#encodeContents",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{XMLTransformer#encodeContents}"
      }
    ],
    "testTargets": [
      "XMLTransformer#encodeContents"
    ]
  },
  {
    "__docId__": 634,
    "kind": "testIt",
    "name": "it299",
    "testId": 299,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe298",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe298.it299",
    "access": null,
    "description": "should forward errors",
    "lineNumber": 80
  },
  {
    "__docId__": 635,
    "kind": "testDescribe",
    "name": "context300",
    "testId": 300,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe298",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe298.context300",
    "access": null,
    "description": "when direction is FromDB",
    "lineNumber": 85
  },
  {
    "__docId__": 636,
    "kind": "testIt",
    "name": "it301",
    "testId": 301,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe298.context300",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe298.context300.it301",
    "access": null,
    "description": "should indent with double space",
    "lineNumber": 86
  },
  {
    "__docId__": 637,
    "kind": "testDescribe",
    "name": "context302",
    "testId": 302,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe298",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe298.context302",
    "access": null,
    "description": "when direction is FromFilesytem",
    "lineNumber": 92
  },
  {
    "__docId__": 638,
    "kind": "testIt",
    "name": "it303",
    "testId": 303,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe298.context302",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe298.context302.it303",
    "access": null,
    "description": "should indent with single space",
    "lineNumber": 93
  },
  {
    "__docId__": 639,
    "kind": "testIt",
    "name": "it304",
    "testId": 304,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe298",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe298.it304",
    "access": null,
    "description": "should support forced CDATA",
    "lineNumber": 99
  },
  {
    "__docId__": 640,
    "kind": "testIt",
    "name": "it305",
    "testId": 305,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe298",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe287.describe298.it305",
    "access": null,
    "description": "should not double escape forced CDATA",
    "lineNumber": 112
  },
  {
    "__docId__": 641,
    "kind": "testFile",
    "name": "test/src/maintenance.spec.js",
    "content": "import Session from '../../src/lib/server/Session';\n\nprocess.on('unhandledRejection', e => {\n  process.emit('error', e);\n});\n\nafter(function() {\n  console.log('Maintenance: Closing open sessions');\n\n  return Session.closeOpen()\n    .then(results => console.log('Maintenance: Closed', results.length, 'open session'));\n});\n",
    "static": true,
    "longname": "test/src/maintenance.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 642,
    "kind": "testFile",
    "name": "test/src/tasks/pull.spec.js",
    "content": "import expect from 'unexpected';\nimport proxyquire from 'proxyquire';\n\nimport { Stream } from 'stream';\nimport { ctor as throughStreamClass } from 'through2';\nimport NodeId from '../../../src/lib/server/NodeId';\n\nconst pull = proxyquire('../../../src/tasks/pull', {\n  '../lib/server/NodeStream': {\n    _esModule: true,\n    default: class StubStream extends throughStreamClass({ objectMode: true }) {\n      constructor() {\n        super();\n\n        this.push({\n          nodeId: new NodeId('AGENT.DISPLAYS.Main'),\n          typeDefinition: new NodeId('VariableTypes.ATVISE.Display'),\n        });\n\n        this.end();\n      }\n    },\n  },\n  '../lib/gulp/PullStream': {\n    _esModule: true,\n    default: class PStream {\n      constructor(readStream) {\n        return readStream;\n      }\n    },\n  },\n}).default;\n\n/** @test {pull} */\ndescribe('pull', function() {\n  it('should return a stream', function(done) {\n    const stream = pull();\n\n    expect(stream, 'to be a', Stream);\n\n    stream.on('data', () => {}); // Unpipe readable stream\n    stream.once('end', done);\n  });\n});\n",
    "static": true,
    "longname": "test/src/tasks/pull.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 643,
    "kind": "testDescribe",
    "name": "describe306",
    "testId": 306,
    "memberof": "test/src/tasks/pull.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/tasks/pull.spec.js~describe306",
    "access": null,
    "description": "pull",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{pull}"
      }
    ],
    "testTargets": [
      "pull"
    ]
  },
  {
    "__docId__": 644,
    "kind": "testIt",
    "name": "it307",
    "testId": 307,
    "memberof": "test/src/tasks/pull.spec.js~describe306",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/pull.spec.js~describe306.it307",
    "access": null,
    "description": "should return a stream",
    "lineNumber": 36
  },
  {
    "__docId__": 645,
    "kind": "testFile",
    "name": "test/src/tasks/push.spec.js",
    "content": "import { Stream } from 'stream';\nimport { Buffer } from 'buffer';\nimport proxyquire from 'proxyquire';\nimport File from 'vinyl';\nimport through from 'through2';\nimport expect from '../../expect';\n\nconst push = proxyquire('../../../src/tasks/push', {\n  gulp: {\n    src: () => {\n      const stream = through.obj();\n\n      stream.push(new File({\n        path: 'AGENT/OBJECTS/Variable.bool',\n        contents: Buffer.from('true'),\n      }));\n\n      stream.end();\n\n      return stream;\n    },\n  },\n  '../lib/gulp/PushStream': {\n    _esModule: true,\n    default: class WStream {\n      constructor(srcStream) {\n        return srcStream;\n      }\n    },\n  },\n}).default;\n\n/** @test {push} */\ndescribe('push', function() {\n  it('should return a stream', function(done) {\n    const stream = push();\n    expect(stream, 'to be a', Stream);\n\n    stream.on('data', () => {}); // Unpipe readable stream\n    stream.once('end', done);\n  });\n});\n\n",
    "static": true,
    "longname": "test/src/tasks/push.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 646,
    "kind": "testDescribe",
    "name": "describe308",
    "testId": 308,
    "memberof": "test/src/tasks/push.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/tasks/push.spec.js~describe308",
    "access": null,
    "description": "push",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{push}"
      }
    ],
    "testTargets": [
      "push"
    ]
  },
  {
    "__docId__": 647,
    "kind": "testIt",
    "name": "it309",
    "testId": 309,
    "memberof": "test/src/tasks/push.spec.js~describe308",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/push.spec.js~describe308.it309",
    "access": null,
    "description": "should return a stream",
    "lineNumber": 35
  },
  {
    "__docId__": 648,
    "kind": "testFile",
    "name": "test/src/tasks/watch.spec.js",
    "content": "import Emitter from 'events';\nimport expect from 'unexpected';\nimport proxyquire from 'proxyquire';\nimport { obj as createThroughStream } from 'through2';\nimport { spy } from 'sinon';\nimport watch from '../../../src/tasks/watch';\n\nclass StubBrowserSync {\n  init(options, callback) { callback(); }\n  reload() {}\n}\n\nfunction watchForStubChanges(listener) {\n  return cb => new Emitter()\n    .on('change', listener)\n    .on('error', err => cb(err))\n    .on('close', () => cb());\n}\n\nclass NoopStream {\n  constructor(otherStream) {\n    return otherStream.pipe(createThroughStream()).on('data', () => {});\n  }\n}\n\nconst stubWatch = proxyquire('../../../src/tasks/watch', {\n  'browser-sync': {\n    _esModule: true,\n    default: StubBrowserSync,\n    create() { return new StubBrowserSync(); },\n    '@noCallThru': true,\n  },\n  gulp: {\n    src(path, options) {\n      const stream = createThroughStream();\n      stream.write(Object.assign({}, options, { path, nodeId: 'source node id' }));\n      stream.end();\n\n      return stream;\n    },\n  },\n  '../lib/gulp/watchForFileChanges': { _esModule: true, default: watchForStubChanges },\n  '../lib/gulp/watchForServerChanges': { _esModule: true, default: watchForStubChanges },\n  '../lib/gulp/PullStream': { __esModule: true, default: NoopStream, '@noCallThru': true },\n  '../lib/gulp/PushStream': { __esModule: true, default: NoopStream, '@noCallThru': true },\n}).default;\n\n/** @test {watch} */\ndescribe('watch', function() {\n  it('should return a function', function() {\n    expect(watch, 'to be a', 'function');\n  });\n\n  context('when run', function() {\n    it('should return a Promise', function() {\n      expect(stubWatch(), 'to be a', Promise);\n    });\n\n    it('should init browser-sync once watchers are ready', function() {\n      const { browserSync, fileWatcher, serverWatcher } = stubWatch();\n      spy(browserSync, 'init');\n\n      fileWatcher.emit('ready');\n      expect(browserSync.init.callCount, 'to equal', 0);\n\n      serverWatcher.emit('ready');\n      expect(browserSync.init.calledOnce, 'to be', true);\n    });\n\n    it('should call listeners on file change', function(done) {\n      const promise = stubWatch();\n\n      promise.fileWatcher.emit('change', 'root', 'path', { mtime: new Date() });\n\n      promise.browserSync.reload = () => done();\n    });\n\n    it('should not call file listeners while pulling', function(done) {\n      const promise = stubWatch();\n\n      const readResult = { nodeId: 'fake node id', mtime: new Date() };\n      promise.serverWatcher.emit('change', readResult);\n      promise.fileWatcher.emit('change', 'root', 'path', { mtime: new Date() });\n\n      promise.browserSync.reload = () => done();\n    });\n\n    it('should call listeners on server change', function(done) {\n      const promise = stubWatch();\n\n      const readResult = { nodeId: 'fake node id', mtime: new Date() };\n      promise.serverWatcher.emit('change', readResult);\n\n      promise.browserSync.reload = () => done();\n    });\n\n    it('should not call server listeners while pushing', function(done) {\n      const promise = stubWatch();\n\n      const readResult = { nodeId: 'fake node id', mtime: new Date() };\n      promise.fileWatcher.emit('change', 'root', 'path', { mtime: new Date() });\n      promise.serverWatcher.emit('change', readResult);\n\n      promise.browserSync.reload = () => done();\n    });\n\n    it('should not call server listeners when delayed', function(done) {\n      const promise = stubWatch();\n\n      promise.fileWatcher.emit('change', 'root', 'path', { mtime: new Date() });\n      promise.fileWatcher.once('push', () => {\n        const readResult = { nodeId: 'source node id', mtime: new Date() };\n        promise.serverWatcher.emit('change', readResult);\n        done();\n      });\n      promise.serverWatcher.once('pull', () => {\n        done(new Error('server listener unexpectedly called on delayed change'));\n      });\n    });\n\n    it('should forward file watcher errors', function() {\n      const promise = stubWatch();\n      promise.fileWatcher.emit('error', new Error('Test'));\n\n      return expect(promise, 'to be rejected with', 'Test');\n    });\n\n    it('should forward server watcher errors', function() {\n      const promise = stubWatch();\n      promise.serverWatcher.emit('error', new Error('Test'));\n\n      return expect(promise, 'to be rejected with', 'Test');\n    });\n  });\n\n  // FIXME: Need additional tests that actually subscribe nodes / watch files\n});\n",
    "static": true,
    "longname": "test/src/tasks/watch.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 649,
    "kind": "testDescribe",
    "name": "describe310",
    "testId": 310,
    "memberof": "test/src/tasks/watch.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe310",
    "access": null,
    "description": "watch",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{watch}"
      }
    ],
    "testTargets": [
      "watch"
    ]
  },
  {
    "__docId__": 650,
    "kind": "testIt",
    "name": "it311",
    "testId": 311,
    "memberof": "test/src/tasks/watch.spec.js~describe310",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe310.it311",
    "access": null,
    "description": "should return a function",
    "lineNumber": 50
  },
  {
    "__docId__": 651,
    "kind": "testDescribe",
    "name": "context312",
    "testId": 312,
    "memberof": "test/src/tasks/watch.spec.js~describe310",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe310.context312",
    "access": null,
    "description": "when run",
    "lineNumber": 54
  },
  {
    "__docId__": 652,
    "kind": "testIt",
    "name": "it313",
    "testId": 313,
    "memberof": "test/src/tasks/watch.spec.js~describe310.context312",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe310.context312.it313",
    "access": null,
    "description": "should return a Promise",
    "lineNumber": 55
  },
  {
    "__docId__": 653,
    "kind": "testIt",
    "name": "it314",
    "testId": 314,
    "memberof": "test/src/tasks/watch.spec.js~describe310.context312",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe310.context312.it314",
    "access": null,
    "description": "should init browser-sync once watchers are ready",
    "lineNumber": 59
  },
  {
    "__docId__": 654,
    "kind": "testIt",
    "name": "it315",
    "testId": 315,
    "memberof": "test/src/tasks/watch.spec.js~describe310.context312",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe310.context312.it315",
    "access": null,
    "description": "should call listeners on file change",
    "lineNumber": 70
  },
  {
    "__docId__": 655,
    "kind": "testIt",
    "name": "it316",
    "testId": 316,
    "memberof": "test/src/tasks/watch.spec.js~describe310.context312",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe310.context312.it316",
    "access": null,
    "description": "should not call file listeners while pulling",
    "lineNumber": 78
  },
  {
    "__docId__": 656,
    "kind": "testIt",
    "name": "it317",
    "testId": 317,
    "memberof": "test/src/tasks/watch.spec.js~describe310.context312",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe310.context312.it317",
    "access": null,
    "description": "should call listeners on server change",
    "lineNumber": 88
  },
  {
    "__docId__": 657,
    "kind": "testIt",
    "name": "it318",
    "testId": 318,
    "memberof": "test/src/tasks/watch.spec.js~describe310.context312",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe310.context312.it318",
    "access": null,
    "description": "should not call server listeners while pushing",
    "lineNumber": 97
  },
  {
    "__docId__": 658,
    "kind": "testIt",
    "name": "it319",
    "testId": 319,
    "memberof": "test/src/tasks/watch.spec.js~describe310.context312",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe310.context312.it319",
    "access": null,
    "description": "should not call server listeners when delayed",
    "lineNumber": 107
  },
  {
    "__docId__": 659,
    "kind": "testIt",
    "name": "it320",
    "testId": 320,
    "memberof": "test/src/tasks/watch.spec.js~describe310.context312",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe310.context312.it320",
    "access": null,
    "description": "should forward file watcher errors",
    "lineNumber": 121
  },
  {
    "__docId__": 660,
    "kind": "testIt",
    "name": "it321",
    "testId": 321,
    "memberof": "test/src/tasks/watch.spec.js~describe310.context312",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe310.context312.it321",
    "access": null,
    "description": "should forward server watcher errors",
    "lineNumber": 128
  },
  {
    "__docId__": 661,
    "kind": "testFile",
    "name": "test/src/transform/DisplayTransformer.spec.js",
    "content": "import { Buffer } from 'buffer';\nimport { EOL } from 'os';\nimport File from 'vinyl';\nimport { stub } from 'sinon';\nimport expect from '../../expect';\n\nimport AtviseFile from '../../../src/lib/server/AtviseFile';\nimport { TransformDirection } from '../../../src/lib/transform/Transformer';\nimport DisplayTransformer from '../../../src/transform/DisplayTransformer';\n\n/** @test {DisplayTransformer} */\ndescribe('DisplayTransformer', function() {\n  const nonDisplayFile = { isDisplay: false };\n\n  /** @test {DisplayTransformer#shouldBeTransformed} */\n  describe('#shouldBeTransformed', function() {\n    it('should return false for non-display files', function() {\n      expect(DisplayTransformer.prototype.shouldBeTransformed(nonDisplayFile), 'to equal', false);\n    });\n  });\n\n  /** @test {DisplayTransformer#transformFromDB} */\n  describe('#transformFromDB', function() {\n    function writeXMLToDisplayTransformer(xmlString) {\n      const transformer = new DisplayTransformer({ direction: TransformDirection.FromDB });\n      const file = new AtviseFile({\n        path: 'AGENT/DISPLAYS/Main.display.xml',\n        contents: Buffer.from(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n${xmlString}`),\n      });\n\n      const data = [];\n      transformer.on('data', d => data.push(d));\n\n      const promise = new Promise((resolve, reject) => {\n        transformer.once('error', err => reject(err));\n        transformer.once('end', () => resolve(data));\n      });\n\n      transformer.write(file);\n      transformer.end();\n\n      return promise;\n    }\n\n    it('should forward parse errors', function() {\n      return expect(writeXMLToDisplayTransformer('invalid xml'),\n        'to be rejected with', /Text data outside of root node/);\n    });\n\n    it('should error with invalid xml', function() {\n      return expect(writeXMLToDisplayTransformer(''),\n        'to be rejected with', /No `svg` tag/);\n    });\n\n    function expectFileContents(xmlString, filter) {\n      return expect(writeXMLToDisplayTransformer(xmlString), 'to be fulfilled')\n        .then(resultingFiles => {\n          const _files = resultingFiles.filter(filter);\n          try {\n            expect(_files, 'to have length', 1);\n          } catch (e) {\n            throw new Error('Error in expectFileContents: filter returned multiple files');\n          }\n\n          const file = _files[0];\n\n          return expect(file.contents, 'when decoded as', 'utf-8');\n        });\n    }\n\n    function expectConfig(xmlString) {\n      return expectFileContents(xmlString, file => file.extname === '.json')\n        .then(string => {\n          let obj;\n          expect(() => (obj = JSON.parse(string)), 'not to throw');\n          return obj;\n        });\n    }\n\n    it('should store empty config for empty display', function() {\n      return expectConfig('<svg></svg>')\n        .then(config => {\n          expect(config, 'to equal', {});\n        });\n    });\n\n    it('should store dependencies in config when referenced as \"src\"', function() {\n      return expectConfig(`<svg>\n  <script src=\"path/to/dependency.js\"></script>\n</svg>`)\n        .then(config => {\n          expect(config.dependencies, 'to be defined');\n          expect(config.dependencies, 'to have length', 1);\n          expect(config.dependencies[0], 'to equal', 'path/to/dependency.js');\n        });\n    });\n\n    it('should store dependencies in config when referenced as \"xlink:href\"', function() {\n      return expectConfig(`<svg>\n  <script xlink:href=\"path/to/dependency.js\"></script>\n</svg>`)\n        .then(config => {\n          expect(config.dependencies, 'to be defined');\n          expect(config.dependencies, 'to have length', 1);\n          expect(config.dependencies[0], 'to equal', 'path/to/dependency.js');\n        });\n    });\n\n    it('should store multiple dependencies in config', function() {\n      return expectConfig(`<svg>\n  <script src=\"path/to/dependency1.js\"></script>\n  <script src=\"path/to/dependency2.js\"></script>\n</svg>`)\n        .then(config => {\n          expect(config.dependencies, 'to be defined');\n          expect(config.dependencies, 'to have length', 2);\n          expect(config.dependencies[0], 'to equal', 'path/to/dependency1.js');\n          expect(config.dependencies[1], 'to equal', 'path/to/dependency2.js');\n        });\n    });\n\n    context('when display contains inline script', function() {\n      const script = 'console.log(\"called\");';\n\n      it('should be stored when given with attributes', function() {\n        return expectFileContents(`<svg>\n  <script type=\"text/javascript\">${script}</script>\n</svg>`, file => file.extname === '.js')\n          .then(string => {\n            expect(string, 'to equal', script);\n          });\n      });\n\n      it('should be stored when given without attributes', function() {\n        return expectFileContents(`<svg>\n  <script>${script}</script>\n</svg>`, file => file.extname === '.js')\n          .then(string => {\n            expect(string, 'to equal', script);\n          });\n      });\n\n      it('should store empty inline scripts in separate file', function() {\n        return expectFileContents(`<svg>\n  <script type=\"text/javascript\"></script>\n</svg>`, file => file.extname === '.js')\n          .then(string => {\n            expect(string, 'to equal', '');\n          });\n      });\n    });\n\n    context('when display contains metadata', function() {\n      it('should work without parameters', function() {\n        return expectConfig(`<svg>\n  <metadata></metadata>\n</svg>`)\n          .then(config => {\n            expect(config, 'to be defined');\n          });\n      });\n\n      it('should store parameters', function() {\n        return expectConfig(`<svg>\n  <metadata>\n    <atv:parameter behavior=\"mandatory\" desc=\"base\" valuetype=\"address\" name=\"base\"/>\n    <atv:parameter behavior=\"optional\" desc=\"state label\" substitute=\"$LABEL$\" valuetype=\"trstring\"\n      defaultvalue=\"T{Switched on}\" name=\"labelOn\"/>\n  </metadata>\n</svg>`)\n          .then(config => {\n            expect(config.parameters, 'to be defined');\n            expect(config.parameters, 'to be a', Array);\n            expect(config.parameters, 'to have length', 2);\n            expect(config.parameters[0], 'to equal', {\n              name: 'base',\n              behavior: 'mandatory',\n              desc: 'base',\n              valuetype: 'address',\n            });\n            expect(config.parameters[1], 'to equal', {\n              name: 'labelOn',\n              behavior: 'optional',\n              desc: 'state label',\n              valuetype: 'trstring',\n              defaultvalue: 'T{Switched on}',\n              substitute: '$LABEL$',\n            });\n          });\n      });\n    });\n\n    context('when encoding fails', function() {\n      beforeEach(() => stub(DisplayTransformer.prototype, 'encodeContents',\n        (obj, cb) => cb(new Error('Encode error'))));\n      afterEach(() => DisplayTransformer.prototype.encodeContents.restore());\n\n      it('should forward encode error', function() {\n        return expect(writeXMLToDisplayTransformer('<svg></svg>'),\n          'to be rejected with', 'Encode error');\n      });\n    });\n  });\n\n  /** @test {DisplayTransformer#createCombinedFile} */\n  describe('#createCombinedFile', function() {\n    function createDisplayWithFileContents(contents) {\n      let lastKey;\n      const files = Object.keys(contents).reduce((prev, ext) => {\n        const result = prev;\n\n        result[ext] = new File({\n          path: `path/to/test.display/test${ext}`,\n          contents: Buffer.from(contents[ext]),\n        });\n\n        lastKey = ext;\n        return result;\n      }, {});\n\n      const transformer = new DisplayTransformer({ direction: TransformDirection.FromFilesystem });\n\n      return cb => transformer.createCombinedFile(files, files[lastKey], cb);\n    }\n\n    it('should fail with invalid config file', function() {\n      return expect(createDisplayWithFileContents({\n        '.json': '',\n      }), 'to call the callback with error', /Error parsing JSON/);\n    });\n\n    it('should fail without SVG file', function() {\n      return expect(createDisplayWithFileContents({\n        '.json': '{}',\n      }), 'to call the callback with error', /No display SVG in/);\n    });\n\n    it('should fail with invalid SVG', function() {\n      return expect(createDisplayWithFileContents({\n        '.svg': 'invalid XML',\n      }), 'to call the callback with error', /Non-whitespace before first tag/);\n    });\n\n    it('should fail without `svg` tag', function() {\n      return expect(createDisplayWithFileContents({\n        '.svg': '<root></root>',\n      }), 'to call the callback with error', /Error parsing display SVG: No `svg` tag/);\n    });\n\n    function expectDisplayWithFileContentToHaveXML(contents, xmlString) {\n      return expect(createDisplayWithFileContents(contents), 'to call the callback')\n        .then(args => {\n          expect(args[0], 'to be falsy');\n          expect(args[1], 'to be a', File);\n          expect(args[1].contents, 'to be a', Buffer);\n\n          return expect(args[1].contents.toString(),\n            'to equal', `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n${xmlString}`.replace(new RegExp(EOL, 'g'), '\\r\\n'));\n        });\n    }\n\n    it('should work with empty svg tag', function() {\n      return expectDisplayWithFileContentToHaveXML({\n        '.svg': '<svg></svg>',\n      }, '<svg/>');\n    });\n\n    it('should inline script', function() {\n      return expectDisplayWithFileContentToHaveXML({\n        '.svg': '<svg><rect></rect></svg>',\n        '.js': 'code()',\n      }, `<svg>\n <rect/>\n <script type=\"text/ecmascript\"><![CDATA[code()]]></script>\n</svg>`);\n    });\n\n    it('should link dependencies', function() {\n      return expectDisplayWithFileContentToHaveXML({\n        '.svg': '<svg><rect></rect></svg>',\n        '.json': '{ \"dependencies\": [\"path/to/dep.js\"] }',\n      }, `<svg>\n <rect/>\n <script src=\"path/to/dep.js\"/>\n</svg>`);\n    });\n\n    it('should work without empty parameters config', function() {\n      return expectDisplayWithFileContentToHaveXML({\n        '.svg': '<svg><rect></rect></svg>',\n        '.json': '{ \"parameters\": [] }',\n      }, `<svg>\n <rect/>\n</svg>`);\n    });\n\n    it('should reuse existant metadata section', function() {\n      return expectDisplayWithFileContentToHaveXML({\n        '.svg': `<svg>\n  <metadata>\n    <atv:gridconfig height=\"20\" width=\"20\" enabled=\"false\" gridstyle=\"lines\"/>\n  </metadata>\n</svg>`,\n        '.json': '{ \"parameters\": [{ \"name\": \"test\" }] }',\n      }, `<svg>\n <metadata>\n  <atv:gridconfig height=\"20\" width=\"20\" enabled=\"false\" gridstyle=\"lines\"/>\n  <atv:parameter name=\"test\"/>\n </metadata>\n</svg>`);\n    });\n\n    it('should create metadata section if omitted', function() {\n      return expectDisplayWithFileContentToHaveXML({\n        '.svg': '<svg></svg>',\n        '.json': '{ \"parameters\": [{ \"name\": \"test\" }] }',\n      }, `<svg>\n <metadata>\n  <atv:parameter name=\"test\"/>\n </metadata>\n</svg>`);\n    });\n\n    it('should keep parameters specified in SVG', function() {\n      return expectDisplayWithFileContentToHaveXML({\n        '.svg': `<svg>\n  <metadata>\n    <atv:parameter name=\"existant\"/>\n  </metadata>\n</svg>`,\n        '.json': '{ \"parameters\": [{ \"name\": \"test\" }] }',\n      }, `<svg>\n <metadata>\n  <atv:parameter name=\"existant\"/>\n  <atv:parameter name=\"test\"/>\n </metadata>\n</svg>`);\n    });\n\n    context('when encoding fails', function() {\n      beforeEach(() => stub(DisplayTransformer.prototype, 'encodeContents',\n        (obj, cb) => cb(new Error('Encode error'))));\n      afterEach(() => DisplayTransformer.prototype.encodeContents.restore());\n\n      it('should forward encode error', function() {\n        return expect(createDisplayWithFileContents({\n          '.svg': '<svg><rect></rect></svg>',\n        }), 'to call the callback with error', 'Encode error');\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 662,
    "kind": "testDescribe",
    "name": "describe322",
    "testId": 322,
    "memberof": "test/src/transform/DisplayTransformer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322",
    "access": null,
    "description": "DisplayTransformer",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DisplayTransformer}"
      }
    ],
    "testTargets": [
      "DisplayTransformer"
    ]
  },
  {
    "__docId__": 663,
    "kind": "testDescribe",
    "name": "describe323",
    "testId": 323,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe323",
    "access": null,
    "description": "#shouldBeTransformed",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DisplayTransformer#shouldBeTransformed}"
      }
    ],
    "testTargets": [
      "DisplayTransformer#shouldBeTransformed"
    ]
  },
  {
    "__docId__": 664,
    "kind": "testIt",
    "name": "it324",
    "testId": 324,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe323",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe323.it324",
    "access": null,
    "description": "should return false for non-display files",
    "lineNumber": 17
  },
  {
    "__docId__": 665,
    "kind": "testDescribe",
    "name": "describe325",
    "testId": 325,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325",
    "access": null,
    "description": "#transformFromDB",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DisplayTransformer#transformFromDB}"
      }
    ],
    "testTargets": [
      "DisplayTransformer#transformFromDB"
    ]
  },
  {
    "__docId__": 666,
    "kind": "testIt",
    "name": "it326",
    "testId": 326,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.it326",
    "access": null,
    "description": "should forward parse errors",
    "lineNumber": 46
  },
  {
    "__docId__": 667,
    "kind": "testIt",
    "name": "it327",
    "testId": 327,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.it327",
    "access": null,
    "description": "should error with invalid xml",
    "lineNumber": 51
  },
  {
    "__docId__": 668,
    "kind": "testIt",
    "name": "it328",
    "testId": 328,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.it328",
    "access": null,
    "description": "should store empty config for empty display",
    "lineNumber": 81
  },
  {
    "__docId__": 669,
    "kind": "testIt",
    "name": "it329",
    "testId": 329,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.it329",
    "access": null,
    "description": "should store dependencies in config when referenced as \"src\"",
    "lineNumber": 88
  },
  {
    "__docId__": 670,
    "kind": "testIt",
    "name": "it330",
    "testId": 330,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.it330",
    "access": null,
    "description": "should store dependencies in config when referenced as \"xlink:href\"",
    "lineNumber": 99
  },
  {
    "__docId__": 671,
    "kind": "testIt",
    "name": "it331",
    "testId": 331,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.it331",
    "access": null,
    "description": "should store multiple dependencies in config",
    "lineNumber": 110
  },
  {
    "__docId__": 672,
    "kind": "testDescribe",
    "name": "context332",
    "testId": 332,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.context332",
    "access": null,
    "description": "when display contains inline script",
    "lineNumber": 123
  },
  {
    "__docId__": 673,
    "kind": "testIt",
    "name": "it333",
    "testId": 333,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.context332",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.context332.it333",
    "access": null,
    "description": "should be stored when given with attributes",
    "lineNumber": 126
  },
  {
    "__docId__": 674,
    "kind": "testIt",
    "name": "it334",
    "testId": 334,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.context332",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.context332.it334",
    "access": null,
    "description": "should be stored when given without attributes",
    "lineNumber": 135
  },
  {
    "__docId__": 675,
    "kind": "testIt",
    "name": "it335",
    "testId": 335,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.context332",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.context332.it335",
    "access": null,
    "description": "should store empty inline scripts in separate file",
    "lineNumber": 144
  },
  {
    "__docId__": 676,
    "kind": "testDescribe",
    "name": "context336",
    "testId": 336,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.context336",
    "access": null,
    "description": "when display contains metadata",
    "lineNumber": 154
  },
  {
    "__docId__": 677,
    "kind": "testIt",
    "name": "it337",
    "testId": 337,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.context336",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.context336.it337",
    "access": null,
    "description": "should work without parameters",
    "lineNumber": 155
  },
  {
    "__docId__": 678,
    "kind": "testIt",
    "name": "it338",
    "testId": 338,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.context336",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.context336.it338",
    "access": null,
    "description": "should store parameters",
    "lineNumber": 164
  },
  {
    "__docId__": 679,
    "kind": "testDescribe",
    "name": "context339",
    "testId": 339,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.context339",
    "access": null,
    "description": "when encoding fails",
    "lineNumber": 194
  },
  {
    "__docId__": 680,
    "kind": "testIt",
    "name": "it340",
    "testId": 340,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.context339",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe325.context339.it340",
    "access": null,
    "description": "should forward encode error",
    "lineNumber": 199
  },
  {
    "__docId__": 681,
    "kind": "testDescribe",
    "name": "describe341",
    "testId": 341,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341",
    "access": null,
    "description": "#createCombinedFile",
    "lineNumber": 207,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DisplayTransformer#createCombinedFile}"
      }
    ],
    "testTargets": [
      "DisplayTransformer#createCombinedFile"
    ]
  },
  {
    "__docId__": 682,
    "kind": "testIt",
    "name": "it342",
    "testId": 342,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341.it342",
    "access": null,
    "description": "should fail with invalid config file",
    "lineNumber": 227
  },
  {
    "__docId__": 683,
    "kind": "testIt",
    "name": "it343",
    "testId": 343,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341.it343",
    "access": null,
    "description": "should fail without SVG file",
    "lineNumber": 233
  },
  {
    "__docId__": 684,
    "kind": "testIt",
    "name": "it344",
    "testId": 344,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341.it344",
    "access": null,
    "description": "should fail with invalid SVG",
    "lineNumber": 239
  },
  {
    "__docId__": 685,
    "kind": "testIt",
    "name": "it345",
    "testId": 345,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341.it345",
    "access": null,
    "description": "should fail without `svg` tag",
    "lineNumber": 245
  },
  {
    "__docId__": 686,
    "kind": "testIt",
    "name": "it346",
    "testId": 346,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341.it346",
    "access": null,
    "description": "should work with empty svg tag",
    "lineNumber": 264
  },
  {
    "__docId__": 687,
    "kind": "testIt",
    "name": "it347",
    "testId": 347,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341.it347",
    "access": null,
    "description": "should inline script",
    "lineNumber": 270
  },
  {
    "__docId__": 688,
    "kind": "testIt",
    "name": "it348",
    "testId": 348,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341.it348",
    "access": null,
    "description": "should link dependencies",
    "lineNumber": 280
  },
  {
    "__docId__": 689,
    "kind": "testIt",
    "name": "it349",
    "testId": 349,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341.it349",
    "access": null,
    "description": "should work without empty parameters config",
    "lineNumber": 290
  },
  {
    "__docId__": 690,
    "kind": "testIt",
    "name": "it350",
    "testId": 350,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341.it350",
    "access": null,
    "description": "should reuse existant metadata section",
    "lineNumber": 299
  },
  {
    "__docId__": 691,
    "kind": "testIt",
    "name": "it351",
    "testId": 351,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341.it351",
    "access": null,
    "description": "should create metadata section if omitted",
    "lineNumber": 315
  },
  {
    "__docId__": 692,
    "kind": "testIt",
    "name": "it352",
    "testId": 352,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341.it352",
    "access": null,
    "description": "should keep parameters specified in SVG",
    "lineNumber": 326
  },
  {
    "__docId__": 693,
    "kind": "testDescribe",
    "name": "context353",
    "testId": 353,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341.context353",
    "access": null,
    "description": "when encoding fails",
    "lineNumber": 342
  },
  {
    "__docId__": 694,
    "kind": "testIt",
    "name": "it354",
    "testId": 354,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341.context353",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe322.describe341.context353.it354",
    "access": null,
    "description": "should forward encode error",
    "lineNumber": 347
  },
  {
    "__docId__": 695,
    "kind": "testFile",
    "name": "test/src/transform/Mapping.spec.js",
    "content": "import { Buffer } from 'buffer';\nimport { stub, spy } from 'sinon';\nimport proxyquire from 'proxyquire';\nimport { DataType, VariantArrayType } from 'node-opcua';\nimport File from 'vinyl';\nimport Logger from 'gulplog';\nimport expect from '../../expect';\nimport { TransformDirection } from '../../../src/lib/transform/Transformer';\nimport NodeId from '../../../src/lib/server/NodeId';\nimport AtviseFile from '../../../src/lib/server/AtviseFile';\n\nconst readFile = (path, enc, cb) => cb(null, JSON.stringify({\n  typeDefinition: 'ns=1;s=VariableTypes.PROJECT.Custom',\n}));\nconst fs = { readFile };\n\nconst MappingTransformer = proxyquire('../../../src/transform/Mapping', { fs }).default;\n\n/** @test {MappingTransformer} */\ndescribe('MappingTransformer', function() {\n  before(() => Logger.on('error', () => true));\n\n  /** @test {MappingTransformer#transformFromDB} */\n  describe('#transformFromDB', function() {\n    context('when AtviseFile.fromReadResult returns error', function() {\n      before(() => stub(AtviseFile, 'fromReadResult', () => {\n        throw new Error('Test');\n      }));\n\n      after(() => AtviseFile.fromReadResult.restore());\n\n      it('should not forward errors', function() {\n        const stream = new MappingTransformer({ direction: TransformDirection.FromDB });\n\n        expect(cb => stream.transformFromDB({\n          nodeId: new NodeId('AGENT.DISPLAYS.Main'),\n        }, 'utf8', cb), 'to call the callback')\n          .then(args => expect(args, 'to have length', 1));\n      });\n    });\n\n    it('should return an AtviseFile for the given ReadResult', function() {\n      const stream = new MappingTransformer({ direction: TransformDirection.FromDB });\n\n      return expect([{\n        nodeId: new NodeId('AGENT.DISPLAYS.Main'),\n        value: {\n          value: '<xml></xml>',\n          $dataType: DataType.XmlElement,\n          $arrayType: VariantArrayType.Scalar,\n        },\n        referenceDescription: {\n          typeDefinition: new NodeId('VariableTypes.ATVISE.Display'),\n        },\n      }], 'when piped through', stream, 'to yield chunks satisfying', [\n        expect.it('to be an', AtviseFile),\n      ]);\n    });\n\n    context('when file has non-standard type-definition', function() {\n      it('should push .rc file', function() {\n        const stream = new MappingTransformer({ direction: TransformDirection.FromDB });\n\n        return expect([{\n          nodeId: new NodeId('AGENT.OBJECTS.CustomVar'),\n          value: {\n            value: '<xml></xml>',\n            $dataType: DataType.XmlElement,\n            $arrayType: VariantArrayType.Scalar,\n          },\n          referenceDescription: {\n            typeDefinition: new NodeId('VariableTypes.PROJECT.CustomType'),\n          },\n        }], 'when piped through', stream, 'to yield chunks satisfying', [\n          {\n            contents: new Buffer(JSON.stringify({\n              typeDefinition: 'ns=1;s=VariableTypes.PROJECT.CustomType',\n            }, null, '  ')),\n          },\n          {\n            typeDefinition: new NodeId('VariableTypes.PROJECT.CustomType'),\n          },\n        ]);\n      });\n    });\n  });\n\n  /** @test {MappingTransformer#transformFromFilesystem} */\n  describe('#transformFromFilesystem', function() {\n    it('should write AtviseFiles for read Files', function() {\n      const stream = new MappingTransformer({ direction: TransformDirection.FromFilesystem });\n\n      return expect([\n        new File({ path: 'Test.ext' }),\n      ], 'when piped through', stream,\n      'to yield chunks satisfying', [\n        expect.it('to be an', AtviseFile),\n      ]);\n    });\n\n    it('should keep base', function() {\n      const stream = new MappingTransformer({ direction: TransformDirection.FromFilesystem });\n\n      return expect(cb => stream.transformFromFilesystem(\n        new File({ path: 'folder/Test.ext', base: 'folder' }), 'utf8', cb\n      ), 'to call the callback')\n        .then(args => {\n          expect(args[0], 'to be falsy');\n\n          const result = args[1];\n          expect(result.base, 'to equal', 'folder');\n          expect(result.relative, 'to equal', 'Test.ext');\n        });\n    });\n\n    it('should skip directories', function() {\n      const stream = new MappingTransformer({ direction: TransformDirection.FromFilesystem });\n\n      return expect(cb => stream.transformFromFilesystem(\n        { isDirectory: () => true }, 'utf8', cb\n      ), 'to call the callback')\n        .then(args => {\n          expect(args, 'to have length', 1);\n          expect(args[0], 'to be falsy');\n        });\n    });\n\n    context('when file has non-standard type-definition', function() {\n      context('with .rc file', function() {\n        before(() => spy(fs, 'readFile'));\n        after(() => fs.readFile.restore());\n\n        it('should read .rc file', function() {\n          const stream = new MappingTransformer({ direction: TransformDirection.FromFilesystem });\n\n          return expect([\n            new AtviseFile({ path: 'AGENT/OBJECTS/CustomVar.var.ext' }),\n          ], 'when piped through', stream)\n            .then(() => {\n              expect(fs.readFile, 'was called once');\n            });\n        });\n      });\n\n      context('when .rc file cannot be read', function() {\n        beforeEach(() => stub(fs, 'readFile', (path, enc, cb) => cb(new Error('Test'))));\n        afterEach(() => fs.readFile.restore());\n\n        it('should forward error', function() {\n          const stream = new MappingTransformer({ direction: TransformDirection.FromFilesystem });\n\n          const promise = expect(stream, 'to error with', 'Test');\n\n          stream.write(new AtviseFile({ path: 'AGENT/OBJECTS/CustomVar.var.ext' }));\n          stream.end();\n\n          return promise;\n        });\n      });\n\n      context('when .rc file cannot be parsed', function() {\n        beforeEach(() => stub(fs, 'readFile', (path, enc, cb) => cb(null, 'invalid')));\n        afterEach(() => fs.readFile.restore());\n\n        it('should forward error', function() {\n          const stream = new MappingTransformer({ direction: TransformDirection.FromFilesystem });\n\n          const promise = expect(stream, 'to error with', /Unexpected token i in JSON/);\n\n          stream.write(new AtviseFile({ path: 'AGENT/OBJECTS/CustomVar.var.ext' }));\n          stream.end();\n\n          return promise;\n        });\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 696,
    "kind": "testDescribe",
    "name": "describe355",
    "testId": 355,
    "memberof": "test/src/transform/Mapping.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355",
    "access": null,
    "description": "MappingTransformer",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{MappingTransformer}"
      }
    ],
    "testTargets": [
      "MappingTransformer"
    ]
  },
  {
    "__docId__": 697,
    "kind": "testDescribe",
    "name": "describe356",
    "testId": 356,
    "memberof": "test/src/transform/Mapping.spec.js~describe355",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe356",
    "access": null,
    "description": "#transformFromDB",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{MappingTransformer#transformFromDB}"
      }
    ],
    "testTargets": [
      "MappingTransformer#transformFromDB"
    ]
  },
  {
    "__docId__": 698,
    "kind": "testDescribe",
    "name": "context357",
    "testId": 357,
    "memberof": "test/src/transform/Mapping.spec.js~describe355.describe356",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe356.context357",
    "access": null,
    "description": "when AtviseFile.fromReadResult returns error",
    "lineNumber": 25
  },
  {
    "__docId__": 699,
    "kind": "testIt",
    "name": "it358",
    "testId": 358,
    "memberof": "test/src/transform/Mapping.spec.js~describe355.describe356.context357",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe356.context357.it358",
    "access": null,
    "description": "should not forward errors",
    "lineNumber": 32
  },
  {
    "__docId__": 700,
    "kind": "testIt",
    "name": "it359",
    "testId": 359,
    "memberof": "test/src/transform/Mapping.spec.js~describe355.describe356",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe356.it359",
    "access": null,
    "description": "should return an AtviseFile for the given ReadResult",
    "lineNumber": 42
  },
  {
    "__docId__": 701,
    "kind": "testDescribe",
    "name": "context360",
    "testId": 360,
    "memberof": "test/src/transform/Mapping.spec.js~describe355.describe356",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe356.context360",
    "access": null,
    "description": "when file has non-standard type-definition",
    "lineNumber": 60
  },
  {
    "__docId__": 702,
    "kind": "testIt",
    "name": "it361",
    "testId": 361,
    "memberof": "test/src/transform/Mapping.spec.js~describe355.describe356.context360",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe356.context360.it361",
    "access": null,
    "description": "should push .rc file",
    "lineNumber": 61
  },
  {
    "__docId__": 703,
    "kind": "testDescribe",
    "name": "describe362",
    "testId": 362,
    "memberof": "test/src/transform/Mapping.spec.js~describe355",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe362",
    "access": null,
    "description": "#transformFromFilesystem",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{MappingTransformer#transformFromFilesystem}"
      }
    ],
    "testTargets": [
      "MappingTransformer#transformFromFilesystem"
    ]
  },
  {
    "__docId__": 704,
    "kind": "testIt",
    "name": "it363",
    "testId": 363,
    "memberof": "test/src/transform/Mapping.spec.js~describe355.describe362",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe362.it363",
    "access": null,
    "description": "should write AtviseFiles for read Files",
    "lineNumber": 90
  },
  {
    "__docId__": 705,
    "kind": "testIt",
    "name": "it364",
    "testId": 364,
    "memberof": "test/src/transform/Mapping.spec.js~describe355.describe362",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe362.it364",
    "access": null,
    "description": "should keep base",
    "lineNumber": 101
  },
  {
    "__docId__": 706,
    "kind": "testIt",
    "name": "it365",
    "testId": 365,
    "memberof": "test/src/transform/Mapping.spec.js~describe355.describe362",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe362.it365",
    "access": null,
    "description": "should skip directories",
    "lineNumber": 116
  },
  {
    "__docId__": 707,
    "kind": "testDescribe",
    "name": "context366",
    "testId": 366,
    "memberof": "test/src/transform/Mapping.spec.js~describe355.describe362",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe362.context366",
    "access": null,
    "description": "when file has non-standard type-definition",
    "lineNumber": 128
  },
  {
    "__docId__": 708,
    "kind": "testDescribe",
    "name": "context367",
    "testId": 367,
    "memberof": "test/src/transform/Mapping.spec.js~describe355.describe362.context366",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe362.context366.context367",
    "access": null,
    "description": "with .rc file",
    "lineNumber": 129
  },
  {
    "__docId__": 709,
    "kind": "testIt",
    "name": "it368",
    "testId": 368,
    "memberof": "test/src/transform/Mapping.spec.js~describe355.describe362.context366.context367",
    "testDepth": 4,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe362.context366.context367.it368",
    "access": null,
    "description": "should read .rc file",
    "lineNumber": 133
  },
  {
    "__docId__": 710,
    "kind": "testDescribe",
    "name": "context369",
    "testId": 369,
    "memberof": "test/src/transform/Mapping.spec.js~describe355.describe362.context366",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe362.context366.context369",
    "access": null,
    "description": "when .rc file cannot be read",
    "lineNumber": 145
  },
  {
    "__docId__": 711,
    "kind": "testIt",
    "name": "it370",
    "testId": 370,
    "memberof": "test/src/transform/Mapping.spec.js~describe355.describe362.context366.context369",
    "testDepth": 4,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe362.context366.context369.it370",
    "access": null,
    "description": "should forward error",
    "lineNumber": 149
  },
  {
    "__docId__": 712,
    "kind": "testDescribe",
    "name": "context371",
    "testId": 371,
    "memberof": "test/src/transform/Mapping.spec.js~describe355.describe362.context366",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe362.context366.context371",
    "access": null,
    "description": "when .rc file cannot be parsed",
    "lineNumber": 161
  },
  {
    "__docId__": 713,
    "kind": "testIt",
    "name": "it372",
    "testId": 372,
    "memberof": "test/src/transform/Mapping.spec.js~describe355.describe362.context366.context371",
    "testDepth": 4,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe355.describe362.context366.context371.it372",
    "access": null,
    "description": "should forward error",
    "lineNumber": 165
  },
  {
    "__docId__": 714,
    "kind": "testFile",
    "name": "test/src/transform/ScriptTransformer.spec.js",
    "content": "import Logger from 'gulplog';\nimport { spy } from 'sinon';\nimport expect from '../../expect';\nimport TransformerHelper from '../../helpers/Transformer';\nimport ScriptTransformer from '../../../src/transform/ScriptTransformer';\n\nconst transformerHelper = new TransformerHelper(ScriptTransformer);\n\n/** @test {ScriptTransformer} */\ndescribe('ScriptTransformer', function() {\n  const ScriptPath = 'SYSTEM/LIBRARY/PROJECT/SERVERSCRIPTS/Test.script';\n  const QDPath = 'SYSTEM/LIBRARY/PROJECT/SERVERSCRIPTS/Test.qd';\n\n  /** @test {ScriptTransformer#shouldBeTransformed} */\n  describe('#shouldBeTransformed', function() {\n    it('should return true for ScriptCode type nodes', function() {\n      expect(ScriptTransformer.prototype.shouldBeTransformed(\n        { isScript: true }\n      ), 'to be true');\n    });\n\n    it('should return true for QuickDynamic type nodes', function() {\n      expect(ScriptTransformer.prototype.shouldBeTransformed(\n        { isQuickDynamic: true }\n      ), 'to be true');\n    });\n  });\n\n  /** @test {ScriptTransformer#transformFromDB} */\n  describe('#transformFromDB', function() {\n    it('should forward parse errors', function() {\n      return expect(transformerHelper.writeXMLToTransformer(ScriptPath, 'invalid xml'),\n        'to be rejected with', /Text data outside of root node/);\n    });\n\n    it('should warn with invalid xml', function() {\n      const onWarn = spy();\n      Logger.on('warn', onWarn);\n\n      return expect(transformerHelper.writeXMLToTransformer(ScriptPath, '<root></root>'),\n        'to be fulfilled')\n        .then(() => {\n          expect(onWarn, 'was called once');\n          expect(onWarn, 'to have a call satisfying', { args: [/Empty document/] });\n        });\n    });\n\n    it('should write empty config file for empty Script', function() {\n      return transformerHelper.writeXMLToTransformer(ScriptPath, '<script></script>')\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => {\n          expect(contents[0], 'to equal', '{}');\n        });\n    });\n\n    it('should write empty .js file for empty Script', function() {\n      return transformerHelper.writeXMLToTransformer(ScriptPath, '<script></script>')\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => {\n          expect(contents[1], 'to equal', '');\n        });\n    });\n\n    it('should store icon metadata', function() {\n      return transformerHelper.writeXMLToTransformer(ScriptPath, `<script>\n  <metadata>\n    <icon type=\"image/png\">asdf</icon>\n  </metadata>\n</script>`)\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => expect(JSON.parse(contents[0]), 'to equal', {\n          icon: {\n            type: 'image/png',\n            content: 'asdf',\n          },\n        }));\n    });\n\n    it('should store empty icon metadata', function() {\n      return transformerHelper.writeXMLToTransformer(ScriptPath, `<script>\n  <metadata>\n    <icon></icon>\n  </metadata>\n</script>`)\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => expect(JSON.parse(contents[0]), 'to equal', {\n          icon: {\n            content: '',\n          },\n        }));\n    });\n\n    it('should store visible metadata', function() {\n      return transformerHelper.writeXMLToTransformer(ScriptPath, `<script>\n  <metadata>\n    <visible>1</visible>\n  </metadata>\n</script>`)\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => expect(JSON.parse(contents[0]), 'to equal', {\n          visible: true,\n        }));\n    });\n\n    it('should store title metadata', function() {\n      return transformerHelper.writeXMLToTransformer(ScriptPath, `<script>\n  <metadata>\n    <title>script title</title>\n  </metadata>\n</script>`)\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => expect(JSON.parse(contents[0]), 'to equal', {\n          title: 'script title',\n        }));\n    });\n\n    it('should store description metadata', function() {\n      return transformerHelper.writeXMLToTransformer(ScriptPath, `<script>\n  <metadata>\n    <description>script description</description>\n  </metadata>\n</script>`)\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => expect(JSON.parse(contents[0]), 'to equal', {\n          description: 'script description',\n        }));\n    });\n\n    it('should store parameters', function() {\n      return transformerHelper.writeXMLToTransformer(ScriptPath, `<script>\n  <parameter name=\"paramname\"/>\n</script>`)\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => expect(JSON.parse(contents[0]), 'to equal', {\n          parameters: [\n            { name: 'paramname' },\n          ],\n        }));\n    });\n\n    it('should store code', function() {\n      const code = 'console.log(\"called\");';\n      return transformerHelper.writeXMLToTransformer(ScriptPath, `<script>\n  <code>${code}</code>\n</script>`)\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => expect(contents[1], 'to equal', code));\n    });\n  });\n\n  /** @test {ScriptTransformer#createCombinedFile} */\n  describe('#createCombinedFile', function() {\n    it('should forward config parse errors', function() {\n      return expect(transformerHelper.createCombinedFileWithContents(`${ScriptPath}/Test`, {\n        '.json': '\"description\": \"script description\" }',\n      }), 'to call the callback with error', /Error parsing JSON in /);\n    });\n\n    context('when called on a quick dynamic', function() {\n      it('should store empty metadata', function() {\n        return expect(transformerHelper.createCombinedFileWithContents(`${QDPath}/Test`, {\n          '.json': '{ }',\n        }), 'to call the callback')\n          .then(args => transformerHelper.expectFileContents([args[1]]))\n          .then(contents => expect(contents[0], 'to contain', `<metadata/>`));\n      });\n\n      it('should insert icon metadata', function() {\n        return expect(transformerHelper.createCombinedFileWithContents(`${QDPath}/Test`, {\n          '.json': '{ \"icon\": { \"type\": \"image/png\", \"content\": \"asdf\" } }',\n        }), 'to call the callback')\n          .then(args => transformerHelper.expectFileContents([args[1]]))\n          .then(contents => expect(contents[0],\n            'to contain', '<icon type=\"image/png\">asdf</icon>'));\n      });\n\n      it('should insert visible metadata', function() {\n        return expect(transformerHelper.createCombinedFileWithContents(`${QDPath}/Test`, {\n          '.json': '{ \"visible\": false }',\n        }), 'to call the callback')\n          .then(args => transformerHelper.expectFileContents([args[1]]))\n          .then(contents => expect(contents[0], 'to contain', '<visible>0</visible>'));\n      });\n\n      it('should insert title metadata', function() {\n        return expect(transformerHelper.createCombinedFileWithContents(`${QDPath}/Test`, {\n          '.json': '{ \"title\": \"qd title\" }',\n        }), 'to call the callback')\n          .then(args => transformerHelper.expectFileContents([args[1]]))\n          .then(contents => expect(contents[0], 'to contain', '<title>qd title</title>'));\n      });\n\n      it('should insert description metadata', function() {\n        return expect(transformerHelper.createCombinedFileWithContents(`${QDPath}/Test`, {\n          '.json': '{ \"description\": \"qd desc\" }',\n        }), 'to call the callback')\n          .then(args => transformerHelper.expectFileContents([args[1]]))\n          .then(contents => expect(contents[0],\n            'to contain', '<description>qd desc</description>'));\n      });\n    });\n\n    it('should insert parameters', function() {\n      return expect(transformerHelper.createCombinedFileWithContents(`${QDPath}/Test`, {\n        '.json': '{ \"parameters\": [{ \"name\": \"paramname\" }] }',\n      }), 'to call the callback')\n        .then(args => transformerHelper.expectFileContents([args[1]]))\n        .then(contents => expect(contents[0],\n          'to contain', '<parameter name=\"paramname\"/>'));\n    });\n\n    it('should insert script code', function() {\n      const code = 'console.log(\"called\");';\n      return expect(transformerHelper.createCombinedFileWithContents(`${QDPath}/Test`, {\n        '.js': code,\n      }), 'to call the callback')\n        .then(args => transformerHelper.expectFileContents([args[1]]))\n        .then(contents => expect(contents[0],\n          'to contain', `<code><![CDATA[${code}]]></code>`));\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 715,
    "kind": "testDescribe",
    "name": "describe373",
    "testId": 373,
    "memberof": "test/src/transform/ScriptTransformer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373",
    "access": null,
    "description": "ScriptTransformer",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ScriptTransformer}"
      }
    ],
    "testTargets": [
      "ScriptTransformer"
    ]
  },
  {
    "__docId__": 716,
    "kind": "testDescribe",
    "name": "describe374",
    "testId": 374,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe374",
    "access": null,
    "description": "#shouldBeTransformed",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ScriptTransformer#shouldBeTransformed}"
      }
    ],
    "testTargets": [
      "ScriptTransformer#shouldBeTransformed"
    ]
  },
  {
    "__docId__": 717,
    "kind": "testIt",
    "name": "it375",
    "testId": 375,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe374",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe374.it375",
    "access": null,
    "description": "should return true for ScriptCode type nodes",
    "lineNumber": 16
  },
  {
    "__docId__": 718,
    "kind": "testIt",
    "name": "it376",
    "testId": 376,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe374",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe374.it376",
    "access": null,
    "description": "should return true for QuickDynamic type nodes",
    "lineNumber": 22
  },
  {
    "__docId__": 719,
    "kind": "testDescribe",
    "name": "describe377",
    "testId": 377,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377",
    "access": null,
    "description": "#transformFromDB",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ScriptTransformer#transformFromDB}"
      }
    ],
    "testTargets": [
      "ScriptTransformer#transformFromDB"
    ]
  },
  {
    "__docId__": 720,
    "kind": "testIt",
    "name": "it378",
    "testId": 378,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377.it378",
    "access": null,
    "description": "should forward parse errors",
    "lineNumber": 31
  },
  {
    "__docId__": 721,
    "kind": "testIt",
    "name": "it379",
    "testId": 379,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377.it379",
    "access": null,
    "description": "should warn with invalid xml",
    "lineNumber": 36
  },
  {
    "__docId__": 722,
    "kind": "testIt",
    "name": "it380",
    "testId": 380,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377.it380",
    "access": null,
    "description": "should write empty config file for empty Script",
    "lineNumber": 48
  },
  {
    "__docId__": 723,
    "kind": "testIt",
    "name": "it381",
    "testId": 381,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377.it381",
    "access": null,
    "description": "should write empty .js file for empty Script",
    "lineNumber": 56
  },
  {
    "__docId__": 724,
    "kind": "testIt",
    "name": "it382",
    "testId": 382,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377.it382",
    "access": null,
    "description": "should store icon metadata",
    "lineNumber": 64
  },
  {
    "__docId__": 725,
    "kind": "testIt",
    "name": "it383",
    "testId": 383,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377.it383",
    "access": null,
    "description": "should store empty icon metadata",
    "lineNumber": 79
  },
  {
    "__docId__": 726,
    "kind": "testIt",
    "name": "it384",
    "testId": 384,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377.it384",
    "access": null,
    "description": "should store visible metadata",
    "lineNumber": 93
  },
  {
    "__docId__": 727,
    "kind": "testIt",
    "name": "it385",
    "testId": 385,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377.it385",
    "access": null,
    "description": "should store title metadata",
    "lineNumber": 105
  },
  {
    "__docId__": 728,
    "kind": "testIt",
    "name": "it386",
    "testId": 386,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377.it386",
    "access": null,
    "description": "should store description metadata",
    "lineNumber": 117
  },
  {
    "__docId__": 729,
    "kind": "testIt",
    "name": "it387",
    "testId": 387,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377.it387",
    "access": null,
    "description": "should store parameters",
    "lineNumber": 129
  },
  {
    "__docId__": 730,
    "kind": "testIt",
    "name": "it388",
    "testId": 388,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe377.it388",
    "access": null,
    "description": "should store code",
    "lineNumber": 141
  },
  {
    "__docId__": 731,
    "kind": "testDescribe",
    "name": "describe389",
    "testId": 389,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389",
    "access": null,
    "description": "#createCombinedFile",
    "lineNumber": 152,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ScriptTransformer#createCombinedFile}"
      }
    ],
    "testTargets": [
      "ScriptTransformer#createCombinedFile"
    ]
  },
  {
    "__docId__": 732,
    "kind": "testIt",
    "name": "it390",
    "testId": 390,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389.it390",
    "access": null,
    "description": "should forward config parse errors",
    "lineNumber": 153
  },
  {
    "__docId__": 733,
    "kind": "testDescribe",
    "name": "context391",
    "testId": 391,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389.context391",
    "access": null,
    "description": "when called on a quick dynamic",
    "lineNumber": 159
  },
  {
    "__docId__": 734,
    "kind": "testIt",
    "name": "it392",
    "testId": 392,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389.context391",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389.context391.it392",
    "access": null,
    "description": "should store empty metadata",
    "lineNumber": 160
  },
  {
    "__docId__": 735,
    "kind": "testIt",
    "name": "it393",
    "testId": 393,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389.context391",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389.context391.it393",
    "access": null,
    "description": "should insert icon metadata",
    "lineNumber": 168
  },
  {
    "__docId__": 736,
    "kind": "testIt",
    "name": "it394",
    "testId": 394,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389.context391",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389.context391.it394",
    "access": null,
    "description": "should insert visible metadata",
    "lineNumber": 177
  },
  {
    "__docId__": 737,
    "kind": "testIt",
    "name": "it395",
    "testId": 395,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389.context391",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389.context391.it395",
    "access": null,
    "description": "should insert title metadata",
    "lineNumber": 185
  },
  {
    "__docId__": 738,
    "kind": "testIt",
    "name": "it396",
    "testId": 396,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389.context391",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389.context391.it396",
    "access": null,
    "description": "should insert description metadata",
    "lineNumber": 193
  },
  {
    "__docId__": 739,
    "kind": "testIt",
    "name": "it397",
    "testId": 397,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389.it397",
    "access": null,
    "description": "should insert parameters",
    "lineNumber": 203
  },
  {
    "__docId__": 740,
    "kind": "testIt",
    "name": "it398",
    "testId": 398,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe373.describe389.it398",
    "access": null,
    "description": "should insert script code",
    "lineNumber": 212
  },
  {
    "__docId__": 741,
    "kind": "testFile",
    "name": "test/src/util/cleanup.spec.js",
    "content": "import expect from 'unexpected';\nimport { stub, spy } from 'sinon';\nimport proxyquire from 'proxyquire';\nimport Logger from 'gulplog';\n\nfunction createCleanup(numberOfOpenSessions, closeOpenShouldFail) {\n  return proxyquire('../../../src/util/cleanup', {\n    '../lib/server/Session': {\n      __esModule: true,\n      default: class Session {\n        static get open() {\n          return new Array(numberOfOpenSessions);\n        }\n\n        static closeOpen() {\n          return closeOpenShouldFail ?\n            Promise.reject('Session.closeOpen error') :\n            Promise.resolve();\n        }\n      },\n    },\n  }).default;\n}\n\n/** @test {cleanup} */\ndescribe('cleanup', function() {\n  before(() => stub(process, 'kill'));\n  after(() => process.kill.restore());\n  afterEach(() => process.kill.reset());\n\n  it('should call uninstall', function() {\n    const uninstall = spy();\n    createCleanup(0, false)(null, null, uninstall);\n\n    expect(uninstall.calledOnce, 'to be', true);\n  });\n\n  context('when receiving SIGINT', function() {\n    it('should log \"Ctrl-C\"', function() {\n      const onWarn = spy();\n      Logger.on('warn', onWarn);\n\n      createCleanup(0, false)(null, 'SIGINT', () => {});\n      expect(onWarn.calledOnce, 'to be', true);\n      expect(onWarn.lastCall.args[0], 'to match', /Ctrl-C/);\n    });\n  });\n\n  context('with open sessions', function() {\n    it('should return false', function() {\n      expect(createCleanup(3, false)(null, null, () => {}), 'to be', false);\n    });\n\n    it('should call process.kill', function(done) {\n      createCleanup(3, false)(null, null, () => {});\n      setTimeout(() => {\n        expect(process.kill.calledOnce, 'to be', true);\n        done();\n      }, 10);\n    });\n\n    it('should forward Session.closeOpen errors', function(done) {\n      createCleanup(3, true)(null, null, () => {});\n      setTimeout(() => {\n        expect(process.kill.calledOnce, 'to be', true);\n        done();\n      }, 10);\n    });\n  });\n\n  context('without open sessions', function() {\n    it('should return true', function() {\n      expect(createCleanup(0, false)(null, null, () => {}), 'to be', true);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/src/util/cleanup.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 742,
    "kind": "testDescribe",
    "name": "describe399",
    "testId": 399,
    "memberof": "test/src/util/cleanup.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe399",
    "access": null,
    "description": "cleanup",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{cleanup}"
      }
    ],
    "testTargets": [
      "cleanup"
    ]
  },
  {
    "__docId__": 743,
    "kind": "testIt",
    "name": "it400",
    "testId": 400,
    "memberof": "test/src/util/cleanup.spec.js~describe399",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe399.it400",
    "access": null,
    "description": "should call uninstall",
    "lineNumber": 31
  },
  {
    "__docId__": 744,
    "kind": "testDescribe",
    "name": "context401",
    "testId": 401,
    "memberof": "test/src/util/cleanup.spec.js~describe399",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe399.context401",
    "access": null,
    "description": "when receiving SIGINT",
    "lineNumber": 38
  },
  {
    "__docId__": 745,
    "kind": "testIt",
    "name": "it402",
    "testId": 402,
    "memberof": "test/src/util/cleanup.spec.js~describe399.context401",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe399.context401.it402",
    "access": null,
    "description": "should log \"Ctrl-C\"",
    "lineNumber": 39
  },
  {
    "__docId__": 746,
    "kind": "testDescribe",
    "name": "context403",
    "testId": 403,
    "memberof": "test/src/util/cleanup.spec.js~describe399",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe399.context403",
    "access": null,
    "description": "with open sessions",
    "lineNumber": 49
  },
  {
    "__docId__": 747,
    "kind": "testIt",
    "name": "it404",
    "testId": 404,
    "memberof": "test/src/util/cleanup.spec.js~describe399.context403",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe399.context403.it404",
    "access": null,
    "description": "should return false",
    "lineNumber": 50
  },
  {
    "__docId__": 748,
    "kind": "testIt",
    "name": "it405",
    "testId": 405,
    "memberof": "test/src/util/cleanup.spec.js~describe399.context403",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe399.context403.it405",
    "access": null,
    "description": "should call process.kill",
    "lineNumber": 54
  },
  {
    "__docId__": 749,
    "kind": "testIt",
    "name": "it406",
    "testId": 406,
    "memberof": "test/src/util/cleanup.spec.js~describe399.context403",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe399.context403.it406",
    "access": null,
    "description": "should forward Session.closeOpen errors",
    "lineNumber": 62
  },
  {
    "__docId__": 750,
    "kind": "testDescribe",
    "name": "context407",
    "testId": 407,
    "memberof": "test/src/util/cleanup.spec.js~describe399",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe399.context407",
    "access": null,
    "description": "without open sessions",
    "lineNumber": 71
  },
  {
    "__docId__": 751,
    "kind": "testIt",
    "name": "it408",
    "testId": 408,
    "memberof": "test/src/util/cleanup.spec.js~describe399.context407",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe399.context407.it408",
    "access": null,
    "description": "should return true",
    "lineNumber": 72
  }
]