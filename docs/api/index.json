[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Gulpfile.js",
    "content": "import cleanup from 'node-cleanup';\nimport cleanupHandler from './util/cleanup';\n\n// Register tasks\nexport { default as pull } from './tasks/pull';\nexport { default as push } from './tasks/push';\nexport { default as watch } from './tasks/watch';\n\n// Register cleanup\n/* istanbul ignore if */\nif (process.env.NODE_ENV !== 'test') {\n  // Prevent node-opcua logging\n  console.log = () => {}; // eslint-disable-line no-console\n\n  cleanup((code, signal) => cleanupHandler(code, signal, cleanup.uninstall), {\n    ctrl_C: '',\n    unhandledRejection: '',\n  });\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/Gulpfile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "src/config/ProjectConfig.js",
    "content": "/**\n * The path to the project's configuration file.\n * @type {string}\n */\nexport const path = process.env.ATSCM_CONFIG_PATH;\n\n/**\n * The current project's configuration.\n * @type {Atviseproject}\n */\nconst Config = require(path).default;\n\n/**\n * The current project's configuration, with overrides (through `ATSCM_PROJECT__` env vars) already\n * handled.\n */\nexport default class ProjectConfig extends Config {\n\n  /**\n   * Return the project configuration override for the given name if available.\n   * @param {string} name The variable to return\n   * @type {string|undefined} The variables's value or `undefined`.\n   */\n  static _env(name) {\n    return process.env[`ATSCM_PROJECT__${name}`];\n  }\n\n  /**\n   * The atvise server's host. Can be overridden with the `ATSCM_PROJECT__HOST` env variable.\n   * @type {string}\n   */\n  static get host() {\n    return this._env('HOST') || super.host;\n  }\n\n  /**\n   * The atvise server ports to use.\n   * @type {Object}\n   * @property {number} opc The OPC-UA port the atvise server runs on. Can be overridden with the\n   * `ATSCM_PROJECT__PORT__OPC` env variable.\n   * @property {number} http The HTTP port the atvise server can be reached at. Can be overridden\n   * with the `ATSCM_PROJECT__PORT__HTTP` env variable.\n   */\n  static get port() {\n    return {\n      opc: parseInt(this._env('PORT__OPC'), 10) || super.port.opc,\n      http: parseInt(this._env('PORT__HTTP'), 10) || super.port.http,\n    };\n  }\n\n  /**\n   * The login to use. Return false if no login is required (default).\n   * @type {Object}\n   * @property {string} username The username to log in with. Can be overridden with the\n   * `ATSCM_PROJECT__LOGIN__USERNAME` env variable.\n   * @property {string} password The password to log in with. Can be overridden with the\n   * `ATSCM_PROJECT__LOGIN__PASSWORD` env variable.\n   */\n  static get login() {\n    if (this._env('LOGIN__USERNAME') || this._env('LOGIN__PASSWORD')) {\n      return {\n        username: this._env('LOGIN__USERNAME') || super.login.username,\n        password: this._env('LOGIN__PASSWORD') || super.login.password,\n      };\n    }\n\n    return super.login;\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/config/ProjectConfig.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "path",
    "memberof": "src/config/ProjectConfig.js",
    "static": true,
    "longname": "src/config/ProjectConfig.js~path",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/config/ProjectConfig.js",
    "importStyle": "{path}",
    "description": "The path to the project's configuration file.",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "Config",
    "memberof": "src/config/ProjectConfig.js",
    "static": true,
    "longname": "src/config/ProjectConfig.js~Config",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/config/ProjectConfig.js",
    "importStyle": null,
    "description": "The current project's configuration.",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Atviseproject"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "ProjectConfig",
    "memberof": "src/config/ProjectConfig.js",
    "static": true,
    "longname": "src/config/ProjectConfig.js~ProjectConfig",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/config/ProjectConfig.js",
    "importStyle": "ProjectConfig",
    "description": "The current project's configuration, with overrides (through `ATSCM_PROJECT__` env vars) already\nhandled.",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "Config"
    ]
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "_env",
    "memberof": "src/config/ProjectConfig.js~ProjectConfig",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/config/ProjectConfig.js~ProjectConfig._env",
    "access": "private",
    "description": "Return the project configuration override for the given name if available.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The variable to return"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string",
        "undefined"
      ],
      "spread": false,
      "description": null
    },
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "get",
    "name": "host",
    "memberof": "src/config/ProjectConfig.js~ProjectConfig",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/config/ProjectConfig.js~ProjectConfig.host",
    "access": "public",
    "description": "The atvise server's host. Can be overridden with the `ATSCM_PROJECT__HOST` env variable.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "get",
    "name": "port",
    "memberof": "src/config/ProjectConfig.js~ProjectConfig",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/config/ProjectConfig.js~ProjectConfig.port",
    "access": "public",
    "description": "The atvise server ports to use.",
    "lineNumber": 44,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "opc",
        "description": "The OPC-UA port the atvise server runs on. Can be overridden with the\n`ATSCM_PROJECT__PORT__OPC` env variable."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "The HTTP port the atvise server can be reached at. Can be overridden\nwith the `ATSCM_PROJECT__PORT__HTTP` env variable."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "get",
    "name": "login",
    "memberof": "src/config/ProjectConfig.js~ProjectConfig",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/config/ProjectConfig.js~ProjectConfig.login",
    "access": "public",
    "description": "The login to use. Return false if no login is required (default).",
    "lineNumber": 59,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "username",
        "description": "The username to log in with. Can be overridden with the\n`ATSCM_PROJECT__LOGIN__USERNAME` env variable."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "The password to log in with. Can be overridden with the\n`ATSCM_PROJECT__LOGIN__PASSWORD` env variable."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "src/index.js",
    "content": "export { default as Atviseproject } from './lib/config/Atviseproject';\nexport { default as ProjectConfig } from './config/ProjectConfig';\nexport { default as NodeId } from './lib/server/NodeId';\nexport { default as Transformer, TransformDirection } from './lib/transform/Transformer';\nexport { default as PartialTransformer } from './lib/transform/PartialTransformer';\nexport { default as SplittingTransformer } from './lib/transform/SplittingTransformer';\nexport { default as DisplayTransformer } from './transform/DisplayTransformer';\nexport { default as ScriptTransformer } from './transform/ScriptTransformer';\n",
    "static": true,
    "longname": "/home/circleci/project/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/init/InitTask.js",
    "content": "import { join } from 'path';\nimport { src, dest } from 'gulp';\nimport handlebars from 'gulp-compile-handlebars';\nimport helpers from 'handlebars-helpers';\nimport streamToPromise from 'stream-to-promise';\nimport deps from '../../res/init/templates/dependencies.json';\n\n/**\n * The action run when running \"atscm init\".\n */\nexport default class InitTask {\n\n  /**\n   * Returns the globs of the processed files for the given config lanugage.\n   * @param {String} langId The configuration language used.\n   * @return {String[]} Globs of the files to handle.\n   */\n  static filesToHandle(langId) {\n    return [\n      './general/**/*',\n      './general/**/.*',\n      `./lang/${langId}/**/*.*`,\n      `./lang/${langId}/**/.*`,\n    ].map(p => join(__dirname, '../../res/init/templates', p));\n  }\n\n  /**\n   * Runs the task with the given options.\n   * @param {Object} options The options to use.\n   * @return {Promise<{ install: String[] }, Error>} Resolved with information on further actions\n   * to run or rejected if the task failed.\n   */\n  static run(options) {\n    const langId = options.configLang;\n\n    const install = deps.lang[langId];\n\n    const stream = src(this.filesToHandle(langId))\n      .pipe(handlebars(options, {\n        helpers: helpers(),\n      }))\n      .pipe(dest('./'));\n\n    return streamToPromise(stream)\n      .then(() => ({ install }));\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/init/InitTask.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "class",
    "name": "InitTask",
    "memberof": "src/init/InitTask.js",
    "static": true,
    "longname": "src/init/InitTask.js~InitTask",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/init/InitTask.js",
    "importStyle": "InitTask",
    "description": "The action run when running \"atscm init\".",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "filesToHandle",
    "memberof": "src/init/InitTask.js~InitTask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/init/InitTask.js~InitTask.filesToHandle",
    "access": "public",
    "description": "Returns the globs of the processed files for the given config lanugage.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "langId",
        "description": "The configuration language used."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "Globs of the files to handle."
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "run",
    "memberof": "src/init/InitTask.js~InitTask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/init/InitTask.js~InitTask.run",
    "access": "public",
    "description": "Runs the task with the given options.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{ install: String[] }, Error>"
      ],
      "spread": false,
      "description": "Resolved with information on further actions\nto run or rejected if the task failed."
    }
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/init/Options.js",
    "content": "import { basename } from 'path';\nimport InitOption from '../lib/init/Option';\nimport Atviseproject from '../lib/config/Atviseproject';\nimport Validator from './OptionsValidator';\n\n/**\n * A map providing dirnames for config langs\n * @type {Map<String, String>}\n */\nexport const ConfigLangs = {\n  'ES2015 JavaScript': 'es2015',\n  'Regular JavaScript': 'es5',\n  TypeScript: 'ts',\n  'CoffeeScript (alpha)': 'coffee',\n};\n\n/**\n * Options available for the \"atscm init\" command.\n * @type {Object}\n * @property {InitOption<input>} name The new project's name.\n * @property {InitOption<input>} description The new project's description.\n * @property {InitOption<input>} author The new project's author.\n * @property {InitOption<input>} atviseHost The new project's atvise server host.\n * @property {InitOption<input>} atvisePortOpc The new project's atvise server OPC port.\n * @property {InitOption<input>} atvisePortHttp The new project's atvise server HTTP port.\n * @property {InitOption<confirm>} useLogin If the new porject's atvise server requires login.\n * @property {InitOption<input>} atviseUsername The new project's atvise server login name.\n * @property {InitOption<input>} atvisePassword The new project's atvise server login password.\n * @property {InitOption<list>} configLang The language to use for the new project's configuration.\n */\nexport const InitOptions = {\n  name: new InitOption({\n    message: 'Project name',\n    default: basename(process.cwd()),\n    validate: Validator.name,\n  }),\n  description: new InitOption('Project description'),\n  author: new InitOption('Project author'),\n  atviseHost: new InitOption('Atvise server host', Atviseproject.host),\n  atvisePortOpc: new InitOption('Atvise OPC port', Atviseproject.port.opc),\n  atvisePortHttp: new InitOption('Atvise HTTP port', Atviseproject.port.http),\n  useLogin: new InitOption({\n    message: 'Does your atvise server require login',\n    type: 'confirm',\n    default: false,\n  }),\n  atviseUser: new InitOption({\n    message: ' - Username',\n    when: answers => answers.useLogin,\n  }),\n  atvisePassword: new InitOption({\n    message: ' - Password',\n    when: answers => answers.useLogin,\n  }),\n  configLang: new InitOption({\n    type: 'list',\n    message: 'Configuration language to use',\n    choices: Object.keys(ConfigLangs).map(name => ({ name, value: ConfigLangs[name] })),\n  }),\n};\n\n/**\n * {@link InitOptions}, exported as an array. Required to run {@link Inquirer}.\n * @type {InitOption[]}\n */\nconst InitOptionsAsArray = Object.keys(InitOptions)\n  .map(name => Object.assign({ name }, InitOptions[name]));\n\nexport default InitOptionsAsArray;\n",
    "static": true,
    "longname": "/home/circleci/project/src/init/Options.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "ConfigLangs",
    "memberof": "src/init/Options.js",
    "static": true,
    "longname": "src/init/Options.js~ConfigLangs",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/init/Options.js",
    "importStyle": "{ConfigLangs}",
    "description": "A map providing dirnames for config langs",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, String>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "InitOptions",
    "memberof": "src/init/Options.js",
    "static": true,
    "longname": "src/init/Options.js~InitOptions",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/init/Options.js",
    "importStyle": "{InitOptions}",
    "description": "Options available for the \"atscm init\" command.",
    "lineNumber": 31,
    "properties": [
      {
        "nullable": null,
        "types": [
          "InitOption<input>"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The new project's name."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<input>"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "The new project's description."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<input>"
        ],
        "spread": false,
        "optional": false,
        "name": "author",
        "description": "The new project's author."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<input>"
        ],
        "spread": false,
        "optional": false,
        "name": "atviseHost",
        "description": "The new project's atvise server host."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<input>"
        ],
        "spread": false,
        "optional": false,
        "name": "atvisePortOpc",
        "description": "The new project's atvise server OPC port."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<input>"
        ],
        "spread": false,
        "optional": false,
        "name": "atvisePortHttp",
        "description": "The new project's atvise server HTTP port."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<confirm>"
        ],
        "spread": false,
        "optional": false,
        "name": "useLogin",
        "description": "If the new porject's atvise server requires login."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<input>"
        ],
        "spread": false,
        "optional": false,
        "name": "atviseUsername",
        "description": "The new project's atvise server login name."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<input>"
        ],
        "spread": false,
        "optional": false,
        "name": "atvisePassword",
        "description": "The new project's atvise server login password."
      },
      {
        "nullable": null,
        "types": [
          "InitOption<list>"
        ],
        "spread": false,
        "optional": false,
        "name": "configLang",
        "description": "The language to use for the new project's configuration."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "InitOptionsAsArray",
    "memberof": "src/init/Options.js",
    "static": true,
    "longname": "src/init/Options.js~InitOptionsAsArray",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/init/Options.js",
    "importStyle": "InitOptionsAsArray",
    "description": "{@link InitOptions}, exported as an array. Required to run {@link Inquirer}.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "InitOption[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/init/OptionsValidator.js",
    "content": "import validatePackageName from 'validate-npm-package-name';\n\n/**\n * A static class containing validators for the options used when running \"atscm init\".\n */\nexport default class InitOptionsValidator {\n\n  /**\n   * Validates a project name to be a valid npm package name.\n   * @param {String} value The name to validate.\n   * @return {Boolean|String} Returns true if `value` is a valid npm package name, or an error\n   * message otherwise.\n   */\n  static name(value) {\n    const result = validatePackageName(value);\n\n    if (result.errors) { return result.errors[0]; }\n\n    // First letter must be a letter\n    if (value.match(/^[a-z]+/i) === null) {\n      return 'name must start with a letter';\n    }\n\n    return result.validForNewPackages ? true : result.warnings[0];\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/init/OptionsValidator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "class",
    "name": "InitOptionsValidator",
    "memberof": "src/init/OptionsValidator.js",
    "static": true,
    "longname": "src/init/OptionsValidator.js~InitOptionsValidator",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/init/OptionsValidator.js",
    "importStyle": "InitOptionsValidator",
    "description": "A static class containing validators for the options used when running \"atscm init\".",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "name",
    "memberof": "src/init/OptionsValidator.js~InitOptionsValidator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/init/OptionsValidator.js~InitOptionsValidator.name",
    "access": "public",
    "description": "Validates a project name to be a valid npm package name.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The name to validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean",
        "String"
      ],
      "spread": false,
      "description": "Returns true if `value` is a valid npm package name, or an error\nmessage otherwise."
    }
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/init/init.js",
    "content": "import InitTask from './InitTask';\n\nexport default InitTask.run.bind(InitTask);\n",
    "static": true,
    "longname": "/home/circleci/project/src/init/init.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/lib/config/Atviseproject.js",
    "content": "/* eslint-disable no-useless-escape */\n\nimport NodeId from '../server/NodeId';\nimport DisplayTransformer from '../../transform/DisplayTransformer';\nimport ScriptTransformer from '../../transform/ScriptTransformer';\n\n/**\n * An *atvise-scm* project's configuration.\n * @abstract\n */\nexport default class Atviseproject {\n\n  /**\n   * The atvise-server's host. Defaults to *localhost*.\n   * @type {String}\n   */\n  static get host() {\n    return 'localhost';\n  }\n\n  /**\n   * The atvise-server ports to use.\n   * @type {Object}\n   * @property {Number} [opc=4840] The OPC-UA port the atvise-server runs on.\n   * @property {Number} [http=80] The HTTP port the atvise-server can be reached at.\n   */\n  static get port() {\n    return {\n      opc: 4840,\n      http: 80,\n    };\n  }\n\n  /**\n   * The login to use. Return `false` if no login is required (default).\n   * @type {Boolean|Object}\n   * @property {String} username The username to log in with.\n   * @property {String} password The password to log in with.\n   */\n  static get login() {\n    return false;\n  }\n\n  /**\n   * The transformers to use in this project. Defaults to a single {@link DisplayTransformer}\n   * @type {Transformer[]}\n   */\n  static get useTransformers() {\n    return [\n      new DisplayTransformer(),\n      new ScriptTransformer(),\n    ];\n  }\n\n  /**\n   * The atvise-server nodes that atvise-scm should sync. Defaults to\n   * `['ns=1;s=AGENT', 'ns=1;s=SYSTEM', 'ns=1;s=ObjectTypes.PROJECT']`\n   * @type {String[]|NodeId[]}\n   */\n  static get nodes() {\n    return [\n      new NodeId('AGENT'),\n      new NodeId('SYSTEM'),\n      new NodeId('ObjectTypes.PROJECT'),\n    ];\n  }\n\n  /**\n   * The atvise-server nodes to watch in the corresponding tasks. Defaults to all nodes containing\n   * displays.\n   * @type {String[]|NodeId[]}\n   */\n  static get nodesToWatch() {\n    return [\n      new NodeId('AGENT.DISPLAYS'),\n      new NodeId('SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS'),\n    ];\n  }\n\n  /**\n   * An array of editor related node ids. They should be ignored in a atvise-scm project.\n   * @type {NodeId[]}\n   */\n  static get EditorRelatedNodes() {\n    return [\n      new NodeId('SYSTEM\\.JOURNALS\\.ProjectHistory'),\n    ];\n  }\n\n  /**\n   * An array of server related node ids. They should be ignored in a atvise-scm project\n   * as they are read-only.\n   * @type {NodeId[]}\n   */\n  static get ServerRelatedNodes() {\n    return [\n      // eslint-disable-next-line max-len\n      new NodeId('AGENT\\.HISTORY\\..*\\.(Stepped|PercentData(Good|Bad)|TreatUncertainAsBad|UseSlopedExtrapolation)'),\n      new NodeId('AGENT\\.OPCUA\\.server_url'),\n      new NodeId('AGENT\\.WEBACCESS\\.https?[0-9]+\\.(state|port)'),\n      new NodeId('SYSTEM\\.INFORMATION\\.LOGS\\.'),\n    ];\n  }\n\n  /**\n   * These nodes (and their subnodes, if any) will be ignored by atvise-scm. Defaults to\n   * {@link Atviseproject.EditorRelatedNodes} combined with\n   * {@link Atviseproject.ServerRelatedNodes}.\n   * @type {NodeId[]}\n   */\n  static get ignoreNodes() {\n    return this.EditorRelatedNodes.concat(this.ServerRelatedNodes);\n  }\n\n  /**\n   * Returns an object containing the properties to inspect.\n   * @see https://nodejs.org/api/util.html#util_util_inspect_object_options\n   * @return {Object} The object to inspect.\n   */\n  static inspect() {\n    return {\n      host: this.host,\n      port: this.port,\n      login: this.login,\n      useTransformers: this.useTransformers,\n      nodes: this.nodes,\n      nodesToWatch: this.nodesToWatch,\n      ignoreNodes: this.ignoreNodes,\n    };\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/config/Atviseproject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "class",
    "name": "Atviseproject",
    "memberof": "src/lib/config/Atviseproject.js",
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/config/Atviseproject.js",
    "importStyle": "Atviseproject",
    "description": "An *atvise-scm* project's configuration.",
    "lineNumber": 11,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 72,
    "kind": "get",
    "name": "host",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.host",
    "access": "public",
    "description": "The atvise-server's host. Defaults to *localhost*.",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "get",
    "name": "port",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.port",
    "access": "public",
    "description": "The atvise-server ports to use.",
    "lineNumber": 27,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "4840",
        "defaultRaw": 4840,
        "name": "opc",
        "description": "The OPC-UA port the atvise-server runs on."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "80",
        "defaultRaw": 80,
        "name": "http",
        "description": "The HTTP port the atvise-server can be reached at."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "get",
    "name": "login",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.login",
    "access": "public",
    "description": "The login to use. Return `false` if no login is required (default).",
    "lineNumber": 40,
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "username",
        "description": "The username to log in with."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "The password to log in with."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Boolean",
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "get",
    "name": "useTransformers",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.useTransformers",
    "access": "public",
    "description": "The transformers to use in this project. Defaults to a single {@link DisplayTransformer}",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Transformer[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "get",
    "name": "nodes",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.nodes",
    "access": "public",
    "description": "The atvise-server nodes that atvise-scm should sync. Defaults to\n`['ns=1;s=AGENT', 'ns=1;s=SYSTEM', 'ns=1;s=ObjectTypes.PROJECT']`",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "String[]",
        "NodeId[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "get",
    "name": "nodesToWatch",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.nodesToWatch",
    "access": "public",
    "description": "The atvise-server nodes to watch in the corresponding tasks. Defaults to all nodes containing\ndisplays.",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "String[]",
        "NodeId[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "get",
    "name": "EditorRelatedNodes",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.EditorRelatedNodes",
    "access": "public",
    "description": "An array of editor related node ids. They should be ignored in a atvise-scm project.",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "NodeId[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "get",
    "name": "ServerRelatedNodes",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.ServerRelatedNodes",
    "access": "public",
    "description": "An array of server related node ids. They should be ignored in a atvise-scm project\nas they are read-only.",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "NodeId[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 80,
    "kind": "get",
    "name": "ignoreNodes",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.ignoreNodes",
    "access": "public",
    "description": "These nodes (and their subnodes, if any) will be ignored by atvise-scm. Defaults to\n{@link Atviseproject.EditorRelatedNodes} combined with\n{@link Atviseproject.ServerRelatedNodes}.",
    "lineNumber": 111,
    "type": {
      "nullable": null,
      "types": [
        "NodeId[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "inspect",
    "memberof": "src/lib/config/Atviseproject.js~Atviseproject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config/Atviseproject.js~Atviseproject.inspect",
    "access": "public",
    "description": "Returns an object containing the properties to inspect.",
    "see": [
      "https://nodejs.org/api/util.html#util_util_inspect_object_options"
    ],
    "lineNumber": 120,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The object to inspect."
    },
    "params": []
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/lib/gulp/PullStream.js",
    "content": "import readline from 'readline';\nimport { dest } from 'gulp';\nimport Logger from 'gulplog';\nimport ProjectConfig from '../../config/ProjectConfig';\nimport Transformer, { TransformDirection } from '../transform/Transformer';\nimport MappingTransformer from '../../transform/Mapping';\n\n/**\n * A stream that transforms read {@link ReadStream.ReadResult}s and stores the on the filesystem.\n */\nexport default class PullStream {\n\n  /**\n   * Creates a new PullStream based on a stream that writes {@link ReadStream.ReadResult} which may\n   * be an instance of {@link ReadStream}.\n   * @param {ReadStream} readStream The stream to read from.\n   */\n  constructor(readStream) {\n    const mappingStream = new MappingTransformer({ direction: TransformDirection.FromDB });\n\n    const printProgress = setInterval(() => {\n      Logger.info(`Pulled: ${readStream.processed} (${readStream.opsPerSecond.toFixed(1)} ops/s)`);\n\n      if (Logger.listenerCount('info') > 0) {\n        readline.cursorTo(process.stdout, 0);\n        readline.moveCursor(process.stdout, 0, -1);\n      }\n    }, 1000);\n\n    return Transformer.applyTransformers(\n      readStream\n        .pipe(mappingStream),\n      ProjectConfig.useTransformers,\n      TransformDirection.FromDB\n    )\n      .pipe(dest('./src'))\n      .on('finish', () => {\n        if (Logger.listenerCount('info') > 0) {\n          readline.clearLine(process.stdout, 0);\n          readline.cursorTo(process.stdout, 0);\n        }\n\n        clearInterval(printProgress);\n      });\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/gulp/PullStream.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "class",
    "name": "PullStream",
    "memberof": "src/lib/gulp/PullStream.js",
    "static": true,
    "longname": "src/lib/gulp/PullStream.js~PullStream",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/gulp/PullStream.js",
    "importStyle": "PullStream",
    "description": "A stream that transforms read {@link ReadStream.ReadResult}s and stores the on the filesystem.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 84,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/gulp/PullStream.js~PullStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/gulp/PullStream.js~PullStream#constructor",
    "access": "public",
    "description": "Creates a new PullStream based on a stream that writes {@link ReadStream.ReadResult} which may\nbe an instance of {@link ReadStream}.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "ReadStream"
        ],
        "spread": false,
        "optional": false,
        "name": "readStream",
        "description": "The stream to read from."
      }
    ]
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/lib/gulp/PushStream.js",
    "content": "import readline from 'readline';\nimport Logger from 'gulplog';\nimport ProjectConfig from '../../config/ProjectConfig';\nimport Transformer, { TransformDirection } from '../transform/Transformer';\nimport MappingTransformer from '../../transform/Mapping';\nimport WriteStream from '../server/WriteStream';\n\n/**\n * A stream that transforms read {@link vinyl~File}s and pushes them to atvise server.\n */\nexport default class PushStream {\n\n  /**\n   * Creates a new PushSteam based on a source file stream.\n   * @param {Stream} srcStream The file stream to read from.\n   */\n  constructor(srcStream) {\n    const mappingStream = new MappingTransformer({ direction: TransformDirection.FromFilesystem });\n    const writeStream = new WriteStream();\n\n    const printProgress = setInterval(() => {\n      Logger.info(\n        `Pushed: ${writeStream._processed} (${writeStream.opsPerSecond.toFixed(1)} ops/s)`\n      );\n\n      if (Logger.listenerCount('info') > 0) {\n        readline.cursorTo(process.stdout, 0);\n        readline.moveCursor(process.stdout, 0, -1);\n      }\n    }, 1000);\n\n    return Transformer.applyTransformers(\n      srcStream\n        .pipe(mappingStream),\n      ProjectConfig.useTransformers,\n      TransformDirection.FromFilesystem\n    )\n      .pipe(writeStream)\n      .on('finish', () => {\n        if (Logger.listenerCount('info') > 0) {\n          readline.cursorTo(process.stdout, 0);\n          readline.clearLine(process.stdout);\n        }\n\n        clearInterval(printProgress);\n      });\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/gulp/PushStream.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "class",
    "name": "PushStream",
    "memberof": "src/lib/gulp/PushStream.js",
    "static": true,
    "longname": "src/lib/gulp/PushStream.js~PushStream",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/gulp/PushStream.js",
    "importStyle": "PushStream",
    "description": "A stream that transforms read {@link vinyl~File}s and pushes them to atvise server.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 87,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/gulp/PushStream.js~PushStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/gulp/PushStream.js~PushStream#constructor",
    "access": "public",
    "description": "Creates a new PushSteam based on a source file stream.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stream"
        ],
        "spread": false,
        "optional": false,
        "name": "srcStream",
        "description": "The file stream to read from."
      }
    ]
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "src/lib/init/Option.js",
    "content": "/**\n * An option the \"atscm init\" command handles.\n * TODO: Support function values for name, message, default, choices...\n */\nexport default class InitOption {\n\n  /**\n   * Creates a new option based either on a message and (optionally) a default value or some\n   * options.\n   * @param {String|Object} messageOrOptions The message or options to use.\n   * @param {inquirer~PromptType} [messageOrOptions.type] The option's type.\n   * @param {String} messageOrOptions.message The option's message. Required if `messageOrOptions`\n   * is an object.\n   * @param {String|Number} [messageOrOptions.default] The options's default value.\n   * @param {inquirer~Validator} [messageOrOptions.validate] A function that validates user input.\n   * @param {String[]|Number[]} [messageOrOptions.choices] The options's choices. Applies to to list\n   * types only.\n   * @param {Boolean|function(answers: Object): Boolean} [messageOrOptions.when] Weather or not to\n   * prompt this option.\n   * @param {String|Number} [defaultOrUndefined] The default value to use.\n   */\n  constructor(messageOrOptions, defaultOrUndefined) {\n    if (messageOrOptions === undefined) {\n      throw new Error('message or options required');\n    }\n\n    if (typeof messageOrOptions === 'string') {\n      if (messageOrOptions.length === 0) {\n        throw new Error('message is required');\n      }\n\n      /**\n       * The option's {@link inquirer~PromptType}. Defaults to 'input'.\n       * @type {inquirer~PromptType}\n       */\n      this.type = InitOption.DefaultType;\n\n      /**\n       * The option's message. A '?' sign is added automatically.\n       * @type {String}\n       */\n      this.message = `${messageOrOptions}?`;\n\n      /**\n       * The default value to use.\n       * @type {String|Number|undefined}\n       */\n      this.default = defaultOrUndefined;\n    } else {\n      if (!messageOrOptions.message || messageOrOptions.length === 0) {\n        throw new Error('message is required');\n      }\n\n      this.type = messageOrOptions.type || InitOption.DefaultType;\n      this.message = `${messageOrOptions.message}?`;\n      this.default = messageOrOptions.default;\n\n      /**\n       * The choices available. Applies to list types only.\n       * @type {String[]|Number[]|undefined}\n       */\n      this.choices = messageOrOptions.choices;\n\n      /**\n       * Validates the user input for this option.\n       * @type {inquirer~Validator}\n       */\n      this.validate = messageOrOptions.validate;\n\n      /**\n       * A function or boolean that indicates weather or not to prompt this option.\n       * @type {Boolean|function(answers: Object): Boolean|undefined}\n       */\n      this.when = messageOrOptions.when;\n    }\n  }\n\n  /**\n   * The default {@link inquirer~PromptType} to use. Equals 'input'.\n   * @return {inquirer~PromptType}\n   */\n  static get DefaultType() {\n    return 'input';\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/init/Option.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "class",
    "name": "InitOption",
    "memberof": "src/lib/init/Option.js",
    "static": true,
    "longname": "src/lib/init/Option.js~InitOption",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/init/Option.js",
    "importStyle": "InitOption",
    "description": "An option the \"atscm init\" command handles.\nTODO: Support function values for name, message, default, choices...",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 90,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/init/Option.js~InitOption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#constructor",
    "access": "public",
    "description": "Creates a new option based either on a message and (optionally) a default value or some\noptions.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "messageOrOptions",
        "description": "The message or options to use."
      },
      {
        "nullable": null,
        "types": [
          "inquirer~PromptType"
        ],
        "spread": false,
        "optional": true,
        "name": "messageOrOptions.type",
        "description": "The option's type."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "messageOrOptions.message",
        "description": "The option's message. Required if `messageOrOptions`\nis an object."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "messageOrOptions.default",
        "description": "The options's default value."
      },
      {
        "nullable": null,
        "types": [
          "inquirer~Validator"
        ],
        "spread": false,
        "optional": true,
        "name": "messageOrOptions.validate",
        "description": "A function that validates user input."
      },
      {
        "nullable": null,
        "types": [
          "String[]",
          "Number[]"
        ],
        "spread": false,
        "optional": true,
        "name": "messageOrOptions.choices",
        "description": "The options's choices. Applies to to list\ntypes only."
      },
      {
        "nullable": null,
        "types": [
          "Boolean",
          "function(answers: Object): Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "messageOrOptions.when",
        "description": "Weather or not to\nprompt this option."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "defaultOrUndefined",
        "description": "The default value to use."
      }
    ]
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "type",
    "memberof": "src/lib/init/Option.js~InitOption",
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#type",
    "access": "public",
    "description": "The option's {@link inquirer~PromptType}. Defaults to 'input'.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "inquirer~PromptType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "message",
    "memberof": "src/lib/init/Option.js~InitOption",
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#message",
    "access": "public",
    "description": "The option's message. A '?' sign is added automatically.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "default",
    "memberof": "src/lib/init/Option.js~InitOption",
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#default",
    "access": "public",
    "description": "The default value to use.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "String",
        "Number",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "choices",
    "memberof": "src/lib/init/Option.js~InitOption",
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#choices",
    "access": "public",
    "description": "The choices available. Applies to list types only.",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "String[]",
        "Number[]",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "validate",
    "memberof": "src/lib/init/Option.js~InitOption",
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#validate",
    "access": "public",
    "description": "Validates the user input for this option.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "inquirer~Validator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "when",
    "memberof": "src/lib/init/Option.js~InitOption",
    "static": false,
    "longname": "src/lib/init/Option.js~InitOption#when",
    "access": "public",
    "description": "A function or boolean that indicates weather or not to prompt this option.",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "Boolean",
        "function(answers: Object): Boolean",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 100,
    "kind": "get",
    "name": "DefaultType",
    "memberof": "src/lib/init/Option.js~InitOption",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/init/Option.js~InitOption.DefaultType",
    "access": "public",
    "description": "The default {@link inquirer~PromptType} to use. Equals 'input'.",
    "lineNumber": 82,
    "return": {
      "nullable": null,
      "types": [
        "inquirer~PromptType"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "src/lib/server/AtviseFile.js",
    "content": "import { readFile } from 'fs';\nimport File from 'vinyl';\nimport { DataType, VariantArrayType, resolveNodeId } from 'node-opcua';\nimport AtviseTypes from './Types';\nimport NodeId from './NodeId';\n\n// Path related cache\n\n/**\n * A map of AtviseTypes against their definition id's value.\n * @type {Map<String, AtivseType>}\n */\nconst AtviseTypesByValue = AtviseTypes\n  .reduce((result, type) => Object.assign(result, {\n    [type.typeDefinition.value]: type,\n  }), {});\n\n/**\n * A map of AtviseTypes against their identifiers.\n * @type {Map<String, AtivseType>}\n */\nconst AtviseTypesByIdentifier = AtviseTypes\n  .reduce((result, type) => Object.assign(result, {\n    [type.identifier]: type,\n  }), {});\n\n/**\n * A map providing shorter extensions for data types\n * @type {Map<node-opcua~DataType, String>}\n */\nexport const ExtensionForDataType = {\n  [DataType.Boolean]: 'bool',\n  [DataType.XmlElement]: 'xml',\n};\n\n/**\n * Switches keys and values in an object. E.g.: { \"a\": 1 } becomes { 1: \"a\" }\n * @param {Object} obj The object to reverse.\n * @return {Object} The reversed object.\n */\nfunction reverseObject(obj) {\n  return Object.keys(obj)\n    .reduce((result, key) => Object.assign(result, {\n      [obj[key]]: key,\n    }), {});\n}\n\n/**\n * A map providing data types for shorter extensions (Reverse of {@link DataTypeForExtension}).\n * * @type {Map<String, node-opcua~DataType>}\n */\nexport const DataTypeForExtension = reverseObject(ExtensionForDataType);\n\n// Cache DataType\n/**\n * OPC-UA data type names.\n * @type {String[]}\n */\nconst types = Object.keys(DataType);\n\n/**\n * OPC-UA data type extensions.\n * @type {String[]}\n */\nconst typeExtensions = types.map(t => t.toLowerCase());\n\n// Cache TypeDefinitions\n/**\n * Variable data type definition node id.\n * @type {NodeId}\n */\nconst VariableTypeDefinition = new NodeId(NodeId.NodeIdType.NUMERIC, 62, 0);\n/**\n * Property data type definition node id.\n * @type {NodeId}\n */\nconst PropertyTypeDefinition = new NodeId(NodeId.NodeIdType.NUMERIC, 68, 0);\n\n// Cache Regular expressions\n/**\n * A regular expression picking file extensions from file names.\n * @type {RegExp}\n */\nconst ExtensionRegExp = /\\.([^/\\\\]*)$/;\n\n// Value encoding related cache\n/**\n * A set of functions that decode raw stored node values to their original value.\n * @type {Map<node-opcua~DataType, function(rawValue: String): *>}\n */\nconst Decoder = {\n  [DataType.Boolean]: stringValue => stringValue === 'true',\n  [DataType.String]: stringValue => stringValue,\n  [DataType.NodeId]: stringValue => resolveNodeId(stringValue),\n  [DataType.DateTime]: stringValue => new Date(Number.parseInt(stringValue, 10)),\n  [DataType.UInt64]: stringValue => JSON.parse(stringValue),\n};\n\n/**\n * A set of functions that encode node values before storing them.\n * @type {Map<node-opcua~DataType, function(value: *): String>}\n */\nconst Encoder = {\n  [DataType.DateTime]: date => date.getTime().toString(),\n  [DataType.UInt64]: uInt32Array => JSON.stringify(uInt32Array),\n  [DataType.ByteString]: binaryArray => new Buffer(binaryArray, 'binary'),\n};\n\n/**\n * Returns the extension for a specific {@link node-opcua~DataType}.\n * Algorithm:\n *   - if the type has a shortened extension defined in {@link ExtensionForDataType}, return it.\n *   - else return the DataType's name, in lowercase letters.\n * @param {node-opcua~DataType} dataType The datatype to get the extension for.\n * @return {String} The resulting extension.\n */\nfunction extensionForDataType(dataType) {\n  return ExtensionForDataType[dataType] || dataType.toString().toLowerCase();\n}\n\n/**\n * An extension to {@link vinyl~File} providing some additional, atvise-related properties.\n * @property {node-opcua~DataType} AtviseFile#dataType The {@link node-opcua~DataType} the node is\n * stored against on atvise server.\n * @property {NodeId} typeDefinition The file's type definition on atvise server.\n * FIXME: Additional properties not showing in API docs.\n */\nexport default class AtviseFile extends File {\n\n  /**\n   * Returns a storage path for a {@link ReadStream.ReadResult}.\n   * @param {ReadStream.ReadResult} readResult The read result to get a path for.\n   */\n  static pathForReadResult(readResult) {\n    let path = readResult.nodeId.filePath;\n\n    const dataType = readResult.value.$dataType;\n    const arrayType = readResult.value.$arrayType;\n    const typeDefinition = readResult.referenceDescription.typeDefinition;\n\n    if (typeDefinition.value === VariableTypeDefinition.value) {\n      // Variable nodes are stored with their lowercase datatype as an extension\n      path += `.${extensionForDataType(dataType)}`;\n    } else if (typeDefinition.value === PropertyTypeDefinition.value) {\n      // Property nodes are stored with \".prop\" and their lowercase datatype as an extension\n      path += `.prop.${extensionForDataType(dataType)}`;\n    } else {\n      // Handle custom types\n      let identifier = 'var';\n      let fileExtension = false;\n      let keepExtension = false;\n\n      const atType = AtviseTypesByValue[typeDefinition.value];\n      if (atType) {\n        identifier = atType.identifier;\n        fileExtension = atType.fileExtension;\n        keepExtension = atType.keepExtension;\n      }\n\n      if (!keepExtension) {\n        path += `.${identifier}.${fileExtension || extensionForDataType(dataType)}`;\n      }\n    }\n\n    // Add \"array\" or \"matrix\" extensions for corresponding array types\n    if (arrayType.value !== VariantArrayType.Scalar.value) {\n      path += `.${arrayType === VariantArrayType.Array ? 'array' : 'matrix'}`;\n    }\n\n    return path;\n  }\n\n  /**\n   * Encodes a node's value to file contents.\n   * @param {*} value The value to encode.\n   * @param {node-opcua~DataType} dataType The {@link node-opcua~DataType} to encode the value for.\n   * @return {?Buffer} The encoded file contents or null.\n   */\n  static encodeValue(value, dataType) {\n    if (value.value === null) {\n      return Buffer.from('');\n    }\n\n    const encoder = Encoder[dataType];\n    return Buffer.from(encoder ? encoder(value.value) : value.value.toString().trim());\n  }\n\n  /**\n   * Decodes a file's contents to a node's value\n   * @param {Buffer} buffer The file contents to decode.\n   * @param {node-opcua~DataType} dataType The {@link node-opcua~DataType} to decode the contents\n   * for.\n   * @return {?*} The decoded node value or null.\n   */\n  static decodeValue(buffer, dataType) {\n    if (buffer === null || buffer.length === 0) {\n      return null;\n    }\n\n    const decoder = Decoder[dataType];\n\n    if (decoder) {\n      return decoder(buffer.toString());\n    }\n\n    return buffer;\n  }\n\n  /**\n   * As file mtimes do not support millisecond resolution these must be removed before storing\n   * files.\n   * @param {Date} date The original mtime.\n   * @return {Date} The normalized mtime.\n   */\n  static normalizeMtime(date) {\n    const result = date;\n    result.setMilliseconds(0);\n\n    return result;\n  }\n\n  /**\n   * Creates a new {@link AtviseFile} for the given {@link ReadStream.ReadResult}.\n   * @param {ReadStream.ReadResult} readResult The read result to create the file for.\n   * @return {AtviseFile} The resulting file.\n   */\n  static fromReadResult(readResult) {\n    if (!readResult.value) {\n      throw new Error('no value');\n    }\n\n    return new AtviseFile({\n      path: AtviseFile.pathForReadResult(readResult),\n      contents: AtviseFile.encodeValue(readResult.value, readResult.value.$dataType),\n      _dataType: readResult.value.$dataType,\n      _arrayType: readResult.value.$arrayType,\n      _typeDefinition: readResult.referenceDescription.typeDefinition,\n      stat: { mtime: readResult.mtime ? this.normalizeMtime(readResult.mtime) : undefined },\n    });\n  }\n\n  /**\n   * Recalculates {@link AtviseFile#dataType}, {@link AtviseFile#arrayType} and\n   * {@link AtviseFile#typeDefinition}. **Never call this method directly.**\n   */\n  _getMetadata() {\n    // Set default metadata\n    /**\n     * The node's stored {@link node-opcua~VariantArrayType}.\n     * @type {?node-opcua~VariantArrayType}\n     */\n    this._arrayType = VariantArrayType.Scalar;\n\n    let extensions = [];\n    const m = this.relative.match(ExtensionRegExp);\n    if (m) {\n      extensions = m[1].split('.');\n    }\n\n    // For split files, add the directory name extension\n    const dirnameExts = this.dirname.split('.');\n    if (dirnameExts.length > 1) {\n      extensions.unshift(dirnameExts[dirnameExts.length - 1]);\n    }\n\n    function ifLastExtensionMatches(matches, fn) {\n      if (matches(extensions[extensions.length - 1])) {\n        fn(extensions.pop());\n      }\n    }\n\n    const complete = () => this._dataType !== undefined && this._typeDefinition !== undefined;\n\n    // Handle array types\n    ifLastExtensionMatches(ext => ext === 'array', () => {\n      this._arrayType = VariantArrayType.Array;\n    });\n\n    ifLastExtensionMatches(ext => ext === 'matrix', () => {\n      this._arrayType = VariantArrayType.Matrix;\n    });\n\n    ifLastExtensionMatches(ext => typeExtensions.includes(ext), ext => {\n      /**\n       * The node's stored {@link node-opcua~DataType}.\n       * @type {?node-opcua~DataType}\n       */\n      this._dataType = DataType[types[typeExtensions.indexOf(ext)]];\n    });\n\n    // Handle wrapped data types (e.g. \"bool\" for DataType.Boolean)\n    ifLastExtensionMatches(ext => DataTypeForExtension[ext], ext => {\n      this._dataType = DataType[DataTypeForExtension[ext]];\n    });\n\n    if (extensions.length === 0) { // Got variable\n      /**\n       * The node's stored type definition.\n       * @type {?node-opcua~NodeId}\n       */\n      this._typeDefinition = new NodeId(NodeId.NodeIdType.NUMERIC, 62, 0);\n    }\n\n    ifLastExtensionMatches(ext => ext === 'prop', () => {\n      this._typeDefinition = new NodeId(NodeId.NodeIdType.NUMERIC, 68, 0);\n    });\n\n    if (!complete()) {\n      // Handle atvise types\n      let foundAtType = false;\n\n      Object.keys(AtviseTypesByIdentifier).forEach(identifier => {\n        if (!foundAtType && extensions.includes(identifier)) {\n          foundAtType = true;\n          const type = AtviseTypesByIdentifier[identifier];\n\n          this._typeDefinition = type.typeDefinition;\n          this._dataType = type.dataType;\n        }\n      });\n    }\n\n    if (!complete()) {\n      this._typeDefinition = new NodeId('VariableTypes.ATVISE.Resource.OctetStream');\n      this._dataType = DataType.ByteString;\n    }\n  }\n\n  /**\n   * The file's {@link node-opcua~DataType}.\n   * @type {node-opcua~DataType}\n   */\n  get dataType() {\n    if (!this._dataType) {\n      this._getMetadata();\n    }\n\n    return this._dataType;\n  }\n\n  /**\n   * The file's {@link node-opcua~VariantArrayType}.\n   * @type {node-opcua~VariantArrayType}\n   */\n  get arrayType() {\n    if (!this._arrayType) {\n      this._getMetadata();\n    }\n\n    return this._arrayType;\n  }\n\n  /**\n   * The file's type definition.\n   * @type {node-opcua~NodeId}\n   */\n  get typeDefinition() {\n    if (!this._typeDefinition) {\n      this._getMetadata();\n    }\n\n    return this._typeDefinition;\n  }\n\n  /**\n   * `true` for files containing atvise displays.\n   * @type {Boolean}\n   */\n  get isDisplay() {\n    return this.typeDefinition.value === 'VariableTypes.ATVISE.Display';\n  }\n\n  /**\n   * `true` for files containing atvise scripts.\n   * @type {Boolean}\n   */\n  get isScript() {\n    return this.typeDefinition.value === 'VariableTypes.ATVISE.ScriptCode';\n  }\n\n  /**\n   * `true` for files containing atvise quick dynamics.\n   * @type {Boolean}\n   */\n  get isQuickDynamic() {\n    return this.typeDefinition.value === 'VariableTypes.ATVISE.QuickDynamic';\n  }\n\n  /**\n   * Sets the node value for the file.\n   * @param {?*} newValue The value to set.\n   */\n  set value(newValue) {\n    /**\n     * The file's contents.\n     * @type {?Buffer}\n     */\n    this.contents = AtviseFile.encodeValue(newValue, this.dataType);\n  }\n\n  /**\n   * Returns the decoded node value for the file.\n   * @type {?*} The file's decoded value.\n   */\n  get value() {\n    return AtviseFile.decodeValue(this.contents, this.dataType);\n  }\n\n  /**\n   * Returns the node id associated with the file.\n   * @type {NodeId} The file's node id.\n   */\n  get nodeId() {\n    const atType = AtviseTypesByValue[this.typeDefinition.value];\n    let idPath = this.relative;\n\n    if (!atType || !atType.keepExtension) {\n      const exts = idPath.match(ExtensionRegExp)[1];\n      idPath = idPath.split(`.${exts}`)[0];\n    }\n\n    return NodeId.fromFilePath(idPath);\n  }\n\n  /**\n   * Returns a new file with all attributes of the current file.\n   * @param {Object} options See https://github.com/gulpjs/vinyl#filecloneoptions for all options\n   * available.\n   * @return {AtviseFile} The cloned file.\n   */\n  clone(options) {\n    const clonedFile = super.clone(options);\n\n    clonedFile._arrayType = this._arrayType;\n\n    return clonedFile;\n  }\n\n  /**\n   * Creates a new AtviseFile and reads it's contents.\n   * @param {Object} options See {@link vinyl~File} for available options.\n   * @return {Promise} Resolved with the new file of rejected with the error that occured while\n   * trying to read it's path.\n   */\n  static read(options = {}) {\n    return new Promise((resolve, reject) => {\n      if (!options.path) {\n        reject(new Error('options.path is required'));\n      } else {\n        readFile(options.path, (err, contents) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(new AtviseFile(Object.assign(options, { contents })));\n          }\n        });\n      }\n    });\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/server/AtviseFile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "AtviseTypesByValue",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseTypesByValue",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": "A map of AtviseTypes against their definition id's value.",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, AtivseType>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "AtviseTypesByIdentifier",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseTypesByIdentifier",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": "A map of AtviseTypes against their identifiers.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, AtivseType>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "name": "ExtensionForDataType",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~ExtensionForDataType",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": "{ExtensionForDataType}",
    "description": "A map providing shorter extensions for data types",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Map<node-opcua~DataType, String>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "reverseObject",
    "memberof": "src/lib/server/AtviseFile.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~reverseObject",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": "Switches keys and values in an object. E.g.: { \"a\": 1 } becomes { 1: \"a\" }",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to reverse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The reversed object."
    },
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "DataTypeForExtension",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~DataTypeForExtension",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": "{DataTypeForExtension}",
    "description": "A map providing data types for shorter extensions (Reverse of {@link DataTypeForExtension}).\n* @type {Map<String, node-opcua~DataType>}",
    "lineNumber": 52,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "types",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~types",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": "OPC-UA data type names.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "typeExtensions",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~typeExtensions",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": "OPC-UA data type extensions.",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "VariableTypeDefinition",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~VariableTypeDefinition",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": "Variable data type definition node id.",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "NodeId"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "PropertyTypeDefinition",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~PropertyTypeDefinition",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": "Property data type definition node id.",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "NodeId"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "ExtensionRegExp",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~ExtensionRegExp",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": "A regular expression picking file extensions from file names.",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "Decoder",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~Decoder",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": "A set of functions that decode raw stored node values to their original value.",
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "Map<node-opcua~DataType, function(rawValue: String): *>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "Encoder",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~Encoder",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": "A set of functions that encode node values before storing them.",
    "lineNumber": 103,
    "type": {
      "nullable": null,
      "types": [
        "Map<node-opcua~DataType, function(value: *): String>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "extensionForDataType",
    "memberof": "src/lib/server/AtviseFile.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~extensionForDataType",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": null,
    "description": "Returns the extension for a specific {@link node-opcua~DataType}.\nAlgorithm:\n  - if the type has a shortened extension defined in {@link ExtensionForDataType}, return it.\n  - else return the DataType's name, in lowercase letters.",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "node-opcua~DataType"
        ],
        "spread": false,
        "optional": false,
        "name": "dataType",
        "description": "The datatype to get the extension for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The resulting extension."
    },
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "class",
    "name": "AtviseFile",
    "memberof": "src/lib/server/AtviseFile.js",
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/server/AtviseFile.js",
    "importStyle": "AtviseFile",
    "description": "An extension to {@link vinyl~File} providing some additional, atvise-related properties.",
    "lineNumber": 128,
    "properties": [
      {
        "nullable": null,
        "types": [
          "node-opcua~DataType"
        ],
        "spread": false,
        "optional": false,
        "name": "AtviseFile#dataType",
        "description": "The {@link node-opcua~DataType} the node is\nstored against on atvise server."
      },
      {
        "nullable": null,
        "types": [
          "NodeId"
        ],
        "spread": false,
        "optional": false,
        "name": "typeDefinition",
        "description": "The file's type definition on atvise server.\nFIXME: Additional properties not showing in API docs."
      }
    ],
    "interface": false,
    "extends": [
      "vinyl~File"
    ]
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "pathForReadResult",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile.pathForReadResult",
    "access": "public",
    "description": "Returns a storage path for a {@link ReadStream.ReadResult}.",
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "ReadStream.ReadResult"
        ],
        "spread": false,
        "optional": false,
        "name": "readResult",
        "description": "The read result to get a path for."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "encodeValue",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile.encodeValue",
    "access": "public",
    "description": "Encodes a node's value to file contents.",
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to encode."
      },
      {
        "nullable": null,
        "types": [
          "node-opcua~DataType"
        ],
        "spread": false,
        "optional": false,
        "name": "dataType",
        "description": "The {@link node-opcua~DataType} to encode the value for."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "The encoded file contents or null."
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "decodeValue",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile.decodeValue",
    "access": "public",
    "description": "Decodes a file's contents to a node's value",
    "lineNumber": 195,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": "The file contents to decode."
      },
      {
        "nullable": null,
        "types": [
          "node-opcua~DataType"
        ],
        "spread": false,
        "optional": false,
        "name": "dataType",
        "description": "The {@link node-opcua~DataType} to decode the contents\nfor."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The decoded node value or null."
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "normalizeMtime",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile.normalizeMtime",
    "access": "public",
    "description": "As file mtimes do not support millisecond resolution these must be removed before storing\nfiles.",
    "lineNumber": 215,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "The original mtime."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": "The normalized mtime."
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "fromReadResult",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile.fromReadResult",
    "access": "public",
    "description": "Creates a new {@link AtviseFile} for the given {@link ReadStream.ReadResult}.",
    "lineNumber": 227,
    "params": [
      {
        "nullable": null,
        "types": [
          "ReadStream.ReadResult"
        ],
        "spread": false,
        "optional": false,
        "name": "readResult",
        "description": "The read result to create the file for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AtviseFile"
      ],
      "spread": false,
      "description": "The resulting file."
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "_getMetadata",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#_getMetadata",
    "access": "private",
    "description": "Recalculates {@link AtviseFile#dataType}, {@link AtviseFile#arrayType} and\n{@link AtviseFile#typeDefinition}. **Never call this method directly.**",
    "lineNumber": 246,
    "params": [],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "_arrayType",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#_arrayType",
    "access": "private",
    "description": "The node's stored {@link node-opcua~VariantArrayType}.",
    "lineNumber": 252,
    "type": {
      "nullable": true,
      "types": [
        "node-opcua~VariantArrayType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "_dataType",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#_dataType",
    "access": "private",
    "description": "The node's stored {@link node-opcua~DataType}.",
    "lineNumber": 288,
    "type": {
      "nullable": true,
      "types": [
        "node-opcua~DataType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "_typeDefinition",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#_typeDefinition",
    "access": "private",
    "description": "The node's stored type definition.",
    "lineNumber": 301,
    "type": {
      "nullable": true,
      "types": [
        "node-opcua~NodeId"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "get",
    "name": "dataType",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#dataType",
    "access": "public",
    "description": "The file's {@link node-opcua~DataType}.",
    "lineNumber": 333,
    "type": {
      "nullable": null,
      "types": [
        "node-opcua~DataType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 134,
    "kind": "get",
    "name": "arrayType",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#arrayType",
    "access": "public",
    "description": "The file's {@link node-opcua~VariantArrayType}.",
    "lineNumber": 345,
    "type": {
      "nullable": null,
      "types": [
        "node-opcua~VariantArrayType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "get",
    "name": "typeDefinition",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#typeDefinition",
    "access": "public",
    "description": "The file's type definition.",
    "lineNumber": 357,
    "type": {
      "nullable": null,
      "types": [
        "node-opcua~NodeId"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "get",
    "name": "isDisplay",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#isDisplay",
    "access": "public",
    "description": "`true` for files containing atvise displays.",
    "lineNumber": 369,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "get",
    "name": "isScript",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#isScript",
    "access": "public",
    "description": "`true` for files containing atvise scripts.",
    "lineNumber": 377,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "get",
    "name": "isQuickDynamic",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#isQuickDynamic",
    "access": "public",
    "description": "`true` for files containing atvise quick dynamics.",
    "lineNumber": 385,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 139,
    "kind": "set",
    "name": "value",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#value",
    "access": "public",
    "description": "Sets the node value for the file.",
    "lineNumber": 393,
    "params": [
      {
        "nullable": true,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newValue",
        "description": "The value to set."
      }
    ]
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "contents",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#contents",
    "access": "public",
    "description": "The file's contents.",
    "lineNumber": 398,
    "type": {
      "nullable": true,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 141,
    "kind": "get",
    "name": "value",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#value",
    "access": "public",
    "description": "Returns the decoded node value for the file.",
    "lineNumber": 405,
    "type": {
      "nullable": true,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 142,
    "kind": "get",
    "name": "nodeId",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#nodeId",
    "access": "public",
    "description": "Returns the node id associated with the file.",
    "lineNumber": 413,
    "type": {
      "nullable": null,
      "types": [
        "NodeId"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "clone",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile#clone",
    "access": "public",
    "description": "Returns a new file with all attributes of the current file.",
    "lineNumber": 431,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "See https://github.com/gulpjs/vinyl#filecloneoptions for all options\navailable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AtviseFile"
      ],
      "spread": false,
      "description": "The cloned file."
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "read",
    "memberof": "src/lib/server/AtviseFile.js~AtviseFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/AtviseFile.js~AtviseFile.read",
    "access": "public",
    "description": "Creates a new AtviseFile and reads it's contents.",
    "lineNumber": 445,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "See {@link vinyl~File} for available options."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolved with the new file of rejected with the error that occured while\ntrying to read it's path."
    }
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "src/lib/server/Client.js",
    "content": "import { OPCUAClient } from 'node-opcua';\nimport ProjectConfig from '../../config/ProjectConfig';\n\n/**\n * A wrapper around {@link node-opcua~OPCUAClient} used to connect to atvise server.\n */\nexport default class Client {\n\n  /**\n   * Creates and connects a new instance of {@link node-opcua~OPCUAClient}.\n   * @return {Promise<node-opcua~OPCUAClient, Error>} Fulfilled with an already connected\n   * {@link node-opcua~OPCUAClient} instance, rejected if an error occured.\n   */\n  static create() {\n    const client = new OPCUAClient({\n      requestedSessionTimeout: 600000,\n      keepSessionAlive: true,\n    });\n\n    return new Promise((resolve, reject) => {\n      const endpoint = `opc.tcp://${ProjectConfig.host}:${ProjectConfig.port.opc}`;\n\n      setTimeout(() => reject(\n        new Error(`Unable to connect to ${endpoint}: Connection timed out`)\n      ), 5000);\n\n      client.connect(endpoint, err => {\n        if (err) {\n          reject(new Error(`Unable to connect to ${endpoint}: ${err.message}`));\n        } else {\n          resolve(client);\n        }\n      });\n    });\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/server/Client.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "class",
    "name": "Client",
    "memberof": "src/lib/server/Client.js",
    "static": true,
    "longname": "src/lib/server/Client.js~Client",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/server/Client.js",
    "importStyle": "Client",
    "description": "A wrapper around {@link node-opcua~OPCUAClient} used to connect to atvise server.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "create",
    "memberof": "src/lib/server/Client.js~Client",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/Client.js~Client.create",
    "access": "public",
    "description": "Creates and connects a new instance of {@link node-opcua~OPCUAClient}.",
    "lineNumber": 14,
    "return": {
      "nullable": null,
      "types": [
        "Promise<node-opcua~OPCUAClient, Error>"
      ],
      "spread": false,
      "description": "Fulfilled with an already connected\n{@link node-opcua~OPCUAClient} instance, rejected if an error occured."
    },
    "params": []
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "src/lib/server/NodeId.js",
    "content": "import { sep } from 'path';\nimport { NodeId as OpcNodeId } from 'node-opcua';\n\n/**\n * OPC-UA node id types.\n * @type {Map<String, node-opcua~NodeIdType>}\n */\nconst Type = OpcNodeId.NodeIdType;\n\n/**\n * OPC-UA node id types mapped against node-id identifiers (e.g. i, s ...).\n * @type {Map<String, node-opcua~NodeIdType>}\n */\nconst TypeForIdentifier = {\n  i: Type.NUMERIC,\n  s: Type.STRING,\n  g: Type.GUID,\n  b: Type.BYTESTRING,\n};\n\n/**\n * A wrapper around {@link node-opcua~NodeId}.\n */\nexport default class NodeId extends OpcNodeId {\n\n  /**\n   * Creates a new NodeId. Can be called in multiple ways:\n   *  - with a {@link node-opcua~NodeIdType}, a value and a namespace (defaults to 0),\n   *  - with a value only (type will be taken from it, namespace defaults to 1) or\n   *  - with a {@link NodeId}s string representation (e.g. `ns=1;s=AGENT.DISPLAYS`).\n   * @param {node-opcua~NodeIdType|String|Number} typeOrValue The type or value to use.\n   * @param {(Number|String)} [value] The value to use.\n   * @param {Number} [namespace=1] The namespace to use.\n   */\n  constructor(typeOrValue, value, namespace = 1) {\n    if (!(Type.get(typeOrValue))) {\n      let m = null;\n\n      if (typeof typeOrValue === 'string') {\n        m = typeOrValue.match(/^ns=([0-9]+);(i|s|g|b)=(.*)$/);\n      }\n\n      if (m === null) {\n        super(\n          Number.isNaN(Number.parseInt(typeOrValue, 10)) ? Type.STRING : Type.NUMERIC,\n          typeOrValue,\n          1\n        );\n      } else {\n        const n = Number.parseInt(m[1], 10);\n        const t = TypeForIdentifier[m[2]];\n        const v = t === Type.NUMERIC ? Number.parseInt(m[3], 10) : m[3];\n\n        super(t, v, n);\n      }\n    } else {\n      super(typeOrValue, value, namespace);\n    }\n  }\n\n  /**\n   * Creates a new NodeId based on a file path.\n   * @param {String} path The file path to use.\n   * @return {NodeId} The resulting NodeId.\n   */\n  static fromFilePath(path) {\n    let separator = '.';\n    const value = path.split(sep)\n      .reduce((result, current) => {\n        const next = `${result}${separator}${current}`;\n\n        if (current === 'RESOURCES') {\n          separator = '/';\n        }\n\n        return next;\n      });\n\n    return new NodeId(NodeId.NodeIdType.STRING, value, 1);\n  }\n\n  /**\n   * The node id's value, encoded to a file path.\n   * @type {String}\n   */\n  get filePath() {\n    const parts = this.value.split('RESOURCES');\n    parts[0] = parts[0].split('.').join('/');\n\n    return parts.join('RESOURCES');\n  }\n\n  /**\n   * Returns a string in the format \"namespace value\" that is printed when inspecting the NodeId\n   * using node.js's *util.inspect*.\n   * @see https://nodejs.org/api/util.html#util_util_inspect_object_options\n   * @param {Number} depth The depth to inspect.\n   * @param {Object} options The options to use.\n   * @return {String} A string in the format \"namespace value\".\n   */\n  inspect(depth, options) {\n    return [\n      options.stylize(this.namespace, 'number'),\n      options.stylize(this.value, this.identifierType === Type.NUMERIC ? 'number' : 'string'),\n    ].join(' ');\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/server/NodeId.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "Type",
    "memberof": "src/lib/server/NodeId.js",
    "static": true,
    "longname": "src/lib/server/NodeId.js~Type",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/NodeId.js",
    "importStyle": null,
    "description": "OPC-UA node id types.",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, node-opcua~NodeIdType>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "TypeForIdentifier",
    "memberof": "src/lib/server/NodeId.js",
    "static": true,
    "longname": "src/lib/server/NodeId.js~TypeForIdentifier",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/NodeId.js",
    "importStyle": null,
    "description": "OPC-UA node id types mapped against node-id identifiers (e.g. i, s ...).",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, node-opcua~NodeIdType>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "class",
    "name": "NodeId",
    "memberof": "src/lib/server/NodeId.js",
    "static": true,
    "longname": "src/lib/server/NodeId.js~NodeId",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/server/NodeId.js",
    "importStyle": "NodeId",
    "description": "A wrapper around {@link node-opcua~NodeId}.",
    "lineNumber": 24,
    "interface": false,
    "extends": [
      "node-opcua~OpcNodeId"
    ]
  },
  {
    "__docId__": 152,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/server/NodeId.js~NodeId",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/NodeId.js~NodeId#constructor",
    "access": "public",
    "description": "Creates a new NodeId. Can be called in multiple ways:\n - with a {@link node-opcua~NodeIdType}, a value and a namespace (defaults to 0),\n - with a value only (type will be taken from it, namespace defaults to 1) or\n - with a {@link NodeId}s string representation (e.g. `ns=1;s=AGENT.DISPLAYS`).",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "node-opcua~NodeIdType",
          "String",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "typeOrValue",
        "description": "The type or value to use."
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "The value to use."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "namespace",
        "description": "The namespace to use."
      }
    ]
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "fromFilePath",
    "memberof": "src/lib/server/NodeId.js~NodeId",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/NodeId.js~NodeId.fromFilePath",
    "access": "public",
    "description": "Creates a new NodeId based on a file path.",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The file path to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NodeId"
      ],
      "spread": false,
      "description": "The resulting NodeId."
    }
  },
  {
    "__docId__": 154,
    "kind": "get",
    "name": "filePath",
    "memberof": "src/lib/server/NodeId.js~NodeId",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/NodeId.js~NodeId#filePath",
    "access": "public",
    "description": "The node id's value, encoded to a file path.",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "inspect",
    "memberof": "src/lib/server/NodeId.js~NodeId",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/NodeId.js~NodeId#inspect",
    "access": "public",
    "description": "Returns a string in the format \"namespace value\" that is printed when inspecting the NodeId\nusing node.js's *util.inspect*.",
    "see": [
      "https://nodejs.org/api/util.html#util_util_inspect_object_options"
    ],
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "depth",
        "description": "The depth to inspect."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A string in the format \"namespace value\"."
    }
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "src/lib/server/NodeStream.js",
    "content": "import { browse_service as BrowseService, NodeClass } from 'node-opcua';\nimport QueueStream from './QueueStream';\nimport NodeId from './NodeId';\nimport Project from '../../config/ProjectConfig';\n\n/**\n * A stream that browses the nodes specified and (if *recursive* option is set) it's child nodes.\n */\nexport default class NodeStream extends QueueStream {\n\n  /**\n   * Creates a new NodeStream based on the nodes to start browsing with and some options.\n   * @param {NodeId[]} nodesToBrowse The nodes to start browsing with.\n   * @param {Object} [options] The options to use.\n   * @param {Boolean} [options.recursive=true] If the discovered nodes should be browsed as well.\n   * @param {NodeId[]} [options.ignoreNodes=ProjectConfig.ignoreNodes] An array of {@link NodeId}s\n   * to ignore.\n   */\n  constructor(nodesToBrowse, options = {}) {\n    if (!nodesToBrowse || !(nodesToBrowse instanceof Array) || nodesToBrowse.length === 0) {\n      throw new Error('nodesToBrowse is required');\n    }\n\n    if (options && options.ignoreNodes && !(options.ignoreNodes instanceof Array)) {\n      throw new Error('ignoreNodes must be an array of node ids');\n    }\n\n    super(options);\n\n    // Handle options\n    /**\n     * If the discovered nodes should be browsed as well.\n     * @type {Boolean}\n     */\n    this.recursive = true;\n    if (options.recursive !== undefined) {\n      this.recursive = options.recursive;\n    }\n\n    let ignoreNodes = Project.ignoreNodes;\n    if (options.ignoreNodes !== undefined) {\n      ignoreNodes = options.ignoreNodes;\n    }\n\n    /**\n     * The result mask to use.\n     * @type {UInt32}\n     */\n    this._resultMask = BrowseService.makeResultMask('ReferenceType | NodeClass | TypeDefinition');\n\n    /**\n     * A regular expression matching all node ids specified in {@link NodeStream#ignoreNodes}\n     * @type {RegExp}\n     */\n    this.ignoredRegExp = new RegExp(`^(${ignoreNodes.map(n => n.toString()).join('|')})`);\n\n    // Write nodes to read\n    nodesToBrowse.forEach(nodeId => this.write(nodeId));\n\n    // End once drained\n    this.once('drained', () => {\n      this.end();\n    });\n  }\n\n  /**\n   * Returns an error message specifically for the given nodeId.\n   * @param {NodeId} nodeId The node id to get the error message for.\n   * @return {String} The specific error message.\n   */\n  processErrorMessage(nodeId) {\n    return `Error browsing ${nodeId.toString()}`;\n  }\n\n  /**\n   * Returns a {ReadStream.ReadResult} for the given reference description.\n   * @param {NodeId} nodeId The node id to browse.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk(nodeId, handleErrors) {\n    this.session.browse({\n      nodeId,\n      browseDirection: BrowseService.BrowseDirection.Forward,\n      includeSubtypes: true,\n      resultMask: this._resultMask,\n    }, (err, results) => {\n      if (!err && (!results || results.length === 0)) {\n        handleErrors(new Error('No results'));\n      } else {\n        handleErrors(err, results && results.length > 0 ? results[0].statusCode : null, done => {\n          Promise.all(\n            results[0].references\n            // Remove parent nodes\n              .filter(ref => ref.nodeId.value.toString().split(nodeId.value).length > 1)\n              // Ignore specified nodes\n              // TODO: Print ignored nodes (debug level)\n              .filter(ref => !(ref.nodeId.toString().match(this.ignoredRegExp)))\n              // Push variable nodes, recurse\n              .map(ref => {\n                // Push all variable ids\n                if (ref.nodeClass.value === NodeClass.Variable.value) {\n                  // \"Cast\" ref.nodeId to NodeId\n                  Object.setPrototypeOf(ref.nodeId, NodeId.prototype);\n\n                  this.push(ref);\n                }\n\n                if (this.recursive) {\n                  return new Promise((resolve) => {\n                    this.write(ref.nodeId, null, resolve);\n                  });\n                }\n\n                return Promise.resolve();\n              })\n          )\n            .then(done);\n        });\n      }\n    });\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/server/NodeStream.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "class",
    "name": "NodeStream",
    "memberof": "src/lib/server/NodeStream.js",
    "static": true,
    "longname": "src/lib/server/NodeStream.js~NodeStream",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/server/NodeStream.js",
    "importStyle": "NodeStream",
    "description": "A stream that browses the nodes specified and (if *recursive* option is set) it's child nodes.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/lib/server/QueueStream.js~QueueStream"
    ]
  },
  {
    "__docId__": 158,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#constructor",
    "access": "public",
    "description": "Creates a new NodeStream based on the nodes to start browsing with and some options.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "NodeId[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodesToBrowse",
        "description": "The nodes to start browsing with."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options to use."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.recursive",
        "description": "If the discovered nodes should be browsed as well."
      },
      {
        "nullable": null,
        "types": [
          "NodeId[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "ProjectConfig.ignoreNodes",
        "defaultRaw": "ProjectConfig.ignoreNodes",
        "name": "options.ignoreNodes",
        "description": "An array of {@link NodeId}s\nto ignore."
      }
    ]
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "recursive",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#recursive",
    "access": "public",
    "description": "If the discovered nodes should be browsed as well.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "_resultMask",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#_resultMask",
    "access": "private",
    "description": "The result mask to use.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "UInt32"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "ignoredRegExp",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#ignoredRegExp",
    "access": "public",
    "description": "A regular expression matching all node ids specified in {@link NodeStream#ignoreNodes}",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "processErrorMessage",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#processErrorMessage",
    "access": "public",
    "description": "Returns an error message specifically for the given nodeId.",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "NodeId"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": "The node id to get the error message for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The specific error message."
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "processChunk",
    "memberof": "src/lib/server/NodeStream.js~NodeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/NodeStream.js~NodeStream#processChunk",
    "access": "public",
    "description": "Returns a {ReadStream.ReadResult} for the given reference description.",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "NodeId"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": "The node id to browse."
      },
      {
        "nullable": null,
        "types": [
          "function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)"
        ],
        "spread": false,
        "optional": false,
        "name": "handleErrors",
        "description": "The error handler to call. See {@link QueueStream#processChunk} for details."
      }
    ],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/lib/server/QueueStream.js",
    "content": "import { StatusCodes } from 'node-opcua';\nimport Stream from './Stream';\n\n/**\n * A stream that process atvise server requests in parallel.\n * @abstract\n */\nexport default class QueueStream extends Stream {\n\n  /**\n   * Creates a new QueueStream with the given options.\n   * @param {Object} [options] The options to use\n   * @param {Number} [options.maxParallel] The maximum of parallel tasks to execute.\n   */\n  constructor(options = {}) {\n    const maxParallel = options.maxParallel || 250;\n    super(Object.assign(options, { highWaterMark: maxParallel }));\n\n    /**\n     * The number of running operations.\n     * @type {Number}\n     */\n    this._processing = 0;\n\n    /**\n     * The number of chunks processed so far.\n     * @type {Number}\n     */\n    this._processed = 0;\n\n    /**\n     * The queued chunks.\n     * @type {*[]}\n     */\n    this._queued = [];\n\n    /**\n     * The maximum of parallel tasks to execute\n     * @type {number}\n     */\n    this._maxParallel = maxParallel;\n\n    /**\n     * The timestamp of the date when the stream was created.\n     * @type {Number}\n     */\n    this._start = (new Date()).getTime();\n\n    this.on('processed-chunk', () => {\n      if (!this.queueEmpty) {\n        this._processChunk(this._queued.shift());\n      } else if (this._processing === 0) {\n        this.emit('drained');\n      }\n    });\n  }\n\n  /**\n   * `true` if there are queued operations or an operation is running right now.\n   * @type {Boolean}\n   */\n  get hasPending() {\n    return this._processing > 0 || this._queued.length > 0;\n  }\n\n  /**\n   * `true` if there are no queued operations\n   * @type {Boolean}\n   */\n  get queueEmpty() {\n    return this._queued.length === 0;\n  }\n\n  /**\n   * The number of chunks already processed.\n   * @type {Number}\n   */\n  get processed() {\n    return this._processed;\n  }\n\n  /**\n   * The number of processed chunks per second.\n   * @type {Number}\n   */\n  get opsPerSecond() {\n    return (this._processed / (((new Date()).getTime() - this._start) / 1000)) || 0;\n  }\n\n  /**\n   * The error message to use when processing a chunk fails. **Must be overridden by all\n   * subclasses!**\n   * @param {*} chunk The chunk being processed.\n   * @return {String} The error message to use.\n   * @abstract\n   */\n  processErrorMessage(chunk) { // eslint-disable-line no-unused-vars\n    throw new Error('QueueStream#processErrorMessage must be implemented by all subclasses');\n  }\n\n  /**\n   * The function to call when a chunk is ready to be processed. **Must be overridden by all\n   * subclasses.**\n   * @param {*} chunk The chunk to process.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors Call this function to handle errors and bad status codes. When no error occured\n   * and the status code received is fine, `onSuccess` is called. Further processing of valid\n   * chunks, e.g. recursions should happen in `onSuccess`. **Note that `onSuccess` is an\n   * asynchronous function with a callback as an argument.**\n   * @example <caption>Basic implementation</caption>\n   * class MyQueueStream extends QueueStream {\n   *   ...\n   *   processChunk(chunk, handle) {\n   *     client.session.doSomething((err, result, statusCode) => handle(err, statusCode, done => {\n   *       // This is called if err is falsy and status code is node-opcua~StatusCodes.Good\n   *       doSomethingWith(result);\n   *       done();\n   *     }));\n   *   }\n   *   ...\n   * }\n   * @example <caption>Implement a recursion</caption>\n   * class RecursiveQueueStream extends QueueStream {\n   *   ...\n   *   processChunk(chunk, handle) {\n   *     client.session.doSomething((err, result, statusCode) => handle(err, statusCode, done => {\n   *       // Write the result back to the stream.\n   *       // This means, that `result` will be queued and, as soon as possible, #processChunk will\n   *       // be called with `result` as the `chunk` argument.\n   *       this.write(result, null, done);\n   *     }));\n   *   }\n   *   ...\n   * }\n   * @example <caption>Allowing some invalid status codes</caption>\n   * import { StatusCodes } from 'node-opcua';\n   *\n   * class FriendlyQueueStream extends QueueStream {\n   *   ...\n   *   processChunk(chunk, handle) {\n   *     client.session.doSomething((err, result, statusCode) => {\n   *       if (statusCode === StatusCodes.BadUserAccessDenied) {\n   *         Logger.warn(`Ignored invalid status: ${statusCode.description}`);\n   *         handle(err, StatusCodes.Good, done => done());\n   *       } else {\n   *         handle(err, statusCode, done => done());\n   *       }\n   *     });\n   *   }\n   *   ...\n   * }\n   * @abstract\n   */\n  processChunk(chunk, handleErrors) { // eslint-disable-line no-unused-vars\n    handleErrors(new Error('QueueStream#processChunk must be implemented by all subclasses'));\n  }\n\n  /**\n   * Calls {@link QueueStream#processChunk} and handles errors and invalid status codes.\n   * @param {*} chunk The chunk to process.\n   * @emits {*} Emits a `processed-chunk` event once a chunk was processed.\n   */\n  _processChunk(chunk) {\n    this._processing++;\n\n    this.processChunk(chunk, (err, statusCode, onSuccess) => {\n      if (err) {\n        this.emit('error', new Error(`${this.processErrorMessage(chunk)}: ${err.message}`));\n      } else if (statusCode !== StatusCodes.Good) {\n        this.emit('error',\n          new Error(`${this.processErrorMessage(chunk)}: ${statusCode.description}`));\n      } else {\n        onSuccess(() => {\n          this._processing--;\n          this._processed++;\n          this.emit('processed-chunk', chunk);\n        });\n      }\n    });\n  }\n\n  /**\n   * Enqueues the given chunk for processing.\n   * @param {*} chunk The chunk to enqueue.\n   */\n  _enqueueChunk(chunk) {\n    if (this._processing < this._maxParallel) {\n      this._processChunk(chunk);\n    } else {\n      this._queued.push(chunk);\n    }\n  }\n\n  /**\n   * Calls {@link QueueStream#_enqueueChunk} as soon as the stream's session is opened.\n   * @param {*} chunk The chunk to transform.\n   * @param {String} enc The encoding used.\n   * @param {function} callback Called once the chunk has been enqueued.\n   */\n  _transform(chunk, enc, callback) {\n    if (this.session) {\n      this._enqueueChunk(chunk);\n      callback();\n    } else {\n      this.once('session-open', () => {\n        this._enqueueChunk(chunk);\n        callback();\n      });\n    }\n  }\n\n  /**\n   * Waits for pending operations to complete.\n   * @param {function} callback Called once all queued chunks have been processed.\n   */\n  _flush(callback) {\n    if (this.hasPending) {\n      this.once('drained', () => {\n        super._flush(callback);\n      });\n    } else {\n      super._flush(callback);\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/server/QueueStream.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "class",
    "name": "QueueStream",
    "memberof": "src/lib/server/QueueStream.js",
    "static": true,
    "longname": "src/lib/server/QueueStream.js~QueueStream",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/server/QueueStream.js",
    "importStyle": "QueueStream",
    "description": "A stream that process atvise server requests in parallel.",
    "lineNumber": 8,
    "abstract": true,
    "interface": false,
    "extends": [
      "src/lib/server/Stream.js~Stream"
    ]
  },
  {
    "__docId__": 167,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/server/QueueStream.js~QueueStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/QueueStream.js~QueueStream#constructor",
    "access": "public",
    "description": "Creates a new QueueStream with the given options.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options to use"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.maxParallel",
        "description": "The maximum of parallel tasks to execute."
      }
    ]
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "_processing",
    "memberof": "src/lib/server/QueueStream.js~QueueStream",
    "static": false,
    "longname": "src/lib/server/QueueStream.js~QueueStream#_processing",
    "access": "private",
    "description": "The number of running operations.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "_processed",
    "memberof": "src/lib/server/QueueStream.js~QueueStream",
    "static": false,
    "longname": "src/lib/server/QueueStream.js~QueueStream#_processed",
    "access": "private",
    "description": "The number of chunks processed so far.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "_queued",
    "memberof": "src/lib/server/QueueStream.js~QueueStream",
    "static": false,
    "longname": "src/lib/server/QueueStream.js~QueueStream#_queued",
    "access": "private",
    "description": "The queued chunks.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "*[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "_maxParallel",
    "memberof": "src/lib/server/QueueStream.js~QueueStream",
    "static": false,
    "longname": "src/lib/server/QueueStream.js~QueueStream#_maxParallel",
    "access": "private",
    "description": "The maximum of parallel tasks to execute",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "_start",
    "memberof": "src/lib/server/QueueStream.js~QueueStream",
    "static": false,
    "longname": "src/lib/server/QueueStream.js~QueueStream#_start",
    "access": "private",
    "description": "The timestamp of the date when the stream was created.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 173,
    "kind": "get",
    "name": "hasPending",
    "memberof": "src/lib/server/QueueStream.js~QueueStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/QueueStream.js~QueueStream#hasPending",
    "access": "public",
    "description": "`true` if there are queued operations or an operation is running right now.",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 174,
    "kind": "get",
    "name": "queueEmpty",
    "memberof": "src/lib/server/QueueStream.js~QueueStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/QueueStream.js~QueueStream#queueEmpty",
    "access": "public",
    "description": "`true` if there are no queued operations",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 175,
    "kind": "get",
    "name": "processed",
    "memberof": "src/lib/server/QueueStream.js~QueueStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/QueueStream.js~QueueStream#processed",
    "access": "public",
    "description": "The number of chunks already processed.",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "get",
    "name": "opsPerSecond",
    "memberof": "src/lib/server/QueueStream.js~QueueStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/QueueStream.js~QueueStream#opsPerSecond",
    "access": "public",
    "description": "The number of processed chunks per second.",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "processErrorMessage",
    "memberof": "src/lib/server/QueueStream.js~QueueStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/QueueStream.js~QueueStream#processErrorMessage",
    "access": "public",
    "description": "The error message to use when processing a chunk fails. **Must be overridden by all\nsubclasses!**",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "The chunk being processed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The error message to use."
    },
    "abstract": true
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "processChunk",
    "memberof": "src/lib/server/QueueStream.js~QueueStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/QueueStream.js~QueueStream#processChunk",
    "access": "public",
    "description": "The function to call when a chunk is ready to be processed. **Must be overridden by all\nsubclasses.**",
    "examples": [
      "<caption>Basic implementation</caption>\nclass MyQueueStream extends QueueStream {\n  ...\n  processChunk(chunk, handle) {\n    client.session.doSomething((err, result, statusCode) => handle(err, statusCode, done => {\n      // This is called if err is falsy and status code is node-opcua~StatusCodes.Good\n      doSomethingWith(result);\n      done();\n    }));\n  }\n  ...\n}",
      "<caption>Implement a recursion</caption>\nclass RecursiveQueueStream extends QueueStream {\n  ...\n  processChunk(chunk, handle) {\n    client.session.doSomething((err, result, statusCode) => handle(err, statusCode, done => {\n      // Write the result back to the stream.\n      // This means, that `result` will be queued and, as soon as possible, #processChunk will\n      // be called with `result` as the `chunk` argument.\n      this.write(result, null, done);\n    }));\n  }\n  ...\n}",
      "<caption>Allowing some invalid status codes</caption>\nimport { StatusCodes } from 'node-opcua';\n\nclass FriendlyQueueStream extends QueueStream {\n  ...\n  processChunk(chunk, handle) {\n    client.session.doSomething((err, result, statusCode) => {\n      if (statusCode === StatusCodes.BadUserAccessDenied) {\n        Logger.warn(`Ignored invalid status: ${statusCode.description}`);\n        handle(err, StatusCodes.Good, done => done());\n      } else {\n        handle(err, statusCode, done => done());\n      }\n    });\n  }\n  ...\n}"
    ],
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "The chunk to process."
      },
      {
        "nullable": null,
        "types": [
          "function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)"
        ],
        "spread": false,
        "optional": false,
        "name": "handleErrors",
        "description": "Call this function to handle errors and bad status codes. When no error occured\nand the status code received is fine, `onSuccess` is called. Further processing of valid\nchunks, e.g. recursions should happen in `onSuccess`. **Note that `onSuccess` is an\nasynchronous function with a callback as an argument.**"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "_processChunk",
    "memberof": "src/lib/server/QueueStream.js~QueueStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/QueueStream.js~QueueStream#_processChunk",
    "access": "private",
    "description": "Calls {@link QueueStream#processChunk} and handles errors and invalid status codes.",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "The chunk to process."
      }
    ],
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "Emits a `processed-chunk` event once a chunk was processed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "_enqueueChunk",
    "memberof": "src/lib/server/QueueStream.js~QueueStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/QueueStream.js~QueueStream#_enqueueChunk",
    "access": "private",
    "description": "Enqueues the given chunk for processing.",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "The chunk to enqueue."
      }
    ],
    "return": null
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "_transform",
    "memberof": "src/lib/server/QueueStream.js~QueueStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/QueueStream.js~QueueStream#_transform",
    "access": "private",
    "description": "Calls {@link QueueStream#_enqueueChunk} as soon as the stream's session is opened.",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "The chunk to transform."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called once the chunk has been enqueued."
      }
    ],
    "return": null
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "_flush",
    "memberof": "src/lib/server/QueueStream.js~QueueStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/QueueStream.js~QueueStream#_flush",
    "access": "private",
    "description": "Waits for pending operations to complete.",
    "lineNumber": 216,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called once all queued chunks have been processed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "src/lib/server/ReadStream.js",
    "content": "import QueueStream from './QueueStream';\n\n/**\n * A stream that reads atvise server nodes for the {@link node-opcua~ReferenceDescription}s passed.\n */\nexport default class ReadStream extends QueueStream {\n\n  /**\n   * Returns an error message specifically for the given reference description.\n   * @param {node-opcua~ReferenceDescription} referenceDescription The reference description to get\n   * the error message for.\n   * @return {String} The specific error message.\n   */\n  processErrorMessage(referenceDescription) {\n    return `Error reading node ${referenceDescription.nodeId.toString()}`;\n  }\n\n  /**\n   * Returns a {ReadStream.ReadResult} for the given reference description.\n   * @param {node-opcua~ReferenceDescription} referenceDescription The reference description to read\n   * the atvise server node for.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk(referenceDescription, handleErrors) {\n    const nodeId = referenceDescription.nodeId;\n\n    this.session.read([{ nodeId }], (err, nodesToRead, results) => {\n      if (!err && (!results || results.length === 0)) {\n        handleErrors(new Error('No results'));\n      } else {\n        handleErrors(err, results && results.length > 0 ? results[0].statusCode : null, done => {\n          this.push({\n            nodeId,\n            value: results[0].value,\n            referenceDescription,\n            mtime: results[0].sourceTimestamp,\n          });\n          done();\n        });\n      }\n    });\n  }\n\n}\n\n/**\n * @typedef {Object} ReadStream.ReadResult\n * @property {NodeId} nodeId The read node's id.\n * @property {?node-opcua~DataValue} value The read value.\n * @property {Object} referenceDescription Additional info on the read node.\n * @property {Date} mtime The timestamp the node's value last changed.\n */\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/server/ReadStream.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "class",
    "name": "ReadStream",
    "memberof": "src/lib/server/ReadStream.js",
    "static": true,
    "longname": "src/lib/server/ReadStream.js~ReadStream",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/server/ReadStream.js",
    "importStyle": "ReadStream",
    "description": "A stream that reads atvise server nodes for the {@link node-opcua~ReferenceDescription}s passed.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/lib/server/QueueStream.js~QueueStream"
    ]
  },
  {
    "__docId__": 185,
    "kind": "typedef",
    "name": "ReadStream.ReadResult",
    "memberof": "src/lib/server/ReadStream.js",
    "static": true,
    "longname": "src/lib/server/ReadStream.js~ReadStream.ReadResult",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "NodeId"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": "The read node's id."
      },
      {
        "nullable": true,
        "types": [
          "node-opcua~DataValue"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The read value."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "referenceDescription",
        "description": "Additional info on the read node."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "mtime",
        "description": "The timestamp the node's value last changed."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ReadStream.ReadResult"
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "processErrorMessage",
    "memberof": "src/lib/server/ReadStream.js~ReadStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/ReadStream.js~ReadStream#processErrorMessage",
    "access": "public",
    "description": "Returns an error message specifically for the given reference description.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "node-opcua~ReferenceDescription"
        ],
        "spread": false,
        "optional": false,
        "name": "referenceDescription",
        "description": "The reference description to get\nthe error message for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The specific error message."
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "processChunk",
    "memberof": "src/lib/server/ReadStream.js~ReadStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/ReadStream.js~ReadStream#processChunk",
    "access": "public",
    "description": "Returns a {ReadStream.ReadResult} for the given reference description.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "node-opcua~ReferenceDescription"
        ],
        "spread": false,
        "optional": false,
        "name": "referenceDescription",
        "description": "The reference description to read\nthe atvise server node for."
      },
      {
        "nullable": null,
        "types": [
          "function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)"
        ],
        "spread": false,
        "optional": false,
        "name": "handleErrors",
        "description": "The error handler to call. See {@link QueueStream#processChunk} for details."
      }
    ],
    "return": null
  },
  {
    "__docId__": 188,
    "kind": "file",
    "name": "src/lib/server/Session.js",
    "content": "import Emitter from 'events';\nimport { StatusCodes, ClientSession } from 'node-opcua';\nimport Logger from 'gulplog';\nimport Client from './Client';\nimport ProjectConfig from '../../config/ProjectConfig';\n\n/**\n * The global EventEmitter used to emit events.\n * @type {events~Emitter}\n */\nconst emitter = new Emitter();\n\n/**\n * The currently open sessions.\n * @type {node-opcua~ClientSession[]}\n */\nconst openSessions = [];\n\n/**\n * The number of session currently being opened.\n * @type {Number}\n */\nlet openingSessions = 0;\n\n/**\n * A wrapper around {@link node-opcua~ClientSession} used to connect to atvise server.\n */\nexport default class Session {\n\n  /**\n   * An {@link events~Emitter} that emits events when creating / closing sessions.\n   * @type {events~Emitter}\n   */\n  static get emitter() {\n    return emitter;\n  }\n\n  /**\n   * Creates and opens a new {@link node-opcua~ClientSession}.\n   * @return {Promise<node-opcua~ClientSession, Error>} Fulfilled with an already opened\n   * {@link node-opcua~ClientSession}.\n   * @emits {undefined} Emits an `all-open` event once all opening sessions are open.\n   */\n  static create() {\n    openingSessions++;\n\n    return Client.create()\n      .then(client => new Promise((resolve, reject) => {\n        client.createSession({\n          userName: ProjectConfig.login.username,\n          password: ProjectConfig.login.password,\n        }, (err, session) => {\n          if (err) {\n            if (\n              [\n                'userName === null || typeof userName === \"string\"',\n                'password === null || typeof password === \"string\"',\n              ].includes(err.message) ||\n              (err.response &&\n              err.response.responseHeader.serviceResult === StatusCodes.BadUserAccessDenied)\n            ) {\n              reject(new Error('Unable to create session: Invalid login'));\n            } else {\n              reject(new Error(`Unable to create session: ${err.message}`));\n            }\n          } else {\n            Object.assign(session, { _emitter: new Emitter() });\n\n            openSessions.push(session);\n            resolve(session);\n          }\n\n          openingSessions--;\n          if (openingSessions === 0) {\n            emitter.emit('all-open');\n          }\n        });\n      }));\n  }\n\n  /**\n   * Closes the given session.\n   * @param {node-opcua~ClientSession} session The session to close.\n   * @param {Boolean} [deleteSubscriptions=true] If active subscriptions should be closed as well.\n   * @return {Promise<node-opcua~ClientSession, Error>} Fulfilled with the (now closed!) session or\n   * rejected with the error that occured while closing.\n   */\n  static close(session, deleteSubscriptions = true) {\n    if (!session || !(session instanceof ClientSession)) {\n      return Promise.reject(new Error('session is required'));\n    }\n\n    if (session._closed) {\n      return Promise.resolve();\n    }\n\n    if (session._closing) {\n      return new Promise(resolve => {\n        session._emitter.on('fully-closed', () => resolve(session));\n      });\n    }\n\n    Object.assign(session, { _closing: true });\n\n    return new Promise((resolve, reject) => {\n      function markAsClosed() {\n        openSessions.splice(openSessions.indexOf(session), 1);\n        Object.assign(session, { _closed: true });\n\n        resolve(session);\n        session._emitter.emit('fully-closed');\n      }\n\n      session.close(deleteSubscriptions, err => {\n        if (err) {\n          if (err.response &&\n            err.response.responseHeader.serviceResult === StatusCodes.BadSessionIdInvalid\n          ) {\n            Logger.debug('Attempted to close a session that does not exist');\n            markAsClosed(session);\n          } else if (err.message === 'no channel') {\n            // Client already disconnected\n            markAsClosed(session);\n          } else {\n            reject(new Error(`Unable to close session: ${err.message}`));\n          }\n        } else {\n          session._client.disconnect(clientErr => {\n            if (clientErr) {\n              reject(new Error(`Unable to disconnect client: ${clientErr.message}`));\n            } else {\n              markAsClosed(session);\n            }\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * The sessions currently open.\n   * @type {Session[]}\n   */\n  static get open() {\n    return openSessions;\n  }\n\n  /**\n   * Closes all open sessions.\n   * @return {Promise<Error, Session[]>} Rejected with the error that occurred while closing the\n   * sessions or fulfilled with the (now closed) sessions affected.\n   */\n  static closeOpen() {\n    function closeSessions(sessions) {\n      return Promise.all(\n        sessions.map(session => Session.close(session))\n      );\n    }\n\n    if (openingSessions === 0) {\n      if (openSessions.length === 0) {\n        return Promise.resolve([]);\n      }\n\n      return closeSessions(openSessions);\n    }\n\n    return new Promise((resolve, reject) => {\n      emitter.once('all-open', () => {\n        closeSessions(openSessions)\n          .then(resolve, reject);\n      });\n    });\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/server/Session.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "emitter",
    "memberof": "src/lib/server/Session.js",
    "static": true,
    "longname": "src/lib/server/Session.js~emitter",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/Session.js",
    "importStyle": null,
    "description": "The global EventEmitter used to emit events.",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "events~Emitter"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "openSessions",
    "memberof": "src/lib/server/Session.js",
    "static": true,
    "longname": "src/lib/server/Session.js~openSessions",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/Session.js",
    "importStyle": null,
    "description": "The currently open sessions.",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "node-opcua~ClientSession[]"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "name": "openingSessions",
    "memberof": "src/lib/server/Session.js",
    "static": true,
    "longname": "src/lib/server/Session.js~openingSessions",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/Session.js",
    "importStyle": null,
    "description": "The number of session currently being opened.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "class",
    "name": "Session",
    "memberof": "src/lib/server/Session.js",
    "static": true,
    "longname": "src/lib/server/Session.js~Session",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/server/Session.js",
    "importStyle": "Session",
    "description": "A wrapper around {@link node-opcua~ClientSession} used to connect to atvise server.",
    "lineNumber": 28,
    "interface": false
  },
  {
    "__docId__": 193,
    "kind": "get",
    "name": "emitter",
    "memberof": "src/lib/server/Session.js~Session",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/Session.js~Session.emitter",
    "access": "public",
    "description": "An {@link events~Emitter} that emits events when creating / closing sessions.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "events~Emitter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "create",
    "memberof": "src/lib/server/Session.js~Session",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/Session.js~Session.create",
    "access": "public",
    "description": "Creates and opens a new {@link node-opcua~ClientSession}.",
    "lineNumber": 44,
    "return": {
      "nullable": null,
      "types": [
        "Promise<node-opcua~ClientSession, Error>"
      ],
      "spread": false,
      "description": "Fulfilled with an already opened\n{@link node-opcua~ClientSession}."
    },
    "emits": [
      {
        "types": [
          "undefined"
        ],
        "description": "Emits an `all-open` event once all opening sessions are open."
      }
    ],
    "params": []
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "close",
    "memberof": "src/lib/server/Session.js~Session",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/Session.js~Session.close",
    "access": "public",
    "description": "Closes the given session.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "node-opcua~ClientSession"
        ],
        "spread": false,
        "optional": false,
        "name": "session",
        "description": "The session to close."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "deleteSubscriptions",
        "description": "If active subscriptions should be closed as well."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<node-opcua~ClientSession, Error>"
      ],
      "spread": false,
      "description": "Fulfilled with the (now closed!) session or\nrejected with the error that occured while closing."
    }
  },
  {
    "__docId__": 196,
    "kind": "get",
    "name": "open",
    "memberof": "src/lib/server/Session.js~Session",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/Session.js~Session.open",
    "access": "public",
    "description": "The sessions currently open.",
    "lineNumber": 144,
    "type": {
      "nullable": null,
      "types": [
        "Session[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "closeOpen",
    "memberof": "src/lib/server/Session.js~Session",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/server/Session.js~Session.closeOpen",
    "access": "public",
    "description": "Closes all open sessions.",
    "lineNumber": 153,
    "return": {
      "nullable": null,
      "types": [
        "Promise<Error, Session[]>"
      ],
      "spread": false,
      "description": "Rejected with the error that occurred while closing the\nsessions or fulfilled with the (now closed) sessions affected."
    },
    "params": []
  },
  {
    "__docId__": 198,
    "kind": "file",
    "name": "src/lib/server/Stream.js",
    "content": "import { ctor as throughStreamClass } from 'through2';\nimport Session from './Session';\n\n/**\n * An object transform stream connected to atvise server.\n */\nexport default class Stream extends throughStreamClass({ objectMode: true }) {\n\n  /**\n   * Creates a new Stream and starts opening a new session to atvise server.\n   * @param {Object} [options] The options to use. See\n   * [through2 documentation](https://github.com/rvagg/through2#options) for details.\n   * @param {Boolean} [options.keepSessionAlive=false] If the ativse server session should be closed\n   * one the stream ends.\n   * @emits {Session} Emits an `session-open` event once the session is open, passing the Session\n   * instance.\n   */\n  constructor(options = {}) {\n    super(options);\n\n    /**\n     * `true` if the stream's atvise server session should be kept alive once the stream ends.\n     * @type {Boolean}\n     */\n    this._keepSessionAlive = options.keepSessionAlive || false;\n\n    Session.create()\n      .then(session => (this.session = session))\n      .then(session => this.emit('session-open', session))\n      .catch(err => this.emit('error', err));\n  }\n\n  /**\n   * Called just before the stream is closed: Closes the open session.\n   * @param {function(err: ?Error, data: Object)} callback Called once the session is closed.\n   */\n  _flush(callback) {\n    if (this.session && !this._keepSessionAlive) {\n      Session.close(this.session)\n        .then(() => callback())\n        .catch(err => callback(err));\n    } else {\n      callback();\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/server/Stream.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 199,
    "kind": "class",
    "name": "Stream",
    "memberof": "src/lib/server/Stream.js",
    "static": true,
    "longname": "src/lib/server/Stream.js~Stream",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/server/Stream.js",
    "importStyle": "Stream",
    "description": "An object transform stream connected to atvise server.",
    "lineNumber": 7,
    "interface": false,
    "expressionExtends": "throughStreamClass({ objectMode: true })"
  },
  {
    "__docId__": 200,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/server/Stream.js~Stream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Stream.js~Stream#constructor",
    "access": "public",
    "description": "Creates a new Stream and starts opening a new session to atvise server.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options to use. See\n[through2 documentation](https://github.com/rvagg/through2#options) for details."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.keepSessionAlive",
        "description": "If the ativse server session should be closed\none the stream ends."
      }
    ],
    "emits": [
      {
        "types": [
          "Session"
        ],
        "description": "Emits an `session-open` event once the session is open, passing the Session\ninstance."
      }
    ]
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "_keepSessionAlive",
    "memberof": "src/lib/server/Stream.js~Stream",
    "static": false,
    "longname": "src/lib/server/Stream.js~Stream#_keepSessionAlive",
    "access": "private",
    "description": "`true` if the stream's atvise server session should be kept alive once the stream ends.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "_flush",
    "memberof": "src/lib/server/Stream.js~Stream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Stream.js~Stream#_flush",
    "access": "private",
    "description": "Called just before the stream is closed: Closes the open session.",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called once the session is closed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "file",
    "name": "src/lib/server/Types.js",
    "content": "import { DataType } from 'node-opcua';\nimport NodeId from '../server/NodeId';\n\n/**\n * Special, atvise releated OPC-UA type.\n */\nclass AtviseType {\n\n  /**\n   * Creates a new atvise type.\n   * @param {String} nodeIdValue The type's OPC-UA node id value.\n   * @param {String} identifier Atscm's identifier for the new type.\n   * @param {node-opcua~DataType} dataType The type's parent OPC-UA type.\n   * @param {String|Boolean} [fileExtensionOrKeep] The file extension to use when storing or `true`\n   * or `false` indicating if the extension should be kept.\n   */\n  constructor(nodeIdValue, identifier, dataType, fileExtensionOrKeep) {\n    /**\n     * Node id of the type's definition\n     * @type {node-opcua~NodeId}\n     */\n    this.typeDefinition = new NodeId(`VariableTypes.ATVISE.${nodeIdValue}`);\n\n    /**\n     * Atscm's identifier for the type.\n     * @type {String}\n     */\n    this.identifier = identifier;\n    /**\n     * The type's parent OPC-UA type.\n     * @type {node-opcua~DataType}\n     */\n    this.dataType = dataType;\n    if (fileExtensionOrKeep !== undefined) {\n      if (typeof fileExtensionOrKeep === 'string') {\n        /**\n         * The file extension to use when storing.\n         * @type {String}\n         */\n        this.fileExtension = fileExtensionOrKeep;\n      } else {\n        /**\n         * If the extension should be kept when storing.\n         * @type {Boolean}\n         */\n        this.keepExtension = fileExtensionOrKeep;\n      }\n    }\n  }\n\n}\n\n/**\n * An atvise-related resource type.\n */\nclass AtviseResourceType extends AtviseType {\n\n  /**\n   * Creates a new resource type.\n   * @param {String} name The type's OPC-UA node id value.\n   * @param {String} identifier Atscm's identifier for the new type.\n   */\n  constructor(name, identifier) {\n    super(`Resource.${name}`, identifier, DataType.ByteString, true);\n  }\n\n}\n\n/**\n * The atvise types to handle. **Ordering matters:** The {@link MappingTransformer} takes the first\n * match, therefore **plain types should always come before resource types!**\n * @type {AtviseType[]}\n */\nconst AtviseTypes = [\n  new AtviseType('HtmlHelp', 'help', DataType.ByteString, 'html'),\n  new AtviseType('QuickDynamic', 'qd', DataType.XmlElement),\n  new AtviseType('ScriptCode', 'script', DataType.XmlElement),\n  new AtviseType('Display', 'display', DataType.XmlElement),\n  new AtviseType('TranslationTable', 'locs', DataType.XmlElement),\n  new AtviseResourceType('Pdf', 'pdf'),\n  new AtviseResourceType('Html', 'html'),\n  new AtviseResourceType('Javascript', 'js'),\n  new AtviseResourceType('Wave', 'wav'),\n  new AtviseResourceType('Gif', 'gif'),\n  new AtviseResourceType('Png', 'png'),\n  new AtviseResourceType('Aac', 'm4a'),\n  new AtviseResourceType('Ogg', 'ogg'),\n  new AtviseResourceType('Icon', 'ico'),\n  new AtviseResourceType('Css', 'css'),\n  new AtviseResourceType('Svg', 'svg'),\n  new AtviseResourceType('Jpeg', 'jpg'),\n  new AtviseResourceType('OctetStream', '*'),\n];\n\nexport default AtviseTypes;\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/server/Types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 204,
    "kind": "class",
    "name": "AtviseType",
    "memberof": "src/lib/server/Types.js",
    "static": true,
    "longname": "src/lib/server/Types.js~AtviseType",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/Types.js",
    "importStyle": null,
    "description": "Special, atvise releated OPC-UA type.",
    "lineNumber": 7,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 205,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/server/Types.js~AtviseType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Types.js~AtviseType#constructor",
    "access": "public",
    "description": "Creates a new atvise type.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeIdValue",
        "description": "The type's OPC-UA node id value."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "identifier",
        "description": "Atscm's identifier for the new type."
      },
      {
        "nullable": null,
        "types": [
          "node-opcua~DataType"
        ],
        "spread": false,
        "optional": false,
        "name": "dataType",
        "description": "The type's parent OPC-UA type."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "fileExtensionOrKeep",
        "description": "The file extension to use when storing or `true`\nor `false` indicating if the extension should be kept."
      }
    ]
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "typeDefinition",
    "memberof": "src/lib/server/Types.js~AtviseType",
    "static": false,
    "longname": "src/lib/server/Types.js~AtviseType#typeDefinition",
    "access": "public",
    "description": "Node id of the type's definition",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "node-opcua~NodeId"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "identifier",
    "memberof": "src/lib/server/Types.js~AtviseType",
    "static": false,
    "longname": "src/lib/server/Types.js~AtviseType#identifier",
    "access": "public",
    "description": "Atscm's identifier for the type.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "dataType",
    "memberof": "src/lib/server/Types.js~AtviseType",
    "static": false,
    "longname": "src/lib/server/Types.js~AtviseType#dataType",
    "access": "public",
    "description": "The type's parent OPC-UA type.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "node-opcua~DataType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "fileExtension",
    "memberof": "src/lib/server/Types.js~AtviseType",
    "static": false,
    "longname": "src/lib/server/Types.js~AtviseType#fileExtension",
    "access": "public",
    "description": "The file extension to use when storing.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "keepExtension",
    "memberof": "src/lib/server/Types.js~AtviseType",
    "static": false,
    "longname": "src/lib/server/Types.js~AtviseType#keepExtension",
    "access": "public",
    "description": "If the extension should be kept when storing.",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 211,
    "kind": "class",
    "name": "AtviseResourceType",
    "memberof": "src/lib/server/Types.js",
    "static": true,
    "longname": "src/lib/server/Types.js~AtviseResourceType",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/server/Types.js",
    "importStyle": null,
    "description": "An atvise-related resource type.",
    "lineNumber": 56,
    "interface": false,
    "extends": [
      "AtviseType"
    ],
    "ignore": true
  },
  {
    "__docId__": 212,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/server/Types.js~AtviseResourceType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Types.js~AtviseResourceType#constructor",
    "access": "public",
    "description": "Creates a new resource type.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The type's OPC-UA node id value."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "identifier",
        "description": "Atscm's identifier for the new type."
      }
    ]
  },
  {
    "__docId__": 213,
    "kind": "variable",
    "name": "AtviseTypes",
    "memberof": "src/lib/server/Types.js",
    "static": true,
    "longname": "src/lib/server/Types.js~AtviseTypes",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/server/Types.js",
    "importStyle": "AtviseTypes",
    "description": "The atvise types to handle. **Ordering matters:** The {@link MappingTransformer} takes the first\nmatch, therefore **plain types should always come before resource types!**",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "AtviseType[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 214,
    "kind": "file",
    "name": "src/lib/server/Watcher.js",
    "content": "import Emitter from 'events';\nimport {\n  ClientSubscription,\n  AttributeIds,\n  subscription_service as SubscriptionService,\n  StatusCodes,\n} from 'node-opcua';\nimport ProjectConfig from '../../config/ProjectConfig';\nimport NodeStream from './NodeStream';\nimport QueueStream from './QueueStream';\nimport Session from './Session';\n\n/**\n * A stream that monitors changes in the read nodes.\n */\nexport class SubscribeStream extends QueueStream {\n\n  /**\n   * Creates a new SubscribeStream based on some options.\n   * @param {Object} options The stream options to apply.\n   */\n  constructor(options = {}) {\n    super(Object.assign(options, { keepSessionAlive: true })); // FIXME: Option not handled.\n\n    /**\n     * Set to true once all nodes are monitored.\n     * @type {Boolean}\n     */\n    this._trackChanges = false;\n\n    this.once('session-open', () => this.createSubscription());\n  }\n\n  /**\n   * Creates the server subscription to monitor nodes with.\n   * @emit {node-opcua~ClientSubscription} Emits a `subscription-started` event once the\n   * subscription started.\n   */\n  createSubscription() {\n    const subscription = new ClientSubscription(this.session, {\n      requestedPublishingInterval: 100,\n      requestedLifetimeCount: 1000,\n      requestedMaxKeepAliveCount: 12,\n      maxNotificationsPerPublish: 10,\n      publishingEnabled: true,\n      priority: 10,\n    });\n\n    subscription.on('started', () => {\n      /**\n       * The {@link node-opcua~ClientSubscription} to use to monitor nodes.\n       * @type {node-opcua~ClientSubscription}\n       */\n      this.subscription = subscription;\n      this.emit('subscription-started', subscription);\n    });\n\n    subscription.on('failure', err => this.emit('error', err));\n  }\n\n  /**\n   * Returns an error message specifically for the given reference description.\n   * @param {node-opcua~ReferenceDescription} referenceDescription The reference description to get\n   * the error message for.\n   * @return {String} The specific error message.\n   */\n  processErrorMessage(referenceDescription) {\n    return `Error reading node ${referenceDescription.nodeId.toString()}`;\n  }\n\n  /**\n   * Monitors the nodes specified by a {@link node-opcua~ReferenceDescription}.\n   * @param {node-opcua~ReferenceDescription} referenceDescription The refernce description to use.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk(referenceDescription, handleErrors) {\n    const nodeId = referenceDescription.nodeId;\n\n    const item = this.subscription.monitor({\n      nodeId,\n      attributeId: AttributeIds.Value,\n    }, {\n      clientHandle: 13,\n      samplingInterval: 250,\n      queueSize: 1,\n      discardOldest: true,\n    }, SubscriptionService.TimestampsToReturn.Both);\n\n    item.on('changed', dataValue => {\n      if (!this._trackChanges) {\n        handleErrors(null, StatusCodes.Good, done => done()); // Ignore first notification\n      } else {\n        this.emit('change', {\n          nodeId,\n          value: dataValue.value,\n          referenceDescription,\n          mtime: dataValue.serverTimestamp,\n        });\n      }\n    });\n\n    item.on('err', err => {\n      /*\n       This works around a bug in node-opcua:\n       Instead of a error a string is emitted\n       FIXME: Remove once bug is fixed\n       */\n      if (err instanceof Error) {\n        handleErrors(err);\n      } else {\n        handleErrors(new Error(err));\n      }\n    });\n  }\n\n  /**\n   * Buffers all read node descriptions until the subscription started, then calls\n   * {@link QueueStream#_enqueueChunk} with them.\n   * @param {node-opcua~ReferenceDescription} desc Reference description of the node to transform.\n   * @param {String} enc The encoding used.\n   * @param {function(err: ?Error)} callback Called with the error that occured while trying to\n   * monitor the given node.\n   */\n  _transform(desc, enc, callback) {\n    if (this.subscription) {\n      this._enqueueChunk(desc);\n      callback();\n    } else {\n      this.once('subscription-started', () => {\n        this._enqueueChunk(desc);\n        callback();\n      });\n    }\n  }\n\n  /**\n   * Starts tracking node changes.\n   * @param {function(err: ?Error)} callback Called once flushing is complete.\n   */\n  _flush(callback) {\n    super._flush(err => {\n      this._trackChanges = true;\n      callback(err);\n    });\n  }\n\n}\n\n/**\n * Watches the given nodes for value changes.\n * @emit {ReadStream.ReadResult} Emits `change` events when a watched node changes.\n */\nexport default class Watcher extends Emitter {\n\n  /**\n   * Creates a new Watcher with the given nodes.\n   * @param {NodeId[]} nodes The nodes to watch (recursively).\n   */\n  constructor(nodes = ProjectConfig.nodesToWatch) {\n    super();\n\n    /**\n     * The node stream that discovers the nodes to watch.\n     * @type {NodeStream}\n     */\n    this._nodeStream = new NodeStream(nodes)\n      .on('error', err => this.emit('error', err));\n\n    /**\n     * The stream that starts monitoring the nodes to watch.\n     * @type {SubscribeStream}\n     */\n    this._subscribeStream = new SubscribeStream()\n      .on('error', err => this.emit('error', err));\n\n    this._nodeStream.pipe(this._subscribeStream);\n\n    this._subscribeStream.on('finish', () => this.emit('ready'));\n    this._subscribeStream.on('change', event => this.emit('change', event));\n  }\n\n  /**\n   * Ends monitoring nodes.\n   */\n  close() {\n    if (this._subscribeStream.session) {\n      Session.close(this._subscribeStream.session)\n        .catch(err => this.emit('error', err));\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/server/Watcher.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "class",
    "name": "SubscribeStream",
    "memberof": "src/lib/server/Watcher.js",
    "static": true,
    "longname": "src/lib/server/Watcher.js~SubscribeStream",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/server/Watcher.js",
    "importStyle": "{SubscribeStream}",
    "description": "A stream that monitors changes in the read nodes.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "src/lib/server/QueueStream.js~QueueStream"
    ]
  },
  {
    "__docId__": 216,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/server/Watcher.js~SubscribeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Watcher.js~SubscribeStream#constructor",
    "access": "public",
    "description": "Creates a new SubscribeStream based on some options.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The stream options to apply."
      }
    ]
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "_trackChanges",
    "memberof": "src/lib/server/Watcher.js~SubscribeStream",
    "static": false,
    "longname": "src/lib/server/Watcher.js~SubscribeStream#_trackChanges",
    "access": "private",
    "description": "Set to true once all nodes are monitored.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "createSubscription",
    "memberof": "src/lib/server/Watcher.js~SubscribeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Watcher.js~SubscribeStream#createSubscription",
    "access": "public",
    "description": "Creates the server subscription to monitor nodes with.",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@emit",
        "tagValue": "{node-opcua~ClientSubscription} Emits a `subscription-started` event once the\nsubscription started."
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "subscription",
    "memberof": "src/lib/server/Watcher.js~SubscribeStream",
    "static": false,
    "longname": "src/lib/server/Watcher.js~SubscribeStream#subscription",
    "access": "public",
    "description": "The {@link node-opcua~ClientSubscription} to use to monitor nodes.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "node-opcua~ClientSubscription"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "processErrorMessage",
    "memberof": "src/lib/server/Watcher.js~SubscribeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Watcher.js~SubscribeStream#processErrorMessage",
    "access": "public",
    "description": "Returns an error message specifically for the given reference description.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "node-opcua~ReferenceDescription"
        ],
        "spread": false,
        "optional": false,
        "name": "referenceDescription",
        "description": "The reference description to get\nthe error message for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The specific error message."
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "processChunk",
    "memberof": "src/lib/server/Watcher.js~SubscribeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Watcher.js~SubscribeStream#processChunk",
    "access": "public",
    "description": "Monitors the nodes specified by a {@link node-opcua~ReferenceDescription}.",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "node-opcua~ReferenceDescription"
        ],
        "spread": false,
        "optional": false,
        "name": "referenceDescription",
        "description": "The refernce description to use."
      },
      {
        "nullable": null,
        "types": [
          "function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)"
        ],
        "spread": false,
        "optional": false,
        "name": "handleErrors",
        "description": "The error handler to call. See {@link QueueStream#processChunk} for details."
      }
    ],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "_transform",
    "memberof": "src/lib/server/Watcher.js~SubscribeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Watcher.js~SubscribeStream#_transform",
    "access": "private",
    "description": "Buffers all read node descriptions until the subscription started, then calls\n{@link QueueStream#_enqueueChunk} with them.",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "node-opcua~ReferenceDescription"
        ],
        "spread": false,
        "optional": false,
        "name": "desc",
        "description": "Reference description of the node to transform."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured while trying to\nmonitor the given node."
      }
    ],
    "return": null
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "_flush",
    "memberof": "src/lib/server/Watcher.js~SubscribeStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Watcher.js~SubscribeStream#_flush",
    "access": "private",
    "description": "Starts tracking node changes.",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(err: ?Error)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called once flushing is complete."
      }
    ],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "class",
    "name": "Watcher",
    "memberof": "src/lib/server/Watcher.js",
    "static": true,
    "longname": "src/lib/server/Watcher.js~Watcher",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/server/Watcher.js",
    "importStyle": "Watcher",
    "description": "Watches the given nodes for value changes.",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@emit",
        "tagValue": "{ReadStream.ReadResult} Emits `change` events when a watched node changes."
      }
    ],
    "interface": false,
    "extends": [
      "events~Emitter"
    ]
  },
  {
    "__docId__": 226,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/server/Watcher.js~Watcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Watcher.js~Watcher#constructor",
    "access": "public",
    "description": "Creates a new Watcher with the given nodes.",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "NodeId[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": "The nodes to watch (recursively)."
      }
    ]
  },
  {
    "__docId__": 227,
    "kind": "member",
    "name": "_nodeStream",
    "memberof": "src/lib/server/Watcher.js~Watcher",
    "static": false,
    "longname": "src/lib/server/Watcher.js~Watcher#_nodeStream",
    "access": "private",
    "description": "The node stream that discovers the nodes to watch.",
    "lineNumber": 167,
    "type": {
      "nullable": null,
      "types": [
        "NodeStream"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "_subscribeStream",
    "memberof": "src/lib/server/Watcher.js~Watcher",
    "static": false,
    "longname": "src/lib/server/Watcher.js~Watcher#_subscribeStream",
    "access": "private",
    "description": "The stream that starts monitoring the nodes to watch.",
    "lineNumber": 174,
    "type": {
      "nullable": null,
      "types": [
        "SubscribeStream"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "close",
    "memberof": "src/lib/server/Watcher.js~Watcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/Watcher.js~Watcher#close",
    "access": "public",
    "description": "Ends monitoring nodes.",
    "lineNumber": 186,
    "params": [],
    "return": null
  },
  {
    "__docId__": 230,
    "kind": "file",
    "name": "src/lib/server/WriteStream.js",
    "content": "import Logger from 'gulplog';\nimport { StatusCodes } from 'node-opcua';\nimport QueueStream from './QueueStream';\n\n/**\n * A stream that writes all read {@link AtviseFile}s to their corresponding nodes on atvise server.\n */\nexport default class WriteStream extends QueueStream {\n\n  /**\n   * The error message to use when writing a file fails.\n   * @param {AtviseFile} file The file being processed.\n   * @return {String} The error message to use.\n   */\n  processErrorMessage(file) {\n    return `Error writing ${file.nodeId.toString()}`;\n  }\n\n  /**\n   * Writes an {@link AtviseFile} to it's corresponding node on atvise server.\n   * @param {AtviseFile} file The file to write.\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\n   */\n  processChunk(file, handleErrors) {\n    try {\n      this.session.writeSingleNode(file.nodeId.toString(), {\n        dataType: file.dataType,\n        arrayType: file.arrayType,\n        value: file.value,\n      }, (err, statusCode) => {\n        if (statusCode === StatusCodes.BadUserAccessDenied) {\n          Logger.warn(`Error writing node ${\n            file.nodeId.toString()\n          }: Make sure it is not opened in atvise builder`);\n          handleErrors(err, StatusCodes.Good, done => done());\n        } else {\n          handleErrors(err, statusCode, done => {\n            this.push(file);\n            done();\n          });\n        }\n      });\n    } catch (e) {\n      handleErrors(e);\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/server/WriteStream.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "class",
    "name": "WriteStream",
    "memberof": "src/lib/server/WriteStream.js",
    "static": true,
    "longname": "src/lib/server/WriteStream.js~WriteStream",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/server/WriteStream.js",
    "importStyle": "WriteStream",
    "description": "A stream that writes all read {@link AtviseFile}s to their corresponding nodes on atvise server.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/lib/server/QueueStream.js~QueueStream"
    ]
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "processErrorMessage",
    "memberof": "src/lib/server/WriteStream.js~WriteStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/WriteStream.js~WriteStream#processErrorMessage",
    "access": "public",
    "description": "The error message to use when writing a file fails.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file being processed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The error message to use."
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "processChunk",
    "memberof": "src/lib/server/WriteStream.js~WriteStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/server/WriteStream.js~WriteStream#processChunk",
    "access": "public",
    "description": "Writes an {@link AtviseFile} to it's corresponding node on atvise server.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to write."
      },
      {
        "nullable": null,
        "types": [
          "function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)"
        ],
        "spread": false,
        "optional": false,
        "name": "handleErrors",
        "description": "The error handler to call. See {@link QueueStream#processChunk} for details."
      }
    ],
    "return": null
  },
  {
    "__docId__": 234,
    "kind": "file",
    "name": "src/lib/transform/PartialTransformer.js",
    "content": "import filter from 'gulp-filter';\nimport Transformer from './Transformer';\n\n/**\n * A transformer that transforms only some of the files read.\n * @abstract\n */\nexport default class PartialTransformer extends Transformer {\n\n  /**\n   * Creates a new partial transformer with the specified options.\n   * @param {Object} options The options to use. See {@link Transformer#constructor} for available\n   * options.\n   */\n  constructor(options = {}) {\n    super(options);\n\n    /**\n     * The filter stream used.\n     * @type {Stream}\n     */\n    this.filter = filter(file => this.shouldBeTransformed(file), { restore: true });\n  }\n\n  /**\n   * `true` if `file` should be transformed.\n   * @param {AtviseFile} file The file to transform or not.\n   * @abstract\n   */\n  shouldBeTransformed(file) { // eslint-disable-line no-unused-vars\n    throw new Error('PartialTransformer#shouldBeTransformed must be implemented by all subclasses');\n  }\n\n  /**\n   * Transforms a file if {@link PartialTransformer#shouldBeTransformed} returns `true`.\n   * @param {AtviseFile} file The file to transform.\n   * @param {String} enc The encoding used.\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Called with the error that occured\n   * while transforming or (optionally) the transformed file.\n   */\n  _transform(file, enc, callback) {\n    if (this.shouldBeTransformed(file)) {\n      super._transform(file, enc, callback);\n    } else {\n      callback(null, file);\n    }\n  }\n\n  /**\n   * Applies the transformer to the given stream. It does so by running the following steps:\n   *  - Pipe the {@link PartialTransformer#filter} stream\n   *  - If PartialTransformer#applyToFilteredStream is overrridden, apply it.\n   *  - Otherwise pipe {@link Transformer#withDirection}.\n   *  - Restore the filter stream\n   * @param {Stream} stream The stream to apply the transformer to.\n   * @param {TransformDirection} direction The direction to use.\n   * @return {Stream} The resulting stream.\n   */\n  applyToStream(stream, direction) {\n    const filteredStream = stream.pipe(this.filter);\n\n    return (this.applyToFilteredStream(filteredStream, direction) ||\n      filteredStream.pipe(this.withDirection(direction)))\n      .pipe(this.filter.restore);\n  }\n\n  /**\n   * Applies a stream transformer to the given, already filtered stream. Override this method if you\n   * want to pipe streams directly. Returning a falsy value (e.g. false, null, undefined) invokes\n   * {@link Transformer#transformFromDB} or {@link Transformer#transformFromFilesystem} instead.\n   * @param {Stream} stream The stream to apply the transformer to.\n   * @param {TransformDirection} direction The direction to use.\n   * @return {?Stream} The resulting stream.\n   */\n  applyToFilteredStream(stream, direction) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/transform/PartialTransformer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 235,
    "kind": "class",
    "name": "PartialTransformer",
    "memberof": "src/lib/transform/PartialTransformer.js",
    "static": true,
    "longname": "src/lib/transform/PartialTransformer.js~PartialTransformer",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/transform/PartialTransformer.js",
    "importStyle": "PartialTransformer",
    "description": "A transformer that transforms only some of the files read.",
    "lineNumber": 8,
    "abstract": true,
    "interface": false,
    "extends": [
      "src/lib/transform/Transformer.js~Transformer"
    ]
  },
  {
    "__docId__": 236,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/transform/PartialTransformer.js~PartialTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/PartialTransformer.js~PartialTransformer#constructor",
    "access": "public",
    "description": "Creates a new partial transformer with the specified options.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to use. See {@link Transformer#constructor} for available\noptions."
      }
    ]
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "filter",
    "memberof": "src/lib/transform/PartialTransformer.js~PartialTransformer",
    "static": false,
    "longname": "src/lib/transform/PartialTransformer.js~PartialTransformer#filter",
    "access": "public",
    "description": "The filter stream used.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Stream"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "shouldBeTransformed",
    "memberof": "src/lib/transform/PartialTransformer.js~PartialTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/PartialTransformer.js~PartialTransformer#shouldBeTransformed",
    "access": "public",
    "description": "`true` if `file` should be transformed.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to transform or not."
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "_transform",
    "memberof": "src/lib/transform/PartialTransformer.js~PartialTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/PartialTransformer.js~PartialTransformer#_transform",
    "access": "private",
    "description": "Transforms a file if {@link PartialTransformer#shouldBeTransformed} returns `true`.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to transform."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: ?AtviseFile)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured\nwhile transforming or (optionally) the transformed file."
      }
    ],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "applyToStream",
    "memberof": "src/lib/transform/PartialTransformer.js~PartialTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/PartialTransformer.js~PartialTransformer#applyToStream",
    "access": "public",
    "description": "Applies the transformer to the given stream. It does so by running the following steps:\n - Pipe the {@link PartialTransformer#filter} stream\n - If PartialTransformer#applyToFilteredStream is overrridden, apply it.\n - Otherwise pipe {@link Transformer#withDirection}.\n - Restore the filter stream",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "The stream to apply the transformer to."
      },
      {
        "nullable": null,
        "types": [
          "TransformDirection"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "The direction to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Stream"
      ],
      "spread": false,
      "description": "The resulting stream."
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "applyToFilteredStream",
    "memberof": "src/lib/transform/PartialTransformer.js~PartialTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/PartialTransformer.js~PartialTransformer#applyToFilteredStream",
    "access": "public",
    "description": "Applies a stream transformer to the given, already filtered stream. Override this method if you\nwant to pipe streams directly. Returning a falsy value (e.g. false, null, undefined) invokes\n{@link Transformer#transformFromDB} or {@link Transformer#transformFromFilesystem} instead.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "The stream to apply the transformer to."
      },
      {
        "nullable": null,
        "types": [
          "TransformDirection"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "The direction to use."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "Stream"
      ],
      "spread": false,
      "description": "The resulting stream."
    }
  },
  {
    "__docId__": 242,
    "kind": "file",
    "name": "src/lib/transform/SplittingTransformer.js",
    "content": "import { readdir } from 'fs';\nimport { extname, basename, join } from 'path';\nimport Logger from 'gulplog';\nimport PartialTransformer from './PartialTransformer';\nimport AtviseFile from '../server/AtviseFile';\n\n/**\n * Determines which files are needed to create a combined file and stores these files as long as\n * some of them are missing.\n */\nexport class CombineFilesCache {\n\n  /**\n   * Creates a new DisplayCache.\n   */\n  constructor() {\n    /**\n     * The files caches for the given path.\n     * @type {Map<String, vinyl~File>}\n     */\n    this._files = {};\n\n    /**\n     * The extensions of the files required.\n     * @type {String[]}\n     */\n    this._required = {};\n  }\n\n  /**\n   * Returns the extensions of the missing files for the given `dirname`.\n   * @param {String} dirname The cache key to look for.\n   * @return {String[]} Extensions of the missing files.\n   */\n  missingExtensions(dirname) {\n    const required = this._required[dirname];\n    const files = this._files[dirname];\n\n    return required.filter(ext => files[ext] === undefined);\n  }\n\n  /**\n   * Checks if, when `file` is added, all required files are cached.\n   * @param {vinyl~File} file The file to add before checking.\n   * @param {function(err: ?Error, files: ?Map<String, vinyl~File>)} callback Called with the error\n   * that occured while checking or all files related to `file` if all required files are already\n   * cached.\n   */\n  gotAllFiles(file, callback) {\n    const dirname = file.dirname;\n\n    if (!this._required[dirname]) {\n      readdir(dirname, (err, files) => {\n        if (err) {\n          callback(err);\n        } else {\n          this._files[dirname] = {};\n          this._required[dirname] = files\n            .filter(name => name[0] !== '.')\n            .map(name => extname(name));\n\n          this.gotAllFiles(file, callback);\n        }\n      });\n    } else {\n      this._files[dirname][file.extname] = file;\n\n      if (this.missingExtensions(dirname).length === 0) {\n        const files = this._files[dirname];\n        callback(null, files);\n\n        delete this._files[dirname];\n        delete this._required[dirname];\n      } else {\n        callback(null);\n      }\n    }\n  }\n\n}\n\n/**\n * A transformer that splits files into multiple others.\n * @abstract\n */\nexport default class SplittingTransformer extends PartialTransformer {\n\n  /**\n   * Creates a new SplittingTransformer.\n   * @param {Object} options The options to apply.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * The cache used when collecting files to combine.\n     * @type {CombineFilesCache}\n     */\n    this._combineFilesCache = new CombineFilesCache();\n  }\n\n  /**\n   * Creates a combined file from the cached split files.\n   * @param {Map<String, AtviseFile>} files The cached files stored against their extensions.\n   * @param {AtviseFile} lastFile The last file collected. This is the only file guaranteed to be\n   * set, therefore us if for error messages, etc.\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Should be called with any errors\n   * that occur while combining the files, or optionally the resulting file.\n   * @abstract\n   */\n  createCombinedFile(files, lastFile, callback) { // eslint-disable-line no-unused-vars\n    throw new Error(\n      'SplittingTransformer#createCombinedFile must be implemented by all subclasses'\n    );\n  }\n\n  /**\n   * Calls {@link SplittingTransformer#createCombinedFile} as soon as all dependencies are\n   * required files are cached.\n   * @param {AtviseFile} file The read file.\n   * @param {String} enc The encoding used.\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Called with the error occured while\n   * caching files or creating the combined file or optionally the resulting combined file.\n   */\n  transformFromFilesystem(file, enc, callback) {\n    this._combineFilesCache.gotAllFiles(file, (err, allFiles) => {\n      if (err) {\n        callback(err);\n      } else if (allFiles) {\n        this.createCombinedFile(allFiles, file, callback);\n      } else {\n        callback(null);\n      }\n    });\n  }\n\n  /**\n   * Splits a {@link vinyl~File}: The resulting is a clone of the input file, with a different path.\n   * @param {vinyl~File} file The file to split.\n   * @param {?String} newExtension The extension the resulting file gets.\n   * @return {vinyl~File} The resulting file.\n   * @example\n   * // Assuming that `original` is a File with the path \"path/to/file.type.xml\":\n   * const result = SplittingTransformer.splitFile(original, '.another');\n   * // `result` is a new File, with the contents of `original` and the path\n   * // \"path/to/file.type/file.another\"\n   */\n  static splitFile(file, newExtension) {\n    const newFile = file.clone();\n\n    newFile.basename = `${newFile.stem}/${newFile.stem}`;\n    newFile.extname = newExtension;\n\n    return newFile;\n  }\n\n  /**\n   * Combines split files to a single one.\n   * @param {vinyl~File[]} files The files to combine.\n   * @param {String} newExtension The extension the resulting file gets.\n   * @return {vinyl~File} The resulting file.\n   */\n  static combineFiles(files, newExtension) {\n    const newFile = files[0].clone();\n\n    newFile.path = `${newFile.dirname}${newExtension}`;\n\n    return newFile;\n  }\n\n  /**\n   * If there are any missing files this method loads these files and calls\n   * {SplittingTransformer#createCombinedFile} with them.\n   * @param {function(err: ?Error)} callback Called with the error that occurred while loading\n   * missing files.\n   */\n  _flush(callback) {\n    const missingDirnames = Object.keys(this._combineFilesCache._files);\n\n    if (missingDirnames.length > 0) {\n      Promise.all(\n        missingDirnames.map(dirname => {\n          const files = this._combineFilesCache._files[dirname];\n          const firstFile = files[Object.keys(files)[0]];\n\n          const missing = this._combineFilesCache.missingExtensions(dirname);\n          const stem = basename(dirname, extname(dirname));\n          const paths = missing.map(ext => join(dirname, '/', `${stem}${ext}`));\n\n          delete this._combineFilesCache._files[dirname];\n          delete this._combineFilesCache._required[dirname];\n\n          Logger.debug('Loading', paths.length, 'required file(s)');\n\n          return Promise.all(\n            paths.map((path, i) => AtviseFile.read({\n              cwd: firstFile.cwd,\n              base: firstFile.base,\n              path,\n            })\n              .then(file => {\n                files[missing[i]] = file;\n              })\n            )\n          )\n            .then(() => new Promise((resolve, reject) => {\n              this.createCombinedFile(files, firstFile, (err, file) => {\n                if (err) {\n                  reject(err);\n                } else {\n                  this.push(file);\n\n                  resolve(file);\n                }\n              });\n            }));\n        })\n      )\n        .then(files => Logger.debug('Created', files.length, 'additional file(s)'))\n        .then(() => callback())\n        .catch(err => callback(err));\n    } else {\n      callback();\n    }\n  }\n\n}\n\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/transform/SplittingTransformer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 243,
    "kind": "class",
    "name": "CombineFilesCache",
    "memberof": "src/lib/transform/SplittingTransformer.js",
    "static": true,
    "longname": "src/lib/transform/SplittingTransformer.js~CombineFilesCache",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/transform/SplittingTransformer.js",
    "importStyle": "{CombineFilesCache}",
    "description": "Determines which files are needed to create a combined file and stores these files as long as\nsome of them are missing.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 244,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/transform/SplittingTransformer.js~CombineFilesCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~CombineFilesCache#constructor",
    "access": "public",
    "description": "Creates a new DisplayCache.",
    "lineNumber": 16
  },
  {
    "__docId__": 245,
    "kind": "member",
    "name": "_files",
    "memberof": "src/lib/transform/SplittingTransformer.js~CombineFilesCache",
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~CombineFilesCache#_files",
    "access": "private",
    "description": "The files caches for the given path.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, vinyl~File>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 246,
    "kind": "member",
    "name": "_required",
    "memberof": "src/lib/transform/SplittingTransformer.js~CombineFilesCache",
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~CombineFilesCache#_required",
    "access": "private",
    "description": "The extensions of the files required.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "missingExtensions",
    "memberof": "src/lib/transform/SplittingTransformer.js~CombineFilesCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~CombineFilesCache#missingExtensions",
    "access": "public",
    "description": "Returns the extensions of the missing files for the given `dirname`.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dirname",
        "description": "The cache key to look for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "Extensions of the missing files."
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "gotAllFiles",
    "memberof": "src/lib/transform/SplittingTransformer.js~CombineFilesCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~CombineFilesCache#gotAllFiles",
    "access": "public",
    "description": "Checks if, when `file` is added, all required files are cached.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "vinyl~File"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to add before checking."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, files: ?Map<String, vinyl~File>)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error\nthat occured while checking or all files related to `file` if all required files are already\ncached."
      }
    ],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "class",
    "name": "SplittingTransformer",
    "memberof": "src/lib/transform/SplittingTransformer.js",
    "static": true,
    "longname": "src/lib/transform/SplittingTransformer.js~SplittingTransformer",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/transform/SplittingTransformer.js",
    "importStyle": "SplittingTransformer",
    "description": "A transformer that splits files into multiple others.",
    "lineNumber": 86,
    "abstract": true,
    "interface": false,
    "extends": [
      "src/lib/transform/PartialTransformer.js~PartialTransformer"
    ]
  },
  {
    "__docId__": 250,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/transform/SplittingTransformer.js~SplittingTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~SplittingTransformer#constructor",
    "access": "public",
    "description": "Creates a new SplittingTransformer.",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to apply."
      }
    ]
  },
  {
    "__docId__": 251,
    "kind": "member",
    "name": "_combineFilesCache",
    "memberof": "src/lib/transform/SplittingTransformer.js~SplittingTransformer",
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~SplittingTransformer#_combineFilesCache",
    "access": "private",
    "description": "The cache used when collecting files to combine.",
    "lineNumber": 99,
    "type": {
      "nullable": null,
      "types": [
        "CombineFilesCache"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "createCombinedFile",
    "memberof": "src/lib/transform/SplittingTransformer.js~SplittingTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~SplittingTransformer#createCombinedFile",
    "access": "public",
    "description": "Creates a combined file from the cached split files.",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map<String, AtviseFile>"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "The cached files stored against their extensions."
      },
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "lastFile",
        "description": "The last file collected. This is the only file guaranteed to be\nset, therefore us if for error messages, etc."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: ?AtviseFile)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Should be called with any errors\nthat occur while combining the files, or optionally the resulting file."
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "transformFromFilesystem",
    "memberof": "src/lib/transform/SplittingTransformer.js~SplittingTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~SplittingTransformer#transformFromFilesystem",
    "access": "public",
    "description": "Calls {@link SplittingTransformer#createCombinedFile} as soon as all dependencies are\nrequired files are cached.",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The read file."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: ?AtviseFile)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error occured while\ncaching files or creating the combined file or optionally the resulting combined file."
      }
    ],
    "return": null
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "splitFile",
    "memberof": "src/lib/transform/SplittingTransformer.js~SplittingTransformer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/transform/SplittingTransformer.js~SplittingTransformer.splitFile",
    "access": "public",
    "description": "Splits a {@link vinyl~File}: The resulting is a clone of the input file, with a different path.",
    "examples": [
      "// Assuming that `original` is a File with the path \"path/to/file.type.xml\":\nconst result = SplittingTransformer.splitFile(original, '.another');\n// `result` is a new File, with the contents of `original` and the path\n// \"path/to/file.type/file.another\""
    ],
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "vinyl~File"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to split."
      },
      {
        "nullable": true,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "newExtension",
        "description": "The extension the resulting file gets."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "vinyl~File"
      ],
      "spread": false,
      "description": "The resulting file."
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "combineFiles",
    "memberof": "src/lib/transform/SplittingTransformer.js~SplittingTransformer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/transform/SplittingTransformer.js~SplittingTransformer.combineFiles",
    "access": "public",
    "description": "Combines split files to a single one.",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "vinyl~File[]"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "The files to combine."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "newExtension",
        "description": "The extension the resulting file gets."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "vinyl~File"
      ],
      "spread": false,
      "description": "The resulting file."
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "_flush",
    "memberof": "src/lib/transform/SplittingTransformer.js~SplittingTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/SplittingTransformer.js~SplittingTransformer#_flush",
    "access": "private",
    "description": "If there are any missing files this method loads these files and calls\n{SplittingTransformer#createCombinedFile} with them.",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(err: ?Error)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occurred while loading\nmissing files."
      }
    ],
    "return": null
  },
  {
    "__docId__": 257,
    "kind": "file",
    "name": "src/lib/transform/Transformer.js",
    "content": "import { inspect } from 'util';\nimport { ctor as throughStreamClass } from 'through2';\n\n/**\n * The directions a transformer can be run in.\n * @type {{FromDB: String, FromFilesystem: String}}\n */\nexport const TransformDirection = {\n  FromDB: 'FromDB',\n  FromFilesystem: 'FromFilesystem',\n};\n\nfunction isValidDirection(direction) {\n  return [\n    TransformDirection.FromDB,\n    TransformDirection.FromFilesystem,\n  ].includes(direction);\n}\n\n/**\n * A special kind of an object transform stream: It does apply different transformations based on\n * it's direction.\n * @abstract\n */\nexport default class Transformer extends throughStreamClass({ objectMode: true }) {\n\n  /**\n   * Creates a new Transformer with the specified options.\n   * @param {Object} [options] The options to use.\n   * @param {TransformDirection} [options.direction] The direction to use.\n   * @throws {Error} Throws an error if the given direction is invalid.\n   */\n  constructor(options = {}) {\n    super();\n\n    /**\n     * The options the transformer was created with. Used for printing description.\n     * @type {Object}\n     */\n    this._options = options;\n\n    if (options.direction) {\n      if (isValidDirection(options.direction)) {\n        /**\n         * The transformer's direction\n         * @type {TransformerDirection}\n         */\n        this.direction = options.direction;\n      } else {\n        throw new Error('Invalid direction');\n      }\n    }\n  }\n\n  /**\n   * Returns the Transformer with the given direction\n   * @param {TransformDirection} direction The direction to use.\n   * @return {Transformer} Itself, to be chainable.\n   * @throws {Error} Throws an error if the given direction is invalid.\n   */\n  withDirection(direction) {\n    if (!isValidDirection(direction)) {\n      throw new Error('Invalid direction');\n    }\n\n    this.direction = direction;\n    return this;\n  }\n\n  /**\n   * Calls {@link Transformer#transformFromDB} or {@link Transformer#transformFromFilesystem}\n   * based on the transformer's direction.\n   * @param {Object} chunk The chunk to transform.\n   * @param {String} enc The encoding used.\n   * @param {function(err: ?Error, obj: ?Object)} callback Called with the error that occured while\n   * transforming or (optionally) the transformed object.\n   * @throws {Error} Throws an error if the transformer has no valid direction.\n   */\n  _transform(chunk, enc, callback) {\n    if (!this.direction) {\n      callback(new Error('Transformer has no direction'));\n    } else if (this.direction === TransformDirection.FromDB) {\n      this.transformFromDB(chunk, enc, callback);\n    } else {\n      this.transformFromFilesystem(chunk, enc, callback);\n    }\n  }\n\n  /**\n   * **Must be overridden by all subclasses:** Transforms the given chunk when using\n   * {@link TransformDirection.FromDB}.\n   * @param {Object} chunk The chunk to transform.\n   * @param {String} enc The encoding used.\n   * @param {function(err: ?Error, obj: ?Object)} callback Called with the error that occured while\n   * transforming or (optionally) the transformed object.\n   */\n  transformFromDB(chunk, enc, callback) {\n    callback(new Error('Transformer#transformFromDB must be overridden by all subclasses'));\n  }\n\n  /**\n   * **Must be overridden by all subclasses:** Transforms the given chunk when using\n   * {@link TransformDirection.FromFilesystem}.\n   * @param {Object} chunk The chunk to transform.\n   * @param {String} enc The encoding used.\n   * @param {function(err: ?Error, obj: ?Object)} callback Called with the error that occured while\n   * transforming or (optionally) the transformed object.\n   */\n  transformFromFilesystem(chunk, enc, callback) {\n    callback(new Error('Transformer#transformFromFilesystem must be overridden by all subclasses'));\n  }\n\n  /**\n   * Applies the transformer to the given stream. By default this just invokes\n   * {@link Transformer#transformFromDB} or {@link Transformer#transformFromFilesystem}. Override\n   * this method if you want to pipe streams directly.\n   * @param {Stream} stream The stream to apply the transformer to.\n   * @param {TransformDirection} direction The direction to use.\n   * @return {Stream} The resulting stream.\n   */\n  applyToStream(stream, direction) {\n    return stream.pipe(this.withDirection(direction));\n  }\n\n  /**\n   * Creates a stream with all transformers passed, with the given direction. Transformers are\n   * reversed if using {@link TransformDirection.FromFilesystem}.\n   * @param {Stream} stream The stream to apply the transformers to.\n   * @param {Transformer[]} transformers The transformers to apply.\n   * @param {TransformDirection} direction The direction to use.\n   * @return {Transformer} The last transformer passed, piped to the previous.\n   */\n  static applyTransformers(stream, transformers, direction) {\n    if (!isValidDirection(direction)) {\n      throw new Error('Direction is invalid');\n    }\n\n    if (transformers.length === 0) {\n      return stream;\n    }\n\n    return (direction === TransformDirection.FromDB ? transformers : transformers.reverse())\n      .reduce((prev, curr) => curr.applyToStream(prev, direction), stream);\n  }\n\n  /**\n   * Prints the transformer.\n   * @param {?Number} depth The depth to inspect.\n   * @param {Object} options See https://nodejs.org/api/util.html#util_util_inspect_object_options\n   * for details\n   * @return {String} A string representation of the transformer.\n   */\n  inspect(depth, options) {\n    const newOptions = options;\n    newOptions.depth = options.depth === null ? null : options.depth - 1;\n\n    if (depth < 0) {\n      return options.stylize(`[${this.constructor.name}]`, 'special');\n    }\n\n    return `${options.stylize(this.constructor.name, 'special')}${inspect(this._options, newOptions)\n      .replace(/^{/, '<').replace(/}$/, '>')\n      .replace(/\\n/, `\\n${' '.repeat(this.constructor.name.length)}`)\n    }`;\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/transform/Transformer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 258,
    "kind": "variable",
    "name": "TransformDirection",
    "memberof": "src/lib/transform/Transformer.js",
    "static": true,
    "longname": "src/lib/transform/Transformer.js~TransformDirection",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/transform/Transformer.js",
    "importStyle": "{TransformDirection}",
    "description": "The directions a transformer can be run in.",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "{FromDB: String, FromFilesystem: String}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 259,
    "kind": "function",
    "name": "isValidDirection",
    "memberof": "src/lib/transform/Transformer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/transform/Transformer.js~isValidDirection",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/transform/Transformer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "direction",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 260,
    "kind": "class",
    "name": "Transformer",
    "memberof": "src/lib/transform/Transformer.js",
    "static": true,
    "longname": "src/lib/transform/Transformer.js~Transformer",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/transform/Transformer.js",
    "importStyle": "Transformer",
    "description": "A special kind of an object transform stream: It does apply different transformations based on\nit's direction.",
    "lineNumber": 25,
    "abstract": true,
    "interface": false,
    "expressionExtends": "throughStreamClass({ objectMode: true })"
  },
  {
    "__docId__": 261,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#constructor",
    "access": "public",
    "description": "Creates a new Transformer with the specified options.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options to use."
      },
      {
        "nullable": null,
        "types": [
          "TransformDirection"
        ],
        "spread": false,
        "optional": true,
        "name": "options.direction",
        "description": "The direction to use."
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Throws an error if the given direction is invalid."
      }
    ]
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "_options",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#_options",
    "access": "private",
    "description": "The options the transformer was created with. Used for printing description.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "direction",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#direction",
    "access": "public",
    "description": "The transformer's direction",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "TransformerDirection"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "withDirection",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#withDirection",
    "access": "public",
    "description": "Returns the Transformer with the given direction",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransformDirection"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "The direction to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transformer"
      ],
      "spread": false,
      "description": "Itself, to be chainable."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Throws an error if the given direction is invalid."
      }
    ]
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "_transform",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#_transform",
    "access": "private",
    "description": "Calls {@link Transformer#transformFromDB} or {@link Transformer#transformFromFilesystem}\nbased on the transformer's direction.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "The chunk to transform."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, obj: ?Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured while\ntransforming or (optionally) the transformed object."
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Throws an error if the transformer has no valid direction."
      }
    ],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "transformFromDB",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#transformFromDB",
    "access": "public",
    "description": "**Must be overridden by all subclasses:** Transforms the given chunk when using\n{@link TransformDirection.FromDB}.",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "The chunk to transform."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, obj: ?Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured while\ntransforming or (optionally) the transformed object."
      }
    ],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "transformFromFilesystem",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#transformFromFilesystem",
    "access": "public",
    "description": "**Must be overridden by all subclasses:** Transforms the given chunk when using\n{@link TransformDirection.FromFilesystem}.",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "The chunk to transform."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, obj: ?Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured while\ntransforming or (optionally) the transformed object."
      }
    ],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "applyToStream",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#applyToStream",
    "access": "public",
    "description": "Applies the transformer to the given stream. By default this just invokes\n{@link Transformer#transformFromDB} or {@link Transformer#transformFromFilesystem}. Override\nthis method if you want to pipe streams directly.",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "The stream to apply the transformer to."
      },
      {
        "nullable": null,
        "types": [
          "TransformDirection"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "The direction to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Stream"
      ],
      "spread": false,
      "description": "The resulting stream."
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "applyTransformers",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/transform/Transformer.js~Transformer.applyTransformers",
    "access": "public",
    "description": "Creates a stream with all transformers passed, with the given direction. Transformers are\nreversed if using {@link TransformDirection.FromFilesystem}.",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "The stream to apply the transformers to."
      },
      {
        "nullable": null,
        "types": [
          "Transformer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "transformers",
        "description": "The transformers to apply."
      },
      {
        "nullable": null,
        "types": [
          "TransformDirection"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "The direction to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transformer"
      ],
      "spread": false,
      "description": "The last transformer passed, piped to the previous."
    }
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "inspect",
    "memberof": "src/lib/transform/Transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/Transformer.js~Transformer#inspect",
    "access": "public",
    "description": "Prints the transformer.",
    "lineNumber": 153,
    "params": [
      {
        "nullable": true,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "depth",
        "description": "The depth to inspect."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "See https://nodejs.org/api/util.html#util_util_inspect_object_options\nfor details"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A string representation of the transformer."
    }
  },
  {
    "__docId__": 272,
    "kind": "file",
    "name": "src/lib/transform/XMLTransformer.js",
    "content": "import { EOL } from 'os';\nimport { parseString as parseXML, Builder as XMLBuilder } from 'xml2js';\nimport { TransformDirection } from './Transformer';\nimport SplittingTransformer from './SplittingTransformer';\n\n/**\n * A special token used to encode CData section beginnings.\n * @type {String}\n */\nconst START_CDATA = 'STARTCDATA';\n\n/**\n * A special token used to encode CData section endings.\n * @type {String}\n */\nconst END_CDATA = 'ENDCDATA';\n\n/**\n * A transformer used to transform XML documents.\n */\nexport default class XMLTransformer extends SplittingTransformer {\n\n  /**\n   * Creates a new XMLTransformer based on some options.\n   * @param {Object} options The options to use.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * The builder to use with direction {@link TransformDirection.FromDB}.\n     * @type {xml2js~Builder}\n     */\n    this._fromDBBuilder = new XMLBuilder({\n      cdata: false,\n      newline: EOL,\n    });\n\n    /**\n     * The builder to use with direction {@link TransformDirection.FromFilesystem}.\n     * @type {xml2js~Builder}\n     */\n    this._fromFilesystemBuilder = new XMLBuilder({\n      renderOpts: {\n        pretty: true,\n        indent: ' ',\n        newline: '\\r\\n',\n      },\n      xmldec: {\n        version: '1.0',\n        encoding: 'UTF-8',\n        standalone: false,\n      },\n      cdata: true,\n    });\n  }\n\n  /**\n   * Returns the XML builder instance to use base on the current {@link Transformer#direction}.\n   * @type {xml2js~Builder}\n   */\n  get builder() {\n    return this.direction === TransformDirection.FromDB ?\n      this._fromDBBuilder :\n      this._fromFilesystemBuilder;\n  }\n\n  /**\n   * Parses XML in a file's contents.\n   * @param {AtviseFile} file The file to process.\n   * @param {function(err: ?Error, result: ?Object)} callback Called with the parsed document or the\n   * parse error that occurred.\n   */\n  decodeContents(file, callback) {\n    parseXML(file.contents, callback);\n  }\n\n  /**\n   * Builds an XML string from an object.\n   * @param {Object} object The object to encode.\n   * @param {function(err: ?Error, result: ?String)} callback Called with the resulting string or\n   * the error that occurred while building.\n   */\n  encodeContents(object, callback) {\n    try {\n      callback(null,\n        this.builder.buildObject(object)\n          .replace(new RegExp(`(<!\\\\[CDATA\\\\[)?${START_CDATA}`), '<![CDATA[')\n          .replace(new RegExp(`${END_CDATA}(\\\\]\\\\]>)?`), ']]>')\n      );\n    } catch (e) {\n      callback(e);\n    }\n  }\n\n  /**\n   * Helper function: Returns `true` if the given tag exists and is not empty.\n   * @param {Object} tag A tag in a parsed xml document.\n   * @return {Boolean} `true` if the given tag exists and is not empty.\n   */\n  tagNotEmpty(tag) {\n    return Boolean(tag && tag.length > 0);\n  }\n\n  /**\n   * Forces `string`, when assigned as textContent to a node, to be wrapped in a CDATA-section.\n   * @param {String} string The string to force a CDATA-section for.\n   * @return {String} The string to assign as textContent to a node.\n   */\n  static forceCData(string) {\n    return `${START_CDATA}${string}${END_CDATA}`;\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/lib/transform/XMLTransformer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 273,
    "kind": "variable",
    "name": "START_CDATA",
    "memberof": "src/lib/transform/XMLTransformer.js",
    "static": true,
    "longname": "src/lib/transform/XMLTransformer.js~START_CDATA",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/transform/XMLTransformer.js",
    "importStyle": null,
    "description": "A special token used to encode CData section beginnings.",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 274,
    "kind": "variable",
    "name": "END_CDATA",
    "memberof": "src/lib/transform/XMLTransformer.js",
    "static": true,
    "longname": "src/lib/transform/XMLTransformer.js~END_CDATA",
    "access": "public",
    "export": false,
    "importPath": "atscm/src/lib/transform/XMLTransformer.js",
    "importStyle": null,
    "description": "A special token used to encode CData section endings.",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 275,
    "kind": "class",
    "name": "XMLTransformer",
    "memberof": "src/lib/transform/XMLTransformer.js",
    "static": true,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/lib/transform/XMLTransformer.js",
    "importStyle": "XMLTransformer",
    "description": "A transformer used to transform XML documents.",
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "src/lib/transform/SplittingTransformer.js~SplittingTransformer"
    ]
  },
  {
    "__docId__": 276,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer#constructor",
    "access": "public",
    "description": "Creates a new XMLTransformer based on some options.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to use."
      }
    ]
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "_fromDBBuilder",
    "memberof": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "static": false,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer#_fromDBBuilder",
    "access": "private",
    "description": "The builder to use with direction {@link TransformDirection.FromDB}.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "xml2js~Builder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 278,
    "kind": "member",
    "name": "_fromFilesystemBuilder",
    "memberof": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "static": false,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer#_fromFilesystemBuilder",
    "access": "private",
    "description": "The builder to use with direction {@link TransformDirection.FromFilesystem}.",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "xml2js~Builder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 279,
    "kind": "get",
    "name": "builder",
    "memberof": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer#builder",
    "access": "public",
    "description": "Returns the XML builder instance to use base on the current {@link Transformer#direction}.",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "xml2js~Builder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "decodeContents",
    "memberof": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer#decodeContents",
    "access": "public",
    "description": "Parses XML in a file's contents.",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to process."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, result: ?Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the parsed document or the\nparse error that occurred."
      }
    ],
    "return": null
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "encodeContents",
    "memberof": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer#encodeContents",
    "access": "public",
    "description": "Builds an XML string from an object.",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object to encode."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, result: ?String)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the resulting string or\nthe error that occurred while building."
      }
    ],
    "return": null
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "tagNotEmpty",
    "memberof": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer#tagNotEmpty",
    "access": "public",
    "description": "Helper function: Returns `true` if the given tag exists and is not empty.",
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tag",
        "description": "A tag in a parsed xml document."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` if the given tag exists and is not empty."
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "forceCData",
    "memberof": "src/lib/transform/XMLTransformer.js~XMLTransformer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/transform/XMLTransformer.js~XMLTransformer.forceCData",
    "access": "public",
    "description": "Forces `string`, when assigned as textContent to a node, to be wrapped in a CDATA-section.",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": "The string to force a CDATA-section for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The string to assign as textContent to a node."
    }
  },
  {
    "__docId__": 284,
    "kind": "file",
    "name": "src/tasks/pull.js",
    "content": "import ProjectConfig from '../config/ProjectConfig';\nimport NodeStream from '../lib/server/NodeStream';\nimport ReadStream from '../lib/server/ReadStream';\nimport PullStream from '../lib/gulp/PullStream';\n\n/**\n * Pulls all nodes from atvise server.\n */\nexport default function pull() {\n  return new PullStream(\n    (new NodeStream(ProjectConfig.nodes))\n      .pipe(new ReadStream())\n  );\n}\n\npull.description = 'Pull all nodes from atvise server';\n",
    "static": true,
    "longname": "/home/circleci/project/src/tasks/pull.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 285,
    "kind": "function",
    "name": "pull",
    "memberof": "src/tasks/pull.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tasks/pull.js~pull",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/tasks/pull.js",
    "importStyle": "pull",
    "description": "Pulls all nodes from atvise server.",
    "lineNumber": 9,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "file",
    "name": "src/tasks/push.js",
    "content": "import { src } from 'gulp';\nimport PushStream from '../lib/gulp/PushStream';\n\n/**\n * Pushes {@link AtviseFile}s to atvise server.\n */\nexport default function push() {\n  return new PushStream(src('./src/**/*.*'));\n}\n\npush.description = 'Push all stored nodes to atvise server';\n",
    "static": true,
    "longname": "/home/circleci/project/src/tasks/push.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 287,
    "kind": "function",
    "name": "push",
    "memberof": "src/tasks/push.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tasks/push.js~push",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/tasks/push.js",
    "importStyle": "push",
    "description": "Pushes {@link AtviseFile}s to atvise server.",
    "lineNumber": 7,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "file",
    "name": "src/tasks/watch.js",
    "content": "import { join } from 'path';\nimport { src } from 'gulp';\nimport sane from 'sane';\nimport browserSync from 'browser-sync';\nimport Logger from 'gulplog';\nimport { obj as createStream } from 'through2';\nimport PushStream from '../lib/gulp/PushStream';\nimport PullStream from '../lib/gulp/PullStream';\nimport AtviseFile from '../lib/server/AtviseFile';\nimport ServerWatcher from '../lib/server/Watcher';\nimport ProjectConfig from '../config/ProjectConfig';\nimport { validateDirectoryExists } from '../util/fs';\n\n/**\n * The task executed when running `atscm watch`.\n */\nexport class WatchTask {\n\n  /**\n   * Creates a new watch task instance. Also creates a new Browsersync instance.\n   */\n  constructor() {\n    /**\n     * The Browsersync instance used.\n     * @type {events~Emitter}\n     */\n    this.browserSyncInstance = browserSync.create();\n\n    /**\n     * If the task is currently pulling.\n     * @type {boolean}\n     */\n    this._pulling = false;\n\n    /**\n     * If the task is currently pushing.\n     * @type {boolean}\n     */\n    this._pushing = false;\n\n    /**\n     * Timestamp of the last pull\n     * @type {number}\n     */\n    this._lastPull = 0;\n\n    /**\n     * The {@link NodeId} of the last push.\n     * @type {?NodeId}\n     */\n    this._lastPushed = null;\n  }\n\n  /**\n   * The directory to watch.\n   * @type {string}\n   */\n  get directoryToWatch() {\n    return './src';\n  }\n\n  /**\n   * Waits for a watcher (which can actually be any kind of {@link events~Emitter}) to emit a\n   * \"ready\" event.\n   * @param {events~Emitter} watcher The watcher to wait for.\n   * @return {Promise<events~Emitter, Error>} Fulfilled with the set up watcher or rejected with the\n   * watcher error that occurred while waiting for it to get ready.\n   */\n  _waitForWatcher(watcher) {\n    return new Promise((resolve, reject) => {\n      watcher.on('error', err => reject(err));\n      watcher.on('ready', () => resolve(watcher));\n    });\n  }\n\n  /**\n   * Starts a file watcher for the directory {@link WatchTask#directoryToWatch}.\n   * @return {Promise<sane~Watcher, Error>} Fulfilled with the file watcher once it is ready or\n   * rejected with the error that occurred while starting the watcher.\n   */\n  startFileWatcher() {\n    return validateDirectoryExists(this.directoryToWatch)\n      .catch(err => {\n        if (err.code === 'ENOENT') {\n          Logger.info(`Create a directory at ${this.directoryToWatch} or run \\`atscm pull\\` first`);\n\n          Object.assign(err, {\n            message: `Directory ${this.directoryToWatch} does not exist`,\n          });\n        }\n\n        throw err;\n      })\n      .then(() => this._waitForWatcher(sane(this.directoryToWatch, {\n        glob: '**/*.*',\n        watchman: process.platform === 'darwin',\n      })));\n  }\n\n  /**\n   * Starts a watcher that watches the atvise server for changes.\n   * @return {Promise<Watcher, Error>} Fulfilled with the server watcher once it is ready or\n   * rejected with the error that occurred while starting the watcher.\n   */\n  startServerWatcher() {\n    return this._waitForWatcher(new ServerWatcher());\n  }\n\n  /**\n   * Initializes {@link WatchTask#browserSyncInstance}.\n   */\n  initBrowserSync() {\n    this.browserSyncInstance.init({\n      proxy: `${ProjectConfig.host}:${ProjectConfig.port.http}`,\n      ws: true,\n      // logLevel: 'debug', FIXME: Use log level specified in cli options\n      // logPrefix: '',\n    });\n\n    /* bs.logger.logOne = function(args, msg, level, unprefixed) {\n      args = args.slice(2);\n\n      if (this.config.useLevelPrefixes && !unprefixed) {\n        msg = this.config.prefixes[level] + msg;\n      }\n\n      msg = this.compiler.compile(msg, unprefixed);\n\n      args.unshift(msg);\n\n      Logger[level](format(...args));\n\n      this.resetTemps();\n\n      return this;\n    }; */\n  }\n\n  /**\n   * Handles a file change.\n   * @param {string} path The path of the file that changed.\n   * @param {string} root The root of the file that changed.\n   * @param {fs~Stats} stats The stats of the file that changed.\n   * @return {Promise<boolean>} Resolved with `true` if the change triggered a push operation,\n   * with `false` otherwise.\n   */\n  handleFileChange(path, root, stats) {\n    return new Promise(resolve => {\n      if (!this._pulling && AtviseFile.normalizeMtime(stats.mtime) > this._lastPull) {\n        this._pushing = true;\n        Logger.info(path, 'changed');\n\n        const source = src(join(root, path), { base: root });\n\n        (new PushStream(source))\n          .on('data', file => (this._lastPushed = file.nodeId.toString()))\n          .on('end', () => {\n            this._pushing = false;\n            this.browserSyncInstance.reload();\n\n            resolve(true);\n          });\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  /**\n   * Handles an atvise server change.\n   * @param {ReadStream.ReadResult} readResult The read result of the modification.\n   * @return {Promise<boolean>} Resolved with `true` if the change triggered a pull operation,\n   * with `false` otherwise.\n   */\n  handleServerChange(readResult) {\n    return new Promise(resolve => {\n      if (!this._pushing) {\n        if (readResult.nodeId.toString() !== this._lastPushed) {\n          this._pulling = true;\n          Logger.info(readResult.nodeId.toString(), 'changed');\n\n          const readStream = createStream();\n          readStream.write(readResult);\n          readStream.end();\n\n          (new PullStream(readStream))\n            .on('end', () => {\n              this._pulling = false;\n              this._lastPull = AtviseFile.normalizeMtime(readResult.mtime);\n              this.browserSyncInstance.reload();\n\n              resolve(true);\n            });\n        } else {\n          this._lastPushed = null;\n\n          resolve(false);\n        }\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  /**\n   * Starts the file and server watchers, initializes Browsersync and registers change event\n   * handlers.\n   * @return {Promise<undefined, Error>} Fulfilled once all watchers are set up and Browsersync was\n   * initialized.\n   */\n  run() {\n    return Promise.all([\n      this.startFileWatcher(),\n      this.startServerWatcher(),\n    ])\n      .then(([fileWatcher, serverWatcher]) => {\n        this.browserSyncInstance.emitter.on('service:running', () => {\n          Logger.info('Watching for changes...');\n          Logger.debug('Press Ctrl-C to exit');\n        });\n\n        fileWatcher.on('change', this.handleFileChange.bind(this));\n        serverWatcher.on('change', this.handleServerChange.bind(this));\n\n        this.initBrowserSync();\n      });\n  }\n\n}\n\n/**\n * The gulp task invoced when running `atscm watch`.\n * @return {Promise<undefined, Error>} Fulfilled once all watchers are set up and Browsersync was\n * initialized.\n */\nexport default function watch() {\n  return (new WatchTask()).run();\n}\n\nwatch.description = 'Watch local files and atvise server nodes to trigger pull/push on change';\n",
    "static": true,
    "longname": "/home/circleci/project/src/tasks/watch.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 289,
    "kind": "class",
    "name": "WatchTask",
    "memberof": "src/tasks/watch.js",
    "static": true,
    "longname": "src/tasks/watch.js~WatchTask",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/tasks/watch.js",
    "importStyle": "{WatchTask}",
    "description": "The task executed when running `atscm watch`.",
    "lineNumber": 17,
    "interface": false
  },
  {
    "__docId__": 290,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/tasks/watch.js~WatchTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/tasks/watch.js~WatchTask#constructor",
    "access": "public",
    "description": "Creates a new watch task instance. Also creates a new Browsersync instance.",
    "lineNumber": 22
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "browserSyncInstance",
    "memberof": "src/tasks/watch.js~WatchTask",
    "static": false,
    "longname": "src/tasks/watch.js~WatchTask#browserSyncInstance",
    "access": "public",
    "description": "The Browsersync instance used.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "events~Emitter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "_pulling",
    "memberof": "src/tasks/watch.js~WatchTask",
    "static": false,
    "longname": "src/tasks/watch.js~WatchTask#_pulling",
    "access": "private",
    "description": "If the task is currently pulling.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "_pushing",
    "memberof": "src/tasks/watch.js~WatchTask",
    "static": false,
    "longname": "src/tasks/watch.js~WatchTask#_pushing",
    "access": "private",
    "description": "If the task is currently pushing.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "_lastPull",
    "memberof": "src/tasks/watch.js~WatchTask",
    "static": false,
    "longname": "src/tasks/watch.js~WatchTask#_lastPull",
    "access": "private",
    "description": "Timestamp of the last pull",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "_lastPushed",
    "memberof": "src/tasks/watch.js~WatchTask",
    "static": false,
    "longname": "src/tasks/watch.js~WatchTask#_lastPushed",
    "access": "private",
    "description": "The {@link NodeId} of the last push.",
    "lineNumber": 51,
    "type": {
      "nullable": true,
      "types": [
        "NodeId"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 296,
    "kind": "get",
    "name": "directoryToWatch",
    "memberof": "src/tasks/watch.js~WatchTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/tasks/watch.js~WatchTask#directoryToWatch",
    "access": "public",
    "description": "The directory to watch.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "_waitForWatcher",
    "memberof": "src/tasks/watch.js~WatchTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/tasks/watch.js~WatchTask#_waitForWatcher",
    "access": "private",
    "description": "Waits for a watcher (which can actually be any kind of {@link events~Emitter}) to emit a\n\"ready\" event.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "events~Emitter"
        ],
        "spread": false,
        "optional": false,
        "name": "watcher",
        "description": "The watcher to wait for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<events~Emitter, Error>"
      ],
      "spread": false,
      "description": "Fulfilled with the set up watcher or rejected with the\nwatcher error that occurred while waiting for it to get ready."
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "startFileWatcher",
    "memberof": "src/tasks/watch.js~WatchTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/tasks/watch.js~WatchTask#startFileWatcher",
    "access": "public",
    "description": "Starts a file watcher for the directory {@link WatchTask#directoryToWatch}.",
    "lineNumber": 81,
    "return": {
      "nullable": null,
      "types": [
        "Promise<sane~Watcher, Error>"
      ],
      "spread": false,
      "description": "Fulfilled with the file watcher once it is ready or\nrejected with the error that occurred while starting the watcher."
    },
    "params": []
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "startServerWatcher",
    "memberof": "src/tasks/watch.js~WatchTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/tasks/watch.js~WatchTask#startServerWatcher",
    "access": "public",
    "description": "Starts a watcher that watches the atvise server for changes.",
    "lineNumber": 105,
    "return": {
      "nullable": null,
      "types": [
        "Promise<Watcher, Error>"
      ],
      "spread": false,
      "description": "Fulfilled with the server watcher once it is ready or\nrejected with the error that occurred while starting the watcher."
    },
    "params": []
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "initBrowserSync",
    "memberof": "src/tasks/watch.js~WatchTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/tasks/watch.js~WatchTask#initBrowserSync",
    "access": "public",
    "description": "Initializes {@link WatchTask#browserSyncInstance}.",
    "lineNumber": 112,
    "params": [],
    "return": null
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "handleFileChange",
    "memberof": "src/tasks/watch.js~WatchTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/tasks/watch.js~WatchTask#handleFileChange",
    "access": "public",
    "description": "Handles a file change.",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path of the file that changed."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "root",
        "description": "The root of the file that changed."
      },
      {
        "nullable": null,
        "types": [
          "fs~Stats"
        ],
        "spread": false,
        "optional": false,
        "name": "stats",
        "description": "The stats of the file that changed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": "Resolved with `true` if the change triggered a push operation,\nwith `false` otherwise."
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "handleServerChange",
    "memberof": "src/tasks/watch.js~WatchTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/tasks/watch.js~WatchTask#handleServerChange",
    "access": "public",
    "description": "Handles an atvise server change.",
    "lineNumber": 175,
    "params": [
      {
        "nullable": null,
        "types": [
          "ReadStream.ReadResult"
        ],
        "spread": false,
        "optional": false,
        "name": "readResult",
        "description": "The read result of the modification."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": "Resolved with `true` if the change triggered a pull operation,\nwith `false` otherwise."
    }
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "run",
    "memberof": "src/tasks/watch.js~WatchTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/tasks/watch.js~WatchTask#run",
    "access": "public",
    "description": "Starts the file and server watchers, initializes Browsersync and registers change event\nhandlers.",
    "lineNumber": 211,
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined, Error>"
      ],
      "spread": false,
      "description": "Fulfilled once all watchers are set up and Browsersync was\ninitialized."
    },
    "params": []
  },
  {
    "__docId__": 310,
    "kind": "function",
    "name": "watch",
    "memberof": "src/tasks/watch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tasks/watch.js~watch",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/tasks/watch.js",
    "importStyle": "watch",
    "description": "The gulp task invoced when running `atscm watch`.",
    "lineNumber": 236,
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined, Error>"
      ],
      "spread": false,
      "description": "Fulfilled once all watchers are set up and Browsersync was\ninitialized."
    },
    "params": []
  },
  {
    "__docId__": 311,
    "kind": "file",
    "name": "src/transform/DisplayTransformer.js",
    "content": "import { Buffer } from 'buffer';\nimport XMLTransformer from '../lib/transform/XMLTransformer';\n\n/**\n * Splits read atvise display XML nodes into their SVG and JavaScript sources,\n * alongside with a .json file containing the display's parameters.\n */\nexport default class DisplayTransformer extends XMLTransformer {\n\n  /**\n   * Returns true for all files containing atvise displays.\n   * @param {AtviseFile} file The file to check.\n   * @return {Boolean} `true` for all atvise display files.\n   */\n  shouldBeTransformed(file) {\n    return file.isDisplay;\n  }\n\n  /**\n   * Splits any read files containing atvise displays into their SVG and JavaScript sources,\n   * alongside with a .json file containing the display's parameters.\n   * @param {AtviseFile} file The display file to split.\n   * @param {String} enc The encoding used.\n   * @param {function(err: Error, file: AtviseFile)} callback Called with the error that occured\n   * while transforming the display, or the file passed through.\n   */\n  transformFromDB(file, enc, callback) {\n    this.decodeContents(file, (err, results) => {\n      if (err) {\n        callback(err);\n      } else if (!results || results.svg === undefined) {\n        callback(new Error('Error parsing display: No `svg` tag'));\n      } else {\n        const xml = results;\n        const document = results.svg;\n\n        const config = {};\n\n        // Extract JavaScript\n        if (this.tagNotEmpty(document.script)) {\n          document.script.forEach(script => {\n            if (script.$ && (script.$.src || script.$['xlink:href'])) {\n              if (!config.dependencies) {\n                config.dependencies = [];\n              }\n\n              config.dependencies.push(script.$.src || script.$['xlink:href']);\n            } else {\n              // TODO: Warn on multiple inline scripts\n\n              const scriptFile = DisplayTransformer.splitFile(file, '.js');\n              const scriptText = (typeof script === 'string') ?\n                script : script._ || '';\n\n              scriptFile.contents = Buffer.from(scriptText);\n              this.push(scriptFile);\n            }\n          });\n\n          delete xml.svg.script;\n        }\n\n        // Extract metadata\n        if (this.tagNotEmpty(document.metadata)) {\n          // TODO: Warn on multiple metadata tags\n\n          const meta = document.metadata[0];\n\n          // - Parameters\n          if (this.tagNotEmpty(meta['atv:parameter'])) {\n            config.parameters = [];\n            meta['atv:parameter'].forEach(param => config.parameters.push(param.$));\n\n            delete xml.svg.metadata[0]['atv:parameter'];\n          }\n        }\n\n        const configFile = DisplayTransformer.splitFile(file, '.json');\n\n        configFile.contents = Buffer.from(JSON.stringify(config, null, '  '));\n        this.push(configFile);\n\n        const svgFile = DisplayTransformer.splitFile(file, '.svg');\n\n        this.encodeContents(xml, (encodeErr, stringValue) => {\n          if (encodeErr) {\n            callback(encodeErr);\n          } else {\n            svgFile.contents = Buffer.from(stringValue);\n            this.push(svgFile);\n\n            callback(null);\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Creates a display from the collected files.\n   * @param {Map<String, vinyl~File>} files The collected files, stored against their extension.\n   * @param {vinyl~File} lastFile The last file read. *Used for error messages only*.\n   * @param {function(err: ?Error, data: vinyl~File)} callback Called with the error that occured\n   * while creating the display or the resulting file.\n   */\n  createCombinedFile(files, lastFile, callback) {\n    const configFile = files['.json'];\n    let config = {};\n\n    if (configFile) {\n      try {\n        config = JSON.parse(configFile.contents.toString());\n      } catch (e) {\n        callback(new Error(`Error parsing JSON in ${configFile.relative}: ${e.message}`));\n        return;\n      }\n    }\n\n    const svgFile = files['.svg'];\n    if (!svgFile) {\n      callback(new Error(`No display SVG in ${lastFile.dirname}`));\n      return;\n    }\n\n    const scriptFile = files['.js'];\n    let inlineScript = '';\n    if (scriptFile) {\n      inlineScript = scriptFile.contents.toString();\n    }\n\n    this.decodeContents(svgFile, (err, xml) => {\n      if (err) {\n        callback(err);\n      } else if (!xml || xml.svg === undefined) {\n        callback(new Error('Error parsing display SVG: No `svg` tag'));\n      } else {\n        const result = xml;\n\n        // Handle empty svg tag\n        if (typeof result.svg === 'string') {\n          result.svg = {};\n        }\n\n        // Insert dependencies\n        result.svg.script = [];\n        if (config.dependencies) {\n          config.dependencies.forEach(p => result.svg.script.push({\n            $: { 'xlink:href': p },\n          }));\n        }\n\n        // Insert script\n        // FIXME: Import order is not preserved!\n        if (scriptFile) {\n          result.svg.script.push({\n            $: { type: 'text/ecmascript' },\n            _: XMLTransformer.forceCData(inlineScript),\n          });\n        }\n\n        // Insert metadata\n        // - Parameters\n        if (config.parameters && config.parameters.length > 0) {\n          if (!result.svg.metadata || !result.svg.metadata[0]) {\n            result.svg.metadata = [{}];\n          }\n          if (!result.svg.metadata[0]['atv:parameter']) {\n            result.svg.metadata[0]['atv:parameter'] = [];\n          }\n\n          // FIXME: Parameters should come before `atv:gridconfig` and `atv:snapconfig`\n          config.parameters\n            .forEach(param => result.svg.metadata[0]['atv:parameter'].push({ $: param }));\n        }\n\n        const display = DisplayTransformer.combineFiles(\n          Object.keys(files).map(ext => files[ext]),\n          '.xml'\n        );\n\n        this.encodeContents(result, (encodeErr, xmlString) => {\n          if (encodeErr) {\n            callback(encodeErr);\n          } else {\n            display.contents = Buffer.from(xmlString);\n\n            callback(null, display);\n          }\n        });\n      }\n    });\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/transform/DisplayTransformer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 312,
    "kind": "class",
    "name": "DisplayTransformer",
    "memberof": "src/transform/DisplayTransformer.js",
    "static": true,
    "longname": "src/transform/DisplayTransformer.js~DisplayTransformer",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/transform/DisplayTransformer.js",
    "importStyle": "DisplayTransformer",
    "description": "Splits read atvise display XML nodes into their SVG and JavaScript sources,\nalongside with a .json file containing the display's parameters.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/lib/transform/XMLTransformer.js~XMLTransformer"
    ]
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "shouldBeTransformed",
    "memberof": "src/transform/DisplayTransformer.js~DisplayTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transform/DisplayTransformer.js~DisplayTransformer#shouldBeTransformed",
    "access": "public",
    "description": "Returns true for all files containing atvise displays.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` for all atvise display files."
    }
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "transformFromDB",
    "memberof": "src/transform/DisplayTransformer.js~DisplayTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transform/DisplayTransformer.js~DisplayTransformer#transformFromDB",
    "access": "public",
    "description": "Splits any read files containing atvise displays into their SVG and JavaScript sources,\nalongside with a .json file containing the display's parameters.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The display file to split."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: Error, file: AtviseFile)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured\nwhile transforming the display, or the file passed through."
      }
    ],
    "return": null
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "createCombinedFile",
    "memberof": "src/transform/DisplayTransformer.js~DisplayTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transform/DisplayTransformer.js~DisplayTransformer#createCombinedFile",
    "access": "public",
    "description": "Creates a display from the collected files.",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map<String, vinyl~File>"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "The collected files, stored against their extension."
      },
      {
        "nullable": null,
        "types": [
          "vinyl~File"
        ],
        "spread": false,
        "optional": false,
        "name": "lastFile",
        "description": "The last file read. *Used for error messages only*."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: vinyl~File)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured\nwhile creating the display or the resulting file."
      }
    ],
    "return": null
  },
  {
    "__docId__": 316,
    "kind": "file",
    "name": "src/transform/Mapping.js",
    "content": "import { Buffer } from 'buffer';\nimport { readFile } from 'fs';\nimport Logger from 'gulplog';\nimport Transformer from '../lib/transform/Transformer';\nimport AtviseFile from '../lib/server/AtviseFile';\nimport NodeId from '../lib/server/NodeId';\n\n/**\n * A Transformer that maps {@link ReadStream.ReadResult}s to {@link AtviseFile}s.\n */\nexport default class MappingTransformer extends Transformer {\n\n  /**\n   * Writes an {@link AtviseFile} for each {@link ReadStream.ReadResult} read. If a read file has a\n   * non-standard type (definition) an additional `.rc` file is pushed holding this type.\n   * @param {ReadStream.ReadResult} readResult The read result to create the file for.\n   * @param {String} encoding The encoding used.\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Called with the error that occurred\n   * while transforming the read result or the resulting file.\n   */\n  transformFromDB(readResult, encoding, callback) {\n    try {\n      const file = AtviseFile.fromReadResult(readResult);\n\n      if (file.relative.match(/\\.var\\./)) {\n        const rc = file.clone();\n\n        rc.extname = '';\n        rc.basename = `.${rc.stem}.rc`;\n\n        rc.contents = Buffer.from(JSON.stringify({\n          typeDefinition: file.typeDefinition,\n        }, null, '  '));\n\n        this.push(rc);\n      }\n\n      callback(null, file);\n    } catch (e) {\n      Logger[e.message === 'no value' ? 'debug' : 'warn'](\n        `Unable to map ${readResult.nodeId.toString()}: ${e.message}`\n      );\n      Logger.debug(e);\n\n      callback(null);\n    }\n  }\n\n  /**\n   * Writes an {@link AtviseFile} for each {@link vinyl~File} read.\n   * @param {vinyl~File} file The raw file.\n   * @param {String} encoding The encoding used.\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Called with the error that occurred\n   * while transforming the read result or the resulting file.\n   */\n  transformFromFilesystem(file, encoding, callback) {\n    if (file.isDirectory()) {\n      callback(null);\n    } else {\n      const atFile = new AtviseFile({\n        cwd: file.cwd,\n        base: file.base,\n        path: file.path,\n        contents: file.contents,\n      });\n\n      if (file.relative.match(/\\.var\\./)) {\n        const rcFile = file.clone({ contents: false });\n        rcFile.extname = '';\n        rcFile.basename = `.${rcFile.stem}.rc`;\n\n        readFile(rcFile.path, 'utf8', (err, data) => {\n          try {\n            const rc = JSON.parse(data);\n            atFile._typeDefinition = new NodeId(rc.typeDefinition);\n\n            callback(null, atFile);\n          } catch (e) {\n            Logger.error(`Unable to get runtime configuration for ${file.relative}`);\n            callback(err || e);\n          }\n        });\n      } else {\n        callback(null, atFile);\n      }\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/transform/Mapping.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 317,
    "kind": "class",
    "name": "MappingTransformer",
    "memberof": "src/transform/Mapping.js",
    "static": true,
    "longname": "src/transform/Mapping.js~MappingTransformer",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/transform/Mapping.js",
    "importStyle": "MappingTransformer",
    "description": "A Transformer that maps {@link ReadStream.ReadResult}s to {@link AtviseFile}s.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/lib/transform/Transformer.js~Transformer"
    ]
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "transformFromDB",
    "memberof": "src/transform/Mapping.js~MappingTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transform/Mapping.js~MappingTransformer#transformFromDB",
    "access": "public",
    "description": "Writes an {@link AtviseFile} for each {@link ReadStream.ReadResult} read. If a read file has a\nnon-standard type (definition) an additional `.rc` file is pushed holding this type.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "ReadStream.ReadResult"
        ],
        "spread": false,
        "optional": false,
        "name": "readResult",
        "description": "The read result to create the file for."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "encoding",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: ?AtviseFile)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occurred\nwhile transforming the read result or the resulting file."
      }
    ],
    "return": null
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "transformFromFilesystem",
    "memberof": "src/transform/Mapping.js~MappingTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transform/Mapping.js~MappingTransformer#transformFromFilesystem",
    "access": "public",
    "description": "Writes an {@link AtviseFile} for each {@link vinyl~File} read.",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "vinyl~File"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The raw file."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "encoding",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: ?AtviseFile)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occurred\nwhile transforming the read result or the resulting file."
      }
    ],
    "return": null
  },
  {
    "__docId__": 320,
    "kind": "file",
    "name": "src/transform/ScriptTransformer.js",
    "content": "import Logger from 'gulplog';\nimport XMLTransformer from '../lib/transform/XMLTransformer';\n\n/**\n * A transformer that splits atvise scripts and quick dynamics into a code file and a .json file\n * containing parameters and metadata.\n */\nexport default class ScriptTransformer extends XMLTransformer {\n\n  /**\n   * Returns `true` for all files containing script code or quick dynamics.\n   * @param {AtviseFile} file The file to check.\n   * @return {Boolean} `true` for all files containing script code or quick dynamics.\n   */\n  shouldBeTransformed(file) {\n    return file.isScript || file.isQuickDynamic;\n  }\n\n  /**\n   * Splits any read files containing scripts or quick dynamics into their JavaScript sources,\n   * alongside with a .json file containing parameters and metadata.\n   * @param {AtviseFile} file The script file to split.\n   * @param {String} enc The encoding used.\n   * @param {function(err: Error, file: AtviseFile)} callback Called with the error that occured\n   * while transforming the script, or the file passed through.\n   */\n  transformFromDB(file, enc, callback) {\n    this.decodeContents(file, (err, results) => {\n      if (err) {\n        callback(err);\n      } else {\n        if (!results || results.script === undefined) {\n          Logger.warn(`Empty document at ${file.relative}`);\n        }\n\n        const document = results && results.script ? results.script : {};\n\n        const config = {};\n        let code = '';\n\n        // Extract metadata\n        if (this.tagNotEmpty(document.metadata)) {\n          // TODO: Warn on multiple metadata tags\n\n          const meta = document.metadata[0];\n\n          // - Icon\n          if (this.tagNotEmpty(meta.icon)) {\n            const icon = meta.icon[0];\n            config.icon = icon.$ || {};\n            config.icon.content = icon._ || '';\n          }\n\n          // - Visible\n          if (this.tagNotEmpty(meta.visible)) {\n            config.visible = Boolean(meta.visible[0]);\n          }\n\n          // - Title\n          if (this.tagNotEmpty(meta.title)) {\n            config.title = meta.title[0];\n          }\n\n          // - Description\n          if (this.tagNotEmpty(meta.description)) {\n            config.description = meta.description[0];\n          }\n        }\n\n        // Extract Parameters\n        if (this.tagNotEmpty(document.parameter)) {\n          config.parameters = [];\n          document.parameter.forEach(param => config.parameters.push(param.$));\n        }\n\n        // Extract JavaScript\n        if (this.tagNotEmpty(document.code)) {\n          code = document.code[0];\n        }\n\n        // Write config file\n        const configFile = ScriptTransformer.splitFile(file, '.json');\n        configFile.contents = Buffer.from(JSON.stringify(config, null, '  '));\n        this.push(configFile);\n\n        // Write script file\n        const scriptFile = ScriptTransformer.splitFile(file, '.js');\n        scriptFile.contents = Buffer.from(code);\n        this.push(scriptFile);\n\n        callback(null);\n      }\n    });\n  }\n\n  /**\n   * Creates a script from the collected files.\n   * @param {Map<String, AtviseFile>} files The collected files, stored against their extension.\n   * @param {AtviseFile} lastFile The last file read. *Used for error messages only*.\n   * @param {function(err: ?Error, data: vinyl~File)} callback Called with the error that occured\n   * while creating the script or the resulting file.\n   */\n  createCombinedFile(files, lastFile, callback) {\n    const configFile = files['.json'];\n    let config = {};\n\n    if (configFile) {\n      try {\n        config = JSON.parse(configFile.contents.toString());\n      } catch (e) {\n        callback(new Error(`Error parsing JSON in ${configFile.relative}: ${e.message}`));\n        return;\n      }\n    }\n\n    const scriptFile = files['.js'];\n    let code = '';\n\n    if (scriptFile) {\n      code = scriptFile.contents.toString();\n    }\n\n    const result = {\n      script: { },\n    };\n\n    // Insert metadata\n    if (lastFile.isQuickDynamic) {\n      const meta = {};\n\n      // - Icon\n      if (config.icon) {\n        const icon = config.icon.content;\n        delete config.icon.content;\n\n        meta.icon = {\n          $: config.icon,\n          _: icon,\n        };\n      }\n\n      // - Other fields\n      if (config.visible !== undefined) {\n        meta.visible = config.visible ? 1 : 0;\n      }\n\n      if (config.title !== undefined) {\n        meta.title = config.title;\n      }\n\n      if (config.description !== undefined) {\n        meta.description = config.description;\n      }\n\n      result.script.metadata = meta;\n    }\n\n    // Insert parameters\n    result.script.parameter = config.parameters ?\n      config.parameters.map(param => ({ $: param })) :\n      [];\n\n    result.script.code = ScriptTransformer.forceCData(code);\n\n    const script = ScriptTransformer.combineFiles(\n      Object.keys(files).map(ext => files[ext]),\n      '.xml'\n    );\n\n    this.encodeContents(result, (encodeErr, xmlString) => {\n      if (encodeErr) {\n        callback(encodeErr);\n      } else {\n        script.contents = Buffer.from(xmlString);\n\n        callback(null, script);\n      }\n    });\n  }\n\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/transform/ScriptTransformer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 321,
    "kind": "class",
    "name": "ScriptTransformer",
    "memberof": "src/transform/ScriptTransformer.js",
    "static": true,
    "longname": "src/transform/ScriptTransformer.js~ScriptTransformer",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/transform/ScriptTransformer.js",
    "importStyle": "ScriptTransformer",
    "description": "A transformer that splits atvise scripts and quick dynamics into a code file and a .json file\ncontaining parameters and metadata.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/lib/transform/XMLTransformer.js~XMLTransformer"
    ]
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "shouldBeTransformed",
    "memberof": "src/transform/ScriptTransformer.js~ScriptTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transform/ScriptTransformer.js~ScriptTransformer#shouldBeTransformed",
    "access": "public",
    "description": "Returns `true` for all files containing script code or quick dynamics.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` for all files containing script code or quick dynamics."
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "transformFromDB",
    "memberof": "src/transform/ScriptTransformer.js~ScriptTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transform/ScriptTransformer.js~ScriptTransformer#transformFromDB",
    "access": "public",
    "description": "Splits any read files containing scripts or quick dynamics into their JavaScript sources,\nalongside with a .json file containing parameters and metadata.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The script file to split."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "enc",
        "description": "The encoding used."
      },
      {
        "nullable": null,
        "types": [
          "function(err: Error, file: AtviseFile)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured\nwhile transforming the script, or the file passed through."
      }
    ],
    "return": null
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "createCombinedFile",
    "memberof": "src/transform/ScriptTransformer.js~ScriptTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transform/ScriptTransformer.js~ScriptTransformer#createCombinedFile",
    "access": "public",
    "description": "Creates a script from the collected files.",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map<String, AtviseFile>"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "The collected files, stored against their extension."
      },
      {
        "nullable": null,
        "types": [
          "AtviseFile"
        ],
        "spread": false,
        "optional": false,
        "name": "lastFile",
        "description": "The last file read. *Used for error messages only*."
      },
      {
        "nullable": null,
        "types": [
          "function(err: ?Error, data: vinyl~File)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called with the error that occured\nwhile creating the script or the resulting file."
      }
    ],
    "return": null
  },
  {
    "__docId__": 325,
    "kind": "file",
    "name": "src/typedef/external/inquirer.js",
    "content": "/**\n * @external {Inquirer} https://github.com/sboudrias/Inquirer.js\n */\n\n/**\n * Must be one of: 'list', 'rawlist', 'expand', 'checkbox', 'confirm', 'input', 'password',\n * 'editor'.\n * @typedef {String} inquirer~PromptType\n * @see https://github.com/sboudrias/Inquirer.js#prompt-types\n */\n\n/**\n * A function that, when called with a value, validates this value and either retunrs `true` if\n * validation succeeded or an error message.\n * @typedef {function(value: String): Boolean|String} inquirer~Validator\n */\n",
    "static": true,
    "longname": "/home/circleci/project/src/typedef/external/inquirer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 326,
    "kind": "external",
    "name": "Inquirer",
    "externalLink": "https://github.com/sboudrias/Inquirer.js",
    "memberof": "src/typedef/external/inquirer.js",
    "static": true,
    "longname": "src/typedef/external/inquirer.js~Inquirer",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 327,
    "kind": "typedef",
    "name": "inquirer~PromptType",
    "memberof": "src/typedef/external/inquirer.js",
    "static": true,
    "longname": "src/typedef/external/inquirer.js~inquirer~PromptType",
    "access": "public",
    "description": "Must be one of: 'list', 'rawlist', 'expand', 'checkbox', 'confirm', 'input', 'password',\n'editor'.",
    "see": [
      "https://github.com/sboudrias/Inquirer.js#prompt-types"
    ],
    "type": {
      "types": [
        "String"
      ],
      "optional": false,
      "name": "inquirer~PromptType"
    }
  },
  {
    "__docId__": 328,
    "kind": "typedef",
    "name": "inquirer~Validator",
    "memberof": "src/typedef/external/inquirer.js",
    "static": true,
    "longname": "src/typedef/external/inquirer.js~inquirer~Validator",
    "access": "public",
    "description": "A function that, when called with a value, validates this value and either retunrs `true` if\nvalidation succeeded or an error message.",
    "type": {
      "types": [
        "function(value: String): Boolean",
        "String"
      ],
      "optional": false,
      "name": "inquirer~Validator"
    }
  },
  {
    "__docId__": 329,
    "kind": "file",
    "name": "src/typedef/external/node-opcua.js",
    "content": "/**\n * @external {node-opcua} http://node-opcua.github.io/api_doc/\n */\n\n/**\n * @external {node-opcua~NodeId} http://node-opcua.github.io/api_doc/classes/NodeId.html\n */\n\n/**\n * @external {node-opcua~NodeIdType} http://node-opcua.github.io/api_doc/classes/NodeIdType.html\n */\n\n/**\n * @external {node-opcua~OPCUAClient} http://node-opcua.github.io/api_doc/classes/OPCUAClient.html\n */\n\n/**\n * @external {node-opcua~ClientSession} http://node-opcua.github.io/api_doc/classes/ClientSession.html\n */\n\n/**\n * @external {node-opcua~ClientSubscription} http://node-opcua.github.io/api_doc/classes/ClientSubscription.html\n */\n\n/**\n * @external {node-opcua~DataValue} http://node-opcua.github.io/api_doc/classes/DataValue.html\n */\n\n/**\n * @external {node-opcua~ReferenceDescription} http://node-opcua.github.io/api_doc/classes/ReferenceDescription.html\n */\n\n/**\n * @external {node-opcua~DataType} https://github.com/node-opcua/node-opcua/blob/master/schemas/DataType_enum.js\n */\n\n/**\n * @external {node-opcua~VariantArrayType} https://github.com/node-opcua/node-opcua/blob/master/schemas/VariantArrayType_enum.js\n */\n\n/**\n * @external {node-opcua~StatusCodes} https://github.com/node-opcua/node-opcua/blob/master/lib/raw_status_codes.js\n */\n",
    "static": true,
    "longname": "/home/circleci/project/src/typedef/external/node-opcua.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 330,
    "kind": "external",
    "name": "node-opcua",
    "externalLink": "http://node-opcua.github.io/api_doc/",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 331,
    "kind": "external",
    "name": "node-opcua~NodeId",
    "externalLink": "http://node-opcua.github.io/api_doc/classes/NodeId.html",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~NodeId",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 332,
    "kind": "external",
    "name": "node-opcua~NodeIdType",
    "externalLink": "http://node-opcua.github.io/api_doc/classes/NodeIdType.html",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~NodeIdType",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 333,
    "kind": "external",
    "name": "node-opcua~OPCUAClient",
    "externalLink": "http://node-opcua.github.io/api_doc/classes/OPCUAClient.html",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~OPCUAClient",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 334,
    "kind": "external",
    "name": "node-opcua~ClientSession",
    "externalLink": "http://node-opcua.github.io/api_doc/classes/ClientSession.html",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~ClientSession",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 335,
    "kind": "external",
    "name": "node-opcua~ClientSubscription",
    "externalLink": "http://node-opcua.github.io/api_doc/classes/ClientSubscription.html",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~ClientSubscription",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 336,
    "kind": "external",
    "name": "node-opcua~DataValue",
    "externalLink": "http://node-opcua.github.io/api_doc/classes/DataValue.html",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~DataValue",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 337,
    "kind": "external",
    "name": "node-opcua~ReferenceDescription",
    "externalLink": "http://node-opcua.github.io/api_doc/classes/ReferenceDescription.html",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~ReferenceDescription",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 338,
    "kind": "external",
    "name": "node-opcua~DataType",
    "externalLink": "https://github.com/node-opcua/node-opcua/blob/master/schemas/DataType_enum.js",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~DataType",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 339,
    "kind": "external",
    "name": "node-opcua~VariantArrayType",
    "externalLink": "https://github.com/node-opcua/node-opcua/blob/master/schemas/VariantArrayType_enum.js",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~VariantArrayType",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 340,
    "kind": "external",
    "name": "node-opcua~StatusCodes",
    "externalLink": "https://github.com/node-opcua/node-opcua/blob/master/lib/raw_status_codes.js",
    "memberof": "src/typedef/external/node-opcua.js",
    "static": true,
    "longname": "src/typedef/external/node-opcua.js~node-opcua~StatusCodes",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 341,
    "kind": "file",
    "name": "src/typedef/external/node.js",
    "content": "/**\n * @external {events~Emitter} https://nodejs.org/api/events.html#events_class_eventemitter\n */\n\n/**\n * @external {fs~Stats} https://nodejs.org/api/fs.html#fs_class_fs_stats\n */\n",
    "static": true,
    "longname": "/home/circleci/project/src/typedef/external/node.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 342,
    "kind": "external",
    "name": "events~Emitter",
    "externalLink": "https://nodejs.org/api/events.html#events_class_eventemitter",
    "memberof": "src/typedef/external/node.js",
    "static": true,
    "longname": "src/typedef/external/node.js~events~Emitter",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 343,
    "kind": "external",
    "name": "fs~Stats",
    "externalLink": "https://nodejs.org/api/fs.html#fs_class_fs_stats",
    "memberof": "src/typedef/external/node.js",
    "static": true,
    "longname": "src/typedef/external/node.js~fs~Stats",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 344,
    "kind": "file",
    "name": "src/typedef/external/sane.js",
    "content": "/**\n * @external {sane~Watcher} https://github.com/amasad/sane\n */\n",
    "static": true,
    "longname": "/home/circleci/project/src/typedef/external/sane.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 345,
    "kind": "external",
    "name": "sane~Watcher",
    "externalLink": "https://github.com/amasad/sane",
    "memberof": "src/typedef/external/sane.js",
    "static": true,
    "longname": "src/typedef/external/sane.js~sane~Watcher",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 346,
    "kind": "file",
    "name": "src/typedef/external/vinyl.js",
    "content": "/**\n * @external {vinyl~File} https://github.com/gulpjs/vinyl#new-vinyloptions\n */\n",
    "static": true,
    "longname": "/home/circleci/project/src/typedef/external/vinyl.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 347,
    "kind": "external",
    "name": "vinyl~File",
    "externalLink": "https://github.com/gulpjs/vinyl#new-vinyloptions",
    "memberof": "src/typedef/external/vinyl.js",
    "static": true,
    "longname": "src/typedef/external/vinyl.js~vinyl~File",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 348,
    "kind": "file",
    "name": "src/typedef/external/xml2js.js",
    "content": "/**\n * @external {xml2js~Builder} https://github.com/Leonidas-from-XIV/node-xml2js#options-for-the-builder-class\n */\n",
    "static": true,
    "longname": "/home/circleci/project/src/typedef/external/xml2js.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 349,
    "kind": "external",
    "name": "xml2js~Builder",
    "externalLink": "https://github.com/Leonidas-from-XIV/node-xml2js#options-for-the-builder-class",
    "memberof": "src/typedef/external/xml2js.js",
    "static": true,
    "longname": "src/typedef/external/xml2js.js~xml2js~Builder",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 350,
    "kind": "file",
    "name": "src/util/cleanup.js",
    "content": "import readline from 'readline';\nimport Logger from 'gulplog';\nimport Session from '../lib/server/Session';\n\n/**\n * Cleans up after the app ended with the specified code or signal.\n * @param {?Number} exitCode The exit code received.\n * @param {?string} signal The signal that triggered the exit.\n * @param {function()} uninstall\n * @return {boolean} `true` if the process should continue exiting.\n */\nexport default function cleanup(exitCode, signal, uninstall) {\n  uninstall();\n\n  if (signal === 'SIGINT') {\n    readline.clearLine(process.stdout);\n    readline.cursorTo(process.stdout, 0);\n    Logger.warn('Ctrl-C');\n  }\n\n  Logger.debug('Running cleanup...');\n\n  if (Session.open.length > 0) {\n    Logger.debug('  Closing', Session.open.length, 'open sessions...');\n\n    // Ignore further gulp error messages\n    Logger.removeAllListeners('error');\n    Logger.on('error', () => {});\n\n    Session.closeOpen()\n      .then(() => process.kill(process.pid, signal))\n      .catch(e => {\n        Logger.error('Error in cleanup', e.message);\n        process.kill(process.pid, signal);\n      });\n\n    return false;\n  }\n\n  return true;\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/util/cleanup.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 351,
    "kind": "function",
    "name": "cleanup",
    "memberof": "src/util/cleanup.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/cleanup.js~cleanup",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/util/cleanup.js",
    "importStyle": "cleanup",
    "description": "Cleans up after the app ended with the specified code or signal.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": true,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "exitCode",
        "description": "The exit code received."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signal",
        "description": "The signal that triggered the exit."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "uninstall",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "`true` if the process should continue exiting."
    }
  },
  {
    "__docId__": 352,
    "kind": "file",
    "name": "src/util/fs.js",
    "content": "import { resolve as resolvePath } from 'path';\nimport { stat } from 'fs';\n\n/**\n * Returns the {@link fs~Stats} for a path.\n * @param {string} path The path to look at.\n * @return {Promise<fs~Stats, Error>} Fulfilled with the requested stats or rejected with the error\n * that occurred.\n */\nexport function getStat(path) {\n  return new Promise((resolve, reject) => {\n    stat(resolvePath(path), (err, stats) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(stats);\n      }\n    });\n  });\n}\n\n/**\n * Checks it a given path holds a directory and returns it's {@link fs~Stats} if found.\n * @param {string} directoryPath The path to look at.\n * @return {Promise<fs~Stats, Error>} Fulfilled with the directory's stats or rejected with the\n * error that occurred.\n */\nexport function validateDirectoryExists(directoryPath) {\n  return getStat(directoryPath)\n    .then(stats => {\n      if (!(stats.isDirectory())) {\n        throw new Error(`${resolvePath(directoryPath)} is not a directory`);\n      }\n\n      return stat;\n    });\n}\n",
    "static": true,
    "longname": "/home/circleci/project/src/util/fs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 353,
    "kind": "function",
    "name": "getStat",
    "memberof": "src/util/fs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/fs.js~getStat",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/util/fs.js",
    "importStyle": "{getStat}",
    "description": "Returns the {@link fs~Stats} for a path.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path to look at."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<fs~Stats, Error>"
      ],
      "spread": false,
      "description": "Fulfilled with the requested stats or rejected with the error\nthat occurred."
    }
  },
  {
    "__docId__": 354,
    "kind": "function",
    "name": "validateDirectoryExists",
    "memberof": "src/util/fs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/fs.js~validateDirectoryExists",
    "access": "public",
    "export": true,
    "importPath": "atscm/src/util/fs.js",
    "importStyle": "{validateDirectoryExists}",
    "description": "Checks it a given path holds a directory and returns it's {@link fs~Stats} if found.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "directoryPath",
        "description": "The path to look at."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<fs~Stats, Error>"
      ],
      "spread": false,
      "description": "Fulfilled with the directory's stats or rejected with the\nerror that occurred."
    }
  },
  {
    "kind": "index",
    "content": "# atscm\n\n> Source code management utilities for atvise\n\n[![CircleCI](https://circleci.com/gh/atSCM/atscm.svg?style=shield)](https://circleci.com/gh/atSCM/atscm)\n[![AppVeyor](https://ci.appveyor.com/api/projects/status/d9e5vi6a7ygisjsr?svg=true&pendingText=windows%20tests%20pending&passingText=windows%20tests%20passing&failingText=windows%20tests%20failing)](https://ci.appveyor.com/project/LukasHechenberger/atscm)\n[![codecov](https://codecov.io/gh/atSCM/atscm/branch/master/graph/badge.svg)](https://codecov.io/gh/atSCM/atscm)\n[![ESDoc](https://doc.esdoc.org/github.com/atSCM/atscm/badge.svg)](https://doc.esdoc.org/github.com/atSCM/atscm/)\n\n*atscm* is a [node.js](https://nodejs.org) based utility that stores the contents of atvise projects on the file system. This has several benefits to advanced atvise developers:\n\n - atvise project can be put under source control (e.g. using *git*)\n - source code can be edited in external editors\n - easier unit testing\n - easier source code linting / static analysis\n - source files can be preprocessed by using custom transformers: <!-- TODO: Insert links -->\n   - using alternate programming languages such as [ES2015 JavaScript](http://babeljs.io/learn-es2015/) or [TypeScript](http://www.typescriptlang.org)\n   - using alternate markup languages such as [pug](https://pugjs.org)\n   - using templating engines such as [handlebars](http://handlebarsjs.com)\n\n## Installation\n\nThis module can be installed via [atscm-cli](https://github.com/atSCM/atscm-cli).\n\n<details>\n<summary><strong>Installing <i>atscm-cli</i></strong></summary>\n\n - Make sure [node.js](https://nodejs.org) (version 6 or later) is installed by running `node --version`.\n - Make sure [npm](https://www.npmjs.com) is installed by running `npm --version`.\n - Run `npm install --global atscm-cli` to install *atscm-cli* globally. *You may have to run this command as an administrator.*\n\n</details>\n\nWith [atscm-cli](https://github.com/atSCM/atscm-cli) installed run `atscm init` to create a new *atscm* project.\n\n## Basic usage\n\n**Pulling nodes from atvise server**\n\nRunning `atscm pull` will download all nodes from atvise server into the `./src` folder inside your project.\n\nBy default only displays, serverside scripts and quickdynamics will be split into their JavaScript and SVG sources. You can specify additional transformers to use in your [Project configuration](#project-configuration) file.\n\n**Pushing source files to atvise server**\n\nRunning `atscm push` will update all nodes from the contents of your `./src` folder.\n\n**Automatically watching for changes**\n\nAfter running `atscm watch` files and atvise server nodes are watched for changes. If a file changes, the file is pushed, if a node changes this node is pulled.\n\n`atscm watch` is very useful if you want edit source files in an external editor but still have the ability to use *atvise builder*'s drag and drop functionality.\n\n## Project configuration\n\nAn atscm project's configuration is stored inside the *Atviseproject* file inside your project root. See the [Atviseproject class reference](https://doc.esdoc.org/github.com/atSCM/atscm/class/src/lib/config/Atviseproject.js~Atviseproject.html) for available options.\n",
    "longname": "/home/circleci/project/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"atscm\",\n  \"version\": \"0.4.0-beta.10\",\n  \"description\": \"Source code management utilities for atvise\",\n  \"main\": \"out/index.js\",\n  \"engines\": {\n    \"node\": \">=6.0\",\n    \"atscm-cli\": \">=0.2.0\"\n  },\n  \"scripts\": {\n    \"compile\": \"babel src --out-dir out --source-maps\",\n    \"compile:watch\": \"npm run compile -- --watch\",\n    \"commitmsg\": \"conventional-changelog-lint -e\",\n    \"docs\": \"esdoc -c esdoc.json\",\n    \"docs:coverage\": \"esdoc-coverage -c esdoc.json\",\n    \"lint\": \"eslint src\",\n    \"lint:test\": \"eslint test\",\n    \"prepublishOnly\": \"npm run compile && npm run docs\",\n    \"test\": \"cross-env NODE_ENV=test mocha --recursive --require babel-register \\\"test/src/**/*.spec.js\\\" --require ./test/prepare --timeout 10000\",\n    \"test:watch\": \"npm test -- --watch --reporter min\",\n    \"test:coverage\": \"nyc --reporter=html npm test\",\n    \"test:docs\": \"blcl docs/api --exclude https://circleci.com/gh/atSCM/atscm\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/atSCM/atscm.git\"\n  },\n  \"author\": \"Lukas Hechenberger <lukas.hechenberger@bachmann.info>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/atSCM/atscm/issues\"\n  },\n  \"homepage\": \"https://github.com/atSCM/atscm#readme\",\n  \"devDependencies\": {\n    \"@ls-age/esdoc-coverage\": \"^0.1.6\",\n    \"babel-cli\": \"^6.18.0\",\n    \"babel-core\": \"^6.22.1\",\n    \"babel-plugin-istanbul\": \"^3.0.0\",\n    \"babel-preset-node6\": \"^11.0.0\",\n    \"babel-register\": \"^6.18.0\",\n    \"broken-link-checker-local\": \"^0.1.1\",\n    \"codecov\": \"^3.0.0\",\n    \"coffee-script\": \"^1.12.3\",\n    \"conventional-changelog-cli\": \"^1.3.4\",\n    \"conventional-changelog-lint\": \"^1.1.9\",\n    \"conventional-github-releaser\": \"^1.1.10\",\n    \"cross-env\": \"^3.2.3\",\n    \"esdoc\": \"^1.0.3\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^3.11.1\",\n    \"eslint-config-lsage\": \"^0.1.0\",\n    \"eval\": \"^0.1.2\",\n    \"husky\": \"^0.13.3\",\n    \"mocha\": \"^3.2.0\",\n    \"mocha-circleci-reporter\": \"0.0.2\",\n    \"nyc\": \"^10.3.2\",\n    \"proxyquire\": \"^1.7.11\",\n    \"sinon\": \"^2.3.4\",\n    \"standard-version\": \"^4.2.0\",\n    \"typescript\": \"^2.1.5\",\n    \"unexpected\": \"^10.20.0\",\n    \"unexpected-sinon\": \"^10.7.0\",\n    \"unexpected-stream\": \"^2.1.0\",\n    \"yargs\": \"^6.5.0\"\n  },\n  \"dependencies\": {\n    \"browser-sync\": \"^2.18.6\",\n    \"gulp\": \"github:gulpjs/gulp#4.0\",\n    \"gulp-compile-handlebars\": \"^0.6.1\",\n    \"gulp-filter\": \"^5.0.0\",\n    \"gulplog\": \"^1.0.0\",\n    \"handlebars-helpers\": \"^0.8.0\",\n    \"node-cleanup\": \"^2.1.2\",\n    \"node-opcua\": \"0.0.60\",\n    \"sane\": \"^1.6.0\",\n    \"stream-to-promise\": \"^2.2.0\",\n    \"through2\": \"^2.0.3\",\n    \"validate-npm-package-name\": \"^2.2.2\",\n    \"vinyl\": \"^2.0.1\",\n    \"xml2js\": \"^0.4.17\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"lsage\"\n  },\n  \"babel\": {\n    \"presets\": [\n      \"node6\"\n    ],\n    \"env\": {\n      \"test\": {\n        \"plugins\": [\n          \"istanbul\"\n        ]\n      }\n    }\n  },\n  \"nyc\": {\n    \"all\": true,\n    \"include\": [\n      \"src/**/*.js\"\n    ],\n    \"exclude\": [\n      \"res/**/*.*\"\n    ],\n    \"require\": [\n      \"babel-register\"\n    ],\n    \"sourceMap\": false,\n    \"instrument\": false,\n    \"check-coverage\": true\n  },\n  \"standard-version\": {\n    \"skip\": {\n      \"changelog\": true,\n      \"tag\": true\n    },\n    \"scripts\": {\n      \"postbump\": \"./node_modules/.bin/conventional-changelog -r 0 -i CHANGELOG.md --same-file --preset angular\"\n    }\n  }\n}\n",
    "longname": "/home/circleci/project/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": false,
    "content": null,
    "longname": "",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/circleci/project/docs/manual/advanced/gulp-plugins.md",
    "name": "./docs/manual/advanced/gulp-plugins.md",
    "content": "# Guide: gulp.js plugins\n\n> **Please note:** This guide assumes you have a basic knowledge on how gulp.js and custom *atscm* transformers work. You may go through [gulp's getting started guide](https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md) or the [custom transformer tutorial](https://doc.esdoc.org/github.com/atSCM/atscm/manual/tutorial/custom-transformer.html) first otherwise.   \n\n*atscm* heavily relies on the [gulp.js](http://gulpjs.com) build tool. Therefore it's pretty easy to integrate existing [gulp plugins](http://gulpjs.com/plugins/) into *atscm* transformers.\n\n## Using *Transformer* class\n\nBasically, the only Transformer method you have to override is [Transformer#applyToStream](https://doc.esdoc.org/github.com/atSCM/atscm/class/src/lib/transform/Transformer.js~Transformer.html#instance-method-applyToStream). In there, you can pipe your gulp plugin just as you would do in a regular gulp project. The only difference is, that you have to handle the current transform direction as well:\n\n**A basic example:**\n\n```javascript\nimport { Transformer, TransformDirection } from 'atscm';\nimport fromDBGulpPlugin from 'gulp-plugin-to-use-from-db';\nimport fromFSGulpPlugin from 'gulp-plugin-to-use-from-fs';\n\nclass MyTransformer extends Transformer {\n\n  applyToStream(stream, direction) {\n    if (direction === TransformDirection.FromDB) {\n      return stream.pipe(fromDBGulpPlugin(/* plugin options */));\n    }\n\n    return stream.pipe(fromFSGulpPlugin(/* plugin options */));\n  }\n\n}\n```\n\n## Using *PartialTransformer* class\n\nIn most cases you'll have to transform only parts of the piped files. This can be done by inheriting from [PartialTransfomer class](https://doc.esdoc.org/github.com/atSCM/atscm/class/src/lib/transform/PartialTransformer.js~PartialTransformer.html):\n\n**Transforming only JavaScript files:**\n\n```javascript\nimport { PartialTransformer, TransformDirection } from 'atscm';\nimport fromDBGulpPlugin from 'gulp-plugin-to-use-from-db';\nimport fromFSGulpPlugin from 'gulp-plugin-to-use-from-fs';\n\nclass MyPartialTransformer extends PartialTransformer {\n\n  shouldBeTransformed(file) {\n    return file.extname === '.js';\n  }\n\n  applyToFilteredStream(stream, direction) {\n    if (direction === TransformDirection.FromDB) {\n      return stream.pipe(fromDBGulpPlugin(/* plugin options */));\n    }\n\n    return stream.pipe(fromFSGulpPlugin(/* plugin options */));\n  }\n\n}\n```\n\n## Conclusion\n\nUsing existing gulp plugins is probably the easiest way to use custom transformers inside an *atscm* project. As there are **thousands of well-tested gulp-plugins** out there, you won't have to implemtent any transform logic in most cases.\n\nGive it a try!\n\n## Further reading\n\n - Take a look at [gulp's plugin page](http://gulpjs.com/plugins/) for a list of available plugins.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/circleci/project/docs/manual/tutorial/custom-transformer.md",
    "name": "./docs/manual/tutorial/custom-transformer.md",
    "content": "# Tutorial: Custom Transformer\n\n> tl;dr: Jump to the [tutorial-custom-transformer repository](https://github.com/atSCM/tutorial-custom-transformer) to see the results.\n\nIn this document we'll guide you through the steps necessary to implement a custom Transformer.\nOur transformer will use [Babel](http://babeljs.io) to transpile ES2015/ES6 JavaScript to plain ES5 JavaScript that works in all Browsers.\n\n## Overview\n\nCustom transformers provide an easy way to extend the build functionality of *atscm*. Basically, a transformer implements two behaviours: How atvise server nodes are mapped to files (when running `atscm pull`) and vice versa (when running `atscm push`).\n\n**Where to store transformers**\n\nBasically, transformers can be stored anywhere inside your *atscm* project. When using a non-ES5 configuration language (such as ES2015 or TypeScript, chosen when running `atscm init`) transformers should also be written in this language. *atscm* will handle the transpilation of your transformer code automatically. If you plan to write multiple custom transformers for your project, it is recommended to create your transformers in an own directory, e.g `./atscm`.\n\n## Step 0: Project setup\n\nIn order to have the same starting point, create a new *atscm* project to follow this tutorial. Run `atscm init` and **pick ES2015 as configuration language**.\n\nAs for now the atvise library is written in old ES5 JavaScript, we'll ignore it in our project. Adjust your project configuration accordingly:\n\n```javascript\n// Atviseproject.babel.js\n\n...\n\nexport default class MyProject extends Atviseproject {\n  ...\n  \n  static get ignoreNodes() {\n    return super.ignoreNodes\n      .concat(['ns=1;s=SYSTEM.LIBRARY.ATVISE']);\n  }\n  \n}\n```\n\nNow we're ready to pull the project by running:\n\n```\natscm pull\n```\n\nWe'll use the default project files for testing later.\n\nAs suggested above, we'll store our custom transformer inside a new directory, `./atscm`. Create the directory and an empty file called *BabelTransformer.js*:\n\n```bash\nmkdir atscm\ntouch atscm/BabelTransformer.js\n```\n\nBy now you should have a project containing an `./Atviseproject.babel.js` and an empty `./atscm/BabelTransformer.js` file.\nMake sure the `./src` directory contains at least the *default Main display* which should exist inside `./src/AGENT/DISPLAYS/Main.display`.\n\n## Step 1: Import *PartialTransformer* class\n\nAs we don't want to implement things twice we'll subclass *atscm*'s [Transformer class](https://doc.esdoc.org/github.com/atSCM/atscm/class/src/lib/transform/Transformer.js~Transformer.html). As our transformer shall only be used for JavaScript source files we can even use the [PartialTransformer class](https://doc.esdoc.org/github.com/atSCM/atscm/class/src/lib/transform/PartialTransformer.js~PartialTransformer.html) which supports filtering source files out of the box. As both of these classes are exported from *atscm*'s main file, importing them is pretty straightforward. Inside the *BabelTransformer.js* file add:\n \n```javascript\n// atscm/BabelTransformer.js\n\nimport { PartialTransformer } from 'atscm';\n```\n\n## Step 2: Create the *BabelTransformer* class\n\nThe next step is to create and export our Transformer class:\n\n```javascript\n// atscm/BabelTransformer.js\n\nimport { PartialTransformer } from 'atscm';\n\nexport default class BabelTransformer extends PartialTransformer {\n  \n}\n```\n\nWe just created a *PartialTransformer* subclass that is exported as the file's default export. For more detailed information on ES2015's module system [take a look at the docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export). \n\n## Step 3: Use *BabelTransformer*\n\nBy default, *atscm* uses just some standard transformers. Any additional transformers must be configured to use inside the project's *Atviseproject* file.\n\nFirst of all, we have to import our newly created *BabelTransformer* class:\n\n```javascript\n// Atviseproject.babel.js\n\nimport { Atviseproject } from 'atscm'\nimport BabelTransformer from './atscm/BabelTransformer';\n\nexport default class MyProject extends Atviseproject { ... }\n```\n\nNow we override the *Atviseproject.useTransformers* [getter](https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Functions/get) to use our transformer:\n\n```javascript\n// Atviseproject.babel.js\n\n...\n\nexport default class MyProject extends Atviseproject {\n  ...\n  \n  static get useTransformers() {\n    return super.useTransformers\n      .concat(new BabelTransformer());\n  }\n  \n}\n```\n\nThis statement tells *atscm* to use a new *BabelTransformer* instance **in addition to the default transformers** (`super.useTransformers`).\n\nTo verify everything worked so far run `atscm config`. Our new Transformer should show up in the *useTransformers* section:\n\n```\n$ atscm config\n[08:38:16] Configuration at ~/custom-transformer/Atviseproject.babel.js \n{ host: '10.211.55.4',\n  port: \n   { opc: 4840,\n     http: 80 },\n  useTransformers: \n   [ DisplayTransformer<>,\n     ScriptTransformer<>,\n     BabelTransformer<> ],\n  ...\n```\n\n## Step 4: Implement *PartialTransformer#shouldBeTransformed*\n\n[PartialTransformer#shouldBeTransformed](https://doc.esdoc.org/github.com/atSCM/atscm/class/src/lib/transform/PartialTransformer.js~PartialTransformer.html#instance-method-shouldBeTransformed) is responsible for filtering the files we want to transform. Returning `true` means the piped file will be transformed, `false` bypasses the file.\n \nIn out case we want to edit all JavaScript source files. Therefore we return true for all files with the extension `.js`. Edit *BabelTransformer.js* accordingly:\n\n```javascript\n// atscm/BabelTransformer\n\n...\n\nexport default class BabelTransformer extends PartialTransformer {\n\n  shouldBeTransformed(file) {\n    return file.extname === '.js';\n  }\n\n}\n```\n\n## Step 5: Implement *Transformer#transformFromFilesystem*\n\nImplementing [Transformer#transformFromFilesystem](https://doc.esdoc.org/github.com/atSCM/atscm/class/src/lib/transform/Transformer.js~Transformer.html#instance-method-transformFromFilesystem) is probably the most important part of this tutorial. In here we define the logic that actually creates ES5 code from ES2015 sources.\n\nFirst of all, we need to **install additional dependencies** required. Running\n\n```bash\nnpm install --save-dev babel-core babel-preset-2015\n```\n\nwill install [Babel](http://babeljs.io) and it's ES2015 preset. This preset ensures all ES5 compatible browsers will be able to run the resulting code.\n\nWe will also need the [node.js buffer module](https://nodejs.org/api/buffer.html). We don't need to install it, as it comes with every node installation.\n\nNext, import these modules as usual:\n\n```javascript\n// atscm/BabelTransformer.js\n\nimport { Buffer } from 'buffer';\nimport { PartialTransformer } from 'atscm';\nimport { transform } from 'babel-core';\n\n...\n```\n\nThe import order follows a pretty usual convention:\n\n 1. Core **node.js modules** (*buffer* in our case)\n 2. Other **external modules** (*babel-core* and *atscm* in our case)\n 3. **Relative modules** (*./atscm/BabelTransformer.js* inside *Atviseproject.babel.js* in our case)\n \nNow we're ready to implement *Transformer#transformFromFilesystem*. What we're about to do is pretty simple:\n \n - We'll transpile the contents of the passed file with babels *transform* method\n - We clone the passed file and set it's contents to a Buffer containing the resulting code\n - We pass the resulting file to other streams\n\n```javascript\nimport ...\n\nexport default class BabelTransformer extends PartialTransformer {\n  \n  static shouldBeTransformed(file) { ... }\n  \n  transformFromFilesystem(file, enc, callback) {\n    // Create ES5 code\n    const { code } = transform(file.contents, {\n      presets: ['es2015']\n    });\n    \n    // Create new file with ES5 content\n    const result = file.clone();\n    result.contents = Buffer.from(code);\n    \n    // We're done, pass the new file to other streams\n    callback(null, result);\n  }\n  \n}\n```\n\n**Wow!** You just implemented your first custom transformer! Now we can write any scripts using the new ES2015 syntax.\n\n## Step 6: Test *BabelTransformer*\n\nIt's time to check if everything works as expected. Create a script file for the Main display containing ES2015 JavaScript:\n \n```javascript\n// src/AGENT/DISPLAYS/Main.display/Main.js\n\n// Class syntax\nclass Test {\n\n  constructor(options = {}, ...otherArgs) { // Default values and rest params\n    this.options = options;\n    this.args = otherArgs.map(arg => parseInt(arg, 10)); // Arrows and Lexical This\n  }\n\n}\n\nconst a = 13; // Constants\nconst { options, args } = new Test({ a }, '23'); // Enhanced Object Literals\n\nalert(`Option a: ${options.a}, args: ${args.join(', ')}`); // Template Strings\n```\n\nRun `atscm push` to upload the new display script to atvise server. Open your atvise project in your favorite browser (you may have to delete the browser cache) and if everything worked you should see an alert box containing the text \"Option a: 13, args: 23\". When you inspect the page's source you'll see the display script code was transpiled to ES5.\n\n## Step 7: Implement *Transformer#transformFromDB*\n\nAs said at the beginning, atscm transformers allow transformation from and to the filesystem. A babel transpilation is a one-way process, meaning you cannot create ES2015 source code from the resulting ES5 code. Therefore the only thing we can do when transforming from atvise server to the filesystem is to prevent an override.\n  \nWe do so by implementing [Transformer#transformFromDB](https://doc.esdoc.org/github.com/atSCM/atscm/class/src/lib/transform/Transformer.js~Transformer.html#instance-method-transformFromDB):\n\n```javascript\n// atscm/BabelTransformer.js\n...\n\nexport default class BabelTransformer extends PartialTransfromer {\n  ...\n  \n  transformFromDB(file, enc, callback) {\n    // Optionally, we could print a warning here\n    callback(null); // Ignore file, remove it from the stream\n  }\n}\n```\n\nNow we can run `atscm push` without overriding our ES2015 source code.\n\n## Result\n\nThis is how your custom transformer should look now:\n\n```javascript\n// atscm/BabelTransformer.js\n\nimport { Buffer } from 'buffer';\nimport { PartialTransformer } from 'atscm';\nimport { transform } from 'babel-core';\n\nexport default class BabelTransformer extends PartialTransformer {\n\n  shouldBeTransformed(file) {\n    return file.extname === '.js';\n  }\n\n  transformFromFilesystem(file, enc, callback) {\n    // Create ES5 code\n    const { code } = transform(file.contents, {\n      presets: ['es2015'],\n    });\n\n    // Create new file with ES5 content\n    const result = file.clone();\n    result.contents = Buffer.from(code);\n\n    // We're done, pass the new file to other streams\n    callback(null, result);\n  }\n\n  transformFromDB(file, enc, callback) {\n    callback(null); // Ignore file, remove it from the stream\n  }\n\n}\n```\n\n## Conclusion\n\nWe just created a custom Transformer in no time. It transpiles ES2015 code on push and prevents overriding this code on pull.\n\nOf course there are many ways to improve the transformer, for example:\n\n - Handle options to configure how babel transpiles the source code\n \n## Further reading\n\n - [babeljs.io](http://babeljs.io/learn-es2015/) provides a nice overview of ES2015 features. You can also use the [REPL](http://babeljs.io/repl/) to try out these features.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/circleci/project/.github/CONTRIBUTING.md",
    "name": "./.github/CONTRIBUTING.md",
    "content": "# Contributing\n\nWe would love for you to contribute to atSCM. As a contributor, here are the guidelines we would like you to follow:\n\n## Found a bug?\n\nIf you find a bug in the source code, you can help us by submitting an issue to this repository. Even better, you can submit a Pull Request with a fix.\n\n## Missing a feature?\n\nYou can *request* a new feature by submitting an issue to this repository. If you would like to *implement* a new feature, please submit an issue with a proposal for your work first, to be sure that we can use it.\n\n## Submission Guidelines\n\n### Submitting an issue\n\nBefore you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available.\n\nWe can only fix an issue if we can reproduce it. To help us provide the following information in your issue description:\n\n - **The original error message:** Any console output regarding the issue. Consider running *atscm* with verbose logging (using the command line option `-LLLL`) to get more error details.\n - ***atscm* and *atscm-cli* versions used:** The results of `atscm --version`.\n - **atvise server version used**\n - ***node* and *npm* versions used:** The results of `node --version` and `npm version`.\n - **Special project setup:** Any default overrides to your `Atviseproject.js` file, such as custom Transformers.\n\n### Submitting a Pull Request (PR)\n\nBefore you submit your Pull Request (PR) consider the following guidelines:\n\n - Search GitHub for an open or closed PR that relates to your submission. You don't want to duplicate effort.\n - Make your changes in a new git branch: Run `git checkout -b my-fix-branch master`\n - Create your patch, **including appropriate test cases**.\n - Run the full test suite and ensure all tests pass.\n - Commit your changes using a descriptive commit message that follows our commit message conventions. Adherence to these conventions is necessary because release notes are automatically generated from these messages.\n - Push your branch to GitHub and create a pull request **to merge back to the beta branch**.\n - Once we reviewed your changes, we'll merge your pull request.\n\n> **Merge strategy (Maintainers only)**\n> - Accepted changes from fix/feature branches **should always be squash-merged** to beta.\n> - Once beta is stable **create a regular merge commit** to merge back to master.\n> - After merging to master, changes should be synced back to the beta branch. To do so, run:\n>   ```bash\n>   git checkout beta\n>   git fetch\n>   git rebase origin/master\n>   # Solve conflicts if any, accepting changes from master\n>   git commit -m 'chore: Update from master'\n>   git push\n>   ```\n\n## Code quality control\n\n> All files inside this project are automatically built, linted and tested by [CircleCI](https://circleci.com/gh/atSCM/atscm).\n\nBuilds will only pass if they meet the following criteria:\n\n - **No ESLint errors:** We use [ESLint](http://eslint.org) to lint our entire JavaScript code. The config used is [eslint-config-lsage](https://www.npmjs.com/package/eslint-config-lsage). Any lint errors will cause the build to fail.\n - **Test coverage >= 90%:** We use [istanbul](https://gotwarlost.github.io/istanbul/) to validate test coverage is at least 90 percent. Any commits not covered by tests will cause the build to fail.\n - **Documentation coverage >= 90%:** Our source code is documented using [ESDoc](https://esdoc.org). We will only merge if your contribution is documented as well.\n\n## Setting up the development environment\n\n> In order to meet out coding guideline it's very useful to have your development environment set up right.\n\n### Linting files\n\nYou can lint all source files by running `npm run lint`. Although most IDEs support running it directly in the editor:\n\n**Jetbrains Webstorm**\n\n[Webstorm](https://www.jetbrains.com/webstorm/) has built-in support for ESLint. Check out [their documentation](https://www.jetbrains.com/help/webstorm/2016.3/eslint.html) to set it up.\n\n**Atom**\n\n[Atom](https://atom.io) has several packages that provide support for inline ESLint validation. We recommend you to use [linter-eslint](https://atom.io/packages/linter-eslint).\n\n### Running tests\n\nOur [mocha](https://mochajs.org) tests can be run by calling `npm test`. If you want the tests to be run right after you saved your changes, then run `npm run test:watch`.\n\n**Setup needed to run tests on atvise server**\n\nPlease note, that you have to **provide a valid atvise server connection** in order to get tests against atvise server running. You can achieve that by doing one of the following:\n\n - Set environment variables `ATVISE_USERNAME` and `ATVISE_PASSWORD` to valid credentials for the public atvise demo server at [demo.ativse.com](http://185.67.228.66:8888).\n - Adapt host, ports and login credentials inside `./test/fixtures/Atviseproject.babel.js`.\n\n**Check test coverage**\n\nTest coverage can be checked by running `npm run test:coverage`.\n\n### Creating API documentation\n\nRun `npm run docs` to create [ESDoc](https://esdoc.org) API documentation.\n\n<!-- TODO: Add steps for creating good issues -->\n<!-- TODO: Add links to documentation and manuals -->\n\n## Commit Message Guideline\n\nWe have very precise rules over how our git commit messages can be formatted. This leads to more readable messages that are easy to follow when looking through the project history. But also, we use the git commit messages to **generate the changelog**.\n\n### Commit message format\n\n> tl;dr: We use an adaption of the [angular commit message convention](https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-guidelines) with the only difference that capitalized subjects are allowed.\n\nEach commit message consists of a *header*, a *body* and a footer. The header has a special format that includes a *type*, a *scope* and a *subject*:\n\n```\n<type>(<scope>): <subject>\n\n<body>\n\n<footer>\n```\n\nThe *header* is mandatory and the *scope* of the *header* is optional. It cannot be longer than **72 characters**.\n\n**Samples**\n\n- Describe a documentation change\n\n  `docs(changelog): Update changelog for version 1.2.3`\n\n- Describes a bug fix affecting mapping\n  ```\n  fix(mapping): Replace invalid data type for html help documents\n\n  Prevents html help documents to have an invalid extension unter atvise server v3.1.0.\n\n  Closes #123\n  ```\n\n#### Type\n\nMust be one of the following:\n\n - **build:** Changes that affect the build system or external dependencies (example scopes: babel, npm)\n - **chore:** Maintainance tasks (example tasks: release)\n - **ci:** Changes to our CI configuration files and scripts (example scopes: circleci, appveyor, codecov)\n - **docs:** Documentation only changes\n - **feat:** A new feature\n - **fix:** A bug fix\n - **perf:** A code change that improves performance\n - **refactor:** A code change that neither fixes a bug nor adds a feature\n - **revert:** Reverts a previous commit.\n - **style:** Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\n - **test:** Adding missing tests or correcting existing tests\n\n#### Scope\n\nThe scope should describe the feature affected. Must be lower case.\n\n#### Subject\n\nThe subject contains succinct description of the change:\n\n - Use the imperative, present tense: \"change\" not \"changed\" nor \"changes\"\n - Capitalize first letter *(The only notable difference to the [angular commit message convention](https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-guidelines))*\n - no dot (.) at the end\n\n#### Body\n\nJust as in the subject, use the imperative, present tense: \"change\" not \"changed\" nor \"changes\". The body should include the motivation for the change and contrast this with previous behavior.\n\n#### Footer\n\nThe footer should contain any information about **Breaking Changes** and is also the place to reference GitHub issues that this commit **Closes**.\n\n**Breaking Changes** should start with the word `BREAKING CHANGE:` with a space or two newlines. The rest of the commit message is then used for this.\n\n### Commit message linting\n\nThe project is setup to use a **git hook that lints commit messages** before creating a commit. Do not bypass this hook.\n\nSee [husky's documentation on git GUI support](https://github.com/typicode/husky#git-gui-clients-support).\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/circleci/project/CHANGELOG.md",
    "name": "./CHANGELOG.md",
    "content": "<a name=\"0.4.0-beta.10\"></a>\n# [0.4.0-beta.10](https://github.com/atSCM/atscm/compare/v0.3.0...v0.4.0-beta.10) (2017-11-06)\n\n\n### Bug Fixes\n\n* **ci:** Deploy master and beta only ([1f38ea1](https://github.com/atSCM/atscm/commit/1f38ea1))\n* **docs:** Document deployment process ([#67](https://github.com/atSCM/atscm/issues/67)) ([998e195](https://github.com/atSCM/atscm/commit/998e195))\n* **init:** Do not escape author field in package.json ([#55](https://github.com/atSCM/atscm/issues/55)) ([160fffc](https://github.com/atSCM/atscm/commit/160fffc)), closes [#52](https://github.com/atSCM/atscm/issues/52)\n* **watch:** Warn if `src` directory does not exist ([2992025](https://github.com/atSCM/atscm/commit/2992025)), closes [#47](https://github.com/atSCM/atscm/issues/47)\n\n\n### Features\n\n* Override project configuration with `ATSCM_PROJECT` env variables ([8798d4e](https://github.com/atSCM/atscm/commit/8798d4e))\n* **ci:** Automated release ([#65](https://github.com/atSCM/atscm/issues/65)) ([dcf48b7](https://github.com/atSCM/atscm/commit/dcf48b7))\n* **debugging:** Generate source maps for generated files ([#69](https://github.com/atSCM/atscm/issues/69)) ([369db82](https://github.com/atSCM/atscm/commit/369db82))\n\n\n\n<a name=\"0.3.0\"></a>\n# [0.3.0](https://github.com/atSCM/atscm/compare/v0.2.4...v0.3.0) (2017-05-08)\n\n\n### Bug Fixes\n\n* **mapping:** Handle dirnames that contain multiple dots ([#43](https://github.com/atSCM/atscm/issues/43)) ([710fa4f](https://github.com/atSCM/atscm/commit/710fa4f))\n\n\n### Features\n\n* **transformer:** Use existing gulp plugins to implement custom transformers ([#49](https://github.com/atSCM/atscm/issues/49)) ([a6a3f71](https://github.com/atSCM/atscm/commit/a6a3f71))\n* **Transformer:** Stream based transformers ([96dfd58](https://github.com/atSCM/atscm/commit/96dfd58))\n\n\n### Reverts\n\n* Feature: Stream based transformers ([#40](https://github.com/atSCM/atscm/issues/40)) ([6180d83](https://github.com/atSCM/atscm/commit/6180d83))\n\n\n\n<a name=\"0.2.4\"></a>\n## [0.2.4](https://github.com/atSCM/atscm/compare/0.2.0-alpha.1...v0.2.4) (2017-04-05)\n\n\n### Bug Fixes\n\n* **AtviseFile:** Ignore leading and trailing whitespaces and newlines when encoding ([269564a](https://github.com/atSCM/atscm/commit/269564a)), closes [#21](https://github.com/atSCM/atscm/issues/21)\n* **DisplayTransformer:** Link dependencies with `xlink:href` attribute ([0974c07](https://github.com/atSCM/atscm/commit/0974c07)), closes [#30](https://github.com/atSCM/atscm/issues/30)\n* **init:** Validate project name starts with a letter ([#36](https://github.com/atSCM/atscm/issues/36)) ([1364828](https://github.com/atSCM/atscm/commit/1364828)), closes [#35](https://github.com/atSCM/atscm/issues/35)\n* **logging:** Use windows-friendly stdout stream ([f8d91a5](https://github.com/atSCM/atscm/commit/f8d91a5))\n* **mapping:** Encode/decode UInt64 ([0eef39e](https://github.com/atSCM/atscm/commit/0eef39e)), closes [#26](https://github.com/atSCM/atscm/issues/26)\n* **mapping:** Fix invalid rc path for array varaiables ([7cda5bb](https://github.com/atSCM/atscm/commit/7cda5bb)), closes [#25](https://github.com/atSCM/atscm/issues/25)\n* **mapping:** Replace invalid data type for html help documents ([6344853](https://github.com/atSCM/atscm/commit/6344853))\n* **NodeStream:** Replace invalid error message on timeout ([5b9368b](https://github.com/atSCM/atscm/commit/5b9368b))\n* **NodeStream:** Use \"maxRetries\" option ([42aae0d](https://github.com/atSCM/atscm/commit/42aae0d))\n* **pull:** Invalid extensions for some help nodes under atvise server v3.1.0 ([#34](https://github.com/atSCM/atscm/issues/34)) ([9bc0ba5](https://github.com/atSCM/atscm/commit/9bc0ba5))\n* **Pull/PushStream:** Clear line only when written before ([8137eea](https://github.com/atSCM/atscm/commit/8137eea))\n* **push:** Prevent memory leak inside `glob-stream` ([c487a6f](https://github.com/atSCM/atscm/commit/c487a6f))\n* **ScriptTransformer:** Handle invalid results ([b80be42](https://github.com/atSCM/atscm/commit/b80be42))\n* **ScriptTransformer:** Warn on empty document ([a0b88df](https://github.com/atSCM/atscm/commit/a0b88df)), closes [#24](https://github.com/atSCM/atscm/issues/24)\n* **server~Client:** Reject with Error ([79a3355](https://github.com/atSCM/atscm/commit/79a3355))\n* **server~Watcher:** Emit browse and subscribe errors ([9b27533](https://github.com/atSCM/atscm/commit/9b27533))\n* **Session:** Fixes an issue where currently opening session are not closed ([4d31d6a](https://github.com/atSCM/atscm/commit/4d31d6a))\n* **Session:** Resolve with closing session ([7677aba](https://github.com/atSCM/atscm/commit/7677aba))\n* **Syntax:** Fix typo ([fd6cfc1](https://github.com/atSCM/atscm/commit/fd6cfc1))\n* **tasks:** Prevent clearing unused lines when using log level < 3 ([c8f26b1](https://github.com/atSCM/atscm/commit/c8f26b1))\n* **tasks:** Prevent node-opcua from logging to console ([#27](https://github.com/atSCM/atscm/issues/27)) ([e6c892d](https://github.com/atSCM/atscm/commit/e6c892d))\n* **test:** Prevent opening to many sessions while testing ([afd3300](https://github.com/atSCM/atscm/commit/afd3300))\n* **test:** Support empty mtime field ([03909e1](https://github.com/atSCM/atscm/commit/03909e1))\n* **Transformer:** Fixes an issue where Transformer#constructor throws with options not containing direction ([022a9bd](https://github.com/atSCM/atscm/commit/022a9bd))\n* **Transformer:** Incorrect depth handling in #inspect ([65a0de1](https://github.com/atSCM/atscm/commit/65a0de1))\n* **transformers:** Fixes an issue where Transformer#applyTransformers does not run all transformers ([97c042f](https://github.com/atSCM/atscm/commit/97c042f))\n* **watch:** Ignore value changes of nodes that were just pushed ([7ccc546](https://github.com/atSCM/atscm/commit/7ccc546)), closes [#20](https://github.com/atSCM/atscm/issues/20)\n* **Watcher:** Better error handling ([32b6e6c](https://github.com/atSCM/atscm/commit/32b6e6c))\n* **Watcher:** Emit error event if close fails ([3be4ddc](https://github.com/atSCM/atscm/commit/3be4ddc))\n* **watchers:** Handle errors ([13b076c](https://github.com/atSCM/atscm/commit/13b076c))\n* **watchForChanges:** Prevent multiple callback calls on multiple errors ([9eee5c2](https://github.com/atSCM/atscm/commit/9eee5c2))\n* **WriteStream:** Warn if files are open in atvise builder ([#31](https://github.com/atSCM/atscm/issues/31)) ([98dcf83](https://github.com/atSCM/atscm/commit/98dcf83))\n\n\n### Chores\n\n* **release:** Version 0.2.1-alpha.7 ([734e87a](https://github.com/atSCM/atscm/commit/734e87a))\n\n\n### Features\n\n* **AtviseFile:** Add AtviseFile.read ([dba5498](https://github.com/atSCM/atscm/commit/dba5498))\n* **AtviseFile:** Normalize file mtime when created form ReadResult ([bd55033](https://github.com/atSCM/atscm/commit/bd55033))\n* **AtviseFile:** Store node timestamp as file mtime ([84e2c2a](https://github.com/atSCM/atscm/commit/84e2c2a))\n* **mapping:** Support files without extension ([8c729a9](https://github.com/atSCM/atscm/commit/8c729a9))\n* **NodeStream:** Retry failing browse operations ([2b61168](https://github.com/atSCM/atscm/commit/2b61168))\n* **ReadStream:** Store node timestamp as file mtime ([4b8ead4](https://github.com/atSCM/atscm/commit/4b8ead4))\n* **Stream:** Add ability to keep session alive through the `keepSessionAlive` option ([6118656](https://github.com/atSCM/atscm/commit/6118656))\n* **tasks:** Add `watch` task ([cf9c8f5](https://github.com/atSCM/atscm/commit/cf9c8f5)), closes [#11](https://github.com/atSCM/atscm/issues/11)\n* **tasks:** Add watchForFileChanges ([2b2a913](https://github.com/atSCM/atscm/commit/2b2a913))\n* **tasks:** Add watchForFileChanges gulp task ([3345a25](https://github.com/atSCM/atscm/commit/3345a25))\n* **tasks:** Better progress logging ([bdca246](https://github.com/atSCM/atscm/commit/bdca246))\n* **tasks:** config: Better Transformer info ([36031e9](https://github.com/atSCM/atscm/commit/36031e9))\n* **tasks:** Implement server node watcher ([3104c43](https://github.com/atSCM/atscm/commit/3104c43))\n* **tasks:** Implement server node watcher ([41cef52](https://github.com/atSCM/atscm/commit/41cef52))\n* Cleanup open sessions before exitting ([1818410](https://github.com/atSCM/atscm/commit/1818410))\n* **tasks:** Use [browser-sync](https://www.browsersync.io) to reload browser on change ([e4d5740](https://github.com/atSCM/atscm/commit/e4d5740))\n* **transformers:** SplittingTransformer now loads missing required files ([615cb73](https://github.com/atSCM/atscm/commit/615cb73))\n* **XMLTransformer:** Use OS-specific newline ([87935f0](https://github.com/atSCM/atscm/commit/87935f0))\n\n\n### Performance Improvements\n\n* **pull:** Browse atvise server nodes in parallel ([2c70013](https://github.com/atSCM/atscm/commit/2c70013))\n* **pull:** Read atvise server nodes in parallel ([5a34ef0](https://github.com/atSCM/atscm/commit/5a34ef0))\n* **push:** Skip buffering source files ([48991ed](https://github.com/atSCM/atscm/commit/48991ed))\n* **watch:** Subscribe to atvise server nodes in parallel ([ededfd3](https://github.com/atSCM/atscm/commit/ededfd3))\n\n\n### BREAKING CHANGES\n\n* **release:** Requires atscm-cli version >=0.2.0\n\n\n\n<a name=\"0.2.0-alpha.1\"></a>\n# [0.2.0-alpha.1](https://github.com/atSCM/atscm/compare/0.1.1...0.2.0-alpha.1) (2017-03-01)\n\n\n### Bug Fixes\n\n* **AtviseFile:** Assign original array type ([c95d6db](https://github.com/atSCM/atscm/commit/c95d6db)), closes [#18](https://github.com/atSCM/atscm/issues/18)\n* **MappingTransformer:** Exclude directories from mapping ([167ffe5](https://github.com/atSCM/atscm/commit/167ffe5))\n* **test:** Return unexpected Promises in XMLTransformer tests ([0877e3c](https://github.com/atSCM/atscm/commit/0877e3c))\n* **WriteStream:** Handle sync errors ([5e0292e](https://github.com/atSCM/atscm/commit/5e0292e))\n* **XMLTransformer:** Prevent double escaping in CDATA ([246b5b5](https://github.com/atSCM/atscm/commit/246b5b5))\n\n\n### Features\n\n* **exports:** Export Transformer class ([af0d288](https://github.com/atSCM/atscm/commit/af0d288))\n* **mapping:** Handle project ObjectTypes ([5106a61](https://github.com/atSCM/atscm/commit/5106a61))\n* **mapping:** Support custom variable types ([d7b48d7](https://github.com/atSCM/atscm/commit/d7b48d7))\n* **mapping:** Support split files ([e1a52fb](https://github.com/atSCM/atscm/commit/e1a52fb))\n* **Mapping:** Store variables with `null` value ([1a21d0f](https://github.com/atSCM/atscm/commit/1a21d0f)), closes [#17](https://github.com/atSCM/atscm/issues/17)\n* **transformer:** Use Transformers in tasks ([09f97bf](https://github.com/atSCM/atscm/commit/09f97bf)), closes [#10](https://github.com/atSCM/atscm/issues/10)\n* Add AtviseFile#isScript and #isQuickDynamic helpers ([16a4dbe](https://github.com/atSCM/atscm/commit/16a4dbe))\n* **transformers:** Add `DisplayTransformer` ([585303d](https://github.com/atSCM/atscm/commit/585303d)), closes [#9](https://github.com/atSCM/atscm/issues/9)\n* **transformers:** Implement DisplayTransformer ([ccbe02b](https://github.com/atSCM/atscm/commit/ccbe02b)), closes [#8](https://github.com/atSCM/atscm/issues/8)\n* **XMLTransformer:** Support forced CDATA ([0cb1634](https://github.com/atSCM/atscm/commit/0cb1634))\n* **XMLTransformer:** Wrap in CDATA ([5583410](https://github.com/atSCM/atscm/commit/5583410))\n\n\n\n<a name=\"0.1.1\"></a>\n## [0.1.1](https://github.com/atSCM/atscm/compare/6d9a5e6...0.1.1) (2017-02-22)\n\n\n### Bug Fixes\n\n* Export NodeId ([#2](https://github.com/atSCM/atscm/issues/2)) ([6d9a5e6](https://github.com/atSCM/atscm/commit/6d9a5e6))\n\n\n### Features\n\n* **tasks:** Add push task ([adc4b1a](https://github.com/atSCM/atscm/commit/adc4b1a))\n\n\n### Performance Improvements\n\n* **mapping:** Cache regular expressions ([0daf35e](https://github.com/atSCM/atscm/commit/0daf35e))\n\n\n\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 355,
    "kind": "testFile",
    "name": "test/src/Gulpfile.spec.js",
    "content": "import expect from 'unexpected';\nimport { spy } from 'sinon';\nimport proxyquire from 'proxyquire';\n\nimport * as tasks from '../../src/Gulpfile';\n\ndescribe('Gulpfile', function() {\n  it('should export description for all tasks', function() {\n    Object.keys(tasks).forEach(name => {\n      const desc = tasks[name].description;\n\n      expect(desc, 'to be defined');\n      expect(desc, 'not to be empty');\n    });\n  });\n\n  it('should register cleanupHandler', function() {\n    const nodeCleanup = spy();\n\n    const orgLog = console.log; // eslint-disable-line no-console\n    process.env.NODE_ENV = 'production';\n    proxyquire('../../src/Gulpfile', {\n      'node-cleanup': nodeCleanup,\n    });\n    process.env.NODE_ENV = 'test';\n    console.log = orgLog; // eslint-disable-line no-console\n\n    expect(nodeCleanup.calledOnce, 'to be', true);\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/Gulpfile.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/src/Gulpfile.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/Gulpfile.spec.js~describe0",
    "access": null,
    "description": "Gulpfile",
    "lineNumber": 7
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "test/src/Gulpfile.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/Gulpfile.spec.js~describe0.it1",
    "access": null,
    "description": "should export description for all tasks",
    "lineNumber": 8
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/src/Gulpfile.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/Gulpfile.spec.js~describe0.it2",
    "access": null,
    "description": "should register cleanupHandler",
    "lineNumber": 17
  },
  {
    "__docId__": 359,
    "kind": "testFile",
    "name": "test/src/config/ProjectConfig.spec.js",
    "content": "import expect from 'unexpected';\nimport TestConfig from '../../fixtures/Atviseproject.babel';\nimport ProjectConfig from '../../../src/config/ProjectConfig';\n\n/** @test {ProjectConfig} */\ndescribe('ProjectConfig', function() {\n  const orgValues = {};\n\n  function setEnv(key, value) {\n    if (value === undefined) {\n      delete process.env[key];\n    } else {\n      process.env[key] = value;\n    }\n  }\n\n  afterEach(function() {\n    Object.keys(orgValues).forEach(key => setEnv(key, orgValues[key]));\n  });\n\n  function checkOverride(desc, values, check) {\n    const envVarNames = Object.keys(values);\n\n    envVarNames.forEach(name => {\n      if (!orgValues[name]) {\n        orgValues[name] = process.env[name];\n      }\n    });\n\n    it(`should ${desc}`, function() {\n      envVarNames.forEach(name => setEnv(name, values[name]));\n\n      check();\n    });\n  }\n\n  function checkDefault(name, check) {\n    checkOverride(`should use default without ${name}`, {\n      [name]: undefined,\n    }, check);\n  }\n\n  checkOverride('use ATSCM_PROJECT__HOST if provided', {\n    ATSCM_PROJECT__HOST: '1.2.3.4',\n  }, function() {\n    expect(ProjectConfig.host, 'to equal', '1.2.3.4');\n  });\n\n  checkOverride('use ATSCM_PROJECT__PORT__OPC if provided', {\n    ATSCM_PROJECT__PORT__OPC: '1234',\n  }, function() {\n    expect(ProjectConfig.port.opc, 'to equal', 1234);\n  });\n\n  checkOverride('use ATSCM_PROJECT__PORT__HTTP if provided', {\n    ATSCM_PROJECT__PORT__HTTP: '1234',\n  }, function() {\n    expect(ProjectConfig.port.http, 'to equal', 1234);\n  });\n\n  checkOverride('use ATSCM_PROJECT__LOGIN__USERNAME if provided', {\n    ATSCM_PROJECT__LOGIN__USERNAME: 'username',\n  }, function() {\n    expect(ProjectConfig.login.username, 'to equal', 'username');\n  });\n\n  checkOverride('use ATSCM_PROJECT__LOGIN__PASSWORD if provided', {\n    ATSCM_PROJECT__LOGIN__PASSWORD: 'password',\n  }, function() {\n    expect(ProjectConfig.login.password, 'to equal', 'password');\n  });\n\n  checkDefault('ATSCM_PROJECT__HOST',\n    () => expect(ProjectConfig.host, 'to equal', TestConfig.host));\n\n  checkDefault('ATSCM_PROJECT__PORT__OPC',\n    () => expect(ProjectConfig.port.opc, 'to equal', TestConfig.port.opc));\n\n  checkDefault('ATSCM_PROJECT__PORT__HTTP',\n    () => expect(ProjectConfig.port.http, 'to equal', TestConfig.port.http));\n\n  checkDefault('ATSCM_PROJECT__LOGIN__USERNAME',\n    () => expect(ProjectConfig.login, 'to equal', TestConfig.login));\n\n  checkDefault('ATSCM_PROJECT__LOGIN__PASSWORD',\n    () => expect(ProjectConfig.login, 'to equal', TestConfig.login));\n});\n\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/config/ProjectConfig.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "describe3",
    "testId": 3,
    "memberof": "test/src/config/ProjectConfig.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/config/ProjectConfig.spec.js~describe3",
    "access": null,
    "description": "ProjectConfig",
    "lineNumber": 6,
    "testTargets": [
      "ProjectConfig"
    ]
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/src/config/ProjectConfig.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/config/ProjectConfig.spec.js~describe3.it4",
    "access": null,
    "lineNumber": 30
  },
  {
    "__docId__": 362,
    "kind": "testFile",
    "name": "test/src/index.spec.js",
    "content": "import expect from 'unexpected';\n\nimport * as globalExports from '../../src/index';\nimport Atviseproject from '../../src/lib/config/Atviseproject';\nimport NodeId from '../../src/lib/server/NodeId';\nimport Transformer, { TransformDirection } from '../../src/lib/transform/Transformer';\nimport PartialTransformer from '../../src/lib/transform/PartialTransformer';\nimport SplittingTransformer from '../../src/lib/transform/SplittingTransformer';\nimport DisplayTransformer from '../../src/transform/DisplayTransformer';\nimport ScriptTransformer from '../../src/transform/ScriptTransformer';\n\ndescribe('atscm module', function() {\n  /** @test {Atviseproject} */\n  it('should export Atviseproject class', function() {\n    expect(globalExports.Atviseproject, 'to be', Atviseproject);\n  });\n\n  /** @test {NodeId} */\n  it('should export NodeId class', function() {\n    expect(globalExports.NodeId, 'to be', NodeId);\n  });\n\n  /** @test {Transformer} */\n  it('should export Transformer class', function() {\n    expect(globalExports.Transformer, 'to be', Transformer);\n  });\n\n  /** @test {TransformDirection} */\n  it('should export TransformDirection enum', function() {\n    expect(globalExports.TransformDirection, 'to be', TransformDirection);\n  });\n\n  /** @test {PartialTransformer} */\n  it('should export PartialTransformer class', function() {\n    expect(globalExports.PartialTransformer, 'to be', PartialTransformer);\n  });\n\n  /** @test {SplittingTransformer} */\n  it('should export SplittingTransformer class', function() {\n    expect(globalExports.SplittingTransformer, 'to be', SplittingTransformer);\n  });\n\n  /** @test {DisplayTransformer} */\n  it('should export DisplayTransformer class', function() {\n    expect(globalExports.DisplayTransformer, 'to be', DisplayTransformer);\n  });\n\n  /** @test {ScriptTransformer} */\n  it('should export ScriptTransformer class', function() {\n    expect(globalExports.ScriptTransformer, 'to be', ScriptTransformer);\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/index.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "describe5",
    "testId": 5,
    "memberof": "test/src/index.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/index.spec.js~describe5",
    "access": null,
    "description": "atscm module",
    "lineNumber": 12
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/src/index.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/index.spec.js~describe5.it6",
    "access": null,
    "description": "should export Atviseproject class",
    "lineNumber": 14,
    "testTargets": [
      "Atviseproject"
    ]
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/src/index.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/index.spec.js~describe5.it7",
    "access": null,
    "description": "should export NodeId class",
    "lineNumber": 19,
    "testTargets": [
      "NodeId"
    ]
  },
  {
    "__docId__": 366,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/src/index.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/index.spec.js~describe5.it8",
    "access": null,
    "description": "should export Transformer class",
    "lineNumber": 24,
    "testTargets": [
      "Transformer"
    ]
  },
  {
    "__docId__": 367,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/src/index.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/index.spec.js~describe5.it9",
    "access": null,
    "description": "should export TransformDirection enum",
    "lineNumber": 29,
    "testTargets": [
      "TransformDirection"
    ]
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/src/index.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/index.spec.js~describe5.it10",
    "access": null,
    "description": "should export PartialTransformer class",
    "lineNumber": 34,
    "testTargets": [
      "PartialTransformer"
    ]
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "test/src/index.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/index.spec.js~describe5.it11",
    "access": null,
    "description": "should export SplittingTransformer class",
    "lineNumber": 39,
    "testTargets": [
      "SplittingTransformer"
    ]
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/src/index.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/index.spec.js~describe5.it12",
    "access": null,
    "description": "should export DisplayTransformer class",
    "lineNumber": 44,
    "testTargets": [
      "DisplayTransformer"
    ]
  },
  {
    "__docId__": 371,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/src/index.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/index.spec.js~describe5.it13",
    "access": null,
    "description": "should export ScriptTransformer class",
    "lineNumber": 49,
    "testTargets": [
      "ScriptTransformer"
    ]
  },
  {
    "__docId__": 372,
    "kind": "testFile",
    "name": "test/src/init/InitTask.spec.js",
    "content": "import { readdirSync } from 'fs';\nimport { join, isAbsolute } from 'path';\nimport expect from 'unexpected';\nimport { spy } from 'sinon';\nimport proxyquire from 'proxyquire';\n\nimport { obj as createStream } from 'through2';\nimport { src } from 'gulp';\nimport handlebars from 'gulp-compile-handlebars';\nimport { transform as babelTransform } from 'babel-core';\nimport { transpileModule as tsTransform } from 'typescript';\n// import { compile as coffeeTransform } from 'coffee-script';\nimport evaluate from 'eval';\n\nimport pkg from '../../../package.json';\nimport { ConfigLangs } from '../../../src/init/Options';\nimport Atviseproject from '../../../src/lib/config/Atviseproject';\n\nconst destSpy = spy((c, e, cb) => cb(null));\nconst srcSpy = spy((c, e, cb) => cb(null, c));\n\nconst gulpStub = {\n  src: (...args) => src(...args)\n    .pipe(createStream(srcSpy)),\n  dest: () => createStream(destSpy),\n};\n\nconst handlebarsSpy = spy(handlebars);\n\nconst InitTask = proxyquire('../../../src/init/InitTask', {\n  gulp: gulpStub,\n  handlebars: {\n    default: handlebarsSpy,\n  },\n}).default;\n\n/** @test {InitTask} */\ndescribe('InitTask', function() {\n  const baseConfig = {\n    name: 'unit-testing',\n    atviseHost: 'localhost',\n    atvisePortOpc: 4840,\n    atvisePortHttp: 80,\n    modulePackage: pkg,\n  };\n\n  function optionsForLang(lang) {\n    return Object.assign({ configLang: lang }, baseConfig);\n  }\n\n  beforeEach(() => {\n    srcSpy.reset();\n    destSpy.reset();\n    handlebarsSpy.reset();\n  });\n\n  /** @test {InitTask.filesToHandle} */\n  describe('.filesToHandle', function() {\n    it('should return array of absolute paths', function() {\n      expect(InitTask.filesToHandle('es2015'), 'to have items satisfying', 'to be a', 'string');\n      expect(InitTask.filesToHandle('es2015'), 'to have items satisfying', path => {\n        expect(isAbsolute(path), 'to be', true);\n      });\n    });\n  });\n\n  /** @test {InitTask.run} */\n  describe('.run', function() {\n    it('should handle all general files', function() {\n      const files = readdirSync(\n        join(__dirname, '../../../res/init/templates/general')\n      );\n\n      return InitTask.run({ configLang: 'es2015' })\n        .then(() => {\n          expect(srcSpy.callCount, 'to be greater than', 0);\n\n          const handled = srcSpy.args.map(args => args[0]);\n          const resulting = destSpy.args.map(args => args[0]);\n          expect(handled, 'to have values satisfying',\n            'to have properties', { _isVinyl: true });\n\n          expect(handled.map(f => f.relative), 'to contain', ...files);\n          expect(resulting.map(f => f.relative), 'to contain', ...files);\n        });\n    });\n\n    it('should not escape author field in package.json (#52)', function() {\n      const author = 'Sample name <mail@example.com>';\n\n      return InitTask.run({ configLang: 'es2015', author })\n        .then(() => {\n          expect(srcSpy.callCount, 'to be greater than', 0);\n\n          const pkgOut = destSpy.args\n            .map(args => args[0])\n            .filter(f => f.relative === 'package.json')[0].contents.toString();\n\n          expect(JSON.parse(pkgOut).author, 'to equal', author);\n        });\n    });\n\n    function expectHandlingLangFiles(configLang) {\n      const files = readdirSync(\n        join(__dirname, '../../../res/init/templates/lang', configLang)\n      );\n\n      it(`should handle ${configLang} files`, function() {\n        return InitTask.run({ configLang })\n          .then(() => {\n            const handled = srcSpy.args.map(args => args[0].relative);\n            const resulting = destSpy.args.map(args => args[0].relative);\n\n            expect(handled, 'to contain', ...files);\n            expect(resulting, 'to contain', ...files);\n          });\n      });\n    }\n\n    // Check if all lang files are handled for all config langs\n    Object.keys(ConfigLangs).forEach(l => expectHandlingLangFiles(ConfigLangs[l]));\n\n    function expectValidConfig(lang, transform) {\n      it(`should create valid ${lang} config`, function() {\n        return InitTask.run(optionsForLang(lang))\n          .then(() => {\n            const createdFiles = destSpy.args.map(args => args[0]);\n\n            // Expect config file is created\n            const configs = createdFiles.filter(file => file.relative.match(/Atviseproject/));\n            expect(configs, 'to have length', 1);\n\n            // Expect code can be transpiled\n            const configCode = configs[0].contents.toString();\n            let resultingCode;\n            expect(() => (resultingCode = transform(configCode, createdFiles)\n              .replace(/require\\(['|\"]atscm['|\"]\\)/, 'require(\\'../../../\\')')), 'not to throw');\n\n            // Expect transpiled code to be runnable\n            let config;\n            expect(() => (config = evaluate(resultingCode, true).default), 'not to throw');\n\n            // Expect config to extend Atviseproject\n            expect(config, 'to have properties', Object.getOwnPropertyNames(Atviseproject));\n            expect(config.name, 'to equal', 'UnitTesting');\n            expect(config.host, 'to equal', baseConfig.atviseHost);\n            expect(config.port.opc, 'to equal', baseConfig.atvisePortOpc);\n            expect(config.port.http, 'to equal', baseConfig.atvisePortHttp);\n          });\n      });\n    }\n\n    expectValidConfig('es2015', (code, createdFiles) => {\n      const rcs = createdFiles.filter(file => file.relative.match(/.babelrc/));\n\n      expect(rcs, 'to have length', 1);\n\n      const rc = JSON.parse(rcs[0].contents.toString());\n\n      return babelTransform(code, rc).code;\n    });\n\n    expectValidConfig('es5', code => code);\n\n    expectValidConfig('ts', (code, createdFiles) => {\n      const rcs = createdFiles.filter(file => file.relative.match(/tsconfig.json/));\n\n      expect(rcs, 'to have length', 1);\n\n      const rc = JSON.parse(rcs[0].contents.toString());\n\n      return tsTransform(code, rc).outputText;\n    });\n\n    // FIXME: CoffeeScript does not yet work.\n    /*\n    expectValidConfig('coffee', (code, createdFiles) => {\n\n      return coffeeTransform(code);\n    });\n    */\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/init/InitTask.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 373,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "test/src/init/InitTask.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/init/InitTask.spec.js~describe14",
    "access": null,
    "description": "InitTask",
    "lineNumber": 38,
    "testTargets": [
      "InitTask"
    ]
  },
  {
    "__docId__": 374,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "test/src/init/InitTask.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/init/InitTask.spec.js~describe14.describe15",
    "access": null,
    "description": ".filesToHandle",
    "lineNumber": 58,
    "testTargets": [
      "InitTask.filesToHandle"
    ]
  },
  {
    "__docId__": 375,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/src/init/InitTask.spec.js~describe14.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/InitTask.spec.js~describe14.describe15.it16",
    "access": null,
    "description": "should return array of absolute paths",
    "lineNumber": 59
  },
  {
    "__docId__": 376,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "test/src/init/InitTask.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/init/InitTask.spec.js~describe14.describe17",
    "access": null,
    "description": ".run",
    "lineNumber": 68,
    "testTargets": [
      "InitTask.run"
    ]
  },
  {
    "__docId__": 377,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/src/init/InitTask.spec.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/InitTask.spec.js~describe14.describe17.it18",
    "access": null,
    "description": "should handle all general files",
    "lineNumber": 69
  },
  {
    "__docId__": 378,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "test/src/init/InitTask.spec.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/InitTask.spec.js~describe14.describe17.it19",
    "access": null,
    "description": "should not escape author field in package.json (#52)",
    "lineNumber": 88
  },
  {
    "__docId__": 379,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/src/init/InitTask.spec.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/InitTask.spec.js~describe14.describe17.it20",
    "access": null,
    "lineNumber": 108
  },
  {
    "__docId__": 380,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "test/src/init/InitTask.spec.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/InitTask.spec.js~describe14.describe17.it21",
    "access": null,
    "lineNumber": 124
  },
  {
    "__docId__": 381,
    "kind": "testFile",
    "name": "test/src/init/Options.spec.js",
    "content": "import expect from 'unexpected';\n\nimport InitOptionsAsArray, { InitOptions } from '../../../src/init/Options';\nimport InitOption from '../../../src/lib/init/Option';\n\n/** @test {InitOptions} */\ndescribe('InitOptions', function() {\n  it('should contain InitOptions stored against names', function() {\n    Object.keys(InitOptions).forEach(key => {\n      expect(key, 'to be a', 'string');\n      expect(InitOptions[key], 'to be a', InitOption);\n    });\n  });\n\n  /** @test {InitOptions.atviseUser} */\n  describe('.atviseUser', function() {\n    it('should only be asked if using login', function() {\n      expect(InitOptions.atviseUser.when({ useLogin: false }), 'to equal', false);\n      expect(InitOptions.atviseUser.when({ useLogin: true }), 'to equal', true);\n    });\n  });\n\n  /** @test {InitOptions.atvisePassword} */\n  describe('.atvisePassword', function() {\n    it('should only be asked if using login', function() {\n      expect(InitOptions.atvisePassword.when({ useLogin: false }), 'to equal', false);\n      expect(InitOptions.atvisePassword.when({ useLogin: true }), 'to equal', true);\n    });\n  });\n});\n\n/** @test {InitOptionsAsArray} */\ndescribe('InitOptionsAsArray', function() {\n  it('should contain all InitOptions', function() {\n    InitOptionsAsArray.forEach(opt => {\n      expect(InitOptions[opt.name], 'to be defined');\n      expect(opt, 'to have properties', InitOptions[opt.name]);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/init/Options.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 382,
    "kind": "test",
    "name": "describe22",
    "testId": 22,
    "memberof": "test/src/init/Options.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/init/Options.spec.js~describe22",
    "access": null,
    "description": "InitOptions",
    "lineNumber": 7,
    "testTargets": [
      "InitOptions"
    ]
  },
  {
    "__docId__": 383,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "test/src/init/Options.spec.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/init/Options.spec.js~describe22.it23",
    "access": null,
    "description": "should contain InitOptions stored against names",
    "lineNumber": 8
  },
  {
    "__docId__": 384,
    "kind": "test",
    "name": "describe24",
    "testId": 24,
    "memberof": "test/src/init/Options.spec.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/init/Options.spec.js~describe22.describe24",
    "access": null,
    "description": ".atviseUser",
    "lineNumber": 16,
    "testTargets": [
      "InitOptions.atviseUser"
    ]
  },
  {
    "__docId__": 385,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "test/src/init/Options.spec.js~describe22.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/Options.spec.js~describe22.describe24.it25",
    "access": null,
    "description": "should only be asked if using login",
    "lineNumber": 17
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "test/src/init/Options.spec.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/init/Options.spec.js~describe22.describe26",
    "access": null,
    "description": ".atvisePassword",
    "lineNumber": 24,
    "testTargets": [
      "InitOptions.atvisePassword"
    ]
  },
  {
    "__docId__": 387,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/src/init/Options.spec.js~describe22.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/Options.spec.js~describe22.describe26.it27",
    "access": null,
    "description": "should only be asked if using login",
    "lineNumber": 25
  },
  {
    "__docId__": 388,
    "kind": "test",
    "name": "describe28",
    "testId": 28,
    "memberof": "test/src/init/Options.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/init/Options.spec.js~describe28",
    "access": null,
    "description": "InitOptionsAsArray",
    "lineNumber": 33,
    "testTargets": [
      "InitOptionsAsArray"
    ]
  },
  {
    "__docId__": 389,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "test/src/init/Options.spec.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/init/Options.spec.js~describe28.it29",
    "access": null,
    "description": "should contain all InitOptions",
    "lineNumber": 34
  },
  {
    "__docId__": 390,
    "kind": "testFile",
    "name": "test/src/init/OptionsValidator.spec.js",
    "content": "import expect from 'unexpected';\n\nimport Validator from '../../../src/init/OptionsValidator';\n\n/** @test {InitOptionsValidator} */\ndescribe('InitOptionsValidator', function() {\n  /** @test {InitOptionsValidator.name} */\n  describe('.name', function() {\n    it('should fail for empty names', function() {\n      expect(Validator.name(''), 'to match', /must be greater than zero/);\n    });\n\n    it('should fail with capital letters', function() {\n      expect(Validator.name('atSCM'), 'to match', /can no longer contain capital letters/);\n    });\n\n    it('should fail with non-url-safe characters', function() {\n      expect(Validator.name('#asdf'), 'to match', /URL-friendly characters/);\n    });\n\n    it('should fail with names starting with . or _', function() {\n      expect(Validator.name('_atscm'), 'to match', /cannot start with an underscore/);\n      expect(Validator.name('.atscm'), 'to match', /cannot start with a period/);\n    });\n\n    it('should fail with leading or trailing spaces', function() {\n      expect(Validator.name(' atscm'), 'to match', /cannot contain leading or trailing spaces/);\n      expect(Validator.name('atscm '), 'to match', /cannot contain leading or trailing spaces/);\n    });\n\n    it('should fail with core nodejs module name', function() {\n      expect(Validator.name('http'), 'to match', /is a core module name/);\n    });\n\n    it('should fail with blacklisted name', function() {\n      expect(Validator.name('node_modules'), 'to match', /is a blacklisted name/);\n    });\n\n    it('should fail with names longer than 214 characters', function() {\n      expect(Validator.name('a'.repeat(215)), 'to match', /can no longer contain more than 214/);\n    });\n\n    it('should work for valid package names', function() {\n      expect(Validator.name('atscm'), 'to be', true);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/init/OptionsValidator.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 391,
    "kind": "test",
    "name": "describe30",
    "testId": 30,
    "memberof": "test/src/init/OptionsValidator.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe30",
    "access": null,
    "description": "InitOptionsValidator",
    "lineNumber": 6,
    "testTargets": [
      "InitOptionsValidator"
    ]
  },
  {
    "__docId__": 392,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe30.describe31",
    "access": null,
    "description": ".name",
    "lineNumber": 8,
    "testTargets": [
      "InitOptionsValidator.name"
    ]
  },
  {
    "__docId__": 393,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe30.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe30.describe31.it32",
    "access": null,
    "description": "should fail for empty names",
    "lineNumber": 9
  },
  {
    "__docId__": 394,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe30.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe30.describe31.it33",
    "access": null,
    "description": "should fail with capital letters",
    "lineNumber": 13
  },
  {
    "__docId__": 395,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe30.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe30.describe31.it34",
    "access": null,
    "description": "should fail with non-url-safe characters",
    "lineNumber": 17
  },
  {
    "__docId__": 396,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe30.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe30.describe31.it35",
    "access": null,
    "description": "should fail with names starting with . or _",
    "lineNumber": 21
  },
  {
    "__docId__": 397,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe30.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe30.describe31.it36",
    "access": null,
    "description": "should fail with leading or trailing spaces",
    "lineNumber": 26
  },
  {
    "__docId__": 398,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe30.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe30.describe31.it37",
    "access": null,
    "description": "should fail with core nodejs module name",
    "lineNumber": 31
  },
  {
    "__docId__": 399,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe30.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe30.describe31.it38",
    "access": null,
    "description": "should fail with blacklisted name",
    "lineNumber": 35
  },
  {
    "__docId__": 400,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe30.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe30.describe31.it39",
    "access": null,
    "description": "should fail with names longer than 214 characters",
    "lineNumber": 39
  },
  {
    "__docId__": 401,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/src/init/OptionsValidator.spec.js~describe30.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/init/OptionsValidator.spec.js~describe30.describe31.it40",
    "access": null,
    "description": "should work for valid package names",
    "lineNumber": 43
  },
  {
    "__docId__": 402,
    "kind": "testFile",
    "name": "test/src/lib/config/Atviseproject.spec.js",
    "content": "import expect from 'unexpected';\n\nimport Atviseproject from '../../../../src/lib/config/Atviseproject';\nimport NodeId from '../../../../src/lib/server/NodeId';\n\n/** @test {Atviseproject} */\ndescribe('Atviseproject', function() {\n  function expectNodeIds(arr) {\n    it('should contain NodeIds', function() {\n      arr.forEach(id => expect(id, 'to be a', NodeId));\n    });\n  }\n\n  /** @test {Atviseproject.login} */\n  describe('.login', function() {\n    it('should default to false', function() {\n      expect(Atviseproject.login, 'to equal', false);\n    });\n  });\n\n  /** @test {Atviseproject.nodes} */\n  describe('.nodes', function() {\n    expectNodeIds(Atviseproject.nodes);\n  });\n\n  /** @test {Atviseproject.nodesToWatch} */\n  describe('.nodesToWatch', function() {\n    expectNodeIds(Atviseproject.nodesToWatch);\n  });\n\n  /** @test {Atviseproject.EditorRelatedNodes} */\n  describe('.EditorRelatedNodes', function() {\n    expectNodeIds(Atviseproject.EditorRelatedNodes);\n  });\n\n  /** @test {Atviseproject.ServerRelatedNodes} */\n  describe('.ServerRelatedNodes', function() {\n    expectNodeIds(Atviseproject.ServerRelatedNodes);\n  });\n\n  /** @test {Atviseproject.EditorRelatedNodes} */\n  describe('.ignoreNodes', function() {\n    expectNodeIds(Atviseproject.ignoreNodes);\n\n    it('should contain Atviseproject.EditorRelatedNodes', function() {\n      expect(Atviseproject.ignoreNodes, 'to contain', ...Atviseproject.EditorRelatedNodes);\n    });\n\n    it('should contain Atviseproject.ServerRelatedNodes', function() {\n      expect(Atviseproject.ignoreNodes, 'to contain', ...Atviseproject.ServerRelatedNodes);\n    });\n  });\n\n  /** @test {Atviseproject.inspect} */\n  describe('.inspect', function() {\n    it('should return the properties to print', function() {\n      expect(Atviseproject.inspect(), 'to have properties', [\n        'host',\n        'port',\n        'useTransformers',\n        'nodes',\n        'nodesToWatch',\n        'ignoreNodes',\n      ]);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/config/Atviseproject.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 403,
    "kind": "test",
    "name": "describe41",
    "testId": 41,
    "memberof": "test/src/lib/config/Atviseproject.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe41",
    "access": null,
    "description": "Atviseproject",
    "lineNumber": 7,
    "testTargets": [
      "Atviseproject"
    ]
  },
  {
    "__docId__": 404,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe41.it42",
    "access": null,
    "description": "should contain NodeIds",
    "lineNumber": 9
  },
  {
    "__docId__": 405,
    "kind": "test",
    "name": "describe43",
    "testId": 43,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe41.describe43",
    "access": null,
    "description": ".login",
    "lineNumber": 15,
    "testTargets": [
      "Atviseproject.login"
    ]
  },
  {
    "__docId__": 406,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe41.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe41.describe43.it44",
    "access": null,
    "description": "should default to false",
    "lineNumber": 16
  },
  {
    "__docId__": 407,
    "kind": "test",
    "name": "describe45",
    "testId": 45,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe41.describe45",
    "access": null,
    "description": ".nodes",
    "lineNumber": 22,
    "testTargets": [
      "Atviseproject.nodes"
    ]
  },
  {
    "__docId__": 408,
    "kind": "test",
    "name": "describe46",
    "testId": 46,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe41.describe46",
    "access": null,
    "description": ".nodesToWatch",
    "lineNumber": 27,
    "testTargets": [
      "Atviseproject.nodesToWatch"
    ]
  },
  {
    "__docId__": 409,
    "kind": "test",
    "name": "describe47",
    "testId": 47,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe41.describe47",
    "access": null,
    "description": ".EditorRelatedNodes",
    "lineNumber": 32,
    "testTargets": [
      "Atviseproject.EditorRelatedNodes"
    ]
  },
  {
    "__docId__": 410,
    "kind": "test",
    "name": "describe48",
    "testId": 48,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe41.describe48",
    "access": null,
    "description": ".ServerRelatedNodes",
    "lineNumber": 37,
    "testTargets": [
      "Atviseproject.ServerRelatedNodes"
    ]
  },
  {
    "__docId__": 411,
    "kind": "test",
    "name": "describe49",
    "testId": 49,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe41.describe49",
    "access": null,
    "description": ".ignoreNodes",
    "lineNumber": 42,
    "testTargets": [
      "Atviseproject.EditorRelatedNodes"
    ]
  },
  {
    "__docId__": 412,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe41.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe41.describe49.it50",
    "access": null,
    "description": "should contain Atviseproject.EditorRelatedNodes",
    "lineNumber": 45
  },
  {
    "__docId__": 413,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe41.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe41.describe49.it51",
    "access": null,
    "description": "should contain Atviseproject.ServerRelatedNodes",
    "lineNumber": 49
  },
  {
    "__docId__": 414,
    "kind": "test",
    "name": "describe52",
    "testId": 52,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe41.describe52",
    "access": null,
    "description": ".inspect",
    "lineNumber": 55,
    "testTargets": [
      "Atviseproject.inspect"
    ]
  },
  {
    "__docId__": 415,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/src/lib/config/Atviseproject.spec.js~describe41.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/config/Atviseproject.spec.js~describe41.describe52.it53",
    "access": null,
    "description": "should return the properties to print",
    "lineNumber": 56
  },
  {
    "__docId__": 416,
    "kind": "testFile",
    "name": "test/src/lib/gulp/PullStream.spec.js",
    "content": "import { Stream } from 'stream';\nimport Logger from 'gulplog';\nimport { spy } from 'sinon';\nimport proxyquire from 'proxyquire';\nimport { resolveNodeId, DataType, StatusCodes, Variant } from 'node-opcua';\nimport { obj as createTransformSteam } from 'through2';\nimport expect from '../../../expect';\nimport ReadStream from '../../../../src/lib/server/ReadStream';\nimport AtviseFile from '../../../../src/lib/server/AtviseFile';\nimport { TransformDirection } from '../../../../src/lib/transform/Transformer';\n\nconst StubTransformer = {\n  applyTransformers: spy(stream => stream),\n};\n\nconst readline = {\n  clearLine: spy().named('readline.clearLine'),\n  moveCursor: spy().named('readline.moveCursor'),\n};\n\nconst PullStream = proxyquire('../../../../src/lib/gulp/PullStream', {\n  readline,\n  gulp: {\n    dest: () => createTransformSteam(),\n  },\n  '../transform/Transformer': {\n    _esModule: true,\n    default: StubTransformer,\n  },\n}).default;\n\nclass StubReadStream extends ReadStream {\n\n  processChunk(referenceDescription, handleErrors) {\n    handleErrors(null, StatusCodes.Good, done => {\n      this.push({\n        nodeId: referenceDescription.nodeId,\n        value: new Variant({\n          dataType: DataType.XmlElement,\n          value: '<svg></svg>',\n        }),\n        referenceDescription,\n        mtime: new Date(),\n      });\n      done();\n    });\n  }\n\n}\n\n/** @test {PullStream} */\ndescribe('PullStream', function() {\n  /** @test {PullStream#constructor} */\n  describe('#constructor', function() {\n    let logListener;\n\n    beforeEach(() => {\n      StubTransformer.applyTransformers.reset();\n      readline.clearLine.reset();\n      readline.moveCursor.reset();\n\n      if (logListener) {\n        Logger.removeListener('info', logListener);\n      }\n    });\n\n    it('should return a stream', function() {\n      const stream = new PullStream(new StubReadStream());\n      expect(stream, 'to be a', Stream);\n      stream.end();\n\n      expect(stream, 'to yield objects satisfying', 'to have length', 0);\n    });\n\n    it('should apply transformers from db', function() {\n      const readStream = new StubReadStream();\n      const stream = new PullStream(readStream);\n      const nodeId = resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main');\n\n      readStream.write({\n        typeDefinition: resolveNodeId('ns=0;i=62'),\n        dataType: DataType.Boolean,\n        nodeId,\n      });\n      readStream.end();\n\n      return expect(stream, 'to yield objects satisfying', [\n        expect.it('to be a', AtviseFile),\n      ])\n        .then(() => {\n          expect(StubTransformer.applyTransformers.calledOnce, 'to be', true);\n          expect(StubTransformer.applyTransformers.lastCall.args[2],\n            'to be', TransformDirection.FromDB);\n        });\n    });\n\n    it('should print progress', function() {\n      const stream = new PullStream(Object.assign(new StubReadStream(), { _processed: 12 }));\n\n      setTimeout(() => stream.end(), 1200);\n\n      logListener = spy().named('logListener');\n      Logger.on('info', logListener);\n\n      return expect(stream, 'to yield objects satisfying', 'to have length', 0)\n        .then(() => {\n          expect(logListener, 'was called once');\n          expect(logListener.lastCall, 'to satisfy', [/Pulled: 12 \\([0-9.]+ ops\\/s\\)/]);\n          expect(readline.clearLine, 'was called once');\n          expect(readline.moveCursor, 'was called once');\n        });\n    });\n\n    it('should work without log listeners', function() {\n      const stream = new PullStream(new StubReadStream());\n\n      setTimeout(() => stream.end(), 1200);\n\n      return expect(stream, 'to yield objects satisfying', 'to have length', 0)\n        .then(() => {\n          expect(readline.clearLine, 'was not called');\n          expect(readline.moveCursor, 'was not called');\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/gulp/PullStream.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 417,
    "kind": "test",
    "name": "describe54",
    "testId": 54,
    "memberof": "test/src/lib/gulp/PullStream.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/gulp/PullStream.spec.js~describe54",
    "access": null,
    "description": "PullStream",
    "lineNumber": 52,
    "testTargets": [
      "PullStream"
    ]
  },
  {
    "__docId__": 418,
    "kind": "test",
    "name": "describe55",
    "testId": 55,
    "memberof": "test/src/lib/gulp/PullStream.spec.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/gulp/PullStream.spec.js~describe54.describe55",
    "access": null,
    "description": "#constructor",
    "lineNumber": 54,
    "testTargets": [
      "PullStream#constructor"
    ]
  },
  {
    "__docId__": 419,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/src/lib/gulp/PullStream.spec.js~describe54.describe55",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/gulp/PullStream.spec.js~describe54.describe55.it56",
    "access": null,
    "description": "should return a stream",
    "lineNumber": 67
  },
  {
    "__docId__": 420,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/src/lib/gulp/PullStream.spec.js~describe54.describe55",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/gulp/PullStream.spec.js~describe54.describe55.it57",
    "access": null,
    "description": "should apply transformers from db",
    "lineNumber": 75
  },
  {
    "__docId__": 421,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "test/src/lib/gulp/PullStream.spec.js~describe54.describe55",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/gulp/PullStream.spec.js~describe54.describe55.it58",
    "access": null,
    "description": "should print progress",
    "lineNumber": 97
  },
  {
    "__docId__": 422,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/src/lib/gulp/PullStream.spec.js~describe54.describe55",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/gulp/PullStream.spec.js~describe54.describe55.it59",
    "access": null,
    "description": "should work without log listeners",
    "lineNumber": 114
  },
  {
    "__docId__": 423,
    "kind": "testFile",
    "name": "test/src/lib/gulp/PushStream.spec.js",
    "content": "import { Stream } from 'stream';\nimport { spy } from 'sinon';\nimport proxyquire from 'proxyquire';\nimport { obj as createTransformStream } from 'through2';\nimport File from 'vinyl';\nimport Logger from 'gulplog';\nimport expect from '../../../expect';\nimport AtviseFile from '../../../../src/lib/server/AtviseFile';\nimport { TransformDirection } from '../../../../src/lib/transform/Transformer';\n\nconst StubTransformer = {\n  applyTransformers: spy(stream => stream),\n};\n\nconst readline = {\n  clearLine: spy().named('readline.clearLine'),\n  moveCursor: spy().named('readline.moveCursor'),\n};\n\nconst PushStream = proxyquire('../../../../src/lib/gulp/PushStream', {\n  readline,\n  '../server/WriteStream': {\n    _esModule: true,\n    default: class WriteStream {\n      constructor() {\n        return Object.assign(createTransformStream(), {\n          opsPerSecond: 13.2,\n          _processed: 12,\n        });\n      }\n    },\n  },\n  '../transform/Transformer': {\n    _esModule: true,\n    default: StubTransformer,\n  },\n}).default;\n\n/** @test {PushStream} */\ndescribe('PushStream', function() {\n  /** @test {PushStream#constructor} */\n  describe('#constructor', function() {\n    let logListener;\n\n    beforeEach(() => {\n      StubTransformer.applyTransformers.reset();\n      readline.clearLine.reset();\n      readline.moveCursor.reset();\n\n      if (logListener) {\n        Logger.removeListener('info', logListener);\n      }\n    });\n\n    it('should return a stream', function() {\n      const stream = new PushStream(createTransformStream());\n      expect(stream, 'to be a', Stream);\n      stream.end();\n\n      return expect(stream, 'to yield objects satisfying', 'to have length', 0);\n    });\n\n    it('should apply transformers from db', function() {\n      const srcStream = createTransformStream();\n      const stream = new PushStream(srcStream);\n\n      srcStream.write(new File({\n        path: 'src/AGENT/DISPLAYS/Main',\n        base: 'src',\n      }));\n      srcStream.end();\n\n      return expect(stream, 'to yield objects satisfying', [\n        expect.it('to be a', AtviseFile),\n      ])\n        .then(() => {\n          expect(StubTransformer.applyTransformers.calledOnce, 'to be', true);\n          expect(StubTransformer.applyTransformers.lastCall.args[2],\n            'to be', TransformDirection.FromFilesystem);\n        });\n    });\n\n    it('should print progress', function() {\n      const stream = new PushStream(createTransformStream());\n\n      setTimeout(() => stream.end(), 1200);\n\n      logListener = spy().named('logListener');\n      Logger.on('info', logListener);\n\n      return expect(stream, 'to yield objects satisfying', 'to have length', 0)\n        .then(() => {\n          expect(logListener, 'was called once');\n          expect(logListener.lastCall, 'to satisfy', [/Pushed: 12 \\([0-9.]+ ops\\/s\\)/]);\n          expect(readline.clearLine, 'was called once');\n          expect(readline.moveCursor, 'was called once');\n        });\n    });\n\n    it('should work without log listeners', function() {\n      const stream = new PushStream(createTransformStream());\n\n      setTimeout(() => stream.end(), 1200);\n\n      return expect(stream, 'to yield objects satisfying', 'to have length', 0)\n        .then(() => {\n          expect(readline.clearLine, 'was not called');\n          expect(readline.moveCursor, 'was not called');\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/gulp/PushStream.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 424,
    "kind": "test",
    "name": "describe60",
    "testId": 60,
    "memberof": "test/src/lib/gulp/PushStream.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/gulp/PushStream.spec.js~describe60",
    "access": null,
    "description": "PushStream",
    "lineNumber": 40,
    "testTargets": [
      "PushStream"
    ]
  },
  {
    "__docId__": 425,
    "kind": "test",
    "name": "describe61",
    "testId": 61,
    "memberof": "test/src/lib/gulp/PushStream.spec.js~describe60",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/gulp/PushStream.spec.js~describe60.describe61",
    "access": null,
    "description": "#constructor",
    "lineNumber": 42,
    "testTargets": [
      "PushStream#constructor"
    ]
  },
  {
    "__docId__": 426,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/src/lib/gulp/PushStream.spec.js~describe60.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/gulp/PushStream.spec.js~describe60.describe61.it62",
    "access": null,
    "description": "should return a stream",
    "lineNumber": 55
  },
  {
    "__docId__": 427,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/src/lib/gulp/PushStream.spec.js~describe60.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/gulp/PushStream.spec.js~describe60.describe61.it63",
    "access": null,
    "description": "should apply transformers from db",
    "lineNumber": 63
  },
  {
    "__docId__": 428,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/src/lib/gulp/PushStream.spec.js~describe60.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/gulp/PushStream.spec.js~describe60.describe61.it64",
    "access": null,
    "description": "should print progress",
    "lineNumber": 83
  },
  {
    "__docId__": 429,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/src/lib/gulp/PushStream.spec.js~describe60.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/gulp/PushStream.spec.js~describe60.describe61.it65",
    "access": null,
    "description": "should work without log listeners",
    "lineNumber": 100
  },
  {
    "__docId__": 430,
    "kind": "testFile",
    "name": "test/src/lib/init/Options.spec.js",
    "content": "import expect from 'unexpected';\n\nimport InitOption from '../../../../src/lib/init/Option';\n\n/** @test {InitOption} */\ndescribe('InitOption', function() {\n  it('should throw when run without arguments', function() {\n    expect(() => new InitOption(), 'to throw', 'message or options required');\n  });\n\n  /** @test {InitOption#constructor} */\n  describe('#constructor', function() {\n    context('when run with string, string', function() {\n      it('should throw error for empty message', function() {\n        expect(() => new InitOption(''), 'to throw error', 'message is required');\n      });\n\n      it('should work with message only', function() {\n        let opt;\n\n        expect(() => (opt = new InitOption('message')), 'not to throw');\n        expect(opt.message, 'to match', /message/);\n        expect(opt.default, 'to be', undefined);\n      });\n\n      it('should set default type', function() {\n        expect((new InitOption('message')).type, 'to equal', InitOption.DefaultType);\n      });\n\n      it('should add `?` to message', function() {\n        expect((new InitOption('message')).message, 'to equal', 'message?');\n      });\n\n      it('should store default if given', function() {\n        expect((new InitOption('message', 'default')).default, 'to equal', 'default');\n      });\n    });\n\n    context('when run with object', function() {\n      it('should throw error for missing message', function() {\n        expect(() => new InitOption({}), 'to throw error', 'message is required');\n      });\n\n      it('should throw error for empty message', function() {\n        expect(() => new InitOption({ message: '' }), 'to throw error', 'message is required');\n      });\n\n      it('should add `?` to message', function() {\n        expect((new InitOption({ message: 'message' })).message, 'to equal', 'message?');\n      });\n\n      it('should set default type', function() {\n        expect((new InitOption({ message: 'message' })).type, 'to equal', InitOption.DefaultType);\n      });\n\n      it('should store type, message, default and validate', function() {\n        const opts = {\n          type: 'test',\n          message: 'message',\n          default: 'default',\n          validate: () => true,\n        };\n\n        const result = Object.assign({}, opts, { message: `${opts.message}?` });\n\n        expect((new InitOption(opts)), 'to have properties', result);\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/init/Options.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 431,
    "kind": "test",
    "name": "describe66",
    "testId": 66,
    "memberof": "test/src/lib/init/Options.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe66",
    "access": null,
    "description": "InitOption",
    "lineNumber": 6,
    "testTargets": [
      "InitOption"
    ]
  },
  {
    "__docId__": 432,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/src/lib/init/Options.spec.js~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe66.it67",
    "access": null,
    "description": "should throw when run without arguments",
    "lineNumber": 7
  },
  {
    "__docId__": 433,
    "kind": "test",
    "name": "describe68",
    "testId": 68,
    "memberof": "test/src/lib/init/Options.spec.js~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe66.describe68",
    "access": null,
    "description": "#constructor",
    "lineNumber": 12,
    "testTargets": [
      "InitOption#constructor"
    ]
  },
  {
    "__docId__": 434,
    "kind": "test",
    "name": "context69",
    "testId": 69,
    "memberof": "test/src/lib/init/Options.spec.js~describe66.describe68",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe66.describe68.context69",
    "access": null,
    "description": "when run with string, string",
    "lineNumber": 13
  },
  {
    "__docId__": 435,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "test/src/lib/init/Options.spec.js~describe66.describe68.context69",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe66.describe68.context69.it70",
    "access": null,
    "description": "should throw error for empty message",
    "lineNumber": 14
  },
  {
    "__docId__": 436,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/src/lib/init/Options.spec.js~describe66.describe68.context69",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe66.describe68.context69.it71",
    "access": null,
    "description": "should work with message only",
    "lineNumber": 18
  },
  {
    "__docId__": 437,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/src/lib/init/Options.spec.js~describe66.describe68.context69",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe66.describe68.context69.it72",
    "access": null,
    "description": "should set default type",
    "lineNumber": 26
  },
  {
    "__docId__": 438,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/src/lib/init/Options.spec.js~describe66.describe68.context69",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe66.describe68.context69.it73",
    "access": null,
    "description": "should add `?` to message",
    "lineNumber": 30
  },
  {
    "__docId__": 439,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/src/lib/init/Options.spec.js~describe66.describe68.context69",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe66.describe68.context69.it74",
    "access": null,
    "description": "should store default if given",
    "lineNumber": 34
  },
  {
    "__docId__": 440,
    "kind": "test",
    "name": "context75",
    "testId": 75,
    "memberof": "test/src/lib/init/Options.spec.js~describe66.describe68",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe66.describe68.context75",
    "access": null,
    "description": "when run with object",
    "lineNumber": 39
  },
  {
    "__docId__": 441,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/src/lib/init/Options.spec.js~describe66.describe68.context75",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe66.describe68.context75.it76",
    "access": null,
    "description": "should throw error for missing message",
    "lineNumber": 40
  },
  {
    "__docId__": 442,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/src/lib/init/Options.spec.js~describe66.describe68.context75",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe66.describe68.context75.it77",
    "access": null,
    "description": "should throw error for empty message",
    "lineNumber": 44
  },
  {
    "__docId__": 443,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/src/lib/init/Options.spec.js~describe66.describe68.context75",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe66.describe68.context75.it78",
    "access": null,
    "description": "should add `?` to message",
    "lineNumber": 48
  },
  {
    "__docId__": 444,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "test/src/lib/init/Options.spec.js~describe66.describe68.context75",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe66.describe68.context75.it79",
    "access": null,
    "description": "should set default type",
    "lineNumber": 52
  },
  {
    "__docId__": 445,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/src/lib/init/Options.spec.js~describe66.describe68.context75",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/init/Options.spec.js~describe66.describe68.context75.it80",
    "access": null,
    "description": "should store type, message, default and validate",
    "lineNumber": 56
  },
  {
    "__docId__": 446,
    "kind": "testFile",
    "name": "test/src/lib/server/AtviseFile.spec.js",
    "content": "import { stub } from 'sinon';\nimport { Buffer } from 'buffer';\nimport File from 'vinyl';\nimport { DataType, VariantArrayType } from 'node-opcua';\nimport expect from '../../../expect';\nimport AtviseFile from '../../../../src/lib/server/AtviseFile';\nimport AtviseTypes from '../../../../src/lib/server/Types';\nimport NodeId from '../../../../src/lib/server/NodeId';\n\n/** @test {AtviseFile} */\ndescribe('AtviseFile', function() {\n  /** @test {AtviseFile#constructor} */\n  describe('#constructor', function() {\n    it('should create a vinyl instance', function() {\n      const file = new AtviseFile();\n\n      expect(file, 'to be a', File);\n    });\n  });\n\n  const tests = [\n    {\n      name: 'should store variables with their data type as an extension',\n      nodeId: new NodeId('ns=1;s=AGENT.OBJECTS.Test'),\n      dataType: DataType.UInt16,\n      typeDefinition: new NodeId(NodeId.NodeIdType.NUMERIC, 62, 0),\n      arrayType: VariantArrayType.Scalar,\n      filePath: 'AGENT/OBJECTS/Test.uint16',\n    },\n    {\n      name: 'should store variable arrays with their data type as an extension',\n      nodeId: new NodeId('ns=1;s=AGENT.OBJECTS.Test'),\n      dataType: DataType.UInt16,\n      typeDefinition: new NodeId(NodeId.NodeIdType.NUMERIC, 62, 0),\n      arrayType: VariantArrayType.Array,\n      filePath: 'AGENT/OBJECTS/Test.uint16.array',\n    },\n    {\n      name: 'should store variable matrices with their data type as an extension',\n      nodeId: new NodeId('ns=1;s=AGENT.OBJECTS.Test'),\n      dataType: DataType.UInt16,\n      typeDefinition: new NodeId(NodeId.NodeIdType.NUMERIC, 62, 0),\n      arrayType: VariantArrayType.Matrix,\n      filePath: 'AGENT/OBJECTS/Test.uint16.matrix',\n    },\n    {\n      name: 'should store property variables with their data type as an extension',\n      nodeId: new NodeId('ns=1;s=AGENT.OBJECTS.Test.property'),\n      dataType: DataType.UInt16,\n      typeDefinition: new NodeId(NodeId.NodeIdType.NUMERIC, 68, 0),\n      arrayType: VariantArrayType.Scalar,\n      filePath: 'AGENT/OBJECTS/Test/property.prop.uint16',\n    },\n    {\n      name: 'should store html help documents with a \".help.html\" extension',\n      nodeId: new NodeId('ns=1;s=AGENT.DISPLAYS.Test.en'),\n      dataType: DataType.ByteString,\n      typeDefinition: new NodeId('VariableTypes.ATVISE.HtmlHelp'),\n      arrayType: VariantArrayType.Scalar,\n      filePath: 'AGENT/DISPLAYS/Test/en.help.html',\n    },\n    {\n      name: 'should store quickdynamics with a \".qd.xml\" extension',\n      nodeId: new NodeId('ns=1;s=SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Test'),\n      dataType: DataType.XmlElement,\n      typeDefinition: new NodeId('VariableTypes.ATVISE.QuickDynamic'),\n      arrayType: VariantArrayType.Scalar,\n      filePath: 'SYSTEM/LIBRARY/PROJECT/QUICKDYNAMICS/Test.qd.xml',\n    },\n    {\n      name: 'should store scripts with a \".script.xml\" extension',\n      nodeId: new NodeId('ns=1;s=SYSTEM.LIBRARY.PROJECT.SERVERSCRIPTS.Test'),\n      dataType: DataType.XmlElement,\n      typeDefinition: new NodeId('VariableTypes.ATVISE.ScriptCode'),\n      arrayType: VariantArrayType.Scalar,\n      filePath: 'SYSTEM/LIBRARY/PROJECT/SERVERSCRIPTS/Test.script.xml',\n    },\n    {\n      name: 'should store displays with a \".display.xml\" extension',\n      nodeId: new NodeId('ns=1;s=AGENT.DISPLAYS.Test'),\n      dataType: DataType.XmlElement,\n      typeDefinition: new NodeId('VariableTypes.ATVISE.Display'),\n      arrayType: VariantArrayType.Scalar,\n      filePath: 'AGENT/DISPLAYS/Test.display.xml',\n    },\n    {\n      name: 'should store scripts with a \".locs.xml\" extension',\n      nodeId: new NodeId('ns=1;s=SYSTEM.LIBRARY.PROJECT.de'),\n      dataType: DataType.XmlElement,\n      typeDefinition: new NodeId('VariableTypes.ATVISE.TranslationTable'),\n      arrayType: VariantArrayType.Scalar,\n      filePath: 'SYSTEM/LIBRARY/PROJECT/de.locs.xml',\n    },\n    {\n      name: 'should store custom resources with their original extension',\n      nodeId: new NodeId('ns=1;s=SYSTEM.LIBRARY.PROJECT.RESOURCES/Test.md'),\n      dataType: DataType.ByteString,\n      typeDefinition: new NodeId('VariableTypes.ATVISE.Resource.OctetStream'),\n      arrayType: VariantArrayType.Scalar,\n      filePath: 'SYSTEM/LIBRARY/PROJECT/RESOURCES/Test.md',\n    },\n  ].concat(\n    AtviseTypes.filter(t => t.constructor.name === 'AtviseResourceType')\n      .map(t => ({\n        name: `should store ${t.typeDefinition.value} resources with their original extension`,\n        nodeId: new NodeId(`ns=1;s=SYSTEM.LIBRARY.PROJECT.RESOURCES/Test.${t.identifier}`),\n        dataType: DataType.ByteString,\n        typeDefinition: new NodeId(t.typeDefinition.value),\n        arrayType: VariantArrayType.Scalar,\n        filePath: `SYSTEM/LIBRARY/PROJECT/RESOURCES/Test.${t.identifier}`,\n      }))\n  );\n\n  /** @test {AtviseFile.pathForReadResult} */\n  describe('.pathForReadResult', function() {\n    tests.forEach(test => {\n      it(test.name, function() {\n        expect(AtviseFile.pathForReadResult({\n          nodeId: test.nodeId,\n          value: {\n            $dataType: test.dataType,\n            $arrayType: test.arrayType,\n          },\n          referenceDescription: {\n            typeDefinition: test.typeDefinition,\n          },\n        }), 'to equal', test.filePath);\n      });\n    });\n\n    it('should store custom typed variables with a \".var\" extension', function() {\n      expect(AtviseFile.pathForReadResult({\n        nodeId: new NodeId('AGENT.OBJECTS.CustomVar'),\n        value: {\n          $dataType: DataType.Boolean,\n          $arrayType: VariantArrayType.Scalar,\n        },\n        referenceDescription: {\n          typeDefinition: new NodeId('VariableTypes.Project.CustomType'),\n        },\n      }), 'to equal', 'AGENT/OBJECTS/CustomVar.var.bool');\n    });\n  });\n\n  /** @test {AtviseFile.encodeValue} */\n  describe('.encodeValue', function() {\n    it('should return empty buffer for null', function() {\n      expect(AtviseFile.encodeValue({ value: null }), 'to equal', Buffer.from(''));\n    });\n\n    it('should store timestamp as string for DateTime values', function() {\n      const now = new Date();\n\n      expect(AtviseFile.encodeValue({ value: now }, DataType.DateTime),\n        'to equal', Buffer.from(now.getTime().toString()));\n    });\n\n    it('should store JSON encoded bytes for UInt64 values', function() {\n      expect(AtviseFile.encodeValue({ value: [1, 2] }, DataType.UInt64),\n        'to equal', Buffer.from('[1,2]'));\n    });\n\n    it('should use trimmed string value if no special encoder is used', function() {\n      expect(AtviseFile.encodeValue({ value: 'string\\n ' }, DataType.String),\n        'to equal', Buffer.from('string'));\n    });\n  });\n\n  /** @test {AtviseFile.decodeValue} */\n  describe('.decodeValue', function() {\n    it('should forward null', function() {\n      expect(AtviseFile.decodeValue(null), 'to equal', null);\n    });\n\n    function testDecoderForDataType(dataType, rawValue, expectedValue) {\n      it(`decoder for ${dataType} should work`, function() {\n        expect(AtviseFile.decodeValue(Buffer.from(rawValue), dataType),\n          'to satisfy', expectedValue);\n      });\n    }\n\n    const now = (new Date());\n\n    [\n      [DataType.Boolean, 'false', false],\n      [DataType.Boolean, 'true', true],\n      [DataType.String, 'test', 'test'],\n      [DataType.NodeId, 'ns=1;s=AGENT.DISPLAYS.Main', new NodeId('AGENT.DISPLAYS.Main')],\n      [DataType.DateTime, now.getTime().toString(), now],\n      [DataType.UInt64, '[1,2]', [1, 2]],\n    ].forEach(t => testDecoderForDataType(...t));\n\n    it('should forward buffer without spection encoding', function() {\n      const buffer = new Buffer('test');\n      expect(AtviseFile.decodeValue(buffer, DataType.ByteString), 'to equal', buffer);\n    });\n  });\n\n  /** @test {AtviseFile.normalizeMtime} */\n  describe('.normalizeMtime', function() {\n    it('should return original without milliseconds', function() {\n      const org = new Date();\n      org.setMilliseconds(0);\n\n      expect(AtviseFile.normalizeMtime(org), 'to equal', org);\n    });\n\n    it('should remove milliseconds if provided', function() {\n      const org = new Date();\n      org.setMilliseconds(500);\n\n      expect(AtviseFile.normalizeMtime(org).getMilliseconds(), 'to equal', 0);\n    });\n  });\n\n  /** @test {AtviseFile.fromReadResult} */\n  describe('.fromReadResult', function() {\n    it('should fail without value', function() {\n      expect(() => AtviseFile.fromReadResult({}), 'to throw', 'no value');\n    });\n\n    it('should return a new instance with valid readResult', function() {\n      const nodeId = new NodeId('AGENT.DISPLAYS.Main');\n\n      expect(AtviseFile.fromReadResult({\n        nodeId,\n        value: {\n          value: '<svg></svg>',\n          $dataType: DataType.XmlElement,\n          $arrayType: VariantArrayType.Scalar,\n        },\n        referenceDescription: {\n          nodeId,\n          typeDefinition: new NodeId('VariableTypes.ATVISE.Display'),\n        },\n        mtime: new Date(),\n      }), 'to be a', AtviseFile);\n    });\n\n    it('should use undefined as mtime if not provided', function() {\n      const nodeId = new NodeId('AGENT.DISPLAYS.Main');\n\n      const file = AtviseFile.fromReadResult({\n        nodeId,\n        value: {\n          value: '<svg></svg>',\n          $dataType: DataType.XmlElement,\n          $arrayType: VariantArrayType.Scalar,\n        },\n        referenceDescription: {\n          nodeId,\n          typeDefinition: new NodeId('VariableTypes.ATVISE.Display'),\n        },\n      });\n\n      expect(file, 'to be a', AtviseFile);\n      expect(file.stat.mtime, 'to be', undefined);\n    });\n  });\n\n  /** @test {AtviseFile#_getMetadata} */\n  describe('#_getMetadata', function() {\n    tests.forEach(test => {\n      it(test.name, function() {\n        const file = new AtviseFile({ path: test.filePath });\n\n        expect(() => file._getMetadata(), 'not to throw');\n        if (test.dataType) {\n          expect(file._dataType, 'to equal', test.dataType);\n        }\n        expect(file._arrayType, 'to equal', test.arrayType);\n        expect(file._typeDefinition, 'to equal', test.typeDefinition);\n      });\n    });\n\n    it('should use dirname extensions if filename has no extensions', function() {\n      const file = new AtviseFile({ path: 'dir.display/file' });\n      expect(() => file._getMetadata(), 'not to throw');\n      expect(file._typeDefinition, 'to equal', new NodeId('VariableTypes.ATVISE.Display'));\n    });\n\n    it('should not get tripped up by multiple dots in dirname if filename has no extensions', function() {\n      const file = new AtviseFile({ path: 'dir.with.multiple.dots.display/file' });\n      expect(() => file._getMetadata(), 'not to throw');\n      expect(file._typeDefinition, 'to equal', new NodeId('VariableTypes.ATVISE.Display'));\n    });\n  });\n\n  function testMetaGetter(name) {\n    beforeEach(() => stub(AtviseFile.prototype, '_getMetadata', () => {}));\n    afterEach(() => AtviseFile.prototype._getMetadata.restore());\n\n    it('should call _getMetadata if not present', function() {\n      const file = new AtviseFile({ path: 'path' });\n      expect(file[`_${name}`], 'to be', undefined);\n\n      const val = file[name];\n\n      expect(val, 'to be', undefined);\n      expect(AtviseFile.prototype._getMetadata.calledOnce, 'to be', true);\n    });\n\n    it('should return stored value if present', function() {\n      const value = 'value';\n      const file = new AtviseFile({\n        path: 'path',\n        [`_${name}`]: value,\n      });\n\n      expect(file[name], 'to be', value);\n      expect(AtviseFile.prototype._getMetadata, 'was not called');\n    });\n  }\n\n  /** @test {AtviseFile#dataType} */\n  describe('#dataType', function() {\n    testMetaGetter('dataType');\n  });\n\n  /** @test {AtviseFile#arrayType} */\n  describe('#arrayType', function() {\n    testMetaGetter('arrayType');\n  });\n\n  /** @test {AtviseFile#typeDefinition} */\n  describe('#typeDefinition', function() {\n    testMetaGetter('typeDefinition');\n  });\n\n  /** @test {AtviseFile#isDisplay} */\n  describe('#isDisplay', function() {\n    it('should return true for AtviseFiles with correct TypeDefinition', function() {\n      expect((new AtviseFile({\n        _typeDefinition: new NodeId('VariableTypes.ATVISE.Display'),\n      })).isDisplay, 'to be true');\n    });\n  });\n\n  /** @test {AtviseFile#isScript} */\n  describe('#isScript', function() {\n    it('should return true for AtviseFiles with correct TypeDefinition', function() {\n      expect((new AtviseFile({\n        _typeDefinition: new NodeId('VariableTypes.ATVISE.ScriptCode'),\n      })).isScript, 'to be true');\n    });\n  });\n\n  /** @test {AtviseFile#isQuickDynamic} */\n  describe('#isScript', function() {\n    it('should return true for AtviseFiles with correct TypeDefinition', function() {\n      expect((new AtviseFile({\n        _typeDefinition: new NodeId('VariableTypes.ATVISE.QuickDynamic'),\n      })).isQuickDynamic, 'to be true');\n    });\n  });\n\n  /** @test {AtivseFile#value} */\n  describe('#value', function() {\n    const val = new Buffer('test');\n\n    before(() => {\n      stub(AtviseFile, 'decodeValue', () => true);\n      stub(AtviseFile, 'encodeValue', () => val);\n    });\n\n    after(() => {\n      AtviseFile.decodeValue.restore();\n      AtviseFile.encodeValue.restore();\n    });\n\n    context('when used as getter', function() {\n      it('should return decodedValue', function() {\n        const file = new AtviseFile({ path: 'path.ext' });\n\n        expect(file.value, 'to equal', true);\n        expect(AtviseFile.decodeValue.calledOnce, 'to be true');\n      });\n    });\n\n    context('when used as setter', function() {\n      it('should set encoded value as contents', function() {\n        const file = new AtviseFile({ path: 'path.ext' });\n        file.value = 13;\n\n        expect(AtviseFile.encodeValue.calledOnce, 'to be true');\n        expect(file.contents, 'to equal', val);\n      });\n    });\n  });\n\n  /** @test {AtviseFile#nodeId} */\n  describe('#nodeId', function() {\n    it('should keep extensions for resources', function() {\n      expect((new AtviseFile({ path: 'SYSTEM/LIBRARY/PROJECT/RESOURCES/example.js' }).nodeId.value),\n        'to equal', 'SYSTEM.LIBRARY.PROJECT.RESOURCES/example.js');\n    });\n\n    it('should remove extension for non-atvise types', function() {\n      expect((new AtviseFile({ path: 'AGENT/OBJECTS/Test.bool' }).nodeId.value),\n        'to equal', 'AGENT.OBJECTS.Test');\n    });\n  });\n\n  /** @test {AtviseFile#clone} */\n  describe('#clone', function() {\n    it('should return a file again', function() {\n      expect(new AtviseFile({\n        path: 'path/to/name.display.xml',\n        _arrayType: VariantArrayType.Matrix,\n      }).clone(), 'to be a', AtviseFile);\n    });\n\n    it('should return file with the same array type', function() {\n      expect(new AtviseFile({\n        path: 'path/to/name.display.xml',\n        _arrayType: VariantArrayType.Matrix,\n      }).clone()._arrayType, 'to equal', VariantArrayType.Matrix);\n    });\n  });\n\n  /** @test {AtviseFile.read} */\n  describe('.read', function() {\n    it('should fail without path', function() {\n      return expect(AtviseFile.read(), 'to be rejected with', 'options.path is required');\n    });\n\n    it('should forward read errors', function() {\n      return expect(AtviseFile.read({\n        path: 'does/not/exist',\n      }), 'to be rejected with', /no such file/);\n    });\n\n    it('should return AtviseFile if read succeeds', function() {\n      return expect(AtviseFile.read({\n        path: `${__filename}`,\n      }), 'when fulfilled', 'to be a', AtviseFile);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/server/AtviseFile.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 447,
    "kind": "test",
    "name": "describe81",
    "testId": 81,
    "memberof": "test/src/lib/server/AtviseFile.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "access": null,
    "description": "AtviseFile",
    "lineNumber": 11,
    "testTargets": [
      "AtviseFile"
    ]
  },
  {
    "__docId__": 448,
    "kind": "test",
    "name": "describe82",
    "testId": 82,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe82",
    "access": null,
    "description": "#constructor",
    "lineNumber": 13,
    "testTargets": [
      "AtviseFile#constructor"
    ]
  },
  {
    "__docId__": 449,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe82.it83",
    "access": null,
    "description": "should create a vinyl instance",
    "lineNumber": 14
  },
  {
    "__docId__": 450,
    "kind": "test",
    "name": "describe84",
    "testId": 84,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe84",
    "access": null,
    "description": ".pathForReadResult",
    "lineNumber": 115,
    "testTargets": [
      "AtviseFile.pathForReadResult"
    ]
  },
  {
    "__docId__": 451,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe84",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe84.it85",
    "access": null,
    "lineNumber": 117
  },
  {
    "__docId__": 452,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe84",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe84.it86",
    "access": null,
    "description": "should store custom typed variables with a \".var\" extension",
    "lineNumber": 131
  },
  {
    "__docId__": 453,
    "kind": "test",
    "name": "describe87",
    "testId": 87,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe87",
    "access": null,
    "description": ".encodeValue",
    "lineNumber": 146,
    "testTargets": [
      "AtviseFile.encodeValue"
    ]
  },
  {
    "__docId__": 454,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe87.it88",
    "access": null,
    "description": "should return empty buffer for null",
    "lineNumber": 147
  },
  {
    "__docId__": 455,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe87.it89",
    "access": null,
    "description": "should store timestamp as string for DateTime values",
    "lineNumber": 151
  },
  {
    "__docId__": 456,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe87.it90",
    "access": null,
    "description": "should store JSON encoded bytes for UInt64 values",
    "lineNumber": 158
  },
  {
    "__docId__": 457,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe87.it91",
    "access": null,
    "description": "should use trimmed string value if no special encoder is used",
    "lineNumber": 163
  },
  {
    "__docId__": 458,
    "kind": "test",
    "name": "describe92",
    "testId": 92,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe92",
    "access": null,
    "description": ".decodeValue",
    "lineNumber": 170,
    "testTargets": [
      "AtviseFile.decodeValue"
    ]
  },
  {
    "__docId__": 459,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe92.it93",
    "access": null,
    "description": "should forward null",
    "lineNumber": 171
  },
  {
    "__docId__": 460,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe92.it94",
    "access": null,
    "lineNumber": 176
  },
  {
    "__docId__": 461,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe92.it95",
    "access": null,
    "description": "should forward buffer without spection encoding",
    "lineNumber": 193
  },
  {
    "__docId__": 462,
    "kind": "test",
    "name": "describe96",
    "testId": 96,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe96",
    "access": null,
    "description": ".normalizeMtime",
    "lineNumber": 200,
    "testTargets": [
      "AtviseFile.normalizeMtime"
    ]
  },
  {
    "__docId__": 463,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe96",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe96.it97",
    "access": null,
    "description": "should return original without milliseconds",
    "lineNumber": 201
  },
  {
    "__docId__": 464,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe96",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe96.it98",
    "access": null,
    "description": "should remove milliseconds if provided",
    "lineNumber": 208
  },
  {
    "__docId__": 465,
    "kind": "test",
    "name": "describe99",
    "testId": 99,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe99",
    "access": null,
    "description": ".fromReadResult",
    "lineNumber": 217,
    "testTargets": [
      "AtviseFile.fromReadResult"
    ]
  },
  {
    "__docId__": 466,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe99",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe99.it100",
    "access": null,
    "description": "should fail without value",
    "lineNumber": 218
  },
  {
    "__docId__": 467,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe99",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe99.it101",
    "access": null,
    "description": "should return a new instance with valid readResult",
    "lineNumber": 222
  },
  {
    "__docId__": 468,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe99",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe99.it102",
    "access": null,
    "description": "should use undefined as mtime if not provided",
    "lineNumber": 240
  },
  {
    "__docId__": 469,
    "kind": "test",
    "name": "describe103",
    "testId": 103,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe103",
    "access": null,
    "description": "#_getMetadata",
    "lineNumber": 262,
    "testTargets": [
      "AtviseFile#_getMetadata"
    ]
  },
  {
    "__docId__": 470,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe103.it104",
    "access": null,
    "lineNumber": 264
  },
  {
    "__docId__": 471,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe103.it105",
    "access": null,
    "description": "should use dirname extensions if filename has no extensions",
    "lineNumber": 276
  },
  {
    "__docId__": 472,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe103.it106",
    "access": null,
    "description": "should not get tripped up by multiple dots in dirname if filename has no extensions",
    "lineNumber": 282
  },
  {
    "__docId__": 473,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.it107",
    "access": null,
    "description": "should call _getMetadata if not present",
    "lineNumber": 293
  },
  {
    "__docId__": 474,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.it108",
    "access": null,
    "description": "should return stored value if present",
    "lineNumber": 303
  },
  {
    "__docId__": 475,
    "kind": "test",
    "name": "describe109",
    "testId": 109,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe109",
    "access": null,
    "description": "#dataType",
    "lineNumber": 316,
    "testTargets": [
      "AtviseFile#dataType"
    ]
  },
  {
    "__docId__": 476,
    "kind": "test",
    "name": "describe110",
    "testId": 110,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe110",
    "access": null,
    "description": "#arrayType",
    "lineNumber": 321,
    "testTargets": [
      "AtviseFile#arrayType"
    ]
  },
  {
    "__docId__": 477,
    "kind": "test",
    "name": "describe111",
    "testId": 111,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe111",
    "access": null,
    "description": "#typeDefinition",
    "lineNumber": 326,
    "testTargets": [
      "AtviseFile#typeDefinition"
    ]
  },
  {
    "__docId__": 478,
    "kind": "test",
    "name": "describe112",
    "testId": 112,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe112",
    "access": null,
    "description": "#isDisplay",
    "lineNumber": 331,
    "testTargets": [
      "AtviseFile#isDisplay"
    ]
  },
  {
    "__docId__": 479,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe112",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe112.it113",
    "access": null,
    "description": "should return true for AtviseFiles with correct TypeDefinition",
    "lineNumber": 332
  },
  {
    "__docId__": 480,
    "kind": "test",
    "name": "describe114",
    "testId": 114,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe114",
    "access": null,
    "description": "#isScript",
    "lineNumber": 340,
    "testTargets": [
      "AtviseFile#isScript"
    ]
  },
  {
    "__docId__": 481,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe114",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe114.it115",
    "access": null,
    "description": "should return true for AtviseFiles with correct TypeDefinition",
    "lineNumber": 341
  },
  {
    "__docId__": 482,
    "kind": "test",
    "name": "describe116",
    "testId": 116,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe116",
    "access": null,
    "description": "#isScript",
    "lineNumber": 349,
    "testTargets": [
      "AtviseFile#isQuickDynamic"
    ]
  },
  {
    "__docId__": 483,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe116",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe116.it117",
    "access": null,
    "description": "should return true for AtviseFiles with correct TypeDefinition",
    "lineNumber": 350
  },
  {
    "__docId__": 484,
    "kind": "test",
    "name": "describe118",
    "testId": 118,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe118",
    "access": null,
    "description": "#value",
    "lineNumber": 358,
    "testTargets": [
      "AtivseFile#value"
    ]
  },
  {
    "__docId__": 485,
    "kind": "test",
    "name": "context119",
    "testId": 119,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe118",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe118.context119",
    "access": null,
    "description": "when used as getter",
    "lineNumber": 371
  },
  {
    "__docId__": 486,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe118.context119",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe118.context119.it120",
    "access": null,
    "description": "should return decodedValue",
    "lineNumber": 372
  },
  {
    "__docId__": 487,
    "kind": "test",
    "name": "context121",
    "testId": 121,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe118",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe118.context121",
    "access": null,
    "description": "when used as setter",
    "lineNumber": 380
  },
  {
    "__docId__": 488,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe118.context121",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe118.context121.it122",
    "access": null,
    "description": "should set encoded value as contents",
    "lineNumber": 381
  },
  {
    "__docId__": 489,
    "kind": "test",
    "name": "describe123",
    "testId": 123,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe123",
    "access": null,
    "description": "#nodeId",
    "lineNumber": 392,
    "testTargets": [
      "AtviseFile#nodeId"
    ]
  },
  {
    "__docId__": 490,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe123",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe123.it124",
    "access": null,
    "description": "should keep extensions for resources",
    "lineNumber": 393
  },
  {
    "__docId__": 491,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe123",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe123.it125",
    "access": null,
    "description": "should remove extension for non-atvise types",
    "lineNumber": 398
  },
  {
    "__docId__": 492,
    "kind": "test",
    "name": "describe126",
    "testId": 126,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe126",
    "access": null,
    "description": "#clone",
    "lineNumber": 405,
    "testTargets": [
      "AtviseFile#clone"
    ]
  },
  {
    "__docId__": 493,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe126",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe126.it127",
    "access": null,
    "description": "should return a file again",
    "lineNumber": 406
  },
  {
    "__docId__": 494,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe126",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe126.it128",
    "access": null,
    "description": "should return file with the same array type",
    "lineNumber": 413
  },
  {
    "__docId__": 495,
    "kind": "test",
    "name": "describe129",
    "testId": 129,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe129",
    "access": null,
    "description": ".read",
    "lineNumber": 422,
    "testTargets": [
      "AtviseFile.read"
    ]
  },
  {
    "__docId__": 496,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe129",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe129.it130",
    "access": null,
    "description": "should fail without path",
    "lineNumber": 423
  },
  {
    "__docId__": 497,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe129",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe129.it131",
    "access": null,
    "description": "should forward read errors",
    "lineNumber": 427
  },
  {
    "__docId__": 498,
    "kind": "test",
    "name": "it132",
    "testId": 132,
    "memberof": "test/src/lib/server/AtviseFile.spec.js~describe81.describe129",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/AtviseFile.spec.js~describe81.describe129.it132",
    "access": null,
    "description": "should return AtviseFile if read succeeds",
    "lineNumber": 433
  },
  {
    "__docId__": 499,
    "kind": "testFile",
    "name": "test/src/lib/server/Client.spec.js",
    "content": "import expect from 'unexpected';\nimport proxyquire from 'proxyquire';\n\nimport { OPCUAClient } from 'node-opcua';\nimport Client from '../../../../src/lib/server/Client';\n\nconst InvalidHostClient = proxyquire('../../../../src/lib/server/Client', {\n  '../../config/ProjectConfig': {\n    default: {\n      host: 'in valid url',\n      port: { opc: 4840 },\n    },\n  },\n}).default;\n\nconst NotExisingHostClient = proxyquire('../../../../src/lib/server/Client', {\n  '../../config/ProjectConfig': {\n    default: {\n      host: '123.456.789.0',\n      port: { opc: 4840 },\n    },\n  },\n}).default;\n\nconst FailingClient = proxyquire('../../../../src/lib/server/Client', {\n  'node-opcua': {\n    OPCUAClient: class FailingCli extends OPCUAClient {\n\n      connect(endpoint, callback) {\n        callback(new Error('Error message'));\n      }\n\n    },\n  },\n}).default;\n\n/** @test {Client} */\ndescribe('Client', function() {\n  /** @test {Client.create} */\n  describe('.create', function() {\n    it('should return a OPCUAClient', function() {\n      return expect(Client.create(), 'when fulfilled', 'to be a', OPCUAClient);\n    });\n\n    it('should fail with invalid host', function() {\n      return expect(InvalidHostClient.create(), 'to be rejected with', /Invalid endpoint url/);\n    });\n\n    it('should fail on connection timeout', function() {\n      return expect(NotExisingHostClient.create(), 'to be rejected with', /Connection timed out/);\n    });\n\n    it('should fail when node-opcua encounters an error', function() {\n      return expect(FailingClient.create(), 'to be rejected with', Error);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/server/Client.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 500,
    "kind": "test",
    "name": "describe133",
    "testId": 133,
    "memberof": "test/src/lib/server/Client.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/Client.spec.js~describe133",
    "access": null,
    "description": "Client",
    "lineNumber": 38,
    "testTargets": [
      "Client"
    ]
  },
  {
    "__docId__": 501,
    "kind": "test",
    "name": "describe134",
    "testId": 134,
    "memberof": "test/src/lib/server/Client.spec.js~describe133",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Client.spec.js~describe133.describe134",
    "access": null,
    "description": ".create",
    "lineNumber": 40,
    "testTargets": [
      "Client.create"
    ]
  },
  {
    "__docId__": 502,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "test/src/lib/server/Client.spec.js~describe133.describe134",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Client.spec.js~describe133.describe134.it135",
    "access": null,
    "description": "should return a OPCUAClient",
    "lineNumber": 41
  },
  {
    "__docId__": 503,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "test/src/lib/server/Client.spec.js~describe133.describe134",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Client.spec.js~describe133.describe134.it136",
    "access": null,
    "description": "should fail with invalid host",
    "lineNumber": 45
  },
  {
    "__docId__": 504,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "test/src/lib/server/Client.spec.js~describe133.describe134",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Client.spec.js~describe133.describe134.it137",
    "access": null,
    "description": "should fail on connection timeout",
    "lineNumber": 49
  },
  {
    "__docId__": 505,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "test/src/lib/server/Client.spec.js~describe133.describe134",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Client.spec.js~describe133.describe134.it138",
    "access": null,
    "description": "should fail when node-opcua encounters an error",
    "lineNumber": 53
  },
  {
    "__docId__": 506,
    "kind": "testFile",
    "name": "test/src/lib/server/NodeId.spec.js",
    "content": "import { join } from 'path';\nimport expect from 'unexpected';\nimport { spy } from 'sinon';\n\nimport { NodeId as OpcNodeId } from 'node-opcua';\nimport NodeId from '../../../../src/lib/server/NodeId';\n\n/** @test {NodeId} */\ndescribe('NodeId', function() {\n  const path = 'AGENT/DISPLAYS/Main';\n  const id = 'AGENT.DISPLAYS.Main';\n\n  /** @test {NodeId#constructor} */\n  describe('#constructor', function() {\n    function expectType(type, ...args) {\n      expect((new NodeId(...args)).identifierType, 'to equal', type);\n    }\n\n    context('when called with value only', function() {\n      it('should work', function() {\n        expect(() => new NodeId('AGENT.DISPLAYS'), 'not to throw');\n      });\n\n      it('should set namespace to 1', function() {\n        expect((new NodeId('AGENT.DISPLAYS')).namespace, 'to equal', 1);\n      });\n\n      it('should set indentifierType to string if string is passed', function() {\n        expectType(NodeId.NodeIdType.STRING, 'AGENT.DISPLAYS');\n      });\n\n      it('should set indentifierType to number if number is passed', function() {\n        expectType(NodeId.NodeIdType.NUMERIC, 123);\n      });\n    });\n\n    context('when called with a nodeid string', function() {\n      it('should work', function() {\n        expect(() => new NodeId('ns=1;s=AGENT.DISPLAYS'), 'not to throw');\n      });\n\n      it('should get namespace from string', function() {\n        expect((new NodeId('ns=13;s=AGENT.DISPLAYS')).namespace, 'to equal', 13);\n      });\n\n      it('should get identifierType from string', function() {\n        expectType(NodeId.NodeIdType.STRING, 'ns=1;s=AGENT.DISPLAYS');\n        expectType(NodeId.NodeIdType.NUMERIC, 'ns=1;i=13');\n        // FIXME: Missing tests for type GUID\n        expectType(NodeId.NodeIdType.BYTESTRING, 'ns=1;b=13Ac');\n      });\n    });\n\n    context('when called with type, value, namespace', function() {\n      it('should work', function() {\n        expect(() => new NodeId(NodeId.NodeIdType.STRING, 'AGENT.DISPLAYS', 1), 'not to throw');\n      });\n\n      it('should set namespace to 1 if omitted', function() {\n        expect(() => new NodeId(NodeId.NodeIdType.STRING, 'AGENT.DISPLAYS'), 'not to throw');\n        expect((new NodeId(NodeId.NodeIdType.STRING, 'AGENT.DISPLAYS')).namespace, 'to equal', 1);\n      });\n    });\n\n    it('should extend node-opcua\\'s NodeId', function() {\n      expect((new NodeId(NodeId.NodeIdType.NUMERIC, 123, 1)), 'to be a', OpcNodeId);\n    });\n  });\n\n  /** @test {NodeId#fromFilePath} */\n  describe('#fromFilePath', function() {\n    it('should return a NodeId', function() {\n      expect(NodeId.fromFilePath(path), 'to be a', NodeId);\n    });\n\n    it('should return file path again', function() {\n      const nodeId = NodeId.fromFilePath(path);\n      expect(nodeId.filePath, 'to be a', 'string');\n      expect(nodeId.filePath, 'to equal', path);\n    });\n\n    it('should work with resource paths', function() {\n      expect(NodeId.fromFilePath(\n        join('SYSTEM/LIBRARY/ATVISE/RESOURCES/timer/imgs_glossy/top-separator.gif')\n      ).value,\n        'to equal', 'SYSTEM.LIBRARY.ATVISE.RESOURCES/timer/imgs_glossy/top-separator.gif');\n    });\n\n    it('should work with multi extension resource paths', function() {\n      expect(NodeId.fromFilePath(\n        join('SYSTEM/LIBRARY/PROJECT/RESOURCES/styles/bootstrap.min.css')\n        ).value,\n        'to equal', 'SYSTEM.LIBRARY.PROJECT.RESOURCES/styles/bootstrap.min.css');\n    });\n  });\n\n  /** @test {NodeId#filePath} */\n  describe('#filePath', function() {\n    it('should return a valid file path', function() {\n      const nodeId = new NodeId(NodeId.NodeIdType.STRING, id, 1);\n\n      expect(nodeId.filePath, 'to be a', 'string');\n      expect(nodeId.filePath, 'to equal', path);\n    });\n\n    it('should handle resource paths', function() {\n      const nodeId = new NodeId(NodeId.NodeIdType.STRING, 'SYSTEM.LIBRARY.RESOURCES/dir/test.e', 1);\n\n      expect(nodeId.filePath, 'to be a', 'string');\n      expect(nodeId.filePath, 'to equal', 'SYSTEM/LIBRARY/RESOURCES/dir/test.e');\n    });\n  });\n\n  /** @test {NodeId#inspect} */\n  describe('#inspect', function() {\n    const opts = {\n      stylize: spy(t => t),\n    };\n\n    beforeEach(() => opts.stylize.reset());\n\n    it('should return \"namespace value\"', function() {\n      const nodeId = new NodeId(NodeId.NodeIdType.STRING, 'AGENT.DISPLAYS', 1);\n\n      expect(nodeId.inspect(0, opts), 'to match', /1 AGENT\\.DISPLAYS/);\n    });\n\n    it('should style string id as string', function() {\n      (new NodeId(NodeId.NodeIdType.STRING, 'AGENT.DISPLAYS', 1)).inspect(0, opts);\n\n      expect(opts.stylize.calledTwice, 'to be true');\n      expect(opts.stylize.lastCall.args, 'to equal', ['AGENT.DISPLAYS', 'string']);\n    });\n\n    it('should style numeric id as number', function() {\n      (new NodeId(NodeId.NodeIdType.NUMERIC, 123, 1)).inspect(0, opts);\n\n      expect(opts.stylize.calledTwice, 'to be true');\n      expect(opts.stylize.lastCall.args, 'to equal', [123, 'number']);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/server/NodeId.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 507,
    "kind": "test",
    "name": "describe139",
    "testId": 139,
    "memberof": "test/src/lib/server/NodeId.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139",
    "access": null,
    "description": "NodeId",
    "lineNumber": 9,
    "testTargets": [
      "NodeId"
    ]
  },
  {
    "__docId__": 508,
    "kind": "test",
    "name": "describe140",
    "testId": 140,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe140",
    "access": null,
    "description": "#constructor",
    "lineNumber": 14,
    "testTargets": [
      "NodeId#constructor"
    ]
  },
  {
    "__docId__": 509,
    "kind": "test",
    "name": "context141",
    "testId": 141,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe140",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context141",
    "access": null,
    "description": "when called with value only",
    "lineNumber": 19
  },
  {
    "__docId__": 510,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context141",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context141.it142",
    "access": null,
    "description": "should work",
    "lineNumber": 20
  },
  {
    "__docId__": 511,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context141",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context141.it143",
    "access": null,
    "description": "should set namespace to 1",
    "lineNumber": 24
  },
  {
    "__docId__": 512,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context141",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context141.it144",
    "access": null,
    "description": "should set indentifierType to string if string is passed",
    "lineNumber": 28
  },
  {
    "__docId__": 513,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context141",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context141.it145",
    "access": null,
    "description": "should set indentifierType to number if number is passed",
    "lineNumber": 32
  },
  {
    "__docId__": 514,
    "kind": "test",
    "name": "context146",
    "testId": 146,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe140",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context146",
    "access": null,
    "description": "when called with a nodeid string",
    "lineNumber": 37
  },
  {
    "__docId__": 515,
    "kind": "test",
    "name": "it147",
    "testId": 147,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context146",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context146.it147",
    "access": null,
    "description": "should work",
    "lineNumber": 38
  },
  {
    "__docId__": 516,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context146",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context146.it148",
    "access": null,
    "description": "should get namespace from string",
    "lineNumber": 42
  },
  {
    "__docId__": 517,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context146",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context146.it149",
    "access": null,
    "description": "should get identifierType from string",
    "lineNumber": 46
  },
  {
    "__docId__": 518,
    "kind": "test",
    "name": "context150",
    "testId": 150,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe140",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context150",
    "access": null,
    "description": "when called with type, value, namespace",
    "lineNumber": 54
  },
  {
    "__docId__": 519,
    "kind": "test",
    "name": "it151",
    "testId": 151,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context150",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context150.it151",
    "access": null,
    "description": "should work",
    "lineNumber": 55
  },
  {
    "__docId__": 520,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context150",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe140.context150.it152",
    "access": null,
    "description": "should set namespace to 1 if omitted",
    "lineNumber": 59
  },
  {
    "__docId__": 521,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe140",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe140.it153",
    "access": null,
    "description": "should extend node-opcua's NodeId",
    "lineNumber": 65
  },
  {
    "__docId__": 522,
    "kind": "test",
    "name": "describe154",
    "testId": 154,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe154",
    "access": null,
    "description": "#fromFilePath",
    "lineNumber": 71,
    "testTargets": [
      "NodeId#fromFilePath"
    ]
  },
  {
    "__docId__": 523,
    "kind": "test",
    "name": "it155",
    "testId": 155,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe154",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe154.it155",
    "access": null,
    "description": "should return a NodeId",
    "lineNumber": 72
  },
  {
    "__docId__": 524,
    "kind": "test",
    "name": "it156",
    "testId": 156,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe154",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe154.it156",
    "access": null,
    "description": "should return file path again",
    "lineNumber": 76
  },
  {
    "__docId__": 525,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe154",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe154.it157",
    "access": null,
    "description": "should work with resource paths",
    "lineNumber": 82
  },
  {
    "__docId__": 526,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe154",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe154.it158",
    "access": null,
    "description": "should work with multi extension resource paths",
    "lineNumber": 89
  },
  {
    "__docId__": 527,
    "kind": "test",
    "name": "describe159",
    "testId": 159,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe159",
    "access": null,
    "description": "#filePath",
    "lineNumber": 98,
    "testTargets": [
      "NodeId#filePath"
    ]
  },
  {
    "__docId__": 528,
    "kind": "test",
    "name": "it160",
    "testId": 160,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe159",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe159.it160",
    "access": null,
    "description": "should return a valid file path",
    "lineNumber": 99
  },
  {
    "__docId__": 529,
    "kind": "test",
    "name": "it161",
    "testId": 161,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe159",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe159.it161",
    "access": null,
    "description": "should handle resource paths",
    "lineNumber": 106
  },
  {
    "__docId__": 530,
    "kind": "test",
    "name": "describe162",
    "testId": 162,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe162",
    "access": null,
    "description": "#inspect",
    "lineNumber": 115,
    "testTargets": [
      "NodeId#inspect"
    ]
  },
  {
    "__docId__": 531,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe162.it163",
    "access": null,
    "description": "should return \"namespace value\"",
    "lineNumber": 122
  },
  {
    "__docId__": 532,
    "kind": "test",
    "name": "it164",
    "testId": 164,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe162.it164",
    "access": null,
    "description": "should style string id as string",
    "lineNumber": 128
  },
  {
    "__docId__": 533,
    "kind": "test",
    "name": "it165",
    "testId": 165,
    "memberof": "test/src/lib/server/NodeId.spec.js~describe139.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeId.spec.js~describe139.describe162.it165",
    "access": null,
    "description": "should style numeric id as number",
    "lineNumber": 135
  },
  {
    "__docId__": 534,
    "kind": "testFile",
    "name": "test/src/lib/server/NodeStream.spec.js",
    "content": "import { resolveNodeId, StatusCodes, NodeClass } from 'node-opcua';\nimport { spy } from 'sinon';\nimport expect from '../../../expect';\nimport NodeStream from '../../../../src/lib/server/NodeStream';\nimport NodeId from '../../../../src/lib/server/NodeId';\n\nclass StubNodeStream extends NodeStream {\n  _transform(chunk, enc, callback) {\n    callback(null, chunk);\n  }\n}\n\n/** @test {NodeStream} */\ndescribe('NodeStream', function() {\n  const testNodes = [new NodeId('ns=1;s=AGENT.DISPLAYS')];\n\n  /** @test {NodeStream#constructor} */\n  describe('#constructor', function() {\n    it('should fail without nodesToBrowse', function() {\n      expect(() => new NodeStream(), 'to throw', /nodesToBrowse is required/);\n    });\n\n    it('should throw with invalid ignoreNodes', function() {\n      expect(() => new NodeStream(testNodes, { ignoreNodes: 'test' }),\n        'to throw', /ignoreNodes must be an array/);\n    });\n\n    it('should store \"recursive\" option', function() {\n      expect((new StubNodeStream(testNodes, { recursive: false })).recursive, 'to be', false);\n    });\n\n    it('should create ignoredRexExp', function() {\n      expect((new StubNodeStream(testNodes, { ignoreNodes: testNodes })).ignoredRegExp,\n        'to equal', /^(ns=1;s=AGENT.DISPLAYS)/);\n    });\n\n    it('should listen to drained events', function() {\n      expect((new StubNodeStream(testNodes)).listenerCount('drained'), 'to equal', 1);\n    });\n  });\n\n  /** @test {NodeStream#processErrorMessage} */\n  describe('#processErrorMessage', function() {\n    const nodeId = resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main');\n    expect(NodeStream.prototype.processErrorMessage(nodeId),\n      'to contain', nodeId.toString());\n  });\n\n  /** @test {NodeStream#processChunk} */\n  describe('#processChunk', function() {\n    it('should forward browse errors', function() {\n      const stream = new NodeStream(testNodes)\n        .prependOnceListener('session-open', () => {\n          stream.session.browse = (options, callback) => {\n            callback(new Error('Browse error'));\n          };\n        });\n\n      return expect(stream, 'to error with', /Browse error/);\n    });\n\n    it('should emit error without results', function() {\n      const stream = new NodeStream(testNodes)\n        .prependOnceListener('session-open', () => {\n          stream.session.browse = (options, callback) => {\n            callback(null, null);\n          };\n        });\n\n      return expect(stream, 'to error with', /No results/);\n    });\n\n    it('should emit error with empty results', function() {\n      const stream = new NodeStream(testNodes)\n        .prependOnceListener('session-open', () => {\n          stream.session.browse = (options, callback) => {\n            callback(null, []);\n          };\n        });\n\n      return expect(stream, 'to error with', /No results/);\n    });\n\n    it('should not push parent nodes', function() {\n      const stream = new NodeStream(testNodes, { recursive: false })\n        .prependOnceListener('session-open', () => {\n          stream.session.browse = (options, callback) => {\n            callback(null, [{\n              statusCode: StatusCodes.Good,\n              references: [\n                { nodeId: new NodeId('ns=1;s=AGENT') },\n              ],\n            }]);\n          };\n        });\n\n      return expect(stream, 'to yield objects satisfying', 'to have length', 0);\n    });\n\n    it('should not push ignored nodes', function() {\n      const stream = new NodeStream(testNodes, {\n        recursive: false,\n        ignoreNodes: [new NodeId('ns=1;s=AGENT.DISPLAYS.Main')],\n      })\n        .prependOnceListener('session-open', () => {\n          stream.session.browse = (options, callback) => {\n            callback(null, [{\n              statusCode: StatusCodes.Good,\n              references: [\n                { nodeId: new NodeId('ns=1;s=AGENT.DISPLAYS.Main') },\n              ],\n            }]);\n          };\n        });\n\n      return expect(stream, 'to yield objects satisfying', 'to have length', 0);\n    });\n\n    it('should not push discovered object nodes', function() {\n      const stream = new NodeStream(testNodes, { recursive: false })\n        .prependOnceListener('session-open', () => {\n          stream.session.browse = (options, callback) => {\n            callback(null, [{\n              statusCode: StatusCodes.Good,\n              references: [\n                {\n                  nodeClass: NodeClass.Object,\n                  nodeId: new NodeId('ns=1;s=AGENT.DISPLAYS.Main'),\n                },\n              ],\n            }]);\n          };\n        });\n\n      return expect(stream, 'to yield objects satisfying', 'to have length', 0);\n    });\n\n    it('should push discovered variable nodes', function() {\n      const stream = new NodeStream(testNodes, { recursive: false })\n        .prependOnceListener('session-open', () => {\n          stream.session.browse = (options, callback) => {\n            callback(null, [{\n              statusCode: StatusCodes.Good,\n              references: [\n                {\n                  nodeClass: NodeClass.Variable,\n                  nodeId: new NodeId('ns=1;s=AGENT.DISPLAYS.Main'),\n                },\n              ],\n            }]);\n          };\n        });\n\n      return expect(stream, 'to yield objects satisfying', 'to have length', 1);\n    });\n\n    it('should write discovered nodes if recursive', function() {\n      let alreadyCalled = false;\n      const stream = new NodeStream(testNodes, { recursive: true })\n        .prependOnceListener('session-open', () => {\n          stream.session.browse = (options, callback) => {\n            if (alreadyCalled) {\n              callback(null, [{\n                statusCode: StatusCodes.Good,\n                references: [],\n              }]);\n            } else {\n              alreadyCalled = true;\n\n              callback(null, [{\n                statusCode: StatusCodes.Good,\n                references: [\n                  {\n                    nodeClass: NodeClass.Variable,\n                    nodeId: new NodeId('ns=1;s=AGENT.DISPLAYS.Main'),\n                  },\n                  {\n                    nodeClass: NodeClass.Object,\n                    nodeId: new NodeId('ns=1;s=AGENT.DISPLAYS.MAIN'),\n                  },\n                ],\n              }]);\n            }\n          };\n        });\n\n      spy(stream, 'write');\n\n      return expect(stream, 'to yield objects satisfying', 'to have length', 1)\n        .then(() => expect(stream.write, 'was called times', 2));\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/server/NodeStream.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 535,
    "kind": "test",
    "name": "describe166",
    "testId": 166,
    "memberof": "test/src/lib/server/NodeStream.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166",
    "access": null,
    "description": "NodeStream",
    "lineNumber": 14,
    "testTargets": [
      "NodeStream"
    ]
  },
  {
    "__docId__": 536,
    "kind": "test",
    "name": "describe167",
    "testId": 167,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166.describe167",
    "access": null,
    "description": "#constructor",
    "lineNumber": 18,
    "testTargets": [
      "NodeStream#constructor"
    ]
  },
  {
    "__docId__": 537,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe166.describe167",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166.describe167.it168",
    "access": null,
    "description": "should fail without nodesToBrowse",
    "lineNumber": 19
  },
  {
    "__docId__": 538,
    "kind": "test",
    "name": "it169",
    "testId": 169,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe166.describe167",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166.describe167.it169",
    "access": null,
    "description": "should throw with invalid ignoreNodes",
    "lineNumber": 23
  },
  {
    "__docId__": 539,
    "kind": "test",
    "name": "it170",
    "testId": 170,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe166.describe167",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166.describe167.it170",
    "access": null,
    "description": "should store \"recursive\" option",
    "lineNumber": 28
  },
  {
    "__docId__": 540,
    "kind": "test",
    "name": "it171",
    "testId": 171,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe166.describe167",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166.describe167.it171",
    "access": null,
    "description": "should create ignoredRexExp",
    "lineNumber": 32
  },
  {
    "__docId__": 541,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe166.describe167",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166.describe167.it172",
    "access": null,
    "description": "should listen to drained events",
    "lineNumber": 37
  },
  {
    "__docId__": 542,
    "kind": "test",
    "name": "describe173",
    "testId": 173,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166.describe173",
    "access": null,
    "description": "#processErrorMessage",
    "lineNumber": 43,
    "testTargets": [
      "NodeStream#processErrorMessage"
    ]
  },
  {
    "__docId__": 543,
    "kind": "test",
    "name": "describe174",
    "testId": 174,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166.describe174",
    "access": null,
    "description": "#processChunk",
    "lineNumber": 50,
    "testTargets": [
      "NodeStream#processChunk"
    ]
  },
  {
    "__docId__": 544,
    "kind": "test",
    "name": "it175",
    "testId": 175,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe166.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166.describe174.it175",
    "access": null,
    "description": "should forward browse errors",
    "lineNumber": 51
  },
  {
    "__docId__": 545,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe166.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166.describe174.it176",
    "access": null,
    "description": "should emit error without results",
    "lineNumber": 62
  },
  {
    "__docId__": 546,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe166.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166.describe174.it177",
    "access": null,
    "description": "should emit error with empty results",
    "lineNumber": 73
  },
  {
    "__docId__": 547,
    "kind": "test",
    "name": "it178",
    "testId": 178,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe166.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166.describe174.it178",
    "access": null,
    "description": "should not push parent nodes",
    "lineNumber": 84
  },
  {
    "__docId__": 548,
    "kind": "test",
    "name": "it179",
    "testId": 179,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe166.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166.describe174.it179",
    "access": null,
    "description": "should not push ignored nodes",
    "lineNumber": 100
  },
  {
    "__docId__": 549,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe166.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166.describe174.it180",
    "access": null,
    "description": "should not push discovered object nodes",
    "lineNumber": 119
  },
  {
    "__docId__": 550,
    "kind": "test",
    "name": "it181",
    "testId": 181,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe166.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166.describe174.it181",
    "access": null,
    "description": "should push discovered variable nodes",
    "lineNumber": 138
  },
  {
    "__docId__": 551,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "test/src/lib/server/NodeStream.spec.js~describe166.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/NodeStream.spec.js~describe166.describe174.it182",
    "access": null,
    "description": "should write discovered nodes if recursive",
    "lineNumber": 157
  },
  {
    "__docId__": 552,
    "kind": "testFile",
    "name": "test/src/lib/server/QueueStream.spec.js",
    "content": "import { StatusCodes } from 'node-opcua';\nimport { spy, stub } from 'sinon';\nimport expect from '../../../expect';\nimport QueueStream from '../../../../src/lib/server/QueueStream';\n\nfunction fakeQueueStream(\n  err = null, status = StatusCodes.Good, onSuccess = done => done(), options = {}\n) {\n  return new (class FakeQueueStream extends QueueStream {\n    processErrorMessage(chunk) { return `Error processing ${chunk}`; }\n    processChunk(chunk, handle) {\n      handle(err, status, onSuccess);\n    }\n  })(options);\n}\n\n/** @test {QueueStream} */\ndescribe('QueueStream', function() {\n  /** @test {QueueStream#constructor} */\n  describe('#constructor', function() {\n    it('should work without options', function() {\n      expect(() => new QueueStream(), 'not to throw');\n    });\n\n    it('should store maxParallel option', function() {\n      expect((new QueueStream({ maxParallel: 99 }))._maxParallel, 'to equal', 99);\n    });\n\n    it('should store start date', function() {\n      expect((new QueueStream())._start, 'to be a', 'number');\n    });\n\n    it('should listen for processed-chunk events', function() {\n      expect((new QueueStream()).listenerCount('processed-chunk'), 'to be', 1);\n    });\n  });\n\n  /** @test {QueueStream#hasPending} */\n  describe('#hasPending', function() {\n    it('should return true if there are queued operations', function() {\n      const stream = new QueueStream();\n      stream._queued.push({});\n\n      expect(stream.hasPending, 'to be', true);\n    });\n\n    it('should return true if there are running operations', function() {\n      const stream = new QueueStream();\n      stream._processing = 1;\n\n      expect(stream.hasPending, 'to be', true);\n    });\n\n    it('should return false otherwise', function() {\n      expect((new QueueStream()).hasPending, 'to be', false);\n    });\n  });\n\n  /** @test {QueueStream#queueEmpty} */\n  describe('#queueEmpty', function() {\n    it('should return true if not operations are queued', function() {\n      expect((new QueueStream()).queueEmpty, 'to be', true);\n    });\n\n    it('should return false if there are queued operations', function() {\n      const stream = new QueueStream();\n      stream._queued.push({});\n\n      expect(stream.queueEmpty, 'to be', false);\n    });\n  });\n\n  /** @test {QueueStream#processed} */\n  describe('#processed', function() {\n    it('should return the number of processed items', function() {\n      const stream = new QueueStream();\n      stream._processed = 13;\n\n      expect(stream.processed, 'to equal', 13);\n    });\n  });\n\n  /** @test {QueueStream#opsPerSecond} */\n  describe('#opsPerSecond', function() {\n    it('should return 0 right after creating the stream', function() {\n      expect((new QueueStream()).opsPerSecond, 'to be', 0);\n    });\n\n    it('should return the number of processed items after one second', function() {\n      const stream = new QueueStream();\n      stream._start -= 1000;\n      stream._processed = 13;\n\n      expect(stream.opsPerSecond, 'to be close to', 13, 0.5);\n    });\n  });\n\n  /** @test {QueueStream#processErrorMessage} */\n  describe('#processErrorMessage', function() {\n    it('should throw if not overridden', function() {\n      expect(() => (new QueueStream()).processErrorMessage({}), 'to throw', /must be implemented/);\n    });\n  });\n\n  /** @test {QueueStream#processChunk} */\n  describe('#processChunk', function() {\n    it('should throw if not overridden', function() {\n      expect(cb => (new QueueStream()).processChunk({}, cb),\n        'to call the callback with error', /must be implemented/);\n    });\n  });\n\n  /** @test {QueueStream#_processChunk} */\n  describe('#_processChunk', function() {\n    it('should increase #_processing', function() {\n      const stream = fakeQueueStream();\n\n      expect(stream._processing, 'to equal', 0);\n      stream._processChunk('item');\n      expect(stream._processing, 'to equal', 0);\n    });\n\n    it('should emit processed-chunk event', function() {\n      const stream = fakeQueueStream();\n      const listener = spy();\n      stream.on('processed-chunk', listener);\n\n      stream._processChunk('item');\n      expect(listener, 'was called once');\n      expect(listener.lastCall, 'to satisfy', ['item']);\n    });\n\n    it('should emit errors', function() {\n      const stream = fakeQueueStream(new Error('Test'));\n      const listener = spy();\n      stream.on('error', listener);\n\n      stream._processChunk('item');\n      expect(listener, 'was called once');\n      expect(listener.lastCall, 'to satisfy', [/Error processing item: Test/]);\n    });\n\n    it('should emit error on invalid status', function() {\n      const stream = fakeQueueStream(null, StatusCodes.BadAggregateInvalidInputs);\n\n      const listener = spy();\n      stream.on('error', listener);\n\n      stream._processChunk('item');\n      expect(listener, 'was called once');\n      expect(listener.lastCall, 'to satisfy', [/invalid data inputs/]);\n    });\n  });\n\n  /** @test {QueueStream#_enqueueChunk} */\n  describe('#_enqueueChunk', function() {\n    it('should call _processChunk if allowed', function() {\n      const stream = fakeQueueStream();\n      stub(stream, '_processChunk');\n\n      stream._enqueueChunk('item');\n      expect(stream._processChunk, 'was called once');\n      expect(stream._processChunk.lastCall, 'to satisfy', ['item']);\n    });\n\n    it('should add chunk to queue if maxParallel is reached', function() {\n      const stream = fakeQueueStream();\n      stream._processing = stream._maxParallel;\n\n      stream._enqueueChunk('item');\n      expect(stream._queued, 'to have length', 1);\n      expect(stream._queued, 'to contain', 'item');\n    });\n  });\n\n  /** @test {QueueStream#_transform} */\n  describe('#_transform', function() {\n    it('should wait for session to open', function() {\n      const stream = fakeQueueStream();\n      stub(stream, '_enqueueChunk');\n\n      stream._transform('item', 'utf8', () => {});\n      expect(stream._enqueueChunk, 'was not called');\n    });\n\n    it('should enqueue item once session is open', function(done) {\n      const stream = fakeQueueStream();\n      stub(stream, '_enqueueChunk');\n\n      stream.once('session-open', () => {\n        stream._transform('item', 'utf8', () => {});\n        expect(stream._enqueueChunk, 'was called once');\n        expect(stream._enqueueChunk.lastCall, 'to satisfy', ['item']);\n        done();\n      });\n    });\n  });\n\n  /** @test {QueueStream#_flush} */\n  describe('#_flush', function() {\n    it('should wait for queue to drain', function() {\n      const stream = fakeQueueStream();\n      stream._processing = 1;\n      const listener = spy();\n      stream._flush(listener);\n\n      expect(listener, 'was not called');\n\n      stream.emit('drained');\n      expect(listener, 'was called once');\n    });\n\n    it('should flush instantly if queue is empty', function() {\n      const stream = fakeQueueStream();\n      const listener = spy();\n      stream._flush(listener);\n\n      expect(listener, 'was called once');\n    });\n  });\n\n  context('when chunk has been processed', function() {\n    context('and queue is empty', function() {\n      it('should emit drained if not processing any items', function() {\n        const stream = new QueueStream();\n        const listener = spy();\n        stream.on('drained', listener);\n\n        stream.emit('processed-chunk');\n        expect(listener, 'was called once');\n      });\n\n      it('should not emit drained if processing an items', function() {\n        const stream = new QueueStream();\n        stream._processing = 1;\n        const listener = spy();\n        stream.on('drained', listener);\n\n        stream.emit('processed-chunk');\n        expect(listener, 'was not called');\n      });\n    });\n\n    context('and queue is not empty', function() {\n      it('should call _processChunk with queued chunk', function() {\n        const stream = new QueueStream();\n        const item = {};\n        stub(stream, '_processChunk');\n        stream._queued = [item];\n\n        stream.emit('processed-chunk');\n        expect(stream._processChunk, 'was called once');\n        expect(stream._processChunk, 'was called with', item);\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/server/QueueStream.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 553,
    "kind": "test",
    "name": "describe183",
    "testId": 183,
    "memberof": "test/src/lib/server/QueueStream.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183",
    "access": null,
    "description": "QueueStream",
    "lineNumber": 18,
    "testTargets": [
      "QueueStream"
    ]
  },
  {
    "__docId__": 554,
    "kind": "test",
    "name": "describe184",
    "testId": 184,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe184",
    "access": null,
    "description": "#constructor",
    "lineNumber": 20,
    "testTargets": [
      "QueueStream#constructor"
    ]
  },
  {
    "__docId__": 555,
    "kind": "test",
    "name": "it185",
    "testId": 185,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe184",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe184.it185",
    "access": null,
    "description": "should work without options",
    "lineNumber": 21
  },
  {
    "__docId__": 556,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe184",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe184.it186",
    "access": null,
    "description": "should store maxParallel option",
    "lineNumber": 25
  },
  {
    "__docId__": 557,
    "kind": "test",
    "name": "it187",
    "testId": 187,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe184",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe184.it187",
    "access": null,
    "description": "should store start date",
    "lineNumber": 29
  },
  {
    "__docId__": 558,
    "kind": "test",
    "name": "it188",
    "testId": 188,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe184",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe184.it188",
    "access": null,
    "description": "should listen for processed-chunk events",
    "lineNumber": 33
  },
  {
    "__docId__": 559,
    "kind": "test",
    "name": "describe189",
    "testId": 189,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe189",
    "access": null,
    "description": "#hasPending",
    "lineNumber": 39,
    "testTargets": [
      "QueueStream#hasPending"
    ]
  },
  {
    "__docId__": 560,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe189",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe189.it190",
    "access": null,
    "description": "should return true if there are queued operations",
    "lineNumber": 40
  },
  {
    "__docId__": 561,
    "kind": "test",
    "name": "it191",
    "testId": 191,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe189",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe189.it191",
    "access": null,
    "description": "should return true if there are running operations",
    "lineNumber": 47
  },
  {
    "__docId__": 562,
    "kind": "test",
    "name": "it192",
    "testId": 192,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe189",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe189.it192",
    "access": null,
    "description": "should return false otherwise",
    "lineNumber": 54
  },
  {
    "__docId__": 563,
    "kind": "test",
    "name": "describe193",
    "testId": 193,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe193",
    "access": null,
    "description": "#queueEmpty",
    "lineNumber": 60,
    "testTargets": [
      "QueueStream#queueEmpty"
    ]
  },
  {
    "__docId__": 564,
    "kind": "test",
    "name": "it194",
    "testId": 194,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe193",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe193.it194",
    "access": null,
    "description": "should return true if not operations are queued",
    "lineNumber": 61
  },
  {
    "__docId__": 565,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe193",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe193.it195",
    "access": null,
    "description": "should return false if there are queued operations",
    "lineNumber": 65
  },
  {
    "__docId__": 566,
    "kind": "test",
    "name": "describe196",
    "testId": 196,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe196",
    "access": null,
    "description": "#processed",
    "lineNumber": 74,
    "testTargets": [
      "QueueStream#processed"
    ]
  },
  {
    "__docId__": 567,
    "kind": "test",
    "name": "it197",
    "testId": 197,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe196",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe196.it197",
    "access": null,
    "description": "should return the number of processed items",
    "lineNumber": 75
  },
  {
    "__docId__": 568,
    "kind": "test",
    "name": "describe198",
    "testId": 198,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe198",
    "access": null,
    "description": "#opsPerSecond",
    "lineNumber": 84,
    "testTargets": [
      "QueueStream#opsPerSecond"
    ]
  },
  {
    "__docId__": 569,
    "kind": "test",
    "name": "it199",
    "testId": 199,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe198",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe198.it199",
    "access": null,
    "description": "should return 0 right after creating the stream",
    "lineNumber": 85
  },
  {
    "__docId__": 570,
    "kind": "test",
    "name": "it200",
    "testId": 200,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe198",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe198.it200",
    "access": null,
    "description": "should return the number of processed items after one second",
    "lineNumber": 89
  },
  {
    "__docId__": 571,
    "kind": "test",
    "name": "describe201",
    "testId": 201,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe201",
    "access": null,
    "description": "#processErrorMessage",
    "lineNumber": 99,
    "testTargets": [
      "QueueStream#processErrorMessage"
    ]
  },
  {
    "__docId__": 572,
    "kind": "test",
    "name": "it202",
    "testId": 202,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe201",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe201.it202",
    "access": null,
    "description": "should throw if not overridden",
    "lineNumber": 100
  },
  {
    "__docId__": 573,
    "kind": "test",
    "name": "describe203",
    "testId": 203,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe203",
    "access": null,
    "description": "#processChunk",
    "lineNumber": 106,
    "testTargets": [
      "QueueStream#processChunk"
    ]
  },
  {
    "__docId__": 574,
    "kind": "test",
    "name": "it204",
    "testId": 204,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe203",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe203.it204",
    "access": null,
    "description": "should throw if not overridden",
    "lineNumber": 107
  },
  {
    "__docId__": 575,
    "kind": "test",
    "name": "describe205",
    "testId": 205,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe205",
    "access": null,
    "description": "#_processChunk",
    "lineNumber": 114,
    "testTargets": [
      "QueueStream#_processChunk"
    ]
  },
  {
    "__docId__": 576,
    "kind": "test",
    "name": "it206",
    "testId": 206,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe205.it206",
    "access": null,
    "description": "should increase #_processing",
    "lineNumber": 115
  },
  {
    "__docId__": 577,
    "kind": "test",
    "name": "it207",
    "testId": 207,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe205.it207",
    "access": null,
    "description": "should emit processed-chunk event",
    "lineNumber": 123
  },
  {
    "__docId__": 578,
    "kind": "test",
    "name": "it208",
    "testId": 208,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe205.it208",
    "access": null,
    "description": "should emit errors",
    "lineNumber": 133
  },
  {
    "__docId__": 579,
    "kind": "test",
    "name": "it209",
    "testId": 209,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe205.it209",
    "access": null,
    "description": "should emit error on invalid status",
    "lineNumber": 143
  },
  {
    "__docId__": 580,
    "kind": "test",
    "name": "describe210",
    "testId": 210,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe210",
    "access": null,
    "description": "#_enqueueChunk",
    "lineNumber": 156,
    "testTargets": [
      "QueueStream#_enqueueChunk"
    ]
  },
  {
    "__docId__": 581,
    "kind": "test",
    "name": "it211",
    "testId": 211,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe210",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe210.it211",
    "access": null,
    "description": "should call _processChunk if allowed",
    "lineNumber": 157
  },
  {
    "__docId__": 582,
    "kind": "test",
    "name": "it212",
    "testId": 212,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe210",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe210.it212",
    "access": null,
    "description": "should add chunk to queue if maxParallel is reached",
    "lineNumber": 166
  },
  {
    "__docId__": 583,
    "kind": "test",
    "name": "describe213",
    "testId": 213,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe213",
    "access": null,
    "description": "#_transform",
    "lineNumber": 177,
    "testTargets": [
      "QueueStream#_transform"
    ]
  },
  {
    "__docId__": 584,
    "kind": "test",
    "name": "it214",
    "testId": 214,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe213",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe213.it214",
    "access": null,
    "description": "should wait for session to open",
    "lineNumber": 178
  },
  {
    "__docId__": 585,
    "kind": "test",
    "name": "it215",
    "testId": 215,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe213",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe213.it215",
    "access": null,
    "description": "should enqueue item once session is open",
    "lineNumber": 186
  },
  {
    "__docId__": 586,
    "kind": "test",
    "name": "describe216",
    "testId": 216,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe216",
    "access": null,
    "description": "#_flush",
    "lineNumber": 200,
    "testTargets": [
      "QueueStream#_flush"
    ]
  },
  {
    "__docId__": 587,
    "kind": "test",
    "name": "it217",
    "testId": 217,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe216",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe216.it217",
    "access": null,
    "description": "should wait for queue to drain",
    "lineNumber": 201
  },
  {
    "__docId__": 588,
    "kind": "test",
    "name": "it218",
    "testId": 218,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.describe216",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.describe216.it218",
    "access": null,
    "description": "should flush instantly if queue is empty",
    "lineNumber": 213
  },
  {
    "__docId__": 589,
    "kind": "test",
    "name": "context219",
    "testId": 219,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.context219",
    "access": null,
    "description": "when chunk has been processed",
    "lineNumber": 222
  },
  {
    "__docId__": 590,
    "kind": "test",
    "name": "context220",
    "testId": 220,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.context219",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.context219.context220",
    "access": null,
    "description": "and queue is empty",
    "lineNumber": 223
  },
  {
    "__docId__": 591,
    "kind": "test",
    "name": "it221",
    "testId": 221,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.context219.context220",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.context219.context220.it221",
    "access": null,
    "description": "should emit drained if not processing any items",
    "lineNumber": 224
  },
  {
    "__docId__": 592,
    "kind": "test",
    "name": "it222",
    "testId": 222,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.context219.context220",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.context219.context220.it222",
    "access": null,
    "description": "should not emit drained if processing an items",
    "lineNumber": 233
  },
  {
    "__docId__": 593,
    "kind": "test",
    "name": "context223",
    "testId": 223,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.context219",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.context219.context223",
    "access": null,
    "description": "and queue is not empty",
    "lineNumber": 244
  },
  {
    "__docId__": 594,
    "kind": "test",
    "name": "it224",
    "testId": 224,
    "memberof": "test/src/lib/server/QueueStream.spec.js~describe183.context219.context223",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/QueueStream.spec.js~describe183.context219.context223.it224",
    "access": null,
    "description": "should call _processChunk with queued chunk",
    "lineNumber": 245
  },
  {
    "__docId__": 595,
    "kind": "testFile",
    "name": "test/src/lib/server/ReadStream.spec.js",
    "content": "import { StatusCodes } from 'node-opcua';\nimport expect from '../../../expect';\nimport NodeId from '../../../../src/lib/server/NodeId';\nimport ReadStream from '../../../../src/lib/server/ReadStream';\n\n/** @test {ReadStream} */\ndescribe('ReadStream', function() {\n  /** @test {ReadStream#processErrorMessage} */\n  describe('#processErrorMessage', function() {\n    it('should include node id', function() {\n      const nodeId = new NodeId('ns=1;s=AGENT.DISPLAYS.Main');\n      expect(ReadStream.prototype.processErrorMessage({ nodeId }), 'to contain', nodeId.value);\n    });\n  });\n\n  /** @test {ReadStream#processChunk} */\n  describe('#processChunk', function() {\n    it('should error without results', function() {\n      const stream = new ReadStream();\n\n      stream.once('session-open', () => {\n        stream.session.read = (node, cb) => cb(null, [node], undefined);\n      });\n\n      return expect([{ nodeId: new NodeId('ns=1;s=AGENT.DISPLAYS.Main') }],\n        'when piped through', stream,\n        'to error with', /No results/);\n    });\n\n    it('should error with empty results', function() {\n      const stream = new ReadStream();\n\n      stream.once('session-open', () => {\n        stream.session.read = (node, cb) => cb(null, [node], []);\n      });\n\n      return expect([{ nodeId: new NodeId('ns=1;s=AGENT.DISPLAYS.Main') }],\n        'when piped through', stream,\n        'to error with', /No results/);\n    });\n\n    it('should error when reading fails', function() {\n      const stream = new ReadStream();\n\n      stream.once('session-open', () => {\n        stream.session.read = (node, cb) => cb(new Error('Test'), [node], []);\n      });\n\n      return expect([{ nodeId: new NodeId('ns=1;s=AGENT.DISPLAYS.Main') }],\n        'when piped through', stream,\n        'to error with', /Test/);\n    });\n\n    it('should push result when reading succeeds', function() {\n      const stream = new ReadStream();\n      const result = {\n        value: 'test',\n        sourceTimestamp: new Date(),\n        statusCode: StatusCodes.Good,\n      };\n\n      stream.once('session-open', () => {\n        stream.session.read = (node, cb) => cb(null, [node], [result]);\n      });\n\n      const nodeId = new NodeId('ns=1;s=AGENT.DISPLAYS.Main');\n      return expect([{ nodeId }],\n        'when piped through', stream,\n        'to yield objects satisfying', [\n          expect.it('to equal', {\n            nodeId,\n            value: result.value,\n            referenceDescription: { nodeId },\n            mtime: result.sourceTimestamp,\n          }),\n        ]);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/server/ReadStream.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 596,
    "kind": "test",
    "name": "describe225",
    "testId": 225,
    "memberof": "test/src/lib/server/ReadStream.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe225",
    "access": null,
    "description": "ReadStream",
    "lineNumber": 7,
    "testTargets": [
      "ReadStream"
    ]
  },
  {
    "__docId__": 597,
    "kind": "test",
    "name": "describe226",
    "testId": 226,
    "memberof": "test/src/lib/server/ReadStream.spec.js~describe225",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe225.describe226",
    "access": null,
    "description": "#processErrorMessage",
    "lineNumber": 9,
    "testTargets": [
      "ReadStream#processErrorMessage"
    ]
  },
  {
    "__docId__": 598,
    "kind": "test",
    "name": "it227",
    "testId": 227,
    "memberof": "test/src/lib/server/ReadStream.spec.js~describe225.describe226",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe225.describe226.it227",
    "access": null,
    "description": "should include node id",
    "lineNumber": 10
  },
  {
    "__docId__": 599,
    "kind": "test",
    "name": "describe228",
    "testId": 228,
    "memberof": "test/src/lib/server/ReadStream.spec.js~describe225",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe225.describe228",
    "access": null,
    "description": "#processChunk",
    "lineNumber": 17,
    "testTargets": [
      "ReadStream#processChunk"
    ]
  },
  {
    "__docId__": 600,
    "kind": "test",
    "name": "it229",
    "testId": 229,
    "memberof": "test/src/lib/server/ReadStream.spec.js~describe225.describe228",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe225.describe228.it229",
    "access": null,
    "description": "should error without results",
    "lineNumber": 18
  },
  {
    "__docId__": 601,
    "kind": "test",
    "name": "it230",
    "testId": 230,
    "memberof": "test/src/lib/server/ReadStream.spec.js~describe225.describe228",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe225.describe228.it230",
    "access": null,
    "description": "should error with empty results",
    "lineNumber": 30
  },
  {
    "__docId__": 602,
    "kind": "test",
    "name": "it231",
    "testId": 231,
    "memberof": "test/src/lib/server/ReadStream.spec.js~describe225.describe228",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe225.describe228.it231",
    "access": null,
    "description": "should error when reading fails",
    "lineNumber": 42
  },
  {
    "__docId__": 603,
    "kind": "test",
    "name": "it232",
    "testId": 232,
    "memberof": "test/src/lib/server/ReadStream.spec.js~describe225.describe228",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/ReadStream.spec.js~describe225.describe228.it232",
    "access": null,
    "description": "should push result when reading succeeds",
    "lineNumber": 54
  },
  {
    "__docId__": 604,
    "kind": "testFile",
    "name": "test/src/lib/server/Session.spec.js",
    "content": "import { spy } from 'sinon';\nimport proxyquire from 'proxyquire';\nimport { ClientSession, StatusCodes } from 'node-opcua';\nimport Logger from 'gulplog';\nimport expect from '../../../expect';\nimport Session from '../../../../src/lib/server/Session';\nimport Client from '../../../../src/lib/server/Client';\n\nfunction sessionWithLogin(login) {\n  return proxyquire('../../../../src/lib/server/Session', {\n    '../../config/ProjectConfig': {\n      default: { login },\n    },\n  }).default;\n}\n\nconst FailingClientSession = proxyquire('../../../../src/lib/server/Session', {\n  './Client': {\n    __esModule: true,\n    default: class StubClient {\n      static create() {\n        return Promise.reject(new Error('Client.create error'));\n      }\n    },\n  },\n}).default;\n\nconst FailingSession = proxyquire('../../../../src/lib/server/Session', {\n  './Client': {\n    __esModule: true,\n    default: class StubClient extends Client {\n      static create() {\n        return super.create()\n          .then(client => {\n            Object.assign(client, {\n              createSession(login, callback) {\n                callback(new Error('Client.createSession error'));\n              },\n            });\n\n            return client;\n          });\n      }\n    },\n  },\n}).default;\n\n/** @test {Session} */\ndescribe('Session', function() {\n  /** @test {Session.create} */\n  describe('.create', function() {\n    it('should create a new ClientSession', function() {\n      return expect(Session.create(), 'to be fulfilled')\n        .then(session => {\n          expect(session, 'to be a', ClientSession);\n          return session;\n        })\n        .then(session => Session.close(session));\n    });\n\n    it('should store newly created session', function() {\n      return expect(Session.create(), 'to be fulfilled')\n        .then(session => {\n          expect(Session.open, 'to contain', session);\n          return session;\n        })\n        .then(session => Session.close(session));\n    });\n\n    it('should fail with invalid credentials', function() {\n      return Promise.all([\n        // Missing username\n        expect(sessionWithLogin({\n          username: false,\n          password: 'invalid password',\n        }).create(), 'to be rejected with', /Invalid login/),\n\n        // Missing password\n        expect(sessionWithLogin({\n          username: 'invalid username',\n          password: false,\n        }).create(), 'to be rejected with', /Invalid login/),\n\n        // Invalid credentials\n        expect(sessionWithLogin({\n          username: 'invalid username',\n          password: 'invalid password',\n        }).create(), 'to be rejected with', /Invalid login/),\n      ]);\n    });\n\n    it('should forward Client.create errors', function() {\n      return expect(FailingClientSession.create(), 'to be rejected with', 'Client.create error');\n    });\n\n    it('should forward non-login errors', function() {\n      return expect(FailingSession.create(), 'to be rejected with', /Client\\.createSession error/);\n    });\n\n    it('should emit \"all-open\" once all opening sessions are open', function() {\n      const listener = spy();\n      Session.emitter.on('all-open', listener);\n\n      return expect(Promise.all([\n        Session.create(),\n        Session.create(),\n      ]), 'to be fulfilled')\n        .then(sessions => {\n          expect(sessions, 'to have length', 2);\n          expect(listener, 'was called once');\n        });\n    });\n  });\n\n  /** @test {Session.close} */\n  describe('.close', function() {\n    it('should fail without session', function() {\n      return expect(() => Session.close(), 'to be rejected with', 'session is required');\n    });\n\n    it('should return if session is already closed', function() {\n      return expect(Session.create(), 'to be fulfilled')\n        .then(session => expect(Session.close(session), 'to be fulfilled'))\n        .then(session => expect(Session.close(session), 'to be fulfilled'));\n    });\n\n    it('should wait for session to close if already closing', function() {\n      return expect(Session.create(), 'to be fulfilled')\n        .then(session => {\n          spy(session, 'close');\n          return session;\n        })\n        .then(session => expect(Promise.all([\n          Session.close(session),\n          Session.close(session),\n        ]), 'to be fulfilled'))\n        .then(sessions => {\n          expect(sessions, 'to have length', 2);\n        });\n    });\n\n    it('should warn if session does not exist', function() {\n      const logListener = spy();\n      Logger.on('debug', logListener);\n\n      const session = new ClientSession();\n      session._client = {\n        closeSession(sess, del, callback) {\n          const err = new Error();\n          err.response = {\n            responseHeader: {\n              serviceResult: StatusCodes.BadSessionIdInvalid,\n            },\n          };\n\n          callback(err);\n        },\n      };\n\n      return expect(Session.close(session), 'to be fulfilled')\n        .then(() => {\n          expect(logListener, 'was called once');\n          expect(logListener.lastCall, 'to satisfy', [/close a session that does not exist/]);\n        });\n    });\n\n    it('should do nothing if client is not connected', function() {\n      return expect(Session.create(), 'to be fulfilled')\n        .then(session => new Promise((resolve, reject) => {\n          session._client.disconnect(err => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(session);\n            }\n          });\n        }))\n        .then(session => expect(Session.close(session), 'to be fulfilled'));\n    });\n\n    it('should forward other errors', function() {\n      const session = new ClientSession();\n      session._client = {\n        closeSession(sess, del, callback) {\n          callback(new Error('Test error'));\n        },\n      };\n\n      return expect(Session.close(session), 'to be rejected with', /Test error/);\n    });\n\n    it('should forward other errors disconnecting client', function() {\n      const session = new ClientSession();\n      session._client = {\n        closeSession(sess, del, callback) {\n          callback(null);\n        },\n        disconnect(callback) {\n          callback(new Error('Test client error'));\n        },\n      };\n\n      return expect(Session.close(session), 'to be rejected with', /Test client error/);\n    });\n  });\n\n  /** @test {Session.closeOpen} */\n  describe('.closeOpen', function() {\n    it('should return if no sessions are open', function() {\n      return expect(Session.closeOpen(), 'to be fulfilled with', []);\n    });\n\n    it('should close open sessions', function() {\n      expect(Session.open, 'to have length', 0);\n      return expect(Session.create(), 'to be fulfilled')\n        .then(session => expect(Session.closeOpen(), 'to be fulfilled with', [session]));\n    });\n\n    it('should wait for opening sessions to open before closing', function() {\n      let session;\n      Session.create().then(sess => (session = sess));\n\n      return expect(Session.closeOpen(), 'to be fulfilled')\n        .then(sessions => {\n          expect(sessions, 'to equal', [session]);\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/server/Session.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 605,
    "kind": "test",
    "name": "describe233",
    "testId": 233,
    "memberof": "test/src/lib/server/Session.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233",
    "access": null,
    "description": "Session",
    "lineNumber": 49,
    "testTargets": [
      "Session"
    ]
  },
  {
    "__docId__": 606,
    "kind": "test",
    "name": "describe234",
    "testId": 234,
    "memberof": "test/src/lib/server/Session.spec.js~describe233",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe234",
    "access": null,
    "description": ".create",
    "lineNumber": 51,
    "testTargets": [
      "Session.create"
    ]
  },
  {
    "__docId__": 607,
    "kind": "test",
    "name": "it235",
    "testId": 235,
    "memberof": "test/src/lib/server/Session.spec.js~describe233.describe234",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe234.it235",
    "access": null,
    "description": "should create a new ClientSession",
    "lineNumber": 52
  },
  {
    "__docId__": 608,
    "kind": "test",
    "name": "it236",
    "testId": 236,
    "memberof": "test/src/lib/server/Session.spec.js~describe233.describe234",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe234.it236",
    "access": null,
    "description": "should store newly created session",
    "lineNumber": 61
  },
  {
    "__docId__": 609,
    "kind": "test",
    "name": "it237",
    "testId": 237,
    "memberof": "test/src/lib/server/Session.spec.js~describe233.describe234",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe234.it237",
    "access": null,
    "description": "should fail with invalid credentials",
    "lineNumber": 70
  },
  {
    "__docId__": 610,
    "kind": "test",
    "name": "it238",
    "testId": 238,
    "memberof": "test/src/lib/server/Session.spec.js~describe233.describe234",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe234.it238",
    "access": null,
    "description": "should forward Client.create errors",
    "lineNumber": 92
  },
  {
    "__docId__": 611,
    "kind": "test",
    "name": "it239",
    "testId": 239,
    "memberof": "test/src/lib/server/Session.spec.js~describe233.describe234",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe234.it239",
    "access": null,
    "description": "should forward non-login errors",
    "lineNumber": 96
  },
  {
    "__docId__": 612,
    "kind": "test",
    "name": "it240",
    "testId": 240,
    "memberof": "test/src/lib/server/Session.spec.js~describe233.describe234",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe234.it240",
    "access": null,
    "description": "should emit \"all-open\" once all opening sessions are open",
    "lineNumber": 100
  },
  {
    "__docId__": 613,
    "kind": "test",
    "name": "describe241",
    "testId": 241,
    "memberof": "test/src/lib/server/Session.spec.js~describe233",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe241",
    "access": null,
    "description": ".close",
    "lineNumber": 116,
    "testTargets": [
      "Session.close"
    ]
  },
  {
    "__docId__": 614,
    "kind": "test",
    "name": "it242",
    "testId": 242,
    "memberof": "test/src/lib/server/Session.spec.js~describe233.describe241",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe241.it242",
    "access": null,
    "description": "should fail without session",
    "lineNumber": 117
  },
  {
    "__docId__": 615,
    "kind": "test",
    "name": "it243",
    "testId": 243,
    "memberof": "test/src/lib/server/Session.spec.js~describe233.describe241",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe241.it243",
    "access": null,
    "description": "should return if session is already closed",
    "lineNumber": 121
  },
  {
    "__docId__": 616,
    "kind": "test",
    "name": "it244",
    "testId": 244,
    "memberof": "test/src/lib/server/Session.spec.js~describe233.describe241",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe241.it244",
    "access": null,
    "description": "should wait for session to close if already closing",
    "lineNumber": 127
  },
  {
    "__docId__": 617,
    "kind": "test",
    "name": "it245",
    "testId": 245,
    "memberof": "test/src/lib/server/Session.spec.js~describe233.describe241",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe241.it245",
    "access": null,
    "description": "should warn if session does not exist",
    "lineNumber": 142
  },
  {
    "__docId__": 618,
    "kind": "test",
    "name": "it246",
    "testId": 246,
    "memberof": "test/src/lib/server/Session.spec.js~describe233.describe241",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe241.it246",
    "access": null,
    "description": "should do nothing if client is not connected",
    "lineNumber": 167
  },
  {
    "__docId__": 619,
    "kind": "test",
    "name": "it247",
    "testId": 247,
    "memberof": "test/src/lib/server/Session.spec.js~describe233.describe241",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe241.it247",
    "access": null,
    "description": "should forward other errors",
    "lineNumber": 181
  },
  {
    "__docId__": 620,
    "kind": "test",
    "name": "it248",
    "testId": 248,
    "memberof": "test/src/lib/server/Session.spec.js~describe233.describe241",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe241.it248",
    "access": null,
    "description": "should forward other errors disconnecting client",
    "lineNumber": 192
  },
  {
    "__docId__": 621,
    "kind": "test",
    "name": "describe249",
    "testId": 249,
    "memberof": "test/src/lib/server/Session.spec.js~describe233",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe249",
    "access": null,
    "description": ".closeOpen",
    "lineNumber": 208,
    "testTargets": [
      "Session.closeOpen"
    ]
  },
  {
    "__docId__": 622,
    "kind": "test",
    "name": "it250",
    "testId": 250,
    "memberof": "test/src/lib/server/Session.spec.js~describe233.describe249",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe249.it250",
    "access": null,
    "description": "should return if no sessions are open",
    "lineNumber": 209
  },
  {
    "__docId__": 623,
    "kind": "test",
    "name": "it251",
    "testId": 251,
    "memberof": "test/src/lib/server/Session.spec.js~describe233.describe249",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe249.it251",
    "access": null,
    "description": "should close open sessions",
    "lineNumber": 213
  },
  {
    "__docId__": 624,
    "kind": "test",
    "name": "it252",
    "testId": 252,
    "memberof": "test/src/lib/server/Session.spec.js~describe233.describe249",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Session.spec.js~describe233.describe249.it252",
    "access": null,
    "description": "should wait for opening sessions to open before closing",
    "lineNumber": 219
  },
  {
    "__docId__": 625,
    "kind": "testFile",
    "name": "test/src/lib/server/Stream.spec.js",
    "content": "import proxyquire from 'proxyquire';\nimport { spy } from 'sinon';\nimport { Stream as CoreStream } from 'stream';\nimport { ClientSession } from 'node-opcua';\nimport expect from '../../../expect';\nimport Stream from '../../../../src/lib/server/Stream';\nimport Session from '../../../../src/lib/server/Session';\n\n/** @test {Stream} */\ndescribe('Stream', function() {\n  /** @test {Stream#constructor} */\n  describe('#constructor', function() {\n    it('should return a stream', function() {\n      expect(new Stream(), 'to be a', CoreStream);\n    });\n\n    it('should emit \"session-open\" once session is open', function(done) {\n      const stream = new Stream();\n\n      stream.on('session-open', session => {\n        expect(stream.session, 'to be defined');\n        expect(stream.session, 'to be a', ClientSession);\n        expect(session, 'to be', stream.session);\n\n        done();\n      });\n    });\n\n    it('should forward session connect errors', function(done) {\n      const FailingStream = proxyquire('../../../../src/lib/server/Stream', {\n        './Session': {\n          _esModule: true,\n          default: class FailingSession {\n            static create() {\n              return Promise.reject(new Error('Failed'));\n            }\n          },\n        },\n      }).default;\n\n      (new FailingStream())\n        .on('error', err => {\n          expect(err, 'to have message', 'Failed');\n          done();\n        });\n    });\n\n    it('should close session on end', function() {\n      const stream = new Stream();\n\n      stream.once('session-open', () => {\n        spy(Session, 'close');\n\n        stream.end();\n      });\n\n      return expect(stream, 'to yield objects satisfying', 'to have length', 0)\n        .then(() => {\n          expect(Session.close, 'was called once');\n        });\n    });\n\n    it('should be endable even if session was not opened yet', function(done) {\n      const stream = new Stream();\n      const listener = spy();\n\n      stream.on('error', listener)\n        .on('end', () => {\n          expect(listener.callCount, 'to equal', 0);\n          done();\n        })\n        .on('data', () => {}); // unpause readable stream\n\n      stream.end();\n    });\n\n    it('should forward errors occurring while closing session', function(done) {\n      const FailingStream = proxyquire('../../../../src/lib/server/Stream', {\n        './Session': {\n          _esModule: true,\n          default: class FailingStream extends Session {\n\n            static close() {\n              return Promise.reject(new Error('Failed'));\n            }\n\n          },\n        },\n      }).default;\n\n      const stream = (new FailingStream())\n        .on('error', err => {\n          expect(err, 'to have message', 'Failed');\n          done();\n        })\n        .on('data', () => {}) // unpause readable stream\n        .once('session-open', () => stream.end());\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/server/Stream.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 626,
    "kind": "test",
    "name": "describe253",
    "testId": 253,
    "memberof": "test/src/lib/server/Stream.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js~describe253",
    "access": null,
    "description": "Stream",
    "lineNumber": 10,
    "testTargets": [
      "Stream"
    ]
  },
  {
    "__docId__": 627,
    "kind": "test",
    "name": "describe254",
    "testId": 254,
    "memberof": "test/src/lib/server/Stream.spec.js~describe253",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js~describe253.describe254",
    "access": null,
    "description": "#constructor",
    "lineNumber": 12,
    "testTargets": [
      "Stream#constructor"
    ]
  },
  {
    "__docId__": 628,
    "kind": "test",
    "name": "it255",
    "testId": 255,
    "memberof": "test/src/lib/server/Stream.spec.js~describe253.describe254",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js~describe253.describe254.it255",
    "access": null,
    "description": "should return a stream",
    "lineNumber": 13
  },
  {
    "__docId__": 629,
    "kind": "test",
    "name": "it256",
    "testId": 256,
    "memberof": "test/src/lib/server/Stream.spec.js~describe253.describe254",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js~describe253.describe254.it256",
    "access": null,
    "description": "should emit \"session-open\" once session is open",
    "lineNumber": 17
  },
  {
    "__docId__": 630,
    "kind": "test",
    "name": "it257",
    "testId": 257,
    "memberof": "test/src/lib/server/Stream.spec.js~describe253.describe254",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js~describe253.describe254.it257",
    "access": null,
    "description": "should forward session connect errors",
    "lineNumber": 29
  },
  {
    "__docId__": 631,
    "kind": "test",
    "name": "it258",
    "testId": 258,
    "memberof": "test/src/lib/server/Stream.spec.js~describe253.describe254",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js~describe253.describe254.it258",
    "access": null,
    "description": "should close session on end",
    "lineNumber": 48
  },
  {
    "__docId__": 632,
    "kind": "test",
    "name": "it259",
    "testId": 259,
    "memberof": "test/src/lib/server/Stream.spec.js~describe253.describe254",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js~describe253.describe254.it259",
    "access": null,
    "description": "should be endable even if session was not opened yet",
    "lineNumber": 63
  },
  {
    "__docId__": 633,
    "kind": "test",
    "name": "it260",
    "testId": 260,
    "memberof": "test/src/lib/server/Stream.spec.js~describe253.describe254",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Stream.spec.js~describe253.describe254.it260",
    "access": null,
    "description": "should forward errors occurring while closing session",
    "lineNumber": 77
  },
  {
    "__docId__": 634,
    "kind": "testFile",
    "name": "test/src/lib/server/Watcher.spec.js",
    "content": "import Emitter from 'events';\nimport { spy, stub } from 'sinon';\nimport proxyquire from 'proxyquire';\nimport { resolveNodeId } from 'node-opcua';\nimport { ctor as throughStreamClass } from 'through2';\nimport expect from '../../../expect';\nimport Watcher, { SubscribeStream } from '../../../../src/lib/server/Watcher';\n\nclass StubMonitoredItem extends Emitter {\n\n  constructor(error = false) {\n    super();\n\n    // Simulate first notification or error\n    setTimeout(() => this.emit(error ? 'err' : 'changed', error || {}), 10);\n  }\n\n}\n\nconst StubWatcher = proxyquire('../../../../src/lib/server/Watcher', {\n  './NodeStream': {\n    __esModule: true,\n    default: class ServerStream extends throughStreamClass({ objectMode: true }) {\n      constructor() {\n        super();\n\n        setTimeout(() => this.end(), 10);\n      }\n    },\n  },\n}).default;\n\nconst FailingSubscribeStream = proxyquire('../../../../src/lib/server/Watcher', {\n  'node-opcua': {\n    ClientSubscription: class StubClientSubscription extends Emitter {\n      constructor() {\n        super();\n\n        this.monitor = spy(() => new StubMonitoredItem());\n\n        setTimeout(() => this.emit('failure', new Error('ClientSubscription failure')), 10);\n      }\n    },\n  },\n}).SubscribeStream;\n\n/** @test {SubscribeStream} */\ndescribe('SubscribeStream', function() {\n  /** @test {SubscribeStream#constructor} */\n  describe('#constructor', function() {\n    it('should apply keepSessionAlive option', function() {\n      const stream = new SubscribeStream();\n      stream.end();\n\n      expect(stream._keepSessionAlive, 'to be', true);\n    });\n\n    it('should not track changes instantly', function() {\n      const stream = new SubscribeStream();\n      stream.end();\n\n      expect((new SubscribeStream())._trackChanges, 'to be', false);\n    });\n\n    context('once session is opened', function() {\n      it('should create subscription once session is opened', function(done) {\n        const stream = new SubscribeStream();\n        spy(stream, 'createSubscription');\n\n        stream.once('session-open', () => {\n          expect(stream.createSubscription, 'was called once');\n          done();\n        });\n      });\n    });\n  });\n\n  /** @test {SubscribeStream#createSubscription} */\n  describe('#createSubscription', function() {\n    it('should forward errors while creating subscription', function() {\n      const stream = new FailingSubscribeStream();\n\n      return expect(stream, 'to error with', /ClientSubscription failure/);\n    });\n\n    it('should emit `subscription-started`', function(done) {\n      const stream = new SubscribeStream();\n\n      stream.on('subscription-started', () => done());\n    });\n\n    it('should set subscription property', function(done) {\n      const stream = new SubscribeStream();\n\n      stream.on('subscription-started', subscription => {\n        expect(stream.subscription, 'to be defined');\n        expect(stream.subscription, 'to be', subscription);\n        done();\n      });\n    });\n  });\n\n  /** @test {SubscribeStream#processErrorMessage} */\n  describe('#processErrorMessage', function() {\n    it('should contain node id', function() {\n      const nodeId = resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main');\n      expect(SubscribeStream.prototype.processErrorMessage({ nodeId }),\n        'to contain', nodeId.toString());\n    });\n  });\n\n  /** @test {SubscribeStream#processChunk} */\n  describe('#processChunk', function() {\n    it('should call ClientSubscription#monitor', function() {\n      const stream = new SubscribeStream();\n      const nodeId = resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main');\n\n      stream.once('subscription-started', subscription => {\n        stub(subscription, 'monitor', () => new StubMonitoredItem());\n      });\n\n      return expect([{ nodeId }], 'when piped through', stream,\n        'to yield objects satisfying', 'to have length', 0)\n        .then(() => {\n          expect(stream.subscription.monitor, 'was called once');\n          expect(stream.subscription.monitor.lastCall.args[0], 'to have properties', { nodeId });\n        });\n    });\n\n    it('should forward MonitoredItem errors', function() {\n      const stream = new SubscribeStream();\n      const nodeId = resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main');\n\n      stream.once('subscription-started', subscription => {\n        stub(subscription, 'monitor', () => new StubMonitoredItem(new Error('item error')));\n      });\n\n      return expect([{ nodeId }], 'when piped through', stream, 'to error with', /item error/);\n    });\n\n    it('should forward MonitoredItem errors when given as string', function() {\n      const stream = new SubscribeStream();\n      const nodeId = resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main');\n\n      stream.once('subscription-started', subscription => {\n        stub(subscription, 'monitor', () => new StubMonitoredItem('item error'));\n      });\n\n      return expect([{ nodeId }], 'when piped through', stream, 'to error with', /item error/);\n    });\n\n    it('should forward change events', function() {\n      const stream = new SubscribeStream();\n      const nodeId = resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main');\n      const listener = spy();\n      stream.on('change', listener);\n\n      const changeData = {\n        value: 'value',\n        serverTimestamp: new Date(),\n      };\n\n      let item;\n\n      stream.once('subscription-started', subscription => {\n        stub(subscription, 'monitor', () => {\n          item = new StubMonitoredItem(false);\n          return item;\n        });\n      });\n\n      return expect([{ nodeId }], 'when piped through', stream,\n        'to yield objects satisfying', 'to have length', 0)\n        .then(() => item.emit('changed', changeData))\n        .then(() => {\n          expect(listener, 'was called once');\n          expect(listener.lastCall, 'to satisfy', [{\n            nodeId,\n            value: changeData.value,\n            referenceDescription: { nodeId },\n            mtime: changeData.serverTimestamp,\n          }]);\n        });\n    });\n  });\n\n  /** @test {SubscribeStream#_transform} */\n  describe('#_transform', function() {\n    const chunk = 'chunk';\n\n    it('should call enqueue immediately if subscription started', function(done) {\n      const stream = new SubscribeStream();\n      stub(stream, '_enqueueChunk', () => {});\n      stream.once('subscription-started', subscription => {\n        expect(stream.subscription, 'to be', subscription);\n\n        stream._transform(chunk, 'utf8', () => {});\n\n        expect(stream._enqueueChunk, 'was called once');\n        expect(stream._enqueueChunk.lastCall, 'to satisfy', [chunk]);\n        done();\n      });\n    });\n\n    it('should wait for subscription to start before calling enqueue', function(done) {\n      const stream = new SubscribeStream();\n      stub(stream, '_enqueueChunk', () => {});\n      stream._transform(chunk, 'utf8', () => {});\n\n      expect(stream._enqueueChunk, 'was not called');\n      stream.once('subscription-started', () => {\n        expect(stream._enqueueChunk, 'was called once');\n        expect(stream._enqueueChunk.lastCall, 'to satisfy', [chunk]);\n        done();\n      });\n    });\n  });\n});\n\n/** @test {Watcher} */\ndescribe('Watcher', function() {\n  /** @test {Watcher#constructor} */\n  describe('#constructor', function() {\n    it('should work without arguments', function() {\n      let watcher;\n      expect(() => (watcher = new StubWatcher()),\n        'not to throw');\n\n      watcher.close();\n    });\n\n    it('should emit ready event once subscribe stream finished', function(done) {\n      const watcher = new Watcher([resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main')]);\n\n      watcher.once('ready', () => {\n        watcher.close();\n        done();\n      });\n    });\n\n    it('should forward change events', function(done) {\n      const watcher = new Watcher([resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main')]);\n\n      watcher.on('ready', () => {\n        const event = {};\n\n        watcher.on('change', e => {\n          expect(e, 'to be', event);\n          watcher.close();\n          done();\n        });\n\n        watcher._subscribeStream.emit('change', event);\n      });\n    });\n\n    it('should forward NodeStream errors', function(done) {\n      const watcher = new Watcher([resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main')]);\n\n      watcher.on('error', err => {\n        expect(err, 'to have message', 'Test');\n        done();\n      });\n\n      watcher.on('ready', () => watcher._nodeStream.emit('error', new Error('Test')));\n    });\n\n    it('should forward SubscribeStream errors', function(done) {\n      const watcher = new Watcher([resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main')]);\n\n      watcher.on('error', err => {\n        expect(err, 'to have message', 'Test');\n        done();\n      });\n\n      watcher.on('ready', () => watcher._subscribeStream.emit('error', new Error('Test')));\n    });\n  });\n\n  /** @test {Watcher#close} */\n  describe('#close', function() {\n    it('should forward errors', function(done) {\n      const watcher = new Watcher([resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main')]);\n\n      watcher.on('error', err => {\n        expect(err, 'to have message', 'session is required');\n        done();\n      });\n\n      watcher.on('ready', () => {\n        watcher._subscribeStream.session = {};\n\n        watcher.close();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/server/Watcher.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 635,
    "kind": "test",
    "name": "describe261",
    "testId": 261,
    "memberof": "test/src/lib/server/Watcher.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261",
    "access": null,
    "description": "SubscribeStream",
    "lineNumber": 48,
    "testTargets": [
      "SubscribeStream"
    ]
  },
  {
    "__docId__": 636,
    "kind": "test",
    "name": "describe262",
    "testId": 262,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe262",
    "access": null,
    "description": "#constructor",
    "lineNumber": 50,
    "testTargets": [
      "SubscribeStream#constructor"
    ]
  },
  {
    "__docId__": 637,
    "kind": "test",
    "name": "it263",
    "testId": 263,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261.describe262",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe262.it263",
    "access": null,
    "description": "should apply keepSessionAlive option",
    "lineNumber": 51
  },
  {
    "__docId__": 638,
    "kind": "test",
    "name": "it264",
    "testId": 264,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261.describe262",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe262.it264",
    "access": null,
    "description": "should not track changes instantly",
    "lineNumber": 58
  },
  {
    "__docId__": 639,
    "kind": "test",
    "name": "context265",
    "testId": 265,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261.describe262",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe262.context265",
    "access": null,
    "description": "once session is opened",
    "lineNumber": 65
  },
  {
    "__docId__": 640,
    "kind": "test",
    "name": "it266",
    "testId": 266,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261.describe262.context265",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe262.context265.it266",
    "access": null,
    "description": "should create subscription once session is opened",
    "lineNumber": 66
  },
  {
    "__docId__": 641,
    "kind": "test",
    "name": "describe267",
    "testId": 267,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe267",
    "access": null,
    "description": "#createSubscription",
    "lineNumber": 79,
    "testTargets": [
      "SubscribeStream#createSubscription"
    ]
  },
  {
    "__docId__": 642,
    "kind": "test",
    "name": "it268",
    "testId": 268,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261.describe267",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe267.it268",
    "access": null,
    "description": "should forward errors while creating subscription",
    "lineNumber": 80
  },
  {
    "__docId__": 643,
    "kind": "test",
    "name": "it269",
    "testId": 269,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261.describe267",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe267.it269",
    "access": null,
    "description": "should emit `subscription-started`",
    "lineNumber": 86
  },
  {
    "__docId__": 644,
    "kind": "test",
    "name": "it270",
    "testId": 270,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261.describe267",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe267.it270",
    "access": null,
    "description": "should set subscription property",
    "lineNumber": 92
  },
  {
    "__docId__": 645,
    "kind": "test",
    "name": "describe271",
    "testId": 271,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe271",
    "access": null,
    "description": "#processErrorMessage",
    "lineNumber": 104,
    "testTargets": [
      "SubscribeStream#processErrorMessage"
    ]
  },
  {
    "__docId__": 646,
    "kind": "test",
    "name": "it272",
    "testId": 272,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261.describe271",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe271.it272",
    "access": null,
    "description": "should contain node id",
    "lineNumber": 105
  },
  {
    "__docId__": 647,
    "kind": "test",
    "name": "describe273",
    "testId": 273,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe273",
    "access": null,
    "description": "#processChunk",
    "lineNumber": 113,
    "testTargets": [
      "SubscribeStream#processChunk"
    ]
  },
  {
    "__docId__": 648,
    "kind": "test",
    "name": "it274",
    "testId": 274,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261.describe273",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe273.it274",
    "access": null,
    "description": "should call ClientSubscription#monitor",
    "lineNumber": 114
  },
  {
    "__docId__": 649,
    "kind": "test",
    "name": "it275",
    "testId": 275,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261.describe273",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe273.it275",
    "access": null,
    "description": "should forward MonitoredItem errors",
    "lineNumber": 130
  },
  {
    "__docId__": 650,
    "kind": "test",
    "name": "it276",
    "testId": 276,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261.describe273",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe273.it276",
    "access": null,
    "description": "should forward MonitoredItem errors when given as string",
    "lineNumber": 141
  },
  {
    "__docId__": 651,
    "kind": "test",
    "name": "it277",
    "testId": 277,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261.describe273",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe273.it277",
    "access": null,
    "description": "should forward change events",
    "lineNumber": 152
  },
  {
    "__docId__": 652,
    "kind": "test",
    "name": "describe278",
    "testId": 278,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe278",
    "access": null,
    "description": "#_transform",
    "lineNumber": 188,
    "testTargets": [
      "SubscribeStream#_transform"
    ]
  },
  {
    "__docId__": 653,
    "kind": "test",
    "name": "it279",
    "testId": 279,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261.describe278",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe278.it279",
    "access": null,
    "description": "should call enqueue immediately if subscription started",
    "lineNumber": 191
  },
  {
    "__docId__": 654,
    "kind": "test",
    "name": "it280",
    "testId": 280,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe261.describe278",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe261.describe278.it280",
    "access": null,
    "description": "should wait for subscription to start before calling enqueue",
    "lineNumber": 205
  },
  {
    "__docId__": 655,
    "kind": "test",
    "name": "describe281",
    "testId": 281,
    "memberof": "test/src/lib/server/Watcher.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe281",
    "access": null,
    "description": "Watcher",
    "lineNumber": 221,
    "testTargets": [
      "Watcher"
    ]
  },
  {
    "__docId__": 656,
    "kind": "test",
    "name": "describe282",
    "testId": 282,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe281",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe281.describe282",
    "access": null,
    "description": "#constructor",
    "lineNumber": 223,
    "testTargets": [
      "Watcher#constructor"
    ]
  },
  {
    "__docId__": 657,
    "kind": "test",
    "name": "it283",
    "testId": 283,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe281.describe282",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe281.describe282.it283",
    "access": null,
    "description": "should work without arguments",
    "lineNumber": 224
  },
  {
    "__docId__": 658,
    "kind": "test",
    "name": "it284",
    "testId": 284,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe281.describe282",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe281.describe282.it284",
    "access": null,
    "description": "should emit ready event once subscribe stream finished",
    "lineNumber": 232
  },
  {
    "__docId__": 659,
    "kind": "test",
    "name": "it285",
    "testId": 285,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe281.describe282",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe281.describe282.it285",
    "access": null,
    "description": "should forward change events",
    "lineNumber": 241
  },
  {
    "__docId__": 660,
    "kind": "test",
    "name": "it286",
    "testId": 286,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe281.describe282",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe281.describe282.it286",
    "access": null,
    "description": "should forward NodeStream errors",
    "lineNumber": 257
  },
  {
    "__docId__": 661,
    "kind": "test",
    "name": "it287",
    "testId": 287,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe281.describe282",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe281.describe282.it287",
    "access": null,
    "description": "should forward SubscribeStream errors",
    "lineNumber": 268
  },
  {
    "__docId__": 662,
    "kind": "test",
    "name": "describe288",
    "testId": 288,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe281",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe281.describe288",
    "access": null,
    "description": "#close",
    "lineNumber": 281,
    "testTargets": [
      "Watcher#close"
    ]
  },
  {
    "__docId__": 663,
    "kind": "test",
    "name": "it289",
    "testId": 289,
    "memberof": "test/src/lib/server/Watcher.spec.js~describe281.describe288",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/Watcher.spec.js~describe281.describe288.it289",
    "access": null,
    "description": "should forward errors",
    "lineNumber": 282
  },
  {
    "__docId__": 664,
    "kind": "testFile",
    "name": "test/src/lib/server/WriteStream.spec.js",
    "content": "import { spy } from 'sinon';\nimport { StatusCodes, resolveNodeId } from 'node-opcua';\nimport Logger from 'gulplog';\nimport expect from '../../../expect';\nimport WriteStream from '../../../../src/lib/server/WriteStream';\nimport AtviseFile from '../../../../src/lib/server/AtviseFile';\n\n/** @test {WriteStream} */\ndescribe('WriteStream', function() {\n  /** @test {WriteStream#processErrorMessage} */\n  describe('#processErrorMessage', function() {\n    it('should include nodeId', function() {\n      expect(WriteStream.prototype.processErrorMessage(new AtviseFile({\n        path: 'src/AGENT/DISPLAYS/Main.display',\n        base: 'src',\n      })), 'to contain', 'AGENT.DISPLAYS.Main');\n    });\n  });\n\n  /** @test {WriteStream#processChunk} */\n  describe('#processChunk', function() {\n    it('should forward errors', function() {\n      const stream = new WriteStream();\n\n      stream.prependOnceListener('session-open', () => {\n        stream.session.writeSingleNode = (nodeId, value, callback) => callback(new Error('Test'));\n      });\n\n      return expect([{ nodeId: resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main') }],\n        'when piped through', stream,\n        'to error with', /Test/);\n    });\n\n    it('should forward synchronous errors', function() {\n      const stream = new WriteStream();\n\n      stream.prependOnceListener('session-open', () => {\n        stream.session.writeSingleNode = () => {\n          throw new Error('Sync test');\n        };\n      });\n\n      return expect([{ nodeId: resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main') }],\n        'when piped through', stream,\n        'to error with', /Sync test/);\n    });\n\n    it('should warn if access is denied', function() {\n      const stream = new WriteStream();\n\n      stream.prependOnceListener('session-open', () => {\n        stream.session.writeSingleNode = (nodeId, value, callback) =>\n          callback(null, StatusCodes.BadUserAccessDenied);\n      });\n\n      const warnSpy = spy();\n      Logger.on('warn', warnSpy);\n\n      return expect([{ nodeId: resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main') }],\n        'when piped through', stream,\n        'to yield objects satisfying', 'to have length', 0)\n        .then(() => expect(warnSpy, 'was called once'))\n        .then(() => expect(warnSpy.lastCall, 'to satisfy', [/opened in atvise builder/]));\n    });\n\n    it('should forward file with good status', function() {\n      const stream = new WriteStream();\n\n      stream.prependOnceListener('session-open', () => {\n        stream.session.writeSingleNode = (nodeId, value, callback) =>\n          callback(null, StatusCodes.Good);\n      });\n\n      const file = { nodeId: resolveNodeId('ns=1;s=AGENT.DISPLAYS.Main') };\n      return expect([file],\n        'when piped through', stream,\n        'to yield objects satisfying', [\n          expect.it('to be', file),\n        ]);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/server/WriteStream.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 665,
    "kind": "test",
    "name": "describe290",
    "testId": 290,
    "memberof": "test/src/lib/server/WriteStream.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js~describe290",
    "access": null,
    "description": "WriteStream",
    "lineNumber": 9,
    "testTargets": [
      "WriteStream"
    ]
  },
  {
    "__docId__": 666,
    "kind": "test",
    "name": "describe291",
    "testId": 291,
    "memberof": "test/src/lib/server/WriteStream.spec.js~describe290",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js~describe290.describe291",
    "access": null,
    "description": "#processErrorMessage",
    "lineNumber": 11,
    "testTargets": [
      "WriteStream#processErrorMessage"
    ]
  },
  {
    "__docId__": 667,
    "kind": "test",
    "name": "it292",
    "testId": 292,
    "memberof": "test/src/lib/server/WriteStream.spec.js~describe290.describe291",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js~describe290.describe291.it292",
    "access": null,
    "description": "should include nodeId",
    "lineNumber": 12
  },
  {
    "__docId__": 668,
    "kind": "test",
    "name": "describe293",
    "testId": 293,
    "memberof": "test/src/lib/server/WriteStream.spec.js~describe290",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js~describe290.describe293",
    "access": null,
    "description": "#processChunk",
    "lineNumber": 21,
    "testTargets": [
      "WriteStream#processChunk"
    ]
  },
  {
    "__docId__": 669,
    "kind": "test",
    "name": "it294",
    "testId": 294,
    "memberof": "test/src/lib/server/WriteStream.spec.js~describe290.describe293",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js~describe290.describe293.it294",
    "access": null,
    "description": "should forward errors",
    "lineNumber": 22
  },
  {
    "__docId__": 670,
    "kind": "test",
    "name": "it295",
    "testId": 295,
    "memberof": "test/src/lib/server/WriteStream.spec.js~describe290.describe293",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js~describe290.describe293.it295",
    "access": null,
    "description": "should forward synchronous errors",
    "lineNumber": 34
  },
  {
    "__docId__": 671,
    "kind": "test",
    "name": "it296",
    "testId": 296,
    "memberof": "test/src/lib/server/WriteStream.spec.js~describe290.describe293",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js~describe290.describe293.it296",
    "access": null,
    "description": "should warn if access is denied",
    "lineNumber": 48
  },
  {
    "__docId__": 672,
    "kind": "test",
    "name": "it297",
    "testId": 297,
    "memberof": "test/src/lib/server/WriteStream.spec.js~describe290.describe293",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/server/WriteStream.spec.js~describe290.describe293.it297",
    "access": null,
    "description": "should forward file with good status",
    "lineNumber": 66
  },
  {
    "__docId__": 673,
    "kind": "testFile",
    "name": "test/src/lib/transform/PartialTransformer.spec.js",
    "content": "import { Stream } from 'stream';\nimport { obj as createStream } from 'through2';\nimport { spy } from 'sinon';\nimport expect from '../../../expect';\nimport { TransformDirection } from '../../../../src/lib/transform/Transformer';\nimport PartialTransformer from '../../../../src/lib/transform/PartialTransformer';\n\n/** @test {PartialTransformer} */\ndescribe('PartialTransformer', function() {\n  /** @test {PartialTransformer#constructor} */\n  describe('#constructor', function() {\n    it('should create a filter stream', function() {\n      expect((new PartialTransformer()).filter, 'to be a', Stream);\n    });\n  });\n\n  /** @test {PartialTransformer#filter} */\n  describe('#filter', function() {\n    it('should only pass chunks that return true when passed to #shouldBeApplied', function() {\n      const transformer = new PartialTransformer({});\n      transformer.shouldBeTransformed = chunk => chunk === 'pass';\n\n      return expect(['pass', 'do-not-pass'], 'when piped through', transformer.filter,\n        'to yield chunks satisfying', 'to have length', 1);\n    });\n  });\n\n  /** @test {PartialTransformer#shouldBeTransformed} */\n  describe('#shouldBeTransformed', function() {\n    it('should throw if not overridden', function() {\n      expect(() => PartialTransformer.prototype.shouldBeTransformed({}),\n        'to throw', /must be implemented/);\n    });\n  });\n\n  /** @test {PartialTransformer#_transform} */\n  describe('#_transform', function() {\n    it('should pass original file if shouldBeTransformed returns false', function() {\n      const transformer = new PartialTransformer();\n      transformer.shouldBeTransformed = () => false;\n      const file = {};\n\n      expect(cb => transformer._transform(file, 'utf8', cb), 'to call the callback')\n        .then(args => {\n          expect(args[0], 'to be falsy');\n          expect(args[1], 'to be', file);\n        });\n    });\n\n    it('should call super if shouldBeTransformed returns true', function() {\n      const transformer = new PartialTransformer({ direction: TransformDirection.FromDB });\n      const original = {};\n      const result = {};\n\n      transformer.shouldBeTransformed = () => true;\n      transformer.transformFromDB = (file, enc, cb) => cb(null, result);\n\n      expect(cb => transformer._transform(original, 'utf8', cb), 'to call the callback')\n        .then(args => {\n          expect(args[0], 'to be falsy');\n          expect(args[1], 'to be', result);\n        });\n    });\n  });\n\n  /** @test {PartialTransformer#applyToStream} */\n  describe('#applyToStream', function() {\n    context('when #applyToFilteredStream is not overridden', function() {\n      it('should invoke #transformFromDB / #transformFromFilesystem', function() {\n        const transformer = new PartialTransformer();\n        transformer.shouldBeTransformed = () => true;\n        spy(transformer, 'withDirection');\n\n        transformer.applyToStream(createStream(), TransformDirection.FromDB);\n\n        expect(transformer.withDirection, 'was called once');\n      });\n    });\n\n    context('when #applyToFilteredStream is overridden', function() {\n      it('should invoke #applyToFilteredStream', function() {\n        const transformer = new PartialTransformer();\n        transformer.shouldBeTransformed = () => true;\n        transformer.applyToStream = () => true;\n\n        spy(transformer, 'withDirection');\n        spy(transformer, 'applyToFilteredStream');\n\n        expect(transformer.applyToStream(createStream(), TransformDirection.FromDB), 'to be true');\n        expect(transformer.withDirection, 'was not called');\n      });\n    });\n  });\n\n  /** @test {PartialTransformer#applyToFilteredStream} */\n  describe('#applyToFilteredStream', function() {\n    it('should return false by default', function() {\n      expect(PartialTransformer.prototype.applyToFilteredStream(), 'to be false');\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/transform/PartialTransformer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 674,
    "kind": "test",
    "name": "describe298",
    "testId": 298,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298",
    "access": null,
    "description": "PartialTransformer",
    "lineNumber": 9,
    "testTargets": [
      "PartialTransformer"
    ]
  },
  {
    "__docId__": 675,
    "kind": "test",
    "name": "describe299",
    "testId": 299,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe298",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe299",
    "access": null,
    "description": "#constructor",
    "lineNumber": 11,
    "testTargets": [
      "PartialTransformer#constructor"
    ]
  },
  {
    "__docId__": 676,
    "kind": "test",
    "name": "it300",
    "testId": 300,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe299",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe299.it300",
    "access": null,
    "description": "should create a filter stream",
    "lineNumber": 12
  },
  {
    "__docId__": 677,
    "kind": "test",
    "name": "describe301",
    "testId": 301,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe298",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe301",
    "access": null,
    "description": "#filter",
    "lineNumber": 18,
    "testTargets": [
      "PartialTransformer#filter"
    ]
  },
  {
    "__docId__": 678,
    "kind": "test",
    "name": "it302",
    "testId": 302,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe301",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe301.it302",
    "access": null,
    "description": "should only pass chunks that return true when passed to #shouldBeApplied",
    "lineNumber": 19
  },
  {
    "__docId__": 679,
    "kind": "test",
    "name": "describe303",
    "testId": 303,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe298",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe303",
    "access": null,
    "description": "#shouldBeTransformed",
    "lineNumber": 29,
    "testTargets": [
      "PartialTransformer#shouldBeTransformed"
    ]
  },
  {
    "__docId__": 680,
    "kind": "test",
    "name": "it304",
    "testId": 304,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe303",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe303.it304",
    "access": null,
    "description": "should throw if not overridden",
    "lineNumber": 30
  },
  {
    "__docId__": 681,
    "kind": "test",
    "name": "describe305",
    "testId": 305,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe298",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe305",
    "access": null,
    "description": "#_transform",
    "lineNumber": 37,
    "testTargets": [
      "PartialTransformer#_transform"
    ]
  },
  {
    "__docId__": 682,
    "kind": "test",
    "name": "it306",
    "testId": 306,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe305",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe305.it306",
    "access": null,
    "description": "should pass original file if shouldBeTransformed returns false",
    "lineNumber": 38
  },
  {
    "__docId__": 683,
    "kind": "test",
    "name": "it307",
    "testId": 307,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe305",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe305.it307",
    "access": null,
    "description": "should call super if shouldBeTransformed returns true",
    "lineNumber": 50
  },
  {
    "__docId__": 684,
    "kind": "test",
    "name": "describe308",
    "testId": 308,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe298",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe308",
    "access": null,
    "description": "#applyToStream",
    "lineNumber": 67,
    "testTargets": [
      "PartialTransformer#applyToStream"
    ]
  },
  {
    "__docId__": 685,
    "kind": "test",
    "name": "context309",
    "testId": 309,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe308",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe308.context309",
    "access": null,
    "description": "when #applyToFilteredStream is not overridden",
    "lineNumber": 68
  },
  {
    "__docId__": 686,
    "kind": "test",
    "name": "it310",
    "testId": 310,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe308.context309",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe308.context309.it310",
    "access": null,
    "description": "should invoke #transformFromDB / #transformFromFilesystem",
    "lineNumber": 69
  },
  {
    "__docId__": 687,
    "kind": "test",
    "name": "context311",
    "testId": 311,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe308",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe308.context311",
    "access": null,
    "description": "when #applyToFilteredStream is overridden",
    "lineNumber": 80
  },
  {
    "__docId__": 688,
    "kind": "test",
    "name": "it312",
    "testId": 312,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe308.context311",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe308.context311.it312",
    "access": null,
    "description": "should invoke #applyToFilteredStream",
    "lineNumber": 81
  },
  {
    "__docId__": 689,
    "kind": "test",
    "name": "describe313",
    "testId": 313,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe298",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe313",
    "access": null,
    "description": "#applyToFilteredStream",
    "lineNumber": 96,
    "testTargets": [
      "PartialTransformer#applyToFilteredStream"
    ]
  },
  {
    "__docId__": 690,
    "kind": "test",
    "name": "it314",
    "testId": 314,
    "memberof": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe313",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/PartialTransformer.spec.js~describe298.describe313.it314",
    "access": null,
    "description": "should return false by default",
    "lineNumber": 97
  },
  {
    "__docId__": 691,
    "kind": "testFile",
    "name": "test/src/lib/transform/SplittingTransformer.spec.js",
    "content": "import expect from 'unexpected';\nimport { spy } from 'sinon';\nimport proxyquire from 'proxyquire';\n\nimport File from 'vinyl';\nimport { TransformDirection } from '../../../../src/lib/transform/Transformer';\nimport AtviseFile from '../../../../src/lib/server/AtviseFile';\nimport SplittingTransformer, {\n  CombineFilesCache,\n} from '../../../../src/lib/transform/SplittingTransformer';\n\nclass StubSplittingTransformer extends proxyquire(\n  '../../../../src/lib/transform/SplittingTransformer',\n  {\n    '../server/AtviseFile': {\n      _esModule: true,\n      default: class StubAtviseFile extends AtviseFile {\n        static read(options) {\n          return Promise.resolve(options);\n        }\n      },\n    },\n  }).default {\n  constructor(combineError) {\n    super();\n\n    this.combineError = combineError;\n  }\n\n  createCombinedFile(files, last, callback) {\n    if (this.combineError) {\n      callback(this.combineError);\n    } else {\n      callback(null, last);\n    }\n  }\n}\n\nconst StubCombineFilesCache = proxyquire('../../../../src/lib/transform/SplittingTransformer', {\n  fs: {\n    readdir: (dir, cb) => cb(null, ['file.ext1', 'file.ext2']),\n  },\n}).CombineFilesCache;\n\n/** @test {CombineFilesCache} */\ndescribe('CombineFilesCache', function() {\n  /** @test {CombineFilesCache#missingExtensions} */\n  describe('#missingExtensions', function() {\n    it('should return extensions if required files are missing', function() {\n      const cache = new CombineFilesCache();\n      cache._files.fakeDir = { '.ext': {} };\n      cache._required.fakeDir = ['.ext', '.ext2'];\n\n      expect(cache.missingExtensions('fakeDir'), 'to equal', ['.ext2']);\n    });\n\n    it('should return empty array if all required files are cached', function() {\n      const cache = new CombineFilesCache();\n      cache._files.fakeDir = { '.ext': {} };\n      cache._required.fakeDir = ['.ext'];\n\n      expect(cache.missingExtensions('fakeDir'), 'to equal', []);\n    });\n  });\n\n  /** @test {CombineFilesCache#gotAllFiles} */\n  describe('#gotAllFiles', function() {\n    it('should forward readdir errors', function() {\n      const cache = new CombineFilesCache();\n\n      return expect(cb => cache.gotAllFiles(new File({ path: 'that/does/not.exist' }), cb),\n        'to call the callback with error', /ENOENT/);\n    });\n\n    it('should store required files if missing', function() {\n      const cache = new StubCombineFilesCache();\n\n      return expect(cb => cache.gotAllFiles({ dirname: 'dirname' }, cb),\n        'to call the callback')\n        .then(args => {\n          expect(args[0], 'to be falsy');\n          expect(args[1], 'to be undefined');\n          expect(cache._required.dirname, 'to equal', ['.ext1', '.ext2']);\n        });\n    });\n\n    const fillCache = new StubCombineFilesCache();\n    const file1 = { dirname: 'dirname', extname: '.ext1' };\n    const file2 = { dirname: 'dirname', extname: '.ext2' };\n\n    it('should cache passed file', function() {\n      return expect(cb => fillCache.gotAllFiles(file1, cb),\n        'to call the callback')\n        .then(args => {\n          expect(args[0], 'to be falsy');\n          expect(args[1], 'to be undefined');\n          expect(fillCache._required.dirname, 'to equal', ['.ext1', '.ext2']);\n          expect(fillCache._files.dirname['.ext1'], 'to equal', file1);\n        });\n    });\n\n    it('should pass all cached files if all required are present', function() {\n      return expect(cb => fillCache.gotAllFiles(file2, cb),\n        'to call the callback')\n        .then(args => {\n          expect(args[0], 'to be falsy');\n          expect(args[1], 'to equal', {\n            '.ext1': file1,\n            '.ext2': file2,\n          });\n\n          // Expect cache is cleaned\n          expect(fillCache._files.dirname, 'to be undefined');\n        });\n    });\n  });\n});\n\n/** @test {SplittingTransformer} */\ndescribe('SplittingTransformer', function() {\n  /** @test {SplittingTransformer#createCombinedFile} */\n  describe('#createCombinedFile', function() {\n    it('should throw if not overridden', function() {\n      expect(() => SplittingTransformer.prototype.createCombinedFile(),\n        'to throw', /must be implemented/);\n    });\n  });\n\n  /** @test {SplittingTransformer#transformFromFilesystem} */\n  describe('#transformFromFilesystem', function() {\n    it('should forward cache errors', function() {\n      const transformer = new SplittingTransformer({\n        direction: TransformDirection.FromFilesystem,\n      });\n      transformer._combineFilesCache.gotAllFiles = (file, cb) => cb(new Error('Cache error'));\n\n      expect(cb => transformer.transformFromFilesystem(\n        new File({ path: 'path/name.display/name.js' }), 'utf8', cb),\n        'to call the callback with error', 'Cache error');\n    });\n\n    it('should cache display files', function() {\n      const transformer = new SplittingTransformer({\n        direction: TransformDirection.FromFilesystem,\n      });\n      transformer._combineFilesCache.gotAllFiles = (files, cb) => cb(null, false);\n\n      return expect(cb =>\n          transformer.transformFromFilesystem(\n            new File({ path: 'path/name.display/name.js' }), 'utf8', cb),\n        'to call the callback'\n      )\n        .then(args => {\n          expect(args[0], 'to be falsy');\n        });\n    });\n\n    it('should call #createCombinedFile if all required files are cached', function() {\n      const transformer = new SplittingTransformer({\n        direction: TransformDirection.FromFilesystem,\n      });\n      const stubDisplay = {};\n      transformer._combineFilesCache.gotAllFiles = (files, cb) => cb(null, [{}]);\n      transformer.createCombinedFile = (files, last, cb) => cb(null, stubDisplay);\n\n      return expect(cb =>\n          transformer.transformFromFilesystem(\n            new File({ path: 'path/name.display/name.js' }), 'utf8', cb),\n        'to call the callback'\n      )\n        .then(args => {\n          expect(args[0], 'to be falsy');\n          expect(args[1], 'to be', stubDisplay);\n        });\n    });\n  });\n\n  /** @test {SplittingTransformer.splitFile} */\n  describe('.splitFile', function() {\n    const original = new File({\n      path: 'path/name.type.ext',\n    });\n\n    it('should return a file', function() {\n      expect(SplittingTransformer.splitFile(original, '.another'), 'to be a', File);\n    });\n\n    it('should apply the new extension', function() {\n      expect(SplittingTransformer.splitFile(original, '.another').extname, 'to equal', '.another');\n    });\n  });\n\n  /** @test {SplittingTransformer.combineFiles} */\n  describe('.combineFiles', function() {\n    const originals = [\n      new File({ path: 'path/name.type/name.ext1' }),\n      new File({ path: 'path/name.type/name.ext2' }),\n    ];\n\n    it('should return a file', function() {\n      expect(SplittingTransformer.combineFiles(originals, '.another'), 'to be a', File);\n    });\n\n    it('should apply the new extension', function() {\n      expect(SplittingTransformer.combineFiles(originals, '.other').extname, 'to equal', '.other');\n    });\n  });\n\n  /** @test {SplittingTransformer#_flush} */\n  describe('#_flush', function() {\n    it('should just callback if no files are missing', function() {\n      const transformer = new SplittingTransformer();\n      const callback = spy();\n\n      transformer._flush(callback);\n\n      expect(callback.calledOnce, 'to be', true);\n    });\n\n    it('should push additional files if some are missing', function(done) {\n      const transformer = new StubSplittingTransformer();\n      const file = {\n        cwd: '/fake/cwd',\n        base: '/base',\n      };\n\n      transformer._combineFilesCache._files['base/not/existent/dir'] = {\n        '.ext': file,\n      };\n      transformer._combineFilesCache._required['base/not/existent/dir'] = ['.ext', '.ext1'];\n      spy(transformer, 'push');\n\n      transformer._flush(err => {\n        expect(err, 'to be falsy');\n        expect(transformer.push.calledOnce, 'to be true');\n        expect(transformer.push.lastCall.args[0], 'to be', file);\n\n        done();\n      });\n    });\n\n    it('should forward read errors', function(done) {\n      const transformer = new StubSplittingTransformer(new Error('Test error'));\n      const file = {\n        cwd: '/fake/cwd',\n        base: '/base',\n      };\n\n      transformer._combineFilesCache._files['base/not/existent/dir'] = {\n        '.ext': file,\n      };\n      transformer._combineFilesCache._required['base/not/existent/dir'] = ['.ext', '.ext1'];\n      spy(transformer, 'push');\n\n      transformer._flush(err => {\n        expect(err, 'to have message', 'Test error');\n\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/transform/SplittingTransformer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 692,
    "kind": "test",
    "name": "describe315",
    "testId": 315,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe315",
    "access": null,
    "description": "CombineFilesCache",
    "lineNumber": 46,
    "testTargets": [
      "CombineFilesCache"
    ]
  },
  {
    "__docId__": 693,
    "kind": "test",
    "name": "describe316",
    "testId": 316,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe315",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe315.describe316",
    "access": null,
    "description": "#missingExtensions",
    "lineNumber": 48,
    "testTargets": [
      "CombineFilesCache#missingExtensions"
    ]
  },
  {
    "__docId__": 694,
    "kind": "test",
    "name": "it317",
    "testId": 317,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe315.describe316",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe315.describe316.it317",
    "access": null,
    "description": "should return extensions if required files are missing",
    "lineNumber": 49
  },
  {
    "__docId__": 695,
    "kind": "test",
    "name": "it318",
    "testId": 318,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe315.describe316",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe315.describe316.it318",
    "access": null,
    "description": "should return empty array if all required files are cached",
    "lineNumber": 57
  },
  {
    "__docId__": 696,
    "kind": "test",
    "name": "describe319",
    "testId": 319,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe315",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe315.describe319",
    "access": null,
    "description": "#gotAllFiles",
    "lineNumber": 67,
    "testTargets": [
      "CombineFilesCache#gotAllFiles"
    ]
  },
  {
    "__docId__": 697,
    "kind": "test",
    "name": "it320",
    "testId": 320,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe315.describe319",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe315.describe319.it320",
    "access": null,
    "description": "should forward readdir errors",
    "lineNumber": 68
  },
  {
    "__docId__": 698,
    "kind": "test",
    "name": "it321",
    "testId": 321,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe315.describe319",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe315.describe319.it321",
    "access": null,
    "description": "should store required files if missing",
    "lineNumber": 75
  },
  {
    "__docId__": 699,
    "kind": "test",
    "name": "it322",
    "testId": 322,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe315.describe319",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe315.describe319.it322",
    "access": null,
    "description": "should cache passed file",
    "lineNumber": 91
  },
  {
    "__docId__": 700,
    "kind": "test",
    "name": "it323",
    "testId": 323,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe315.describe319",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe315.describe319.it323",
    "access": null,
    "description": "should pass all cached files if all required are present",
    "lineNumber": 102
  },
  {
    "__docId__": 701,
    "kind": "test",
    "name": "describe324",
    "testId": 324,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324",
    "access": null,
    "description": "SplittingTransformer",
    "lineNumber": 120,
    "testTargets": [
      "SplittingTransformer"
    ]
  },
  {
    "__docId__": 702,
    "kind": "test",
    "name": "describe325",
    "testId": 325,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe324",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe325",
    "access": null,
    "description": "#createCombinedFile",
    "lineNumber": 122,
    "testTargets": [
      "SplittingTransformer#createCombinedFile"
    ]
  },
  {
    "__docId__": 703,
    "kind": "test",
    "name": "it326",
    "testId": 326,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe325",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe325.it326",
    "access": null,
    "description": "should throw if not overridden",
    "lineNumber": 123
  },
  {
    "__docId__": 704,
    "kind": "test",
    "name": "describe327",
    "testId": 327,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe324",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe327",
    "access": null,
    "description": "#transformFromFilesystem",
    "lineNumber": 130,
    "testTargets": [
      "SplittingTransformer#transformFromFilesystem"
    ]
  },
  {
    "__docId__": 705,
    "kind": "test",
    "name": "it328",
    "testId": 328,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe327",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe327.it328",
    "access": null,
    "description": "should forward cache errors",
    "lineNumber": 131
  },
  {
    "__docId__": 706,
    "kind": "test",
    "name": "it329",
    "testId": 329,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe327",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe327.it329",
    "access": null,
    "description": "should cache display files",
    "lineNumber": 142
  },
  {
    "__docId__": 707,
    "kind": "test",
    "name": "it330",
    "testId": 330,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe327",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe327.it330",
    "access": null,
    "description": "should call #createCombinedFile if all required files are cached",
    "lineNumber": 158
  },
  {
    "__docId__": 708,
    "kind": "test",
    "name": "describe331",
    "testId": 331,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe324",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe331",
    "access": null,
    "description": ".splitFile",
    "lineNumber": 179,
    "testTargets": [
      "SplittingTransformer.splitFile"
    ]
  },
  {
    "__docId__": 709,
    "kind": "test",
    "name": "it332",
    "testId": 332,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe331",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe331.it332",
    "access": null,
    "description": "should return a file",
    "lineNumber": 184
  },
  {
    "__docId__": 710,
    "kind": "test",
    "name": "it333",
    "testId": 333,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe331",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe331.it333",
    "access": null,
    "description": "should apply the new extension",
    "lineNumber": 188
  },
  {
    "__docId__": 711,
    "kind": "test",
    "name": "describe334",
    "testId": 334,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe324",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe334",
    "access": null,
    "description": ".combineFiles",
    "lineNumber": 194,
    "testTargets": [
      "SplittingTransformer.combineFiles"
    ]
  },
  {
    "__docId__": 712,
    "kind": "test",
    "name": "it335",
    "testId": 335,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe334",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe334.it335",
    "access": null,
    "description": "should return a file",
    "lineNumber": 200
  },
  {
    "__docId__": 713,
    "kind": "test",
    "name": "it336",
    "testId": 336,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe334",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe334.it336",
    "access": null,
    "description": "should apply the new extension",
    "lineNumber": 204
  },
  {
    "__docId__": 714,
    "kind": "test",
    "name": "describe337",
    "testId": 337,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe324",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe337",
    "access": null,
    "description": "#_flush",
    "lineNumber": 210,
    "testTargets": [
      "SplittingTransformer#_flush"
    ]
  },
  {
    "__docId__": 715,
    "kind": "test",
    "name": "it338",
    "testId": 338,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe337",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe337.it338",
    "access": null,
    "description": "should just callback if no files are missing",
    "lineNumber": 211
  },
  {
    "__docId__": 716,
    "kind": "test",
    "name": "it339",
    "testId": 339,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe337",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe337.it339",
    "access": null,
    "description": "should push additional files if some are missing",
    "lineNumber": 220
  },
  {
    "__docId__": 717,
    "kind": "test",
    "name": "it340",
    "testId": 340,
    "memberof": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe337",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/SplittingTransformer.spec.js~describe324.describe337.it340",
    "access": null,
    "description": "should forward read errors",
    "lineNumber": 242
  },
  {
    "__docId__": 718,
    "kind": "testFile",
    "name": "test/src/lib/transform/Transformer.spec.js",
    "content": "import { Stream } from 'stream';\nimport { inspect } from 'util';\nimport { stub } from 'sinon';\nimport { obj as createStream } from 'through2';\nimport expect from '../../../expect';\n\nimport Transformer, { TransformDirection } from '../../../../src/lib/transform/Transformer';\n\n/** @test {Transformer} */\ndescribe('Transformer', function() {\n  /** @test {Transformer#constructor} */\n  describe('#constructor', function() {\n    it('should throw with invalid direction', function() {\n      expect(() => (new Transformer({ direction: 'asdf' })),\n        'to throw', 'Invalid direction');\n    });\n\n    it('should store direction', function() {\n      expect((new Transformer({ direction: TransformDirection.FromDB })).direction,\n        'to equal', TransformDirection.FromDB);\n    });\n  });\n\n  /** @test {Transformer#withDirection} */\n  describe('#withDirection', function() {\n    let transformer;\n\n    beforeEach(() => (transformer = new Transformer()));\n\n    it('should throw without direction', function() {\n      expect(() => transformer.withDirection(), 'to throw', 'Invalid direction');\n    });\n\n    it('should throw with invalid direction', function() {\n      expect(() => transformer.withDirection('asdf'), 'to throw', 'Invalid direction');\n    });\n\n    it('should return self with direction set', function() {\n      const directed = transformer.withDirection(TransformDirection.FromDB);\n\n      expect(directed, 'to be a', Transformer);\n      expect(directed.direction, 'to equal', TransformDirection.FromDB);\n    });\n  });\n\n  /** @test {Transformer#_transform} */\n  describe('#_transform', function() {\n    let transformer;\n\n    beforeEach(() => {\n      transformer = new Transformer();\n      stub(transformer, 'transformFromDB', (c, e, cb) => cb(null));\n      stub(transformer, 'transformFromFilesystem', (c, e, cb) => cb(null));\n    });\n\n    it('should fail without direction', function() {\n      return expect(cb => transformer._transform({}, 'utf8', cb),\n        'to call the callback with error', 'Transformer has no direction');\n    });\n\n    it('should call transformFromDB with direction FromDB', function() {\n      transformer.withDirection(TransformDirection.FromDB)._transform({}, 'utf8', () => {});\n\n      return expect(transformer.transformFromDB, 'was called');\n    });\n\n    it('should call transformFromFilesystem with direction FromFilesystem', function() {\n      transformer.withDirection(TransformDirection.FromFilesystem)._transform({}, 'utf8', () => {});\n\n      return expect(transformer.transformFromFilesystem, 'was called');\n    });\n  });\n\n  /** @test {Transformer#transformFromDB} */\n  describe('#transformFromDB', function() {\n    const transformer = new Transformer();\n\n    it('should fail if not overridden', function() {\n      return expect(cb => transformer.transformFromDB({}, 'utf8', cb),\n        'to call the callback with error', /must be overridden/);\n    });\n  });\n\n  /** @test {Transformer#transformFromFilesystem} */\n  describe('#transformFromFilesytem', function() {\n    const transformer = new Transformer();\n\n    it('should fail if not overridden', function() {\n      return expect(cb => transformer.transformFromFilesystem({}, 'utf8', cb),\n        'to call the callback with error', /must be overridden/);\n    });\n  });\n\n  /** @test {Transformer.applyTransformers} */\n  describe('.applyTransformers', function() {\n    it('should throw on invalid direction', function() {\n      expect(() => Transformer.applyTransformers(createStream(), [], 'asdf'), 'to throw error',\n        'Direction is invalid');\n    });\n\n    it('should return directed transformer if only one is passed', function() {\n      const firstTransformer = new Transformer();\n      const result = Transformer.applyTransformers(createStream(), [firstTransformer],\n        TransformDirection.FromDB);\n\n      expect(result, 'to be', firstTransformer);\n      expect(firstTransformer.direction, 'to equal', TransformDirection.FromDB);\n    });\n\n    it('should return last transformer piped to previous', function() {\n      const firstTransformer = new Transformer();\n      const lastTransformer = new Transformer();\n      const result = Transformer.applyTransformers(createStream(), [\n        firstTransformer,\n        lastTransformer,\n      ], TransformDirection.FromDB);\n\n      expect(result, 'to be', lastTransformer);\n      expect(firstTransformer.direction, 'to equal', TransformDirection.FromDB);\n      expect(lastTransformer.direction, 'to equal', TransformDirection.FromDB);\n    });\n\n    it('should reverse transformers if called with \"FromFilesystem\"', function() {\n      const firstTransformer = new Transformer();\n      const lastTransformer = new Transformer();\n      const result = Transformer.applyTransformers(createStream(), [\n        firstTransformer,\n        lastTransformer,\n      ], TransformDirection.FromFilesystem);\n\n      expect(result, 'to be', firstTransformer);\n      expect(firstTransformer.direction, 'to equal', TransformDirection.FromFilesystem);\n      expect(lastTransformer.direction, 'to equal', TransformDirection.FromFilesystem);\n    });\n\n    it('should work with empty array as argument', function() {\n      expect(Transformer.applyTransformers(createStream(), [], TransformDirection.FromDB),\n        'to be a', Stream);\n    });\n  });\n\n  /** @test {Transformer#inspect} */\n  describe('#inspect', function() {\n    it('should return constructor name if depth is less than zero ', function() {\n      expect(inspect(new Transformer({ opt: 'val' }), { depth: -1 }),\n        'to contain', 'Transformer');\n    });\n\n    it('should return options if depth is positive', function() {\n      expect(inspect(new Transformer({ opt: 'val', opt2: 2 }), { depth: 1 }),\n        'to contain', 'Transformer', 'opt: \\'val\\'', 'opt2: 2');\n    });\n\n    it('should return options if depth is null', function() {\n      expect(inspect(new Transformer({ opt: 'val', opt2: 2 }), { depth: null }),\n        'to contain', 'Transformer', 'opt: \\'val\\'', 'opt2: 2');\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/transform/Transformer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 719,
    "kind": "test",
    "name": "describe341",
    "testId": 341,
    "memberof": "test/src/lib/transform/Transformer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341",
    "access": null,
    "description": "Transformer",
    "lineNumber": 10,
    "testTargets": [
      "Transformer"
    ]
  },
  {
    "__docId__": 720,
    "kind": "test",
    "name": "describe342",
    "testId": 342,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe342",
    "access": null,
    "description": "#constructor",
    "lineNumber": 12,
    "testTargets": [
      "Transformer#constructor"
    ]
  },
  {
    "__docId__": 721,
    "kind": "test",
    "name": "it343",
    "testId": 343,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe342",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe342.it343",
    "access": null,
    "description": "should throw with invalid direction",
    "lineNumber": 13
  },
  {
    "__docId__": 722,
    "kind": "test",
    "name": "it344",
    "testId": 344,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe342",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe342.it344",
    "access": null,
    "description": "should store direction",
    "lineNumber": 18
  },
  {
    "__docId__": 723,
    "kind": "test",
    "name": "describe345",
    "testId": 345,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe345",
    "access": null,
    "description": "#withDirection",
    "lineNumber": 25,
    "testTargets": [
      "Transformer#withDirection"
    ]
  },
  {
    "__docId__": 724,
    "kind": "test",
    "name": "it346",
    "testId": 346,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe345",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe345.it346",
    "access": null,
    "description": "should throw without direction",
    "lineNumber": 30
  },
  {
    "__docId__": 725,
    "kind": "test",
    "name": "it347",
    "testId": 347,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe345",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe345.it347",
    "access": null,
    "description": "should throw with invalid direction",
    "lineNumber": 34
  },
  {
    "__docId__": 726,
    "kind": "test",
    "name": "it348",
    "testId": 348,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe345",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe345.it348",
    "access": null,
    "description": "should return self with direction set",
    "lineNumber": 38
  },
  {
    "__docId__": 727,
    "kind": "test",
    "name": "describe349",
    "testId": 349,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe349",
    "access": null,
    "description": "#_transform",
    "lineNumber": 47,
    "testTargets": [
      "Transformer#_transform"
    ]
  },
  {
    "__docId__": 728,
    "kind": "test",
    "name": "it350",
    "testId": 350,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe349",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe349.it350",
    "access": null,
    "description": "should fail without direction",
    "lineNumber": 56
  },
  {
    "__docId__": 729,
    "kind": "test",
    "name": "it351",
    "testId": 351,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe349",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe349.it351",
    "access": null,
    "description": "should call transformFromDB with direction FromDB",
    "lineNumber": 61
  },
  {
    "__docId__": 730,
    "kind": "test",
    "name": "it352",
    "testId": 352,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe349",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe349.it352",
    "access": null,
    "description": "should call transformFromFilesystem with direction FromFilesystem",
    "lineNumber": 67
  },
  {
    "__docId__": 731,
    "kind": "test",
    "name": "describe353",
    "testId": 353,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe353",
    "access": null,
    "description": "#transformFromDB",
    "lineNumber": 75,
    "testTargets": [
      "Transformer#transformFromDB"
    ]
  },
  {
    "__docId__": 732,
    "kind": "test",
    "name": "it354",
    "testId": 354,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe353",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe353.it354",
    "access": null,
    "description": "should fail if not overridden",
    "lineNumber": 78
  },
  {
    "__docId__": 733,
    "kind": "test",
    "name": "describe355",
    "testId": 355,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe355",
    "access": null,
    "description": "#transformFromFilesytem",
    "lineNumber": 85,
    "testTargets": [
      "Transformer#transformFromFilesystem"
    ]
  },
  {
    "__docId__": 734,
    "kind": "test",
    "name": "it356",
    "testId": 356,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe355",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe355.it356",
    "access": null,
    "description": "should fail if not overridden",
    "lineNumber": 88
  },
  {
    "__docId__": 735,
    "kind": "test",
    "name": "describe357",
    "testId": 357,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe357",
    "access": null,
    "description": ".applyTransformers",
    "lineNumber": 95,
    "testTargets": [
      "Transformer.applyTransformers"
    ]
  },
  {
    "__docId__": 736,
    "kind": "test",
    "name": "it358",
    "testId": 358,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe357",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe357.it358",
    "access": null,
    "description": "should throw on invalid direction",
    "lineNumber": 96
  },
  {
    "__docId__": 737,
    "kind": "test",
    "name": "it359",
    "testId": 359,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe357",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe357.it359",
    "access": null,
    "description": "should return directed transformer if only one is passed",
    "lineNumber": 101
  },
  {
    "__docId__": 738,
    "kind": "test",
    "name": "it360",
    "testId": 360,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe357",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe357.it360",
    "access": null,
    "description": "should return last transformer piped to previous",
    "lineNumber": 110
  },
  {
    "__docId__": 739,
    "kind": "test",
    "name": "it361",
    "testId": 361,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe357",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe357.it361",
    "access": null,
    "description": "should reverse transformers if called with \"FromFilesystem\"",
    "lineNumber": 123
  },
  {
    "__docId__": 740,
    "kind": "test",
    "name": "it362",
    "testId": 362,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe357",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe357.it362",
    "access": null,
    "description": "should work with empty array as argument",
    "lineNumber": 136
  },
  {
    "__docId__": 741,
    "kind": "test",
    "name": "describe363",
    "testId": 363,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe363",
    "access": null,
    "description": "#inspect",
    "lineNumber": 143,
    "testTargets": [
      "Transformer#inspect"
    ]
  },
  {
    "__docId__": 742,
    "kind": "test",
    "name": "it364",
    "testId": 364,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe363",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe363.it364",
    "access": null,
    "description": "should return constructor name if depth is less than zero ",
    "lineNumber": 144
  },
  {
    "__docId__": 743,
    "kind": "test",
    "name": "it365",
    "testId": 365,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe363",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe363.it365",
    "access": null,
    "description": "should return options if depth is positive",
    "lineNumber": 149
  },
  {
    "__docId__": 744,
    "kind": "test",
    "name": "it366",
    "testId": 366,
    "memberof": "test/src/lib/transform/Transformer.spec.js~describe341.describe363",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/Transformer.spec.js~describe341.describe363.it366",
    "access": null,
    "description": "should return options if depth is null",
    "lineNumber": 154
  },
  {
    "__docId__": 745,
    "kind": "testFile",
    "name": "test/src/lib/transform/XMLTransformer.spec.js",
    "content": "import expect from 'unexpected';\nimport { Builder } from 'xml2js';\nimport Transformer, { TransformDirection } from '../../../../src/lib/transform/Transformer';\nimport XMLTransformer from '../../../../src/lib/transform/XMLTransformer';\n\n/** @test {XMLTransformer} */\ndescribe('XMLTransformer', function() {\n  /** @test {XMLTransformer#constructor} */\n  describe('#constructor', function() {\n    it('should return a SplittingTransformer', function() {\n      expect(new XMLTransformer(), 'to be a', Transformer);\n    });\n\n    it('should create a _fromDBBuilder', function() {\n      const transformer = new XMLTransformer();\n\n      expect(transformer._fromDBBuilder, 'to be defined');\n      expect(transformer._fromDBBuilder, 'to be a', Builder);\n    });\n\n    it('should create a _fromFilesystemBuilder', function() {\n      const transformer = new XMLTransformer();\n\n      expect(transformer._fromDBBuilder, 'to be defined');\n      expect(transformer._fromDBBuilder, 'to be a', Builder);\n    });\n  });\n\n  /** @test {XMLTransformer#builder} */\n  describe('#builder', function() {\n    it('should return the #_fromDBBuilder if direction is FromDB', function() {\n      const transformer = new XMLTransformer({ direction: TransformDirection.FromDB });\n\n      expect(transformer.builder, 'to be defined');\n      expect(transformer.builder, 'to be', transformer._fromDBBuilder);\n    });\n\n    it('should return the #_fromDBBuilder if direction is FromFilesystem', function() {\n      const transformer = new XMLTransformer({ direction: TransformDirection.FromFilesystem });\n\n      expect(transformer.builder, 'to be defined');\n      expect(transformer.builder, 'to be', transformer._fromFilesystemBuilder);\n    });\n  });\n\n  /** @test {XMLTransformer#decodeContents} */\n  describe('#decodeContents', function() {\n    it('should forward errors', function(done) {\n      expect(cb => (new XMLTransformer()).decodeContents({ contents: 'no valid xml' }, cb),\n        'to call the callback with error', /Non-whitespace before first tag./)\n        .then(() => done());\n    });\n\n    it('should return object for valid xml', function(done) {\n      expect(cb => (new XMLTransformer()).decodeContents({ contents: '<tag>value</tag>' }, cb),\n        'to call the callback')\n        .then(args => {\n          expect(args[0], 'to be falsy');\n          expect(args[1], 'to equal', { tag: 'value' });\n          done();\n        });\n    });\n  });\n\n  function testBuilder(direction, object, expectedResult, callback) {\n    const transformer = new XMLTransformer({ direction });\n\n    expect(cb => transformer.encodeContents(object, cb), 'to call the callback')\n      .then(args => {\n        expect(args[0], 'to be falsy');\n        expect(args[1], 'to contain', expectedResult);\n        callback();\n      });\n  }\n\n  /** @test {XMLTransformer#encodeContents} */\n  describe('#encodeContents', function() {\n    it('should forward errors', function() {\n      expect(cb => (new XMLTransformer()).encodeContents(null, cb),\n        'to call the callback with error', 'Cannot convert undefined or null to object');\n    });\n\n    context('when direction is FromDB', function() {\n      it('should indent with double space', function(done) {\n        testBuilder(TransformDirection.FromDB, { root: { sub: 'test' } },\n          `<root>\n  <sub>test</sub>\n</root>`, done);\n      });\n    });\n\n    context('when direction is FromFilesytem', function() {\n      it('should indent with single space', function(done) {\n        testBuilder(TransformDirection.FromFilesystem, { root: { sub: 'test' } },\n          '<root>\\r\\n <sub>test</sub>\\r\\n</root>', done);\n      });\n    });\n\n    it('should support forced CDATA', function() {\n      return expect(cb => (new XMLTransformer({ direction: TransformDirection.FromDB }))\n        .encodeContents({\n          svg: {\n            script: [\n              { _: XMLTransformer.forceCData('test()') },\n            ],\n          },\n        }, cb), 'to call the callback')\n          .then(args => expect(args[1], 'to end with', `<svg>\n  <script><![CDATA[test()]]></script>\n</svg>`));\n    });\n\n    it('should not double escape forced CDATA', function() {\n      return expect(cb => (new XMLTransformer({ direction: TransformDirection.FromFilesystem }))\n        .encodeContents({\n          svg: {\n            script: [\n              { _: XMLTransformer.forceCData('console.log(\"<asdf>\")') },\n            ],\n          },\n        }, cb), 'to call the callback')\n          .then(args => expect(args[1], 'to contain',\n            '<script><![CDATA[console.log(\"<asdf>\")]]></script>'));\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/lib/transform/XMLTransformer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 746,
    "kind": "test",
    "name": "describe367",
    "testId": 367,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367",
    "access": null,
    "description": "XMLTransformer",
    "lineNumber": 7,
    "testTargets": [
      "XMLTransformer"
    ]
  },
  {
    "__docId__": 747,
    "kind": "test",
    "name": "describe368",
    "testId": 368,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe368",
    "access": null,
    "description": "#constructor",
    "lineNumber": 9,
    "testTargets": [
      "XMLTransformer#constructor"
    ]
  },
  {
    "__docId__": 748,
    "kind": "test",
    "name": "it369",
    "testId": 369,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe368",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe368.it369",
    "access": null,
    "description": "should return a SplittingTransformer",
    "lineNumber": 10
  },
  {
    "__docId__": 749,
    "kind": "test",
    "name": "it370",
    "testId": 370,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe368",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe368.it370",
    "access": null,
    "description": "should create a _fromDBBuilder",
    "lineNumber": 14
  },
  {
    "__docId__": 750,
    "kind": "test",
    "name": "it371",
    "testId": 371,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe368",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe368.it371",
    "access": null,
    "description": "should create a _fromFilesystemBuilder",
    "lineNumber": 21
  },
  {
    "__docId__": 751,
    "kind": "test",
    "name": "describe372",
    "testId": 372,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe372",
    "access": null,
    "description": "#builder",
    "lineNumber": 30,
    "testTargets": [
      "XMLTransformer#builder"
    ]
  },
  {
    "__docId__": 752,
    "kind": "test",
    "name": "it373",
    "testId": 373,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe372",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe372.it373",
    "access": null,
    "description": "should return the #_fromDBBuilder if direction is FromDB",
    "lineNumber": 31
  },
  {
    "__docId__": 753,
    "kind": "test",
    "name": "it374",
    "testId": 374,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe372",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe372.it374",
    "access": null,
    "description": "should return the #_fromDBBuilder if direction is FromFilesystem",
    "lineNumber": 38
  },
  {
    "__docId__": 754,
    "kind": "test",
    "name": "describe375",
    "testId": 375,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe375",
    "access": null,
    "description": "#decodeContents",
    "lineNumber": 47,
    "testTargets": [
      "XMLTransformer#decodeContents"
    ]
  },
  {
    "__docId__": 755,
    "kind": "test",
    "name": "it376",
    "testId": 376,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe375",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe375.it376",
    "access": null,
    "description": "should forward errors",
    "lineNumber": 48
  },
  {
    "__docId__": 756,
    "kind": "test",
    "name": "it377",
    "testId": 377,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe375",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe375.it377",
    "access": null,
    "description": "should return object for valid xml",
    "lineNumber": 54
  },
  {
    "__docId__": 757,
    "kind": "test",
    "name": "describe378",
    "testId": 378,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe378",
    "access": null,
    "description": "#encodeContents",
    "lineNumber": 77,
    "testTargets": [
      "XMLTransformer#encodeContents"
    ]
  },
  {
    "__docId__": 758,
    "kind": "test",
    "name": "it379",
    "testId": 379,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe378",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe378.it379",
    "access": null,
    "description": "should forward errors",
    "lineNumber": 78
  },
  {
    "__docId__": 759,
    "kind": "test",
    "name": "context380",
    "testId": 380,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe378",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe378.context380",
    "access": null,
    "description": "when direction is FromDB",
    "lineNumber": 83
  },
  {
    "__docId__": 760,
    "kind": "test",
    "name": "it381",
    "testId": 381,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe378.context380",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe378.context380.it381",
    "access": null,
    "description": "should indent with double space",
    "lineNumber": 84
  },
  {
    "__docId__": 761,
    "kind": "test",
    "name": "context382",
    "testId": 382,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe378",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe378.context382",
    "access": null,
    "description": "when direction is FromFilesytem",
    "lineNumber": 92
  },
  {
    "__docId__": 762,
    "kind": "test",
    "name": "it383",
    "testId": 383,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe378.context382",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe378.context382.it383",
    "access": null,
    "description": "should indent with single space",
    "lineNumber": 93
  },
  {
    "__docId__": 763,
    "kind": "test",
    "name": "it384",
    "testId": 384,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe378",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe378.it384",
    "access": null,
    "description": "should support forced CDATA",
    "lineNumber": 99
  },
  {
    "__docId__": 764,
    "kind": "test",
    "name": "it385",
    "testId": 385,
    "memberof": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe378",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/lib/transform/XMLTransformer.spec.js~describe367.describe378.it385",
    "access": null,
    "description": "should not double escape forced CDATA",
    "lineNumber": 113
  },
  {
    "__docId__": 765,
    "kind": "testFile",
    "name": "test/src/maintenance.spec.js",
    "content": "import Session from '../../src/lib/server/Session';\n\nprocess.on('unhandledRejection', e => {\n  process.emit('error', e);\n});\n\nbeforeEach(function() {\n  return Session.closeOpen()\n    .then(results => {\n      if (results.length > 0) {\n        // eslint-disable-next-line no-console\n        console.log('Maintenance: Closed', results.length, 'open session');\n      }\n    });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/maintenance.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 766,
    "kind": "testFile",
    "name": "test/src/tasks/pull.spec.js",
    "content": "import expect from 'unexpected';\nimport proxyquire from 'proxyquire';\n\nimport { Stream } from 'stream';\nimport { ctor as throughStreamClass } from 'through2';\nimport NodeId from '../../../src/lib/server/NodeId';\n\nconst pull = proxyquire('../../../src/tasks/pull', {\n  '../lib/server/NodeStream': {\n    _esModule: true,\n    default: class StubStream extends throughStreamClass({ objectMode: true }) {\n      constructor() {\n        super();\n\n        this.push({\n          nodeId: new NodeId('AGENT.DISPLAYS.Main'),\n          typeDefinition: new NodeId('VariableTypes.ATVISE.Display'),\n        });\n\n        this.end();\n      }\n    },\n  },\n  '../lib/gulp/PullStream': {\n    _esModule: true,\n    default: class PStream {\n      constructor(readStream) {\n        return readStream;\n      }\n    },\n  },\n}).default;\n\n/** @test {pull} */\ndescribe('pull', function() {\n  it('should return a stream', function(done) {\n    const stream = pull();\n\n    expect(stream, 'to be a', Stream);\n\n    stream.on('data', () => {}); // Unpipe readable stream\n    stream.once('end', done);\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/tasks/pull.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 767,
    "kind": "test",
    "name": "describe386",
    "testId": 386,
    "memberof": "test/src/tasks/pull.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/tasks/pull.spec.js~describe386",
    "access": null,
    "description": "pull",
    "lineNumber": 35,
    "testTargets": [
      "pull"
    ]
  },
  {
    "__docId__": 768,
    "kind": "test",
    "name": "it387",
    "testId": 387,
    "memberof": "test/src/tasks/pull.spec.js~describe386",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/pull.spec.js~describe386.it387",
    "access": null,
    "description": "should return a stream",
    "lineNumber": 36
  },
  {
    "__docId__": 769,
    "kind": "testFile",
    "name": "test/src/tasks/push.spec.js",
    "content": "import { Stream } from 'stream';\nimport { Buffer } from 'buffer';\nimport proxyquire from 'proxyquire';\nimport File from 'vinyl';\nimport through from 'through2';\nimport expect from '../../expect';\n\nconst push = proxyquire('../../../src/tasks/push', {\n  gulp: {\n    src: () => {\n      const stream = through.obj();\n\n      stream.push(new File({\n        path: 'AGENT/OBJECTS/Variable.bool',\n        contents: Buffer.from('true'),\n      }));\n\n      stream.end();\n\n      return stream;\n    },\n  },\n  '../lib/gulp/PushStream': {\n    _esModule: true,\n    default: class WStream {\n      constructor(srcStream) {\n        return srcStream;\n      }\n    },\n  },\n}).default;\n\n/** @test {push} */\ndescribe('push', function() {\n  it('should return a stream', function(done) {\n    const stream = push();\n    expect(stream, 'to be a', Stream);\n\n    stream.on('data', () => {}); // Unpipe readable stream\n    stream.once('end', done);\n  });\n});\n\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/tasks/push.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 770,
    "kind": "test",
    "name": "describe388",
    "testId": 388,
    "memberof": "test/src/tasks/push.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/tasks/push.spec.js~describe388",
    "access": null,
    "description": "push",
    "lineNumber": 34,
    "testTargets": [
      "push"
    ]
  },
  {
    "__docId__": 771,
    "kind": "test",
    "name": "it389",
    "testId": 389,
    "memberof": "test/src/tasks/push.spec.js~describe388",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/push.spec.js~describe388.it389",
    "access": null,
    "description": "should return a stream",
    "lineNumber": 35
  },
  {
    "__docId__": 772,
    "kind": "testFile",
    "name": "test/src/tasks/watch.spec.js",
    "content": "import Emitter from 'events';\nimport proxyquire from 'proxyquire';\nimport { obj as createThroughStream } from 'through2';\nimport { spy, stub } from 'sinon';\nimport expect from '../../expect';\nimport watch, { WatchTask } from '../../../src/tasks/watch';\n\nclass TestEmitter extends Emitter {\n\n  constructor(name, payload = true, delay = 1) {\n    super();\n\n    setTimeout(() => this.emit(name, payload), delay);\n  }\n\n}\n\nclass NoopStream {\n  constructor(otherStream) {\n    return otherStream.pipe(createThroughStream()).on('data', () => {});\n  }\n}\n\nconst stubGulp = {\n  src(path, options) {\n    const stream = createThroughStream();\n    stream.write(Object.assign({}, options, { path, nodeId: 'source node id' }));\n    stream.end();\n\n    return stream;\n  },\n};\n\nconst stubModule = proxyquire('../../../src/tasks/watch', {\n  sane: () => new TestEmitter('ready', 1),\n  'browser-sync': {\n    create() {\n      return {\n        init() {\n          this.emitter.emit('service:running', true);\n        },\n        emitter: new TestEmitter(),\n        reload() {},\n      };\n    },\n  },\n  gulp: stubGulp,\n  '../util/fs': {\n    validateDirectoryExists: () => Promise.resolve(true),\n  },\n  '../lib/server/Watcher': {\n    default: class extends TestEmitter {\n      constructor() { super('ready', 1); }\n    },\n  },\n  '../lib/gulp/PullStream': { default: NoopStream },\n  '../lib/gulp/PushStream': { default: NoopStream },\n});\n\nconst StubWatchTask = stubModule.WatchTask;\nconst stubWatch = stubModule.default;\n\n/** @test {WatchTask} */\ndescribe('WatchTask', function() {\n  /** @test {WatchTask#constructor} */\n  describe('#constructor', function() {\n    it('should create a new browser-sync instance', function() {\n      expect((new WatchTask()).browserSyncInstance, 'to be defined');\n    });\n  });\n\n  /** @test {WatchTask#_waitForWatcher} */\n  describe('#_waitForWatcher', function() {\n    it('should be rejected on error', function() {\n      const task = new WatchTask();\n      const fakeWatcher = new TestEmitter('error', new Error('Test error'));\n\n      return expect(task._waitForWatcher(fakeWatcher), 'to be rejected with', 'Test error');\n    });\n\n    it('should be fulfilled on ready', function() {\n      const task = new WatchTask();\n      const fakeWatcher = new TestEmitter('ready');\n\n      return expect(task._waitForWatcher(fakeWatcher), 'to be fulfilled');\n    });\n  });\n\n  /** @test {WatchTask#startFileWatcher} */\n  describe('#startFileWatcher', function() {\n    it('should fail if directory does not exist', function() {\n      class FailingTask extends WatchTask { get directoryToWatch() { return './does-not-exist'; } }\n\n      const task = new FailingTask();\n\n      return expect(task.startFileWatcher(), 'to be rejected with', /does not exist/);\n    });\n\n    it('should fail if fs#stat fails', function() {\n      class FailingTask extends WatchTask { get directoryToWatch() { return 13; } }\n\n      const task = new FailingTask();\n\n      return expect(task.startFileWatcher(), 'to be rejected with', /Path must be a string/);\n    });\n\n    it('should call #_waitForWatcher', function() {\n      const task = new StubWatchTask();\n      spy(task, '_waitForWatcher');\n\n      return expect(task.startFileWatcher(), 'to be fulfilled')\n        .then(() => expect(task._waitForWatcher, 'was called once'));\n    });\n  });\n\n  /** @test {WatchTask#startServerWatcher} */\n  describe('#startServerWatcher', function() {\n    it('should call #_waitForWatcher', function() {\n      const task = new StubWatchTask();\n      spy(task, '_waitForWatcher');\n\n      return expect(task.startServerWatcher(), 'to be fulfilled')\n        .then(() => expect(task._waitForWatcher, 'was called once'));\n    });\n  });\n\n  /** @test {WatchTask#initBrowserSync} */\n  describe('#initBrowserSync', function() {\n    it('should call BrowserSync#init', function() {\n      const task = new WatchTask();\n      stub(task.browserSyncInstance, 'init').returns(true);\n\n      task.initBrowserSync();\n      expect(task.browserSyncInstance.init, 'was called once');\n    });\n  });\n\n  /** @test {WatchTask#handleFileChange} */\n  describe('#handleFileChange', function() {\n    it('should not do anything when lately pulled files change', function() {\n      const task = new StubWatchTask();\n\n      return expect(task.handleFileChange('./path.file', './src', { mtime: new Date(-10000) }),\n        'to be fulfilled with', false);\n    });\n\n    it('should not do anything while pulling', function() {\n      const task = new StubWatchTask();\n      task._pulling = true;\n\n      return expect(task.handleFileChange('./path.file', './src', { mtime: new Date(Date.now()) }),\n        'to be fulfilled with', false);\n    });\n\n    it('should push changed files', function() {\n      const task = new StubWatchTask();\n\n      return expect(task.handleFileChange('./path.file', './src', { mtime: new Date(Date.now()) }),\n        'to be fulfilled with', true);\n    });\n\n    it('should reload browser', function() {\n      const task = new StubWatchTask();\n      spy(task.browserSyncInstance, 'reload');\n\n      return expect(task.handleFileChange('./path.file', './src', { mtime: new Date(Date.now()) }),\n        'to be fulfilled with', true)\n        .then(() => expect(task.browserSyncInstance.reload, 'was called once'));\n    });\n  });\n\n  /** @test {WatchTask#handleServerChange} */\n  describe('#handleServerChange', function() {\n    it('should do nothing while pushing', function() {\n      const task = new StubWatchTask();\n      task._pushing = true;\n\n      return expect(task.handleServerChange({}), 'to be fulfilled with', false);\n    });\n\n    it('should do nothing when handling node that was just pushed', function() {\n      const task = new StubWatchTask();\n      task._lastPushed = 'ns=13;s=Test';\n\n      return expect(task.handleServerChange({ nodeId: task._lastPushed }),\n        'to be fulfilled with', false);\n    });\n\n    it('should pull changed nodes', function() {\n      const task = new StubWatchTask();\n\n      return expect(task.handleServerChange({ nodeId: 'ns=13;s=Test', mtime: new Date() }),\n        'to be fulfilled with', true);\n    });\n  });\n\n  /** @test {WatchTask#run} */\n  describe('#run', function() {\n    it('should fail if file watcher errors', function() {\n      const task = new StubWatchTask();\n      task.startFileWatcher = () => Promise.reject(new Error('Test'));\n\n      return expect(task.run(), 'to be rejected with', 'Test');\n    });\n\n    it('should fail if server watcher errors', function() {\n      const task = new StubWatchTask();\n      task.startServerWatcher = () => Promise.reject(new Error('Test'));\n\n      return expect(task.run(), 'to be rejected with', 'Test');\n    });\n\n    it('should init browser sync', function() {\n      const task = new StubWatchTask();\n      stub(task.browserSyncInstance, 'init').callsFake(() => {\n        task.browserSyncInstance.emitter.emit('service:running', true);\n      });\n\n      return expect(task.run(), 'to be fulfilled')\n        .then(() => expect(task.browserSyncInstance.init, 'was called once'));\n    });\n  });\n});\n\n/** @test {watch} */\ndescribe('watch', function() {\n  it('should export a function', function() {\n    expect(watch, 'to be a', 'function');\n  });\n\n  it('should resolve once watchers are ready', function() {\n    return expect(stubWatch(), 'to be fulfilled');\n  });\n\n  it('should export a description', function() {\n    expect(watch.description, 'to be defined');\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/tasks/watch.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 773,
    "kind": "test",
    "name": "describe390",
    "testId": 390,
    "memberof": "test/src/tasks/watch.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390",
    "access": null,
    "description": "WatchTask",
    "lineNumber": 64,
    "testTargets": [
      "WatchTask"
    ]
  },
  {
    "__docId__": 774,
    "kind": "test",
    "name": "describe391",
    "testId": 391,
    "memberof": "test/src/tasks/watch.spec.js~describe390",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe391",
    "access": null,
    "description": "#constructor",
    "lineNumber": 66,
    "testTargets": [
      "WatchTask#constructor"
    ]
  },
  {
    "__docId__": 775,
    "kind": "test",
    "name": "it392",
    "testId": 392,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe391",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe391.it392",
    "access": null,
    "description": "should create a new browser-sync instance",
    "lineNumber": 67
  },
  {
    "__docId__": 776,
    "kind": "test",
    "name": "describe393",
    "testId": 393,
    "memberof": "test/src/tasks/watch.spec.js~describe390",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe393",
    "access": null,
    "description": "#_waitForWatcher",
    "lineNumber": 73,
    "testTargets": [
      "WatchTask#_waitForWatcher"
    ]
  },
  {
    "__docId__": 777,
    "kind": "test",
    "name": "it394",
    "testId": 394,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe393",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe393.it394",
    "access": null,
    "description": "should be rejected on error",
    "lineNumber": 74
  },
  {
    "__docId__": 778,
    "kind": "test",
    "name": "it395",
    "testId": 395,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe393",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe393.it395",
    "access": null,
    "description": "should be fulfilled on ready",
    "lineNumber": 81
  },
  {
    "__docId__": 779,
    "kind": "test",
    "name": "describe396",
    "testId": 396,
    "memberof": "test/src/tasks/watch.spec.js~describe390",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe396",
    "access": null,
    "description": "#startFileWatcher",
    "lineNumber": 90,
    "testTargets": [
      "WatchTask#startFileWatcher"
    ]
  },
  {
    "__docId__": 780,
    "kind": "test",
    "name": "it397",
    "testId": 397,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe396",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe396.it397",
    "access": null,
    "description": "should fail if directory does not exist",
    "lineNumber": 91
  },
  {
    "__docId__": 781,
    "kind": "test",
    "name": "it398",
    "testId": 398,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe396",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe396.it398",
    "access": null,
    "description": "should fail if fs#stat fails",
    "lineNumber": 99
  },
  {
    "__docId__": 782,
    "kind": "test",
    "name": "it399",
    "testId": 399,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe396",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe396.it399",
    "access": null,
    "description": "should call #_waitForWatcher",
    "lineNumber": 107
  },
  {
    "__docId__": 783,
    "kind": "test",
    "name": "describe400",
    "testId": 400,
    "memberof": "test/src/tasks/watch.spec.js~describe390",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe400",
    "access": null,
    "description": "#startServerWatcher",
    "lineNumber": 117,
    "testTargets": [
      "WatchTask#startServerWatcher"
    ]
  },
  {
    "__docId__": 784,
    "kind": "test",
    "name": "it401",
    "testId": 401,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe400",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe400.it401",
    "access": null,
    "description": "should call #_waitForWatcher",
    "lineNumber": 118
  },
  {
    "__docId__": 785,
    "kind": "test",
    "name": "describe402",
    "testId": 402,
    "memberof": "test/src/tasks/watch.spec.js~describe390",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe402",
    "access": null,
    "description": "#initBrowserSync",
    "lineNumber": 128,
    "testTargets": [
      "WatchTask#initBrowserSync"
    ]
  },
  {
    "__docId__": 786,
    "kind": "test",
    "name": "it403",
    "testId": 403,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe402",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe402.it403",
    "access": null,
    "description": "should call BrowserSync#init",
    "lineNumber": 129
  },
  {
    "__docId__": 787,
    "kind": "test",
    "name": "describe404",
    "testId": 404,
    "memberof": "test/src/tasks/watch.spec.js~describe390",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe404",
    "access": null,
    "description": "#handleFileChange",
    "lineNumber": 139,
    "testTargets": [
      "WatchTask#handleFileChange"
    ]
  },
  {
    "__docId__": 788,
    "kind": "test",
    "name": "it405",
    "testId": 405,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe404",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe404.it405",
    "access": null,
    "description": "should not do anything when lately pulled files change",
    "lineNumber": 140
  },
  {
    "__docId__": 789,
    "kind": "test",
    "name": "it406",
    "testId": 406,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe404",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe404.it406",
    "access": null,
    "description": "should not do anything while pulling",
    "lineNumber": 147
  },
  {
    "__docId__": 790,
    "kind": "test",
    "name": "it407",
    "testId": 407,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe404",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe404.it407",
    "access": null,
    "description": "should push changed files",
    "lineNumber": 155
  },
  {
    "__docId__": 791,
    "kind": "test",
    "name": "it408",
    "testId": 408,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe404",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe404.it408",
    "access": null,
    "description": "should reload browser",
    "lineNumber": 162
  },
  {
    "__docId__": 792,
    "kind": "test",
    "name": "describe409",
    "testId": 409,
    "memberof": "test/src/tasks/watch.spec.js~describe390",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe409",
    "access": null,
    "description": "#handleServerChange",
    "lineNumber": 173,
    "testTargets": [
      "WatchTask#handleServerChange"
    ]
  },
  {
    "__docId__": 793,
    "kind": "test",
    "name": "it410",
    "testId": 410,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe409",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe409.it410",
    "access": null,
    "description": "should do nothing while pushing",
    "lineNumber": 174
  },
  {
    "__docId__": 794,
    "kind": "test",
    "name": "it411",
    "testId": 411,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe409",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe409.it411",
    "access": null,
    "description": "should do nothing when handling node that was just pushed",
    "lineNumber": 181
  },
  {
    "__docId__": 795,
    "kind": "test",
    "name": "it412",
    "testId": 412,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe409",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe409.it412",
    "access": null,
    "description": "should pull changed nodes",
    "lineNumber": 189
  },
  {
    "__docId__": 796,
    "kind": "test",
    "name": "describe413",
    "testId": 413,
    "memberof": "test/src/tasks/watch.spec.js~describe390",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe413",
    "access": null,
    "description": "#run",
    "lineNumber": 198,
    "testTargets": [
      "WatchTask#run"
    ]
  },
  {
    "__docId__": 797,
    "kind": "test",
    "name": "it414",
    "testId": 414,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe413",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe413.it414",
    "access": null,
    "description": "should fail if file watcher errors",
    "lineNumber": 199
  },
  {
    "__docId__": 798,
    "kind": "test",
    "name": "it415",
    "testId": 415,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe413",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe413.it415",
    "access": null,
    "description": "should fail if server watcher errors",
    "lineNumber": 206
  },
  {
    "__docId__": 799,
    "kind": "test",
    "name": "it416",
    "testId": 416,
    "memberof": "test/src/tasks/watch.spec.js~describe390.describe413",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe390.describe413.it416",
    "access": null,
    "description": "should init browser sync",
    "lineNumber": 213
  },
  {
    "__docId__": 800,
    "kind": "test",
    "name": "describe417",
    "testId": 417,
    "memberof": "test/src/tasks/watch.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe417",
    "access": null,
    "description": "watch",
    "lineNumber": 226,
    "testTargets": [
      "watch"
    ]
  },
  {
    "__docId__": 801,
    "kind": "test",
    "name": "it418",
    "testId": 418,
    "memberof": "test/src/tasks/watch.spec.js~describe417",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe417.it418",
    "access": null,
    "description": "should export a function",
    "lineNumber": 227
  },
  {
    "__docId__": 802,
    "kind": "test",
    "name": "it419",
    "testId": 419,
    "memberof": "test/src/tasks/watch.spec.js~describe417",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe417.it419",
    "access": null,
    "description": "should resolve once watchers are ready",
    "lineNumber": 231
  },
  {
    "__docId__": 803,
    "kind": "test",
    "name": "it420",
    "testId": 420,
    "memberof": "test/src/tasks/watch.spec.js~describe417",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/tasks/watch.spec.js~describe417.it420",
    "access": null,
    "description": "should export a description",
    "lineNumber": 235
  },
  {
    "__docId__": 804,
    "kind": "testFile",
    "name": "test/src/transform/DisplayTransformer.spec.js",
    "content": "import { Buffer } from 'buffer';\nimport File from 'vinyl';\nimport { stub } from 'sinon';\nimport expect from '../../expect';\n\nimport AtviseFile from '../../../src/lib/server/AtviseFile';\nimport { TransformDirection } from '../../../src/lib/transform/Transformer';\nimport DisplayTransformer from '../../../src/transform/DisplayTransformer';\n\n/** @test {DisplayTransformer} */\ndescribe('DisplayTransformer', function() {\n  const nonDisplayFile = { isDisplay: false };\n\n  /** @test {DisplayTransformer#shouldBeTransformed} */\n  describe('#shouldBeTransformed', function() {\n    it('should return false for non-display files', function() {\n      expect(DisplayTransformer.prototype.shouldBeTransformed(nonDisplayFile), 'to equal', false);\n    });\n  });\n\n  /** @test {DisplayTransformer#transformFromDB} */\n  describe('#transformFromDB', function() {\n    function writeXMLToDisplayTransformer(xmlString) {\n      const transformer = new DisplayTransformer({ direction: TransformDirection.FromDB });\n      const file = new AtviseFile({\n        path: 'AGENT/DISPLAYS/Main.display.xml',\n        contents: Buffer.from(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n${xmlString}`),\n      });\n\n      const data = [];\n      transformer.on('data', d => data.push(d));\n\n      const promise = new Promise((resolve, reject) => {\n        transformer.once('error', err => reject(err));\n        transformer.once('end', () => resolve(data));\n      });\n\n      transformer.write(file);\n      transformer.end();\n\n      return promise;\n    }\n\n    it('should forward parse errors', function() {\n      return expect(writeXMLToDisplayTransformer('invalid xml'),\n        'to be rejected with', /Text data outside of root node/);\n    });\n\n    it('should error with invalid xml', function() {\n      return expect(writeXMLToDisplayTransformer(''),\n        'to be rejected with', /No `svg` tag/);\n    });\n\n    function expectFileContents(xmlString, filter) {\n      return expect(writeXMLToDisplayTransformer(xmlString), 'to be fulfilled')\n        .then(resultingFiles => {\n          const _files = resultingFiles.filter(filter);\n          try {\n            expect(_files, 'to have length', 1);\n          } catch (e) {\n            throw new Error('Error in expectFileContents: filter returned multiple files');\n          }\n\n          const file = _files[0];\n\n          return expect(file.contents, 'when decoded as', 'utf-8');\n        });\n    }\n\n    function expectConfig(xmlString) {\n      return expectFileContents(xmlString, file => file.extname === '.json')\n        .then(string => {\n          let obj;\n          expect(() => (obj = JSON.parse(string)), 'not to throw');\n          return obj;\n        });\n    }\n\n    it('should store empty config for empty display', function() {\n      return expectConfig('<svg></svg>')\n        .then(config => {\n          expect(config, 'to equal', {});\n        });\n    });\n\n    it('should store dependencies in config when referenced as \"src\"', function() {\n      return expectConfig(`<svg>\n  <script src=\"path/to/dependency.js\"></script>\n</svg>`)\n        .then(config => {\n          expect(config.dependencies, 'to be defined');\n          expect(config.dependencies, 'to have length', 1);\n          expect(config.dependencies[0], 'to equal', 'path/to/dependency.js');\n        });\n    });\n\n    it('should store dependencies in config when referenced as \"xlink:href\"', function() {\n      return expectConfig(`<svg>\n  <script xlink:href=\"path/to/dependency.js\"></script>\n</svg>`)\n        .then(config => {\n          expect(config.dependencies, 'to be defined');\n          expect(config.dependencies, 'to have length', 1);\n          expect(config.dependencies[0], 'to equal', 'path/to/dependency.js');\n        });\n    });\n\n    it('should store multiple dependencies in config', function() {\n      return expectConfig(`<svg>\n  <script src=\"path/to/dependency1.js\"></script>\n  <script src=\"path/to/dependency2.js\"></script>\n</svg>`)\n        .then(config => {\n          expect(config.dependencies, 'to be defined');\n          expect(config.dependencies, 'to have length', 2);\n          expect(config.dependencies[0], 'to equal', 'path/to/dependency1.js');\n          expect(config.dependencies[1], 'to equal', 'path/to/dependency2.js');\n        });\n    });\n\n    context('when display contains inline script', function() {\n      const script = 'console.log(\"called\");';\n\n      it('should be stored when given with attributes', function() {\n        return expectFileContents(`<svg>\n  <script type=\"text/javascript\">${script}</script>\n</svg>`, file => file.extname === '.js')\n          .then(string => {\n            expect(string, 'to equal', script);\n          });\n      });\n\n      it('should be stored when given without attributes', function() {\n        return expectFileContents(`<svg>\n  <script>${script}</script>\n</svg>`, file => file.extname === '.js')\n          .then(string => {\n            expect(string, 'to equal', script);\n          });\n      });\n\n      it('should store empty inline scripts in separate file', function() {\n        return expectFileContents(`<svg>\n  <script type=\"text/javascript\"></script>\n</svg>`, file => file.extname === '.js')\n          .then(string => {\n            expect(string, 'to equal', '');\n          });\n      });\n    });\n\n    context('when display contains metadata', function() {\n      it('should work without parameters', function() {\n        return expectConfig(`<svg>\n  <metadata></metadata>\n</svg>`)\n          .then(config => {\n            expect(config, 'to be defined');\n          });\n      });\n\n      it('should store parameters', function() {\n        return expectConfig(`<svg>\n  <metadata>\n    <atv:parameter behavior=\"mandatory\" desc=\"base\" valuetype=\"address\" name=\"base\"/>\n    <atv:parameter behavior=\"optional\" desc=\"state label\" substitute=\"$LABEL$\" valuetype=\"trstring\"\n      defaultvalue=\"T{Switched on}\" name=\"labelOn\"/>\n  </metadata>\n</svg>`)\n          .then(config => {\n            expect(config.parameters, 'to be defined');\n            expect(config.parameters, 'to be a', Array);\n            expect(config.parameters, 'to have length', 2);\n            expect(config.parameters[0], 'to equal', {\n              name: 'base',\n              behavior: 'mandatory',\n              desc: 'base',\n              valuetype: 'address',\n            });\n            expect(config.parameters[1], 'to equal', {\n              name: 'labelOn',\n              behavior: 'optional',\n              desc: 'state label',\n              valuetype: 'trstring',\n              defaultvalue: 'T{Switched on}',\n              substitute: '$LABEL$',\n            });\n          });\n      });\n    });\n\n    context('when encoding fails', function() {\n      beforeEach(() => stub(DisplayTransformer.prototype, 'encodeContents',\n        (obj, cb) => cb(new Error('Encode error'))));\n      afterEach(() => DisplayTransformer.prototype.encodeContents.restore());\n\n      it('should forward encode error', function() {\n        return expect(writeXMLToDisplayTransformer('<svg></svg>'),\n          'to be rejected with', 'Encode error');\n      });\n    });\n  });\n\n  /** @test {DisplayTransformer#createCombinedFile} */\n  describe('#createCombinedFile', function() {\n    function createDisplayWithFileContents(contents) {\n      let lastKey;\n      const files = Object.keys(contents).reduce((prev, ext) => {\n        const result = prev;\n\n        result[ext] = new File({\n          path: `path/to/test.display/test${ext}`,\n          contents: Buffer.from(contents[ext]),\n        });\n\n        lastKey = ext;\n        return result;\n      }, {});\n\n      const transformer = new DisplayTransformer({ direction: TransformDirection.FromFilesystem });\n\n      return cb => transformer.createCombinedFile(files, files[lastKey], cb);\n    }\n\n    it('should fail with invalid config file', function() {\n      return expect(createDisplayWithFileContents({\n        '.json': '',\n      }), 'to call the callback with error', /Error parsing JSON/);\n    });\n\n    it('should fail without SVG file', function() {\n      return expect(createDisplayWithFileContents({\n        '.json': '{}',\n      }), 'to call the callback with error', /No display SVG in/);\n    });\n\n    it('should fail with invalid SVG', function() {\n      return expect(createDisplayWithFileContents({\n        '.svg': 'invalid XML',\n      }), 'to call the callback with error', /Non-whitespace before first tag/);\n    });\n\n    it('should fail without `svg` tag', function() {\n      return expect(createDisplayWithFileContents({\n        '.svg': '<root></root>',\n      }), 'to call the callback with error', /Error parsing display SVG: No `svg` tag/);\n    });\n\n    function expectDisplayWithFileContentToHaveXML(contents, xmlString) {\n      return expect(createDisplayWithFileContents(contents), 'to call the callback')\n        .then(args => {\n          expect(args[0], 'to be falsy');\n          expect(args[1], 'to be a', File);\n          expect(args[1].contents, 'to be a', Buffer);\n\n          return expect(args[1].contents.toString(),\n            'to equal', `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n${xmlString}`.replace(/\\r?\\n|\\r/g, '\\r\\n'));\n        });\n    }\n\n    it('should work with empty svg tag', function() {\n      return expectDisplayWithFileContentToHaveXML({\n        '.svg': '<svg></svg>',\n      }, '<svg/>');\n    });\n\n    it('should inline script', function() {\n      return expectDisplayWithFileContentToHaveXML({\n        '.svg': '<svg><rect></rect></svg>',\n        '.js': 'code()',\n      }, `<svg>\n <rect/>\n <script type=\"text/ecmascript\"><![CDATA[code()]]></script>\n</svg>`);\n    });\n\n    it('should link dependencies', function() {\n      return expectDisplayWithFileContentToHaveXML({\n        '.svg': '<svg><rect></rect></svg>',\n        '.json': '{ \"dependencies\": [\"path/to/dep.js\"] }',\n      }, `<svg>\n <rect/>\n <script xlink:href=\"path/to/dep.js\"/>\n</svg>`);\n    });\n\n    it('should work without empty parameters config', function() {\n      return expectDisplayWithFileContentToHaveXML({\n        '.svg': '<svg><rect></rect></svg>',\n        '.json': '{ \"parameters\": [] }',\n      }, `<svg>\n <rect/>\n</svg>`);\n    });\n\n    it('should reuse existant metadata section', function() {\n      return expectDisplayWithFileContentToHaveXML({\n        '.svg': `<svg>\n  <metadata>\n    <atv:gridconfig height=\"20\" width=\"20\" enabled=\"false\" gridstyle=\"lines\"/>\n  </metadata>\n</svg>`,\n        '.json': '{ \"parameters\": [{ \"name\": \"test\" }] }',\n      }, `<svg>\n <metadata>\n  <atv:gridconfig height=\"20\" width=\"20\" enabled=\"false\" gridstyle=\"lines\"/>\n  <atv:parameter name=\"test\"/>\n </metadata>\n</svg>`);\n    });\n\n    it('should create metadata section if omitted', function() {\n      return expectDisplayWithFileContentToHaveXML({\n        '.svg': '<svg></svg>',\n        '.json': '{ \"parameters\": [{ \"name\": \"test\" }] }',\n      }, `<svg>\n <metadata>\n  <atv:parameter name=\"test\"/>\n </metadata>\n</svg>`);\n    });\n\n    it('should keep parameters specified in SVG', function() {\n      return expectDisplayWithFileContentToHaveXML({\n        '.svg': `<svg>\n  <metadata>\n    <atv:parameter name=\"existant\"/>\n  </metadata>\n</svg>`,\n        '.json': '{ \"parameters\": [{ \"name\": \"test\" }] }',\n      }, `<svg>\n <metadata>\n  <atv:parameter name=\"existant\"/>\n  <atv:parameter name=\"test\"/>\n </metadata>\n</svg>`);\n    });\n\n    context('when encoding fails', function() {\n      beforeEach(() => stub(DisplayTransformer.prototype, 'encodeContents',\n        (obj, cb) => cb(new Error('Encode error'))));\n      afterEach(() => DisplayTransformer.prototype.encodeContents.restore());\n\n      it('should forward encode error', function() {\n        return expect(createDisplayWithFileContents({\n          '.svg': '<svg><rect></rect></svg>',\n        }), 'to call the callback with error', 'Encode error');\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/transform/DisplayTransformer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 805,
    "kind": "test",
    "name": "describe421",
    "testId": 421,
    "memberof": "test/src/transform/DisplayTransformer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421",
    "access": null,
    "description": "DisplayTransformer",
    "lineNumber": 11,
    "testTargets": [
      "DisplayTransformer"
    ]
  },
  {
    "__docId__": 806,
    "kind": "test",
    "name": "describe422",
    "testId": 422,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe422",
    "access": null,
    "description": "#shouldBeTransformed",
    "lineNumber": 15,
    "testTargets": [
      "DisplayTransformer#shouldBeTransformed"
    ]
  },
  {
    "__docId__": 807,
    "kind": "test",
    "name": "it423",
    "testId": 423,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe422",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe422.it423",
    "access": null,
    "description": "should return false for non-display files",
    "lineNumber": 16
  },
  {
    "__docId__": 808,
    "kind": "test",
    "name": "describe424",
    "testId": 424,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424",
    "access": null,
    "description": "#transformFromDB",
    "lineNumber": 22,
    "testTargets": [
      "DisplayTransformer#transformFromDB"
    ]
  },
  {
    "__docId__": 809,
    "kind": "test",
    "name": "it425",
    "testId": 425,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.it425",
    "access": null,
    "description": "should forward parse errors",
    "lineNumber": 45
  },
  {
    "__docId__": 810,
    "kind": "test",
    "name": "it426",
    "testId": 426,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.it426",
    "access": null,
    "description": "should error with invalid xml",
    "lineNumber": 50
  },
  {
    "__docId__": 811,
    "kind": "test",
    "name": "it427",
    "testId": 427,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.it427",
    "access": null,
    "description": "should store empty config for empty display",
    "lineNumber": 80
  },
  {
    "__docId__": 812,
    "kind": "test",
    "name": "it428",
    "testId": 428,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.it428",
    "access": null,
    "description": "should store dependencies in config when referenced as \"src\"",
    "lineNumber": 87
  },
  {
    "__docId__": 813,
    "kind": "test",
    "name": "it429",
    "testId": 429,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.it429",
    "access": null,
    "description": "should store dependencies in config when referenced as \"xlink:href\"",
    "lineNumber": 98
  },
  {
    "__docId__": 814,
    "kind": "test",
    "name": "it430",
    "testId": 430,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.it430",
    "access": null,
    "description": "should store multiple dependencies in config",
    "lineNumber": 109
  },
  {
    "__docId__": 815,
    "kind": "test",
    "name": "context431",
    "testId": 431,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.context431",
    "access": null,
    "description": "when display contains inline script",
    "lineNumber": 122
  },
  {
    "__docId__": 816,
    "kind": "test",
    "name": "it432",
    "testId": 432,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.context431",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.context431.it432",
    "access": null,
    "description": "should be stored when given with attributes",
    "lineNumber": 125
  },
  {
    "__docId__": 817,
    "kind": "test",
    "name": "it433",
    "testId": 433,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.context431",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.context431.it433",
    "access": null,
    "description": "should be stored when given without attributes",
    "lineNumber": 134
  },
  {
    "__docId__": 818,
    "kind": "test",
    "name": "it434",
    "testId": 434,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.context431",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.context431.it434",
    "access": null,
    "description": "should store empty inline scripts in separate file",
    "lineNumber": 143
  },
  {
    "__docId__": 819,
    "kind": "test",
    "name": "context435",
    "testId": 435,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.context435",
    "access": null,
    "description": "when display contains metadata",
    "lineNumber": 153
  },
  {
    "__docId__": 820,
    "kind": "test",
    "name": "it436",
    "testId": 436,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.context435",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.context435.it436",
    "access": null,
    "description": "should work without parameters",
    "lineNumber": 154
  },
  {
    "__docId__": 821,
    "kind": "test",
    "name": "it437",
    "testId": 437,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.context435",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.context435.it437",
    "access": null,
    "description": "should store parameters",
    "lineNumber": 163
  },
  {
    "__docId__": 822,
    "kind": "test",
    "name": "context438",
    "testId": 438,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.context438",
    "access": null,
    "description": "when encoding fails",
    "lineNumber": 193
  },
  {
    "__docId__": 823,
    "kind": "test",
    "name": "it439",
    "testId": 439,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.context438",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe424.context438.it439",
    "access": null,
    "description": "should forward encode error",
    "lineNumber": 198
  },
  {
    "__docId__": 824,
    "kind": "test",
    "name": "describe440",
    "testId": 440,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440",
    "access": null,
    "description": "#createCombinedFile",
    "lineNumber": 206,
    "testTargets": [
      "DisplayTransformer#createCombinedFile"
    ]
  },
  {
    "__docId__": 825,
    "kind": "test",
    "name": "it441",
    "testId": 441,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440.it441",
    "access": null,
    "description": "should fail with invalid config file",
    "lineNumber": 226
  },
  {
    "__docId__": 826,
    "kind": "test",
    "name": "it442",
    "testId": 442,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440.it442",
    "access": null,
    "description": "should fail without SVG file",
    "lineNumber": 232
  },
  {
    "__docId__": 827,
    "kind": "test",
    "name": "it443",
    "testId": 443,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440.it443",
    "access": null,
    "description": "should fail with invalid SVG",
    "lineNumber": 238
  },
  {
    "__docId__": 828,
    "kind": "test",
    "name": "it444",
    "testId": 444,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440.it444",
    "access": null,
    "description": "should fail without `svg` tag",
    "lineNumber": 244
  },
  {
    "__docId__": 829,
    "kind": "test",
    "name": "it445",
    "testId": 445,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440.it445",
    "access": null,
    "description": "should work with empty svg tag",
    "lineNumber": 263
  },
  {
    "__docId__": 830,
    "kind": "test",
    "name": "it446",
    "testId": 446,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440.it446",
    "access": null,
    "description": "should inline script",
    "lineNumber": 269
  },
  {
    "__docId__": 831,
    "kind": "test",
    "name": "it447",
    "testId": 447,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440.it447",
    "access": null,
    "description": "should link dependencies",
    "lineNumber": 279
  },
  {
    "__docId__": 832,
    "kind": "test",
    "name": "it448",
    "testId": 448,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440.it448",
    "access": null,
    "description": "should work without empty parameters config",
    "lineNumber": 289
  },
  {
    "__docId__": 833,
    "kind": "test",
    "name": "it449",
    "testId": 449,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440.it449",
    "access": null,
    "description": "should reuse existant metadata section",
    "lineNumber": 298
  },
  {
    "__docId__": 834,
    "kind": "test",
    "name": "it450",
    "testId": 450,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440.it450",
    "access": null,
    "description": "should create metadata section if omitted",
    "lineNumber": 314
  },
  {
    "__docId__": 835,
    "kind": "test",
    "name": "it451",
    "testId": 451,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440.it451",
    "access": null,
    "description": "should keep parameters specified in SVG",
    "lineNumber": 325
  },
  {
    "__docId__": 836,
    "kind": "test",
    "name": "context452",
    "testId": 452,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440.context452",
    "access": null,
    "description": "when encoding fails",
    "lineNumber": 341
  },
  {
    "__docId__": 837,
    "kind": "test",
    "name": "it453",
    "testId": 453,
    "memberof": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440.context452",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/DisplayTransformer.spec.js~describe421.describe440.context452.it453",
    "access": null,
    "description": "should forward encode error",
    "lineNumber": 346
  },
  {
    "__docId__": 838,
    "kind": "testFile",
    "name": "test/src/transform/Mapping.spec.js",
    "content": "import { Buffer } from 'buffer';\nimport { stub, spy } from 'sinon';\nimport proxyquire from 'proxyquire';\nimport { DataType, VariantArrayType } from 'node-opcua';\nimport File from 'vinyl';\nimport Logger from 'gulplog';\nimport expect from '../../expect';\nimport { TransformDirection } from '../../../src/lib/transform/Transformer';\nimport NodeId from '../../../src/lib/server/NodeId';\nimport AtviseFile from '../../../src/lib/server/AtviseFile';\n\nconst readFile = (path, enc, cb) => cb(null, JSON.stringify({\n  typeDefinition: 'ns=1;s=VariableTypes.PROJECT.Custom',\n}));\nconst fs = { readFile };\n\nconst MappingTransformer = proxyquire('../../../src/transform/Mapping', { fs }).default;\n\n/** @test {MappingTransformer} */\ndescribe('MappingTransformer', function() {\n  before(() => Logger.on('error', () => true));\n\n  /** @test {MappingTransformer#transformFromDB} */\n  describe('#transformFromDB', function() {\n    context('when AtviseFile.fromReadResult returns error', function() {\n      let warnListener;\n      let debugListener;\n\n      beforeEach(() => {\n        stub(AtviseFile, 'fromReadResult', () => {\n          throw new Error('Test');\n        });\n        Logger.on('warn', (warnListener = spy()));\n        Logger.on('debug', (debugListener = spy()));\n      });\n\n      afterEach(() => {\n        AtviseFile.fromReadResult.restore();\n        Logger.removeListener('warn', warnListener);\n        Logger.removeListener('debug', debugListener);\n      });\n\n      it('should not forward errors', function() {\n        const stream = new MappingTransformer({ direction: TransformDirection.FromDB });\n\n        return expect(cb => stream.transformFromDB({\n          nodeId: new NodeId('AGENT.DISPLAYS.Main'),\n        }, 'utf8', cb), 'to call the callback')\n          .then(args => expect(args, 'to have length', 1));\n      });\n\n      it('should log warning', function() {\n        const stream = new MappingTransformer({ direction: TransformDirection.FromDB });\n\n        return expect(cb => stream.transformFromDB({\n          nodeId: new NodeId('AGENT.DISPLAYS.Main'),\n        }, 'utf8', cb), 'to call the callback')\n          .then(args => expect(args, 'to have length', 1))\n          .then(() => expect(warnListener, 'was called once'))\n          .then(() => expect(debugListener, 'was called once'));\n      });\n    });\n\n    context('when AtviseFile.fromReadResult returns \"no value\" error', function() {\n      let warnListener;\n      let debugListener;\n\n      beforeEach(() => {\n        stub(AtviseFile, 'fromReadResult', () => {\n          throw new Error('no value');\n        });\n        Logger.on('warn', (warnListener = spy()));\n        Logger.on('debug', (debugListener = spy()));\n      });\n\n      afterEach(() => {\n        AtviseFile.fromReadResult.restore();\n        Logger.removeListener('warn', warnListener);\n        Logger.removeListener('debug', debugListener);\n      });\n\n      it('should only debug log', function() {\n        const stream = new MappingTransformer({ direction: TransformDirection.FromDB });\n\n        return expect(cb => stream.transformFromDB({\n          nodeId: new NodeId('AGENT.DISPLAYS.Main'),\n        }, 'utf8', cb), 'to call the callback')\n          .then(args => expect(args, 'to have length', 1))\n          .then(() => expect(debugListener, 'was called twice'))\n          .then(() => expect(warnListener, 'was not called'));\n      });\n    });\n\n    it('should return an AtviseFile for the given ReadResult', function() {\n      const stream = new MappingTransformer({ direction: TransformDirection.FromDB });\n\n      return expect([{\n        nodeId: new NodeId('AGENT.DISPLAYS.Main'),\n        value: {\n          value: '<xml></xml>',\n          $dataType: DataType.XmlElement,\n          $arrayType: VariantArrayType.Scalar,\n        },\n        referenceDescription: {\n          typeDefinition: new NodeId('VariableTypes.ATVISE.Display'),\n        },\n      }], 'when piped through', stream, 'to yield chunks satisfying', [\n        expect.it('to be an', AtviseFile),\n      ]);\n    });\n\n    context('when file has non-standard type-definition', function() {\n      it('should push .rc file', function() {\n        const stream = new MappingTransformer({ direction: TransformDirection.FromDB });\n\n        return expect([{\n          nodeId: new NodeId('AGENT.OBJECTS.CustomVar'),\n          value: {\n            value: '<xml></xml>',\n            $dataType: DataType.XmlElement,\n            $arrayType: VariantArrayType.Scalar,\n          },\n          referenceDescription: {\n            typeDefinition: new NodeId('VariableTypes.PROJECT.CustomType'),\n          },\n        }], 'when piped through', stream, 'to yield chunks satisfying', [\n          {\n            contents: new Buffer(JSON.stringify({\n              typeDefinition: 'ns=1;s=VariableTypes.PROJECT.CustomType',\n            }, null, '  ')),\n          },\n          {\n            typeDefinition: new NodeId('VariableTypes.PROJECT.CustomType'),\n          },\n        ]);\n      });\n    });\n  });\n\n  /** @test {MappingTransformer#transformFromFilesystem} */\n  describe('#transformFromFilesystem', function() {\n    it('should write AtviseFiles for read Files', function() {\n      const stream = new MappingTransformer({ direction: TransformDirection.FromFilesystem });\n\n      return expect([\n        new File({ path: 'Test.ext' }),\n      ], 'when piped through', stream,\n      'to yield chunks satisfying', [\n        expect.it('to be an', AtviseFile),\n      ]);\n    });\n\n    it('should keep base', function() {\n      const stream = new MappingTransformer({ direction: TransformDirection.FromFilesystem });\n\n      return expect(cb => stream.transformFromFilesystem(\n        new File({ path: 'folder/Test.ext', base: 'folder' }), 'utf8', cb\n      ), 'to call the callback')\n        .then(args => {\n          expect(args[0], 'to be falsy');\n\n          const result = args[1];\n          expect(result.base, 'to equal', 'folder');\n          expect(result.relative, 'to equal', 'Test.ext');\n        });\n    });\n\n    it('should skip directories', function() {\n      const stream = new MappingTransformer({ direction: TransformDirection.FromFilesystem });\n\n      return expect(cb => stream.transformFromFilesystem(\n        { isDirectory: () => true }, 'utf8', cb\n      ), 'to call the callback')\n        .then(args => {\n          expect(args, 'to have length', 1);\n          expect(args[0], 'to be falsy');\n        });\n    });\n\n    context('when file has non-standard type-definition', function() {\n      context('with .rc file', function() {\n        before(() => spy(fs, 'readFile'));\n        after(() => fs.readFile.restore());\n\n        it('should read .rc file', function() {\n          const stream = new MappingTransformer({ direction: TransformDirection.FromFilesystem });\n\n          return expect([\n            new AtviseFile({ path: 'AGENT/OBJECTS/CustomVar.var.ext' }),\n          ], 'when piped through', stream)\n            .then(() => {\n              expect(fs.readFile, 'was called once');\n            });\n        });\n      });\n\n      context('when .rc file cannot be read', function() {\n        beforeEach(() => stub(fs, 'readFile', (path, enc, cb) => cb(new Error('Test'))));\n        afterEach(() => fs.readFile.restore());\n\n        it('should forward error', function() {\n          const stream = new MappingTransformer({ direction: TransformDirection.FromFilesystem });\n\n          const promise = expect(stream, 'to error with', 'Test');\n\n          stream.write(new AtviseFile({ path: 'AGENT/OBJECTS/CustomVar.var.ext' }));\n          stream.end();\n\n          return promise;\n        });\n      });\n\n      context('when .rc file cannot be parsed', function() {\n        beforeEach(() => stub(fs, 'readFile', (path, enc, cb) => cb(null, 'invalid')));\n        afterEach(() => fs.readFile.restore());\n\n        it('should forward error', function() {\n          const stream = new MappingTransformer({ direction: TransformDirection.FromFilesystem });\n\n          const promise = expect(stream, 'to error with', /Unexpected token i in JSON/);\n\n          stream.write(new AtviseFile({ path: 'AGENT/OBJECTS/CustomVar.var.ext' }));\n          stream.end();\n\n          return promise;\n        });\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/transform/Mapping.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 839,
    "kind": "test",
    "name": "describe454",
    "testId": 454,
    "memberof": "test/src/transform/Mapping.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454",
    "access": null,
    "description": "MappingTransformer",
    "lineNumber": 20,
    "testTargets": [
      "MappingTransformer"
    ]
  },
  {
    "__docId__": 840,
    "kind": "test",
    "name": "describe455",
    "testId": 455,
    "memberof": "test/src/transform/Mapping.spec.js~describe454",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe455",
    "access": null,
    "description": "#transformFromDB",
    "lineNumber": 24,
    "testTargets": [
      "MappingTransformer#transformFromDB"
    ]
  },
  {
    "__docId__": 841,
    "kind": "test",
    "name": "context456",
    "testId": 456,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe455",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe455.context456",
    "access": null,
    "description": "when AtviseFile.fromReadResult returns error",
    "lineNumber": 25
  },
  {
    "__docId__": 842,
    "kind": "test",
    "name": "it457",
    "testId": 457,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe455.context456",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe455.context456.it457",
    "access": null,
    "description": "should not forward errors",
    "lineNumber": 43
  },
  {
    "__docId__": 843,
    "kind": "test",
    "name": "it458",
    "testId": 458,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe455.context456",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe455.context456.it458",
    "access": null,
    "description": "should log warning",
    "lineNumber": 52
  },
  {
    "__docId__": 844,
    "kind": "test",
    "name": "context459",
    "testId": 459,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe455",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe455.context459",
    "access": null,
    "description": "when AtviseFile.fromReadResult returns \"no value\" error",
    "lineNumber": 64
  },
  {
    "__docId__": 845,
    "kind": "test",
    "name": "it460",
    "testId": 460,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe455.context459",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe455.context459.it460",
    "access": null,
    "description": "should only debug log",
    "lineNumber": 82
  },
  {
    "__docId__": 846,
    "kind": "test",
    "name": "it461",
    "testId": 461,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe455",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe455.it461",
    "access": null,
    "description": "should return an AtviseFile for the given ReadResult",
    "lineNumber": 94
  },
  {
    "__docId__": 847,
    "kind": "test",
    "name": "context462",
    "testId": 462,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe455",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe455.context462",
    "access": null,
    "description": "when file has non-standard type-definition",
    "lineNumber": 112
  },
  {
    "__docId__": 848,
    "kind": "test",
    "name": "it463",
    "testId": 463,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe455.context462",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe455.context462.it463",
    "access": null,
    "description": "should push .rc file",
    "lineNumber": 113
  },
  {
    "__docId__": 849,
    "kind": "test",
    "name": "describe464",
    "testId": 464,
    "memberof": "test/src/transform/Mapping.spec.js~describe454",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe464",
    "access": null,
    "description": "#transformFromFilesystem",
    "lineNumber": 141,
    "testTargets": [
      "MappingTransformer#transformFromFilesystem"
    ]
  },
  {
    "__docId__": 850,
    "kind": "test",
    "name": "it465",
    "testId": 465,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe464",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe464.it465",
    "access": null,
    "description": "should write AtviseFiles for read Files",
    "lineNumber": 142
  },
  {
    "__docId__": 851,
    "kind": "test",
    "name": "it466",
    "testId": 466,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe464",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe464.it466",
    "access": null,
    "description": "should keep base",
    "lineNumber": 153
  },
  {
    "__docId__": 852,
    "kind": "test",
    "name": "it467",
    "testId": 467,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe464",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe464.it467",
    "access": null,
    "description": "should skip directories",
    "lineNumber": 168
  },
  {
    "__docId__": 853,
    "kind": "test",
    "name": "context468",
    "testId": 468,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe464",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe464.context468",
    "access": null,
    "description": "when file has non-standard type-definition",
    "lineNumber": 180
  },
  {
    "__docId__": 854,
    "kind": "test",
    "name": "context469",
    "testId": 469,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe464.context468",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe464.context468.context469",
    "access": null,
    "description": "with .rc file",
    "lineNumber": 181
  },
  {
    "__docId__": 855,
    "kind": "test",
    "name": "it470",
    "testId": 470,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe464.context468.context469",
    "testDepth": 4,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe464.context468.context469.it470",
    "access": null,
    "description": "should read .rc file",
    "lineNumber": 185
  },
  {
    "__docId__": 856,
    "kind": "test",
    "name": "context471",
    "testId": 471,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe464.context468",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe464.context468.context471",
    "access": null,
    "description": "when .rc file cannot be read",
    "lineNumber": 197
  },
  {
    "__docId__": 857,
    "kind": "test",
    "name": "it472",
    "testId": 472,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe464.context468.context471",
    "testDepth": 4,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe464.context468.context471.it472",
    "access": null,
    "description": "should forward error",
    "lineNumber": 201
  },
  {
    "__docId__": 858,
    "kind": "test",
    "name": "context473",
    "testId": 473,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe464.context468",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe464.context468.context473",
    "access": null,
    "description": "when .rc file cannot be parsed",
    "lineNumber": 213
  },
  {
    "__docId__": 859,
    "kind": "test",
    "name": "it474",
    "testId": 474,
    "memberof": "test/src/transform/Mapping.spec.js~describe454.describe464.context468.context473",
    "testDepth": 4,
    "static": true,
    "longname": "test/src/transform/Mapping.spec.js~describe454.describe464.context468.context473.it474",
    "access": null,
    "description": "should forward error",
    "lineNumber": 217
  },
  {
    "__docId__": 860,
    "kind": "testFile",
    "name": "test/src/transform/ScriptTransformer.spec.js",
    "content": "import Logger from 'gulplog';\nimport { spy } from 'sinon';\nimport expect from '../../expect';\nimport TransformerHelper from '../../helpers/Transformer';\nimport ScriptTransformer from '../../../src/transform/ScriptTransformer';\n\nconst transformerHelper = new TransformerHelper(ScriptTransformer);\n\n/** @test {ScriptTransformer} */\ndescribe('ScriptTransformer', function() {\n  const ScriptPath = 'SYSTEM/LIBRARY/PROJECT/SERVERSCRIPTS/Test.script';\n  const QDPath = 'SYSTEM/LIBRARY/PROJECT/SERVERSCRIPTS/Test.qd';\n\n  /** @test {ScriptTransformer#shouldBeTransformed} */\n  describe('#shouldBeTransformed', function() {\n    it('should return true for ScriptCode type nodes', function() {\n      expect(ScriptTransformer.prototype.shouldBeTransformed(\n        { isScript: true }\n      ), 'to be true');\n    });\n\n    it('should return true for QuickDynamic type nodes', function() {\n      expect(ScriptTransformer.prototype.shouldBeTransformed(\n        { isQuickDynamic: true }\n      ), 'to be true');\n    });\n  });\n\n  /** @test {ScriptTransformer#transformFromDB} */\n  describe('#transformFromDB', function() {\n    it('should forward parse errors', function() {\n      return expect(transformerHelper.writeXMLToTransformer(ScriptPath, 'invalid xml'),\n        'to be rejected with', /Text data outside of root node/);\n    });\n\n    it('should warn with invalid xml', function() {\n      const onWarn = spy();\n      Logger.on('warn', onWarn);\n\n      return expect(transformerHelper.writeXMLToTransformer(ScriptPath, '<root></root>'),\n        'to be fulfilled')\n        .then(() => {\n          expect(onWarn, 'was called once');\n          expect(onWarn, 'to have a call satisfying', { args: [/Empty document/] });\n        });\n    });\n\n    it('should write empty config file for empty Script', function() {\n      return transformerHelper.writeXMLToTransformer(ScriptPath, '<script></script>')\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => {\n          expect(contents[0], 'to equal', '{}');\n        });\n    });\n\n    it('should write empty .js file for empty Script', function() {\n      return transformerHelper.writeXMLToTransformer(ScriptPath, '<script></script>')\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => {\n          expect(contents[1], 'to equal', '');\n        });\n    });\n\n    it('should store icon metadata', function() {\n      return transformerHelper.writeXMLToTransformer(ScriptPath, `<script>\n  <metadata>\n    <icon type=\"image/png\">asdf</icon>\n  </metadata>\n</script>`)\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => expect(JSON.parse(contents[0]), 'to equal', {\n          icon: {\n            type: 'image/png',\n            content: 'asdf',\n          },\n        }));\n    });\n\n    it('should store empty icon metadata', function() {\n      return transformerHelper.writeXMLToTransformer(ScriptPath, `<script>\n  <metadata>\n    <icon></icon>\n  </metadata>\n</script>`)\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => expect(JSON.parse(contents[0]), 'to equal', {\n          icon: {\n            content: '',\n          },\n        }));\n    });\n\n    it('should store visible metadata', function() {\n      return transformerHelper.writeXMLToTransformer(ScriptPath, `<script>\n  <metadata>\n    <visible>1</visible>\n  </metadata>\n</script>`)\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => expect(JSON.parse(contents[0]), 'to equal', {\n          visible: true,\n        }));\n    });\n\n    it('should store title metadata', function() {\n      return transformerHelper.writeXMLToTransformer(ScriptPath, `<script>\n  <metadata>\n    <title>script title</title>\n  </metadata>\n</script>`)\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => expect(JSON.parse(contents[0]), 'to equal', {\n          title: 'script title',\n        }));\n    });\n\n    it('should store description metadata', function() {\n      return transformerHelper.writeXMLToTransformer(ScriptPath, `<script>\n  <metadata>\n    <description>script description</description>\n  </metadata>\n</script>`)\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => expect(JSON.parse(contents[0]), 'to equal', {\n          description: 'script description',\n        }));\n    });\n\n    it('should store parameters', function() {\n      return transformerHelper.writeXMLToTransformer(ScriptPath, `<script>\n  <parameter name=\"paramname\"/>\n</script>`)\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => expect(JSON.parse(contents[0]), 'to equal', {\n          parameters: [\n            { name: 'paramname' },\n          ],\n        }));\n    });\n\n    it('should store code', function() {\n      const code = 'console.log(\"called\");';\n      return transformerHelper.writeXMLToTransformer(ScriptPath, `<script>\n  <code>${code}</code>\n</script>`)\n        .then(files => transformerHelper.expectFileContents(files))\n        .then(contents => expect(contents[1], 'to equal', code));\n    });\n  });\n\n  /** @test {ScriptTransformer#createCombinedFile} */\n  describe('#createCombinedFile', function() {\n    it('should forward config parse errors', function() {\n      return expect(transformerHelper.createCombinedFileWithContents(`${ScriptPath}/Test`, {\n        '.json': '\"description\": \"script description\" }',\n      }), 'to call the callback with error', /Error parsing JSON in /);\n    });\n\n    context('when called on a quick dynamic', function() {\n      it('should store empty metadata', function() {\n        return expect(transformerHelper.createCombinedFileWithContents(`${QDPath}/Test`, {\n          '.json': '{ }',\n        }), 'to call the callback')\n          .then(args => transformerHelper.expectFileContents([args[1]]))\n          .then(contents => expect(contents[0], 'to contain', '<metadata/>'));\n      });\n\n      it('should insert icon metadata', function() {\n        return expect(transformerHelper.createCombinedFileWithContents(`${QDPath}/Test`, {\n          '.json': '{ \"icon\": { \"type\": \"image/png\", \"content\": \"asdf\" } }',\n        }), 'to call the callback')\n          .then(args => transformerHelper.expectFileContents([args[1]]))\n          .then(contents => expect(contents[0],\n            'to contain', '<icon type=\"image/png\">asdf</icon>'));\n      });\n\n      it('should insert visible metadata', function() {\n        return Promise.all([\n          expect(transformerHelper.createCombinedFileWithContents(`${QDPath}/Test`, {\n            '.json': '{ \"visible\": false }',\n          }), 'to call the callback')\n            .then(args => transformerHelper.expectFileContents([args[1]]))\n            .then(contents => expect(contents[0], 'to contain', '<visible>0</visible>')),\n          expect(transformerHelper.createCombinedFileWithContents(`${QDPath}/Test`, {\n            '.json': '{ \"visible\": true }',\n          }), 'to call the callback')\n            .then(args => transformerHelper.expectFileContents([args[1]]))\n            .then(contents => expect(contents[0], 'to contain', '<visible>1</visible>')),\n          ]);\n      });\n\n      it('should insert title metadata', function() {\n        return expect(transformerHelper.createCombinedFileWithContents(`${QDPath}/Test`, {\n          '.json': '{ \"title\": \"qd title\" }',\n        }), 'to call the callback')\n          .then(args => transformerHelper.expectFileContents([args[1]]))\n          .then(contents => expect(contents[0], 'to contain', '<title>qd title</title>'));\n      });\n\n      it('should insert description metadata', function() {\n        return expect(transformerHelper.createCombinedFileWithContents(`${QDPath}/Test`, {\n          '.json': '{ \"description\": \"qd desc\" }',\n        }), 'to call the callback')\n          .then(args => transformerHelper.expectFileContents([args[1]]))\n          .then(contents => expect(contents[0],\n            'to contain', '<description>qd desc</description>'));\n      });\n    });\n\n    context('when called on a script', function() {\n      it('should ignore metadata', function() {\n        return expect(transformerHelper.createCombinedFileWithContents(`${ScriptPath}/Test`, {\n          '.json': '{ \"icon\": { \"type\": \"image/png\", \"content\": \"asdf\" } }',\n        }), 'to call the callback')\n          .then(args => transformerHelper.expectFileContents([args[1]]))\n          .then(contents => expect(contents[0],\n            'not to contain', '<icon', '<metadata'));\n      });\n    });\n\n    it('should insert parameters', function() {\n      return expect(transformerHelper.createCombinedFileWithContents(`${QDPath}/Test`, {\n        '.json': '{ \"parameters\": [{ \"name\": \"paramname\" }] }',\n      }), 'to call the callback')\n        .then(args => transformerHelper.expectFileContents([args[1]]))\n        .then(contents => expect(contents[0],\n          'to contain', '<parameter name=\"paramname\"/>'));\n    });\n\n    it('should insert script code', function() {\n      const code = 'console.log(\"called\");';\n      return expect(transformerHelper.createCombinedFileWithContents(`${QDPath}/Test`, {\n        '.js': code,\n      }), 'to call the callback')\n        .then(args => transformerHelper.expectFileContents([args[1]]))\n        .then(contents => expect(contents[0],\n          'to contain', `<code><![CDATA[${code}]]></code>`));\n    });\n\n    context('when encoding fails', function() {\n      it('should forward encode errors', function() {\n        class FailingScriptTransformer extends ScriptTransformer {\n          encodeContents(object, callback) {\n            callback(new Error('Encode error'));\n          }\n        }\n\n        const helper = new TransformerHelper(FailingScriptTransformer);\n\n        return expect(helper.createCombinedFileWithContents(`${QDPath}/Test`, {\n          '.json': '{ \"parameters\": [{ \"name\": \"paramname\" }] }',\n        }), 'to call the callback with error', 'Encode error');\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/transform/ScriptTransformer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 861,
    "kind": "test",
    "name": "describe475",
    "testId": 475,
    "memberof": "test/src/transform/ScriptTransformer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475",
    "access": null,
    "description": "ScriptTransformer",
    "lineNumber": 10,
    "testTargets": [
      "ScriptTransformer"
    ]
  },
  {
    "__docId__": 862,
    "kind": "test",
    "name": "describe476",
    "testId": 476,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe476",
    "access": null,
    "description": "#shouldBeTransformed",
    "lineNumber": 15,
    "testTargets": [
      "ScriptTransformer#shouldBeTransformed"
    ]
  },
  {
    "__docId__": 863,
    "kind": "test",
    "name": "it477",
    "testId": 477,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe476",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe476.it477",
    "access": null,
    "description": "should return true for ScriptCode type nodes",
    "lineNumber": 16
  },
  {
    "__docId__": 864,
    "kind": "test",
    "name": "it478",
    "testId": 478,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe476",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe476.it478",
    "access": null,
    "description": "should return true for QuickDynamic type nodes",
    "lineNumber": 22
  },
  {
    "__docId__": 865,
    "kind": "test",
    "name": "describe479",
    "testId": 479,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479",
    "access": null,
    "description": "#transformFromDB",
    "lineNumber": 30,
    "testTargets": [
      "ScriptTransformer#transformFromDB"
    ]
  },
  {
    "__docId__": 866,
    "kind": "test",
    "name": "it480",
    "testId": 480,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479.it480",
    "access": null,
    "description": "should forward parse errors",
    "lineNumber": 31
  },
  {
    "__docId__": 867,
    "kind": "test",
    "name": "it481",
    "testId": 481,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479.it481",
    "access": null,
    "description": "should warn with invalid xml",
    "lineNumber": 36
  },
  {
    "__docId__": 868,
    "kind": "test",
    "name": "it482",
    "testId": 482,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479.it482",
    "access": null,
    "description": "should write empty config file for empty Script",
    "lineNumber": 48
  },
  {
    "__docId__": 869,
    "kind": "test",
    "name": "it483",
    "testId": 483,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479.it483",
    "access": null,
    "description": "should write empty .js file for empty Script",
    "lineNumber": 56
  },
  {
    "__docId__": 870,
    "kind": "test",
    "name": "it484",
    "testId": 484,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479.it484",
    "access": null,
    "description": "should store icon metadata",
    "lineNumber": 64
  },
  {
    "__docId__": 871,
    "kind": "test",
    "name": "it485",
    "testId": 485,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479.it485",
    "access": null,
    "description": "should store empty icon metadata",
    "lineNumber": 79
  },
  {
    "__docId__": 872,
    "kind": "test",
    "name": "it486",
    "testId": 486,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479.it486",
    "access": null,
    "description": "should store visible metadata",
    "lineNumber": 93
  },
  {
    "__docId__": 873,
    "kind": "test",
    "name": "it487",
    "testId": 487,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479.it487",
    "access": null,
    "description": "should store title metadata",
    "lineNumber": 105
  },
  {
    "__docId__": 874,
    "kind": "test",
    "name": "it488",
    "testId": 488,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479.it488",
    "access": null,
    "description": "should store description metadata",
    "lineNumber": 117
  },
  {
    "__docId__": 875,
    "kind": "test",
    "name": "it489",
    "testId": 489,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479.it489",
    "access": null,
    "description": "should store parameters",
    "lineNumber": 129
  },
  {
    "__docId__": 876,
    "kind": "test",
    "name": "it490",
    "testId": 490,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe479.it490",
    "access": null,
    "description": "should store code",
    "lineNumber": 141
  },
  {
    "__docId__": 877,
    "kind": "test",
    "name": "describe491",
    "testId": 491,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491",
    "access": null,
    "description": "#createCombinedFile",
    "lineNumber": 152,
    "testTargets": [
      "ScriptTransformer#createCombinedFile"
    ]
  },
  {
    "__docId__": 878,
    "kind": "test",
    "name": "it492",
    "testId": 492,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.it492",
    "access": null,
    "description": "should forward config parse errors",
    "lineNumber": 153
  },
  {
    "__docId__": 879,
    "kind": "test",
    "name": "context493",
    "testId": 493,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context493",
    "access": null,
    "description": "when called on a quick dynamic",
    "lineNumber": 159
  },
  {
    "__docId__": 880,
    "kind": "test",
    "name": "it494",
    "testId": 494,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context493",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context493.it494",
    "access": null,
    "description": "should store empty metadata",
    "lineNumber": 160
  },
  {
    "__docId__": 881,
    "kind": "test",
    "name": "it495",
    "testId": 495,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context493",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context493.it495",
    "access": null,
    "description": "should insert icon metadata",
    "lineNumber": 168
  },
  {
    "__docId__": 882,
    "kind": "test",
    "name": "it496",
    "testId": 496,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context493",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context493.it496",
    "access": null,
    "description": "should insert visible metadata",
    "lineNumber": 177
  },
  {
    "__docId__": 883,
    "kind": "test",
    "name": "it497",
    "testId": 497,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context493",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context493.it497",
    "access": null,
    "description": "should insert title metadata",
    "lineNumber": 192
  },
  {
    "__docId__": 884,
    "kind": "test",
    "name": "it498",
    "testId": 498,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context493",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context493.it498",
    "access": null,
    "description": "should insert description metadata",
    "lineNumber": 200
  },
  {
    "__docId__": 885,
    "kind": "test",
    "name": "context499",
    "testId": 499,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context499",
    "access": null,
    "description": "when called on a script",
    "lineNumber": 210
  },
  {
    "__docId__": 886,
    "kind": "test",
    "name": "it500",
    "testId": 500,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context499",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context499.it500",
    "access": null,
    "description": "should ignore metadata",
    "lineNumber": 211
  },
  {
    "__docId__": 887,
    "kind": "test",
    "name": "it501",
    "testId": 501,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.it501",
    "access": null,
    "description": "should insert parameters",
    "lineNumber": 221
  },
  {
    "__docId__": 888,
    "kind": "test",
    "name": "it502",
    "testId": 502,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.it502",
    "access": null,
    "description": "should insert script code",
    "lineNumber": 230
  },
  {
    "__docId__": 889,
    "kind": "test",
    "name": "context503",
    "testId": 503,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context503",
    "access": null,
    "description": "when encoding fails",
    "lineNumber": 240
  },
  {
    "__docId__": 890,
    "kind": "test",
    "name": "it504",
    "testId": 504,
    "memberof": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context503",
    "testDepth": 3,
    "static": true,
    "longname": "test/src/transform/ScriptTransformer.spec.js~describe475.describe491.context503.it504",
    "access": null,
    "description": "should forward encode errors",
    "lineNumber": 241
  },
  {
    "__docId__": 891,
    "kind": "testFile",
    "name": "test/src/util/cleanup.spec.js",
    "content": "import expect from 'unexpected';\nimport { stub, spy } from 'sinon';\nimport proxyquire from 'proxyquire';\nimport Logger from 'gulplog';\n\nfunction createCleanup(numberOfOpenSessions, closeOpenShouldFail) {\n  return proxyquire('../../../src/util/cleanup', {\n    '../lib/server/Session': {\n      __esModule: true,\n      default: class Session {\n        static get open() {\n          return new Array(numberOfOpenSessions);\n        }\n\n        static closeOpen() {\n          return closeOpenShouldFail ?\n            Promise.reject('Session.closeOpen error') :\n            Promise.resolve();\n        }\n      },\n    },\n  }).default;\n}\n\n/** @test {cleanup} */\ndescribe('cleanup', function() {\n  before(() => stub(process, 'kill'));\n  after(() => process.kill.restore());\n  afterEach(() => process.kill.reset());\n\n  it('should call uninstall', function() {\n    const uninstall = spy();\n    createCleanup(0, false)(null, null, uninstall);\n\n    expect(uninstall.calledOnce, 'to be', true);\n  });\n\n  context('when receiving SIGINT', function() {\n    it('should log \"Ctrl-C\"', function() {\n      const onWarn = spy();\n      Logger.on('warn', onWarn);\n\n      createCleanup(0, false)(null, 'SIGINT', () => {});\n      expect(onWarn.calledOnce, 'to be', true);\n      expect(onWarn.lastCall.args[0], 'to match', /Ctrl-C/);\n    });\n  });\n\n  context('with open sessions', function() {\n    it('should return false', function() {\n      expect(createCleanup(3, false)(null, null, () => {}), 'to be', false);\n    });\n\n    it('should call process.kill', function(done) {\n      createCleanup(3, false)(null, null, () => {});\n      setTimeout(() => {\n        expect(process.kill.calledOnce, 'to be', true);\n        done();\n      }, 10);\n    });\n\n    it('should forward Session.closeOpen errors', function(done) {\n      createCleanup(3, true)(null, null, () => {});\n      setTimeout(() => {\n        expect(process.kill.calledOnce, 'to be', true);\n        done();\n      }, 10);\n    });\n  });\n\n  context('without open sessions', function() {\n    it('should return true', function() {\n      expect(createCleanup(0, false)(null, null, () => {}), 'to be', true);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/util/cleanup.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 892,
    "kind": "test",
    "name": "describe505",
    "testId": 505,
    "memberof": "test/src/util/cleanup.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe505",
    "access": null,
    "description": "cleanup",
    "lineNumber": 26,
    "testTargets": [
      "cleanup"
    ]
  },
  {
    "__docId__": 893,
    "kind": "test",
    "name": "it506",
    "testId": 506,
    "memberof": "test/src/util/cleanup.spec.js~describe505",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe505.it506",
    "access": null,
    "description": "should call uninstall",
    "lineNumber": 31
  },
  {
    "__docId__": 894,
    "kind": "test",
    "name": "context507",
    "testId": 507,
    "memberof": "test/src/util/cleanup.spec.js~describe505",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe505.context507",
    "access": null,
    "description": "when receiving SIGINT",
    "lineNumber": 38
  },
  {
    "__docId__": 895,
    "kind": "test",
    "name": "it508",
    "testId": 508,
    "memberof": "test/src/util/cleanup.spec.js~describe505.context507",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe505.context507.it508",
    "access": null,
    "description": "should log \"Ctrl-C\"",
    "lineNumber": 39
  },
  {
    "__docId__": 896,
    "kind": "test",
    "name": "context509",
    "testId": 509,
    "memberof": "test/src/util/cleanup.spec.js~describe505",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe505.context509",
    "access": null,
    "description": "with open sessions",
    "lineNumber": 49
  },
  {
    "__docId__": 897,
    "kind": "test",
    "name": "it510",
    "testId": 510,
    "memberof": "test/src/util/cleanup.spec.js~describe505.context509",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe505.context509.it510",
    "access": null,
    "description": "should return false",
    "lineNumber": 50
  },
  {
    "__docId__": 898,
    "kind": "test",
    "name": "it511",
    "testId": 511,
    "memberof": "test/src/util/cleanup.spec.js~describe505.context509",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe505.context509.it511",
    "access": null,
    "description": "should call process.kill",
    "lineNumber": 54
  },
  {
    "__docId__": 899,
    "kind": "test",
    "name": "it512",
    "testId": 512,
    "memberof": "test/src/util/cleanup.spec.js~describe505.context509",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe505.context509.it512",
    "access": null,
    "description": "should forward Session.closeOpen errors",
    "lineNumber": 62
  },
  {
    "__docId__": 900,
    "kind": "test",
    "name": "context513",
    "testId": 513,
    "memberof": "test/src/util/cleanup.spec.js~describe505",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe505.context513",
    "access": null,
    "description": "without open sessions",
    "lineNumber": 71
  },
  {
    "__docId__": 901,
    "kind": "test",
    "name": "it514",
    "testId": 514,
    "memberof": "test/src/util/cleanup.spec.js~describe505.context513",
    "testDepth": 2,
    "static": true,
    "longname": "test/src/util/cleanup.spec.js~describe505.context513.it514",
    "access": null,
    "description": "should return true",
    "lineNumber": 72
  },
  {
    "__docId__": 902,
    "kind": "testFile",
    "name": "test/src/util/fs.spec.js",
    "content": "import expect from 'unexpected';\nimport { getStat, validateDirectoryExists } from '../../../src/util/fs';\n\n/** @test {getStat} */\ndescribe('getStat', function() {\n  it('should be fulfilled with valid path', function() {\n    return expect(getStat('./package.json'), 'to be fulfilled');\n  });\n\n  it('should be rejected with invalid path', function() {\n    return expect(getStat('./does-not-exist'), 'to be rejected');\n  });\n});\n\n/** @test {validateDirectoryExists} */\ndescribe('validateDirectoryExists', function() {\n  it('should be rejected with invalid path', function() {\n    return expect(validateDirectoryExists('./does-not-exist'), 'to be rejected');\n  });\n\n  it('shoud be rejected with non-directory path', function() {\n    return expect(validateDirectoryExists('./package.json'), 'to be rejected');\n  });\n\n  it('should be fulfilled with directory path ', function() {\n    return expect(validateDirectoryExists('./test'), 'to be fulfilled');\n  });\n});\n",
    "static": true,
    "longname": "/home/circleci/project/test/src/util/fs.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 903,
    "kind": "test",
    "name": "describe515",
    "testId": 515,
    "memberof": "test/src/util/fs.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/util/fs.spec.js~describe515",
    "access": null,
    "description": "getStat",
    "lineNumber": 5,
    "testTargets": [
      "getStat"
    ]
  },
  {
    "__docId__": 904,
    "kind": "test",
    "name": "it516",
    "testId": 516,
    "memberof": "test/src/util/fs.spec.js~describe515",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/util/fs.spec.js~describe515.it516",
    "access": null,
    "description": "should be fulfilled with valid path",
    "lineNumber": 6
  },
  {
    "__docId__": 905,
    "kind": "test",
    "name": "it517",
    "testId": 517,
    "memberof": "test/src/util/fs.spec.js~describe515",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/util/fs.spec.js~describe515.it517",
    "access": null,
    "description": "should be rejected with invalid path",
    "lineNumber": 10
  },
  {
    "__docId__": 906,
    "kind": "test",
    "name": "describe518",
    "testId": 518,
    "memberof": "test/src/util/fs.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/src/util/fs.spec.js~describe518",
    "access": null,
    "description": "validateDirectoryExists",
    "lineNumber": 16,
    "testTargets": [
      "validateDirectoryExists"
    ]
  },
  {
    "__docId__": 907,
    "kind": "test",
    "name": "it519",
    "testId": 519,
    "memberof": "test/src/util/fs.spec.js~describe518",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/util/fs.spec.js~describe518.it519",
    "access": null,
    "description": "should be rejected with invalid path",
    "lineNumber": 17
  },
  {
    "__docId__": 908,
    "kind": "test",
    "name": "it520",
    "testId": 520,
    "memberof": "test/src/util/fs.spec.js~describe518",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/util/fs.spec.js~describe518.it520",
    "access": null,
    "description": "shoud be rejected with non-directory path",
    "lineNumber": 21
  },
  {
    "__docId__": 909,
    "kind": "test",
    "name": "it521",
    "testId": 521,
    "memberof": "test/src/util/fs.spec.js~describe518",
    "testDepth": 1,
    "static": true,
    "longname": "test/src/util/fs.spec.js~describe518.it521",
    "access": null,
    "description": "should be fulfilled with directory path ",
    "lineNumber": 25
  }
]