defaults: &defaults
  docker:
    - image: circleci/node:8

git-login: &git-login
  name: Setting up git user
  command: git config --global user.email circleci@circleci && git config --global user.name CircleCI

npm-login: &npm-login
  name: Logging in to npm
  command: echo "$NPM_TOKEN" > ~/.npmrc

version: 2
jobs:
  install-deps:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-npm-deps-{{ checksum "package-lock.json" }}
      - run:
          name: Installing npm dependencies
          command: npm install
      - run:
          <<: *git-login
      - run:
          name: Handling package-lock changes
          command: |
            if git diff --exit-code package-lock.json; then
              echo "package-lock did not change"
            else
              if [[ $CIRCLE_BRANCH = *"greenkeeper/"* ]]; then
                echo "Committing package-lock changes"
                git add package-lock.json
                git commit -m 'chore(package): Update lockfile [ci skip]';
              else
                echo "Resetting package-lock changes"
                git checkout -- package-lock.json
              fi
            fi

            echo "Done"
      - save_cache:
          key: v3-npm-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - persist_to_workspace:
          root: .
          paths:
            - .

  start-testserver:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          name: Login to google cloud
          command: echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
      - run:
          name: Starting atserver in google cloud
          command: gcloud compute instances start instance-1 --project=atscm-ci --zone=us-central1-f

  build:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Transpiling source code
          command: npm run compile
      - persist_to_workspace:
          root: .
          paths:
            - out

  docs:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Creating API documentation
          command: npm run docs
      - run:
          name: Checking documentation for broken links
          command: npm run test:docs
      - run:
          name: Check documentation coverage
          command: npm run docs:coverage
          when: always
      - persist_to_workspace:
          root: .
          paths:
            - docs/api

  lint-source:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Linting source files
          command: npm run lint -- --format junit --output-file ~/reports/eslint.xml
      - store_test_results:
          path: ~/reports
          when: always
      - store_artifacts:
          path: ~/reports
          when: always

  type-check:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Running type checks
          command: npm run typecheck

  unit-tests:
    <<: *defaults
    parallelism: 4
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Printing test files to run
          command: circleci tests glob "test/src/**/*.spec.js" | circleci tests split --split-by=timings
      - run:
          name: Running tests
          command: npx nyc -r json --report-dir "coverage/unit-$CIRCLE_NODE_INDEX" --no-check-coverage npm run test:base -- --reporter mocha-circleci-reporter $(circleci tests glob "test/src/**/*.spec.js" | circleci tests split --split-by=timings)
          environment:
            NODE_ENV: test
            MOCHA_FILE: ../reports/unit-tests-$CIRCLE_NODE_INDEX.xml
      - persist_to_workspace:
          root: .
          paths:
            - coverage
      - store_test_results:
          path: ~/reports
          when: always
      - store_artifacts:
          path: ~/reports
          when: always

  test-coverage:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Combining coverage reports
          command: npx istanbul-combine -r lcov -r html coverage/**/*.json
      - run:
          name: Reporting test coverage
          command: npx codecov
      - store_artifacts:
          path: coverage
          when: always

  integration-tests:
    <<: *defaults
    parallelism: 2
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Running tests
          command: |
            ATSERVER_VERSION='3.2'
            ATSCM_PROJECT__PORT__OPC='4840'

            if [ $CIRCLE_NODE_INDEX -gt 1 ]; then
              ((CIRCLE_NODE_INDEX=CIRCLE_NODE_INDEX-2))
              ATSERVER_VERSION='3.3'
              ATSCM_PROJECT__PORT__OPC='4841'
            fi

            echo "Testing against atserver $ATSERVER_VERSION.x"
            npm run test:base -- --reporter mocha-circleci-reporter "test/integration/**/*.spec.js"
          environment:
            NODE_ENV: test
            MOCHA_FILE: ../reports/integration-$CIRCLE_NODE_INDEX.xml
      - store_test_results:
          path: ~/reports
          when: always
      - store_artifacts:
          path: ~/reports
          when: always

  update-lockfile:
    <<: *defaults
    steps:
      - checkout
      - add_ssh_keys
      - attach_workspace:
          at: .
      - run:
          <<: *git-login
      - run:
          name: Updating lockfile
          command: git push origin $CIRCLE_BRANCH

  deploy:
    <<: *defaults
    steps:
      - checkout
      - add_ssh_keys
      - attach_workspace:
          at: .
      - run:
          <<: *git-login
      - run:
          <<: *npm-login
      - run:
          name: Deploying changes
          command:
            npx bump-version release --release-files out docs/api --gh-token $RELEASE_GITHUB_TOKEN

  update-hosted-docs:
    <<: *defaults
    steps:
      - checkout
      - add_ssh_keys
      - attach_workspace:
          at: .
      - run:
          <<: *git-login
      - run:
          name: Updating hosted API documentation
          command: |
            version=$(node -e "console.log(require('./package.json').version)")
            git clone git@github.com:$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git -b gh-pages ../pages
            cp -r docs/api/* ../pages
            cd ../pages
            git add .
            git commit -m "docs(gh-pages): Update for release v$version [ci skip]"
            git push origin gh-pages
            cd ../project

workflows:
  version: 2

  test-and-deploy:
    jobs:
      - install-deps
      - start-testserver:
          context: atscm
      - build:
          requires:
            - install-deps
      - docs:
          requires:
            - install-deps
      - lint-source:
          requires:
            - install-deps
      - type-check:
          requires:
            - install-deps
      - unit-tests:
          requires:
            - install-deps
            - start-testserver
      - test-coverage:
          requires:
            - unit-tests
      - integration-tests:
          requires:
            - build
            - start-testserver
      - update-lockfile:
          requires:
            - lint-source
            - test-coverage
            - integration-tests
            - docs
          filters:
            branches:
              only: /greenkeeper\//
      - deploy:
          requires:
            - lint-source
            - type-check
            - test-coverage
            - integration-tests
            - docs
      - update-hosted-docs:
          requires:
            - deploy
          filters:
            branches:
              only: master
