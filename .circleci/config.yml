version: 2.1
orbs:
  atscm:
    executors:
      node:
        docker:
          - image: circleci/node:8
    commands:
      git-login:
        steps:
          - run:
              name: Setting up git user
              command: git config --global user.email circleci@circleci && git config --global user.name CircleCI
      npm-login:
        steps:
          - run:
              name: Logging in to npm
              command: echo "$NPM_TOKEN" > ~/.npmrc
      run-integration-tests:
        parameters:
          atserver:
            type: string
        steps:
          - run:
              name: Running tests
              command: |
                ATSERVER_VERSION='<< parameters.atserver >>'

                case "$ATSERVER_VERSION" in
                  '3.2')
                    ATSCM_PROJECT__PORT__OPC=4840
                    ;;
                  '3.3')
                    ATSCM_PROJECT__PORT__OPC=4841
                    ;;
                  *)
                    echo "Invalid atserver version $ATSERVER_VERSION"
                    exit 1;
                esac

                echo "Testing against atserver $ATSERVER_VERSION.x (at port $ATSCM_PROJECT__PORT__OPC)"
                npm run test:base -- --reporter mocha-circleci-reporter "test/integration/**/*.spec.js"
              environment:
                NODE_ENV: test
                ATSCM_PROJECT__TIMEOUT: '20000'
                MOCHA_FILE: ../reports/integration-<< parameters.atserver >>-$CIRCLE_NODE_INDEX.xml
    jobs:
      integration:
        executor: node
        parameters:
          atserver:
            type: string
        steps:
          - attach_workspace:
              at: .
          - run-integration-tests:
              atserver: << parameters.atserver >>
          - store_test_results:
              path: ~/reports
          - store_artifacts:
              path: ~/reports

jobs:
  install-deps:
    executor: atscm/node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-npm-deps-{{ checksum "package-lock.json" }}
      - run:
          name: Installing npm dependencies
          command: npm install
      - atscm/git-login
      - run:
          name: Handling package-lock changes
          command: |
            if git diff --exit-code package-lock.json; then
              echo "package-lock did not change"
            else
              if [[ $CIRCLE_BRANCH = *"greenkeeper/"* ]]; then
                echo "Committing package-lock changes"
                git add package-lock.json
                git commit -m 'chore(package): Update lockfile [ci skip]';
              else
                echo "Resetting package-lock changes"
                git checkout -- package-lock.json
              fi
            fi

            echo "Done"
      - save_cache:
          key: v3-npm-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - persist_to_workspace:
          root: .
          paths:
            - .

  start-testserver:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          name: Login to google cloud
          command: echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
      - run:
          name: Starting atserver in google cloud
          command: gcloud compute instances start instance-1 --project=atscm-ci --zone=us-central1-f

  build:
    executor: atscm/node
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Transpiling source code
          command: npm run compile
      - persist_to_workspace:
          root: .
          paths:
            - out

  docs:
    executor: atscm/node
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Creating API documentation
          command: npm run docs
      - run:
          name: Checking documentation for broken links
          command: npm run test:docs
      - run:
          name: Check documentation coverage
          command: npm run docs:coverage
          when: always
      - persist_to_workspace:
          root: .
          paths:
            - docs/api

  lint-source:
    executor: atscm/node
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Linting source files
          command: npm run lint -- --format junit --output-file ~/reports/eslint.xml
      - run:
          name: Checking formatting
          command: npm run format -- --check
      - store_test_results:
          path: ~/reports
      - store_artifacts:
          path: ~/reports

  types:
    executor: atscm/node
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build type declaration files
          command: npm run types
      - persist_to_workspace:
          root: .
          paths:
            - out/types

  unit-tests:
    executor: atscm/node
    parallelism: 4
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Printing test files to run
          command: circleci tests glob "test/src/**/*.spec.js" | circleci tests split --split-by=timings
      - run:
          name: Running tests
          command: npx nyc -r json --report-dir "coverage/unit-$CIRCLE_NODE_INDEX" --no-check-coverage npm run test:base -- --reporter mocha-circleci-reporter $(circleci tests glob "test/src/**/*.spec.js" | circleci tests split --split-by=timings)
          environment:
            NODE_ENV: test
            MOCHA_FILE: ../reports/unit-tests-$CIRCLE_NODE_INDEX.xml
      - persist_to_workspace:
          root: .
          paths:
            - coverage
      - store_test_results:
          path: ~/reports
      - store_artifacts:
          path: ~/reports

  test-coverage:
    executor: atscm/node
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Combining coverage reports
          command: npx istanbul-combine -r lcov -r html coverage/**/*.json
      - run:
          name: Reporting test coverage
          command: npx codecov
      - store_artifacts:
          path: coverage

  deploy:
    executor: atscm/node
    steps:
      - checkout
      - add_ssh_keys
      - attach_workspace:
          at: .
      - atscm/git-login
      - atscm/npm-login
      - run:
          name: Deploying changes
          command: npx bump-version release --release-files out docs/api --gh-token $RELEASE_GITHUB_TOKEN

  update-hosted-docs:
    executor: atscm/node
    steps:
      - checkout
      - add_ssh_keys
      - attach_workspace:
          at: .
      - atscm/git-login
      - run:
          name: Build organization page
          command: curl -X POST https://circleci.com/api/v1.1/project/github/atSCM/docs/build?circle-token=${CIRCLE_API_USER_TOKEN}
      - run:
          name: Updating hosted API documentation
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              version=$(node -e "console.log(require('./package.json').version)")
              git clone git@github.com:$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git -b gh-pages ../pages
              cp -r docs/api/* ../pages
              cd ../pages
              git add .
              git commit -m "docs(gh-pages): Update for release v$version [ci skip]"
              git push origin gh-pages
              cd ../project
            fi

workflows:
  version: 2

  test-and-deploy:
    jobs:
      - install-deps
      - start-testserver:
          context: atscm
      - build:
          requires:
            - install-deps
      - docs:
          requires:
            - install-deps
      - lint-source:
          requires:
            - install-deps
      - type-check:
          requires:
            - install-deps
      - unit-tests:
          requires:
            - install-deps
            - start-testserver
      - test-coverage:
          requires:
            - unit-tests
      - atscm/integration:
          name: integration-32x
          atserver: '3.2'
          requires:
            - build
            - start-testserver
      - atscm/integration:
          name: integration-33x
          atserver: '3.3'
          requires:
            - build
            - start-testserver
            - integration-32x
      - deploy:
          requires:
            - lint-source
            - type-check
            - test-coverage
            - integration-32x
            - integration-33x
            - docs
          filters:
            branches:
              only:
                - master
                - beta
      - update-hosted-docs:
          requires:
            - deploy
